<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring状态机</title>
      <link href="/2023/05/22/spring-zhuang-tai-ji/"/>
      <url>/2023/05/22/spring-zhuang-tai-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="1、什么是状态机"><a href="#1、什么是状态机" class="headerlink" title="1、什么是状态机"></a>1、什么是状态机</h2><h3 id="1-1-什么是状态"><a href="#1-1-什么是状态" class="headerlink" title="1.1 什么是状态"></a>1.1 什么是状态</h3><p>先来解释什么是“状态”（ State ）。现实事物是有不同状态的，例如一个自动门，就有 open 和 closed 两种状态。我们通常所说的状态机是有限状态机，也就是被描述的事物的状态的数量是有限个，例如自动门的状态就是两个 open 和 closed 。</p><p><img src="/2023/05/22/spring-zhuang-tai-ji/state_machine_93e760c3.png" alt="state_machine_93e760c3.png"></p><p>状态机，也就是 State Machine ，不是指一台实际机器，而是指一个数学模型。说白了，一般就是指一张状态转换图。例如，根据自动门的运行规则，我们可以抽象出下面这么一个图。</p><p>自动门有两个状态，open 和 closed ，closed 状态下，如果读取开门信号，那么状态就会切换为 open 。open 状态下如果读取关门信号，状态就会切换为 closed 。</p><p>状态机的全称是有限状态自动机，自动两个字也是包含重要含义的。给定一个状态机，同时给定它的当前状态以及输入，那么输出状态时可以明确的运算出来的。例如对于自动门，给定初始状态 closed ，给定输入“开门”，那么下一个状态时可以运算出来的。</p><p>这样状态机的基本定义我们就介绍完毕了。重复一下：状态机是有限状态自动机的简称，是现实事物运行规则抽象而成的一个数学模型。</p><h3 id="1-2-四大概念"><a href="#1-2-四大概念" class="headerlink" title="1.2 四大概念"></a>1.2 四大概念</h3><p>下面来给出状态机的四大概念。</p><ul><li> 第一个是 State ，状态。一个状态机至少要包含两个状态。例如上面自动门的例子，有 open 和 closed 两个状态。</li><li> 第二个是 Event ，事件。事件就是执行某个操作的触发条件或者口令。对于自动门，“按下开门按钮”就是一个事件。</li><li> 第三个是 Action ，动作。事件发生以后要执行动作。例如事件是“按开门按钮”，动作是“开门”。编程的时候，一个 Action一般就对应一个函数。</li><li> 第四个是 Transition ，变换。也就是从一个状态变化为另一个状态。例如“开门过程”就是一个变换。</li></ul><h3 id="1-3-状态机"><a href="#1-3-状态机" class="headerlink" title="1.3 状态机"></a>1.3 状态机</h3><p>有限状态机（Finite-state machine,FSM），又称有限状态自动机，简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。</p><p>FSM是一种算法思想，简单而言，有限状态机由一组状态、一个初始状态、输入和根据输入及现有状态转换为下一个状态的转换函数组成。</p><p>其作用主要是描述对象在它的生命周期内所经历的状态序列，以及如何响应来自外界的各种事件。</p><h2 id="2、状态机图"><a href="#2、状态机图" class="headerlink" title="2、状态机图"></a>2、状态机图</h2><p>做需求时，需要了解以下六种元素：起始、终止、现态、次态（目标状态）、动作、条件，我们就可以完成一个状态机图了：</p><p>以订单为例：以从待支付状态转换为待发货状态为例</p><p><img src="/2023/05/22/spring-zhuang-tai-ji/state_machine_23c51169.png" alt="state_machine_23c51169.png"></p><ul><li> ①现态：是指当前所处的状态。待支付</li><li> ②条件：又称为“事件”，当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。支付事件</li><li> ③动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执行任何动作，直接迁移到新状态。状态转换为待发货</li><li> ④次态：条件满足后要迁往的新状态。“次态”是相对于“现态”而言的，“次态”一旦被激活，就转变成新的“现态”了。待发货 注意事项</li></ul><p>1、避免把某个“程序动作”当作是一种“状态”来处理。那么如何区分“动作”和“状态”？“动作”是不稳定的，即使没有条件的触发，“动作”一旦执行完毕就结束了；而“状态”是相对稳定的，如果没有外部条件的触发，一个状态会一直持续下去。关注工众号：码猿技术专栏，回复关键词：1111 获取阿里内部Java性能调优手册！</p><p>2、状态划分时漏掉一些状态，导致跳转逻辑不完整。所以在设计状态机时，我们需要反复的查看设计的状态图或者状态表，最终达到一种牢不可破的设计方案。</p><h2 id="3、spring-statemachine"><a href="#3、spring-statemachine" class="headerlink" title="3、spring statemachine"></a>3、spring statemachine</h2><h3 id="3-1-状态机spring-statemachine-概述"><a href="#3-1-状态机spring-statemachine-概述" class="headerlink" title="3.1 状态机spring statemachine 概述"></a>3.1 状态机spring statemachine 概述</h3><p>Spring Statemachine是应用程序开发人员在Spring应用程序中使用状态机概念的框架</p><p>Spring Statemachine旨在提供以下功能：</p><ol><li> 易于使用的扁平单级状态机，用于简单的使用案例。</li><li> 分层状态机结构，以简化复杂的状态配置。</li><li> 状态机区域提供更复杂的状态配置。</li><li> 使用触发器，转换，警卫和操作。</li><li> 键入安全配置适配器。</li><li> 生成器模式，用于在Spring Application上下文之外使用的简单实例化通常用例的食谱</li><li> 基于Zookeeper的分布式状态机</li><li> 状态机事件监听器。</li><li> UML Eclipse Papyrus建模。</li><li>将计算机配置存储在永久存储中。</li><li>Spring IOC集成将bean与状态机关联起来。</li></ol><p>状态机功能强大，因为行为始终保证一致，使调试相对容易。这是因为操作规则是在机器启动时写成的。这个想法是你的应用程序可能存在于有限数量的状态中，某些预定义的触发器可以将你的应用程序从一个状态转移到另一个状态。此类触发器可以基于事件或计时器。</p><p>在应用程序之外定义高级逻辑然后依靠状态机来管理状态要容易得多。您可以通过发送事件，侦听更改或仅请求当前状态来与状态机进行交互。</p><blockquote><p>官网：spring.io/projects/sp…</p></blockquote><h3 id="3-2-快速开始"><a href="#3-2-快速开始" class="headerlink" title="3.2 快速开始"></a>3.2 快速开始</h3><p>以订单状态扭转的例子为例：</p><p>表结构设计如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">CREATE TABLE `tb_order` <span class="token punctuation">(</span>      `id` <span class="token function">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> unsigned NOT NULL AUTO_INCREMENT COMMENT <span class="token string">'主键ID'</span><span class="token punctuation">,</span>      `order_code` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> COLLATE utf8mb4_bin DEFAULT NULL COMMENT <span class="token string">'订单编码'</span><span class="token punctuation">,</span>      `status` <span class="token function">smallint</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'订单状态'</span><span class="token punctuation">,</span>      `name` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> COLLATE utf8mb4_bin DEFAULT NULL COMMENT <span class="token string">'订单名称'</span><span class="token punctuation">,</span>      `price` <span class="token function">decimal</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'价格'</span><span class="token punctuation">,</span>      `delete_flag` <span class="token function">tinyint</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">'0'</span> COMMENT <span class="token string">'删除标记，0未删除  1已删除'</span><span class="token punctuation">,</span>      `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT <span class="token string">'创建时间'</span><span class="token punctuation">,</span>      `update_time` timestamp NOT NULL DEFAULT <span class="token string">'0000-00-00 00:00:00'</span> COMMENT <span class="token string">'更新时间'</span><span class="token punctuation">,</span>      `create_user_code` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> COLLATE utf8mb4_bin DEFAULT NULL COMMENT <span class="token string">'创建人'</span><span class="token punctuation">,</span>      `update_user_code` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> COLLATE utf8mb4_bin DEFAULT NULL COMMENT <span class="token string">'更新人'</span><span class="token punctuation">,</span>      `version` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">'0'</span> COMMENT <span class="token string">'版本号'</span><span class="token punctuation">,</span>      `remark` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> COLLATE utf8mb4_bin DEFAULT NULL COMMENT <span class="token string">'备注'</span><span class="token punctuation">,</span>      <span class="token class-name">PRIMARY</span> KEY <span class="token punctuation">(</span>`id`<span class="token punctuation">)</span>    <span class="token punctuation">)</span> ENGINE<span class="token operator">=</span><span class="token class-name">InnoDB</span> AUTO_INCREMENT<span class="token operator">=</span><span class="token number">6</span> <span class="token class-name">DEFAULT</span> CHARSET<span class="token operator">=</span>utf8mb4 COLLATE<span class="token operator">=</span>utf8mb4_bin COMMENT<span class="token operator">=</span><span class="token string">'订单表'</span><span class="token punctuation">;</span>        <span class="token comment">/*Data for the table `tb_order` */</span>        insert  into `tb_order`<span class="token punctuation">(</span>`id`<span class="token punctuation">,</span>`order_code`<span class="token punctuation">,</span>`status`<span class="token punctuation">,</span>`name`<span class="token punctuation">,</span>`price`<span class="token punctuation">,</span>`delete_flag`<span class="token punctuation">,</span>`create_time`<span class="token punctuation">,</span>`update_time`<span class="token punctuation">,</span>`create_user_code`<span class="token punctuation">,</span>`update_user_code`<span class="token punctuation">,</span>`version`<span class="token punctuation">,</span>`remark`<span class="token punctuation">)</span> values     <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'A111'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'22.00'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'2022-10-15 16:14:11'</span><span class="token punctuation">,</span><span class="token string">'2022-10-02 21:29:14'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>NULL<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'A111'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'订单A'</span><span class="token punctuation">,</span><span class="token string">'22.00'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'2022-10-02 21:53:13'</span><span class="token punctuation">,</span><span class="token string">'2022-10-02 21:29:14'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>NULL<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'A111'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'订单A'</span><span class="token punctuation">,</span><span class="token string">'22.00'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'2022-10-02 21:53:13'</span><span class="token punctuation">,</span><span class="token string">'2022-10-02 21:29:14'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>NULL<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'A111'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'订单A'</span><span class="token punctuation">,</span><span class="token string">'22.00'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'2022-10-03 09:08:30'</span><span class="token punctuation">,</span><span class="token string">'2022-10-02 21:29:14'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>NULL<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> redis持久化状态机 <span class="token operator">--</span><span class="token operator">></span>   <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>       <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>statemachine<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>       <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>statemachine<span class="token operator">-</span>redis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>       <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.2</span><span class="token number">.9</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>状态机<span class="token operator">--</span><span class="token operator">></span>   <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>       <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>statemachine<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>       <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>statemachine<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>       <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.0</span><span class="token number">.1</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2）定义状态机状态和事件"><a href="#2）定义状态机状态和事件" class="headerlink" title="2）定义状态机状态和事件"></a>2）定义状态机状态和事件</h5><p>状态枚举：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** author：芋道源码*/</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">OrderStatus</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 待支付，待发货，待收货，已完成</span>        <span class="token function">WAIT_PAYMENT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"待支付"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">WAIT_DELIVER</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"待发货"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">WAIT_RECEIVE</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"待收货"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">FINISH</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"已完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> key<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>        <span class="token class-name">OrderStatus</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> key<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> desc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">OrderStatus</span> <span class="token function">getByKey</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OrderStatus</span> e <span class="token operator">:</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> e<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"enum not exists."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事件：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** author：芋道源码*/</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">OrderStatusChangeEvent</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 支付，发货，确认收货</span>        PAYED<span class="token punctuation">,</span> DELIVERY<span class="token punctuation">,</span> RECEIVED<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3）定义状态机规则和配置状态机"><a href="#3）定义状态机规则和配置状态机" class="headerlink" title="3）定义状态机规则和配置状态机"></a>3）定义状态机规则和配置状态机</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>   <span class="token annotation punctuation">@EnableStateMachine</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"orderStateMachine"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderStateMachineConfig</span> <span class="token keyword">extends</span> <span class="token class-name">StateMachineConfigurerAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatus</span><span class="token punctuation">,</span> <span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>       <span class="token comment">/**        * 配置状态        *        * @param states        * @throws Exception        */</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">StateMachineStateConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatus</span><span class="token punctuation">,</span> <span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">></span></span> states<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>           states                   <span class="token punctuation">.</span><span class="token function">withStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">initial</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>WAIT_PAYMENT<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">states</span><span class="token punctuation">(</span><span class="token class-name">EnumSet</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">/**        * 配置状态转换事件关系        *        * @param transitions        * @throws Exception        */</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">StateMachineTransitionConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatus</span><span class="token punctuation">,</span> <span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">></span></span> transitions<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>           transitions                   <span class="token comment">//支付事件:待支付-》待发货</span>                   <span class="token punctuation">.</span><span class="token function">withExternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>WAIT_PAYMENT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>WAIT_DELIVER<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">.</span>PAYED<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment">//发货事件:待发货-》待收货</span>                   <span class="token punctuation">.</span><span class="token function">withExternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>WAIT_DELIVER<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>WAIT_RECEIVE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">.</span>DELIVERY<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment">//收货事件:待收货-》已完成</span>                   <span class="token punctuation">.</span><span class="token function">withExternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>WAIT_RECEIVE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>FINISH<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">.</span>RECEIVED<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置持久化：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** author：芋道源码*/</span>    <span class="token annotation punctuation">@Configuration</span>   <span class="token annotation punctuation">@Slf4j</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Persist</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token class-name">S</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>       <span class="token comment">/**        * 持久化到内存map中        *        * @return        */</span>       <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"stateMachineMemPersister"</span><span class="token punctuation">)</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">StateMachinePersister</span> <span class="token function">getPersister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultStateMachinePersister</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StateMachinePersist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token annotation punctuation">@Override</span>               <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">StateMachineContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Object</span> contextObj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                   log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"持久化状态机,context:&#123;&#125;,contextObj:&#123;&#125;"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>contextObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>contextObj<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token annotation punctuation">@Override</span>               <span class="token keyword">public</span> <span class="token class-name">StateMachineContext</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">Object</span> contextObj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                   log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"获取状态机,contextObj:&#123;&#125;"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>contextObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">StateMachineContext</span> stateMachineContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StateMachineContext</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>contextObj<span class="token punctuation">)</span><span class="token punctuation">;</span>                   log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"获取状态机结果,stateMachineContext:&#123;&#125;"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>stateMachineContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">return</span> stateMachineContext<span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token keyword">private</span> <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>          <span class="token annotation punctuation">@Resource</span>       <span class="token keyword">private</span> <span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">;</span>       <span class="token comment">/**        * 持久化到redis中，在分布式系统中使用        *        * @return        */</span>       <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"stateMachineRedisPersister"</span><span class="token punctuation">)</span>       <span class="token keyword">public</span> <span class="token class-name">RedisStateMachinePersister</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token class-name">S</span><span class="token punctuation">></span></span> <span class="token function">getRedisPersister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">RedisStateMachineContextRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token class-name">S</span><span class="token punctuation">></span></span> repository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisStateMachineContextRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">RepositoryStateMachinePersist</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RepositoryStateMachinePersist</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>repository<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisStateMachinePersister</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4）业务系统"><a href="#4）业务系统" class="headerlink" title="4）业务系统"></a>4）业务系统</h5><p>controller：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** author：芋道源码*/</span>    <span class="token annotation punctuation">@RestController</span>   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/order"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">&#123;</span>       <span class="token annotation punctuation">@Resource</span>       <span class="token keyword">private</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>       <span class="token comment">/**        * 根据id查询订单        *        * @return        */</span>       <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getById"</span><span class="token punctuation">)</span>       <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//根据id查询订单</span>           <span class="token class-name">Order</span> order <span class="token operator">=</span> orderService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> order<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">/**        * 创建订单        *        * @return        */</span>       <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/create"</span><span class="token punctuation">)</span>       <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//创建订单</span>           orderService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token string">"sucess"</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">/**        * 对订单进行支付        *        * @param id        * @return        */</span>       <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/pay"</span><span class="token punctuation">)</span>       <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//对订单进行支付</span>           orderService<span class="token punctuation">.</span><span class="token function">pay</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>          <span class="token comment">/**        * 对订单进行发货        *        * @param id        * @return        */</span>       <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/deliver"</span><span class="token punctuation">)</span>       <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deliver</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//对订单进行确认收货</span>           orderService<span class="token punctuation">.</span><span class="token function">deliver</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">/**        * 对订单进行确认收货        *        * @param id        * @return        */</span>       <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/receive"</span><span class="token punctuation">)</span>       <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//对订单进行确认收货</span>           orderService<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>servie：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** author：芋道源码*/</span>    <span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"orderService"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@Slf4j</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderMapper</span><span class="token punctuation">,</span> <span class="token class-name">Order</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">&#123;</span>       <span class="token annotation punctuation">@Resource</span>       <span class="token keyword">private</span> <span class="token class-name">StateMachine</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatus</span><span class="token punctuation">,</span> <span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">></span></span> orderStateMachine<span class="token punctuation">;</span>       <span class="token annotation punctuation">@Resource</span>       <span class="token keyword">private</span> <span class="token class-name">StateMachinePersister</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatus</span><span class="token punctuation">,</span> <span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> stateMachineMemPersister<span class="token punctuation">;</span>       <span class="token annotation punctuation">@Resource</span>       <span class="token keyword">private</span> <span class="token class-name">OrderMapper</span> orderMapper<span class="token punctuation">;</span>       <span class="token comment">/**        * 创建订单        *        * @param order        * @return        */</span>       <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           order<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>WAIT_PAYMENT<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           orderMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> order<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">/**        * 对订单进行支付        *        * @param id        * @return        */</span>       <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">Order</span> order <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"线程名称：&#123;&#125;,尝试支付，订单号：&#123;&#125;"</span> <span class="token punctuation">,</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">sendEvent</span><span class="token punctuation">(</span><span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">.</span>PAYED<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"线程名称：&#123;&#125;,支付失败, 状态异常，订单信息：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"支付失败, 订单状态异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">return</span> order<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">/**        * 对订单进行发货        *        * @param id        * @return        */</span>       <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">deliver</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">Order</span> order <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"线程名称：&#123;&#125;,尝试发货，订单号：&#123;&#125;"</span> <span class="token punctuation">,</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">sendEvent</span><span class="token punctuation">(</span><span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">.</span>DELIVERY<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"线程名称：&#123;&#125;,发货失败, 状态异常，订单信息：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"发货失败, 订单状态异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">return</span> order<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">/**        * 对订单进行确认收货        *        * @param id        * @return        */</span>       <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">Order</span> order <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"线程名称：&#123;&#125;,尝试收货，订单号：&#123;&#125;"</span> <span class="token punctuation">,</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">sendEvent</span><span class="token punctuation">(</span><span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">.</span>RECEIVED<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"线程名称：&#123;&#125;,收货失败, 状态异常，订单信息：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"收货失败, 订单状态异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">return</span> order<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">/**        * 发送订单状态转换事件        * synchronized修饰保证这个方法是线程安全的        *        * @param changeEvent        * @param order        * @return        */</span>       <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">sendEvent</span><span class="token punctuation">(</span><span class="token class-name">OrderStatusChangeEvent</span> changeEvent<span class="token punctuation">,</span> <span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>           <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               <span class="token comment">//启动状态机</span>               orderStateMachine<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//尝试恢复状态机状态</span>               stateMachineMemPersister<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span>orderStateMachine<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>changeEvent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               result <span class="token operator">=</span> orderStateMachine<span class="token punctuation">.</span><span class="token function">sendEvent</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//持久化状态机状态</span>               stateMachineMemPersister<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>orderStateMachine<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"订单操作失败:&#123;&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>               orderStateMachine<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">return</span> result<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>监听状态的变化：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** author：芋道源码*/</span>        <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"orderStateListener"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@WithStateMachine</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"orderStateMachine"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@Slf4j</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderStateListenerImpl</span> <span class="token punctuation">&#123;</span>       <span class="token annotation punctuation">@Resource</span>       <span class="token keyword">private</span> <span class="token class-name">OrderMapper</span> orderMapper<span class="token punctuation">;</span>              <span class="token annotation punctuation">@OnTransition</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"WAIT_PAYMENT"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"WAIT_DELIVER"</span><span class="token punctuation">)</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">payTransition</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">></span></span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">)</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"支付，状态机反馈信息：&#123;&#125;"</span><span class="token punctuation">,</span>  message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//更新订单</span>           order<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>WAIT_DELIVER<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           orderMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//TODO 其他业务</span>       <span class="token punctuation">&#125;</span>       <span class="token annotation punctuation">@OnTransition</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"WAIT_DELIVER"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"WAIT_RECEIVE"</span><span class="token punctuation">)</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deliverTransition</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">></span></span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">)</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发货，状态机反馈信息：&#123;&#125;"</span><span class="token punctuation">,</span>  message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//更新订单</span>           order<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>WAIT_RECEIVE<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           orderMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//TODO 其他业务</span>       <span class="token punctuation">&#125;</span>       <span class="token annotation punctuation">@OnTransition</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"WAIT_RECEIVE"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"FINISH"</span><span class="token punctuation">)</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveTransition</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">></span></span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">)</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"确认收货，状态机反馈信息：&#123;&#125;"</span><span class="token punctuation">,</span>  message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//更新订单</span>           order<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>FINISH<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           orderMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//TODO 其他业务</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-测试验证"><a href="#3-3-测试验证" class="headerlink" title="3.3 测试验证"></a>3.3 测试验证</h3><h5 id="1）验证业务"><a href="#1）验证业务" class="headerlink" title="1）验证业务"></a>1）验证业务</h5><ul><li>新增一个订单 <a href="http://localhost:8084/order/create">http://localhost:8084/order/create</a></li><li>对订单进行支付 <a href="http://localhost:8084/order/pay?id=2">http://localhost:8084/order/pay?id=2</a></li><li>对订单进行发货 <a href="http://localhost:8084/order/deliver?id=2">http://localhost:8084/order/deliver?id=2</a></li><li>对订单进行确认收货 <a href="http://localhost:8084/order/receive?id=2">http://localhost:8084/order/receive?id=2</a></li></ul><p>正常流程结束。如果对一个订单进行支付了，再次进行支付，则会报错：<code>http://localhost:8084/order/pay?id=2</code></p><p>报错如下：</p><p><img src="/2023/05/22/spring-zhuang-tai-ji/state_machine_0d8c2172.png" alt="state_machine_0d8c2172.png"></p><h5 id="2）验证持久化"><a href="#2）验证持久化" class="headerlink" title="2）验证持久化"></a>2）验证持久化</h5><p>内存</p><p>使用内存持久化类持久化：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** author：芋道源码*/</span> <span class="token annotation punctuation">@Resource</span>   <span class="token keyword">private</span> <span class="token class-name">StateMachinePersister</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatus</span><span class="token punctuation">,</span> <span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> stateMachineMemPersister<span class="token punctuation">;</span>      <span class="token comment">/**    * 发送订单状态转换事件    * synchronized修饰保证这个方法是线程安全的    *    * @param changeEvent    * @param order    * @return    */</span>   <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">sendEvent</span><span class="token punctuation">(</span><span class="token class-name">OrderStatusChangeEvent</span> changeEvent<span class="token punctuation">,</span> <span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//启动状态机</span>           orderStateMachine<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//尝试恢复状态机状态</span>           stateMachineMemPersister<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span>orderStateMachine<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>changeEvent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           result <span class="token operator">=</span> orderStateMachine<span class="token punctuation">.</span><span class="token function">sendEvent</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//持久化状态机状态</span>           stateMachineMemPersister<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>orderStateMachine<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"订单操作失败:&#123;&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>           orderStateMachine<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> result<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>redis持久化</p><p>引入依赖：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> redis持久化状态机 <span class="token operator">--</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>statemachine<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>statemachine<span class="token operator">-</span>redis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.2</span><span class="token number">.9</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置yaml：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring<span class="token operator">:</span>  redis<span class="token operator">:</span>    database<span class="token operator">:</span> <span class="token number">0</span>    host<span class="token operator">:</span> localhost    jedis<span class="token operator">:</span>      pool<span class="token operator">:</span>        max<span class="token operator">-</span>active<span class="token operator">:</span> <span class="token number">8</span>        max<span class="token operator">-</span>idle<span class="token operator">:</span> <span class="token number">8</span>        max<span class="token operator">-</span>wait<span class="token operator">:</span> <span class="token string">''</span>        min<span class="token operator">-</span>idle<span class="token operator">:</span> <span class="token number">0</span>    password<span class="token operator">:</span> <span class="token string">''</span>    port<span class="token operator">:</span> <span class="token number">6379</span>    timeout<span class="token operator">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用redis持久化类持久化：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** author：芋道源码*/</span> <span class="token annotation punctuation">@Resource</span>   <span class="token keyword">private</span> <span class="token class-name">StateMachinePersister</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatus</span><span class="token punctuation">,</span> <span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> stateMachineRedisPersister<span class="token punctuation">;</span>      <span class="token comment">/**    * 发送订单状态转换事件    * synchronized修饰保证这个方法是线程安全的    *    * @param changeEvent    * @param order    * @return    */</span>   <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">sendEvent</span><span class="token punctuation">(</span><span class="token class-name">OrderStatusChangeEvent</span> changeEvent<span class="token punctuation">,</span> <span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//启动状态机</span>           orderStateMachine<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//尝试恢复状态机状态</span>           stateMachineRedisPersister<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span>orderStateMachine<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>changeEvent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           result <span class="token operator">=</span> orderStateMachine<span class="token punctuation">.</span><span class="token function">sendEvent</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//持久化状态机状态</span>           stateMachineRedisPersister<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>orderStateMachine<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"订单操作失败:&#123;&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>           orderStateMachine<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> result<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-状态机存在的问题"><a href="#3-4-状态机存在的问题" class="headerlink" title="3.4 状态机存在的问题"></a>3.4 状态机存在的问题</h3><h5 id="1）stateMachine无法抛出异常，异常会被状态机给消化掉"><a href="#1）stateMachine无法抛出异常，异常会被状态机给消化掉" class="headerlink" title="1）stateMachine无法抛出异常，异常会被状态机给消化掉"></a>1）stateMachine无法抛出异常，异常会被状态机给消化掉</h5><p>问题现象</p><p>从orderStateMachine.sendEvent(message);获取的结果无法感知到。无论执行正常还是抛出异常，都返回true。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span>   <span class="token keyword">private</span> <span class="token class-name">OrderMapper</span> orderMapper<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Resource</span>   <span class="token keyword">private</span> <span class="token class-name">StateMachine</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatus</span><span class="token punctuation">,</span> <span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">></span></span> orderStateMachine<span class="token punctuation">;</span>      <span class="token annotation punctuation">@OnTransition</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"WAIT_PAYMENT"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"WAIT_DELIVER"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">payTransition</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">></span></span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">)</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"支付，状态机反馈信息：&#123;&#125;"</span><span class="token punctuation">,</span>  message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//更新订单</span>           order<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>WAIT_DELIVER<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           orderMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//TODO 其他业务</span>           <span class="token comment">//模拟异常</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"执行业务异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//如果出现异常，记录异常信息，抛出异常信息进行回滚</span>           log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"payTransition 出现异常：&#123;&#125;"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">throw</span> e<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>监听事件抛出异常，在发送事件中无法感知：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">sendEvent</span><span class="token punctuation">(</span><span class="token class-name">OrderStatusChangeEvent</span> changeEvent<span class="token punctuation">,</span> <span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//启动状态机</span>           orderStateMachine<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//尝试恢复状态机状态</span>           stateMachineMemPersister<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span>orderStateMachine<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>changeEvent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//事件执行异常了，依然返回true，无法感知异常</span>           result <span class="token operator">=</span> orderStateMachine<span class="token punctuation">.</span><span class="token function">sendEvent</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token comment">//持久化状态机状态，如果根据true持久化，则会出现问题</span>               stateMachineMemPersister<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>orderStateMachine<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"订单操作失败:&#123;&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>           orderStateMachine<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> result<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调试发现：发送事件和监听事件是一个线程，发送事件的结果是在监听操作执行完之后才返回</p><p><img src="/2023/05/22/spring-zhuang-tai-ji/state_machine_291a4da6.png" alt="state_machine_291a4da6.png"></p><p>监听线程：</p><p><img src="/2023/05/22/spring-zhuang-tai-ji/state_machine_915e4a35.png" alt="state_machine_915e4a35.png"></p><p>解决方案：自己保存异常到数据库或者内存中，进行判断</p><p>也可以通过接口：org.springframework.statemachine.StateMachine##getExtendedState</p><p>方法把执行状态放入这个变量中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ExtendedState</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">setExtendedStateChangeListener</span><span class="token punctuation">(</span><span class="token class-name">ExtendedState<span class="token punctuation">.</span>ExtendedStateChangeListener</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ExtendedStateChangeListener</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">void</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token class-name">Object</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>org.springframework.statemachine.support.DefaultExtendedState##getVariables</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> variables<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">DefaultExtendedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>variables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObservableMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultExtendedState<span class="token punctuation">.</span>LocalMapChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>variables<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改造监听状态：把业务的执行结果进行保存，1成功，0失败</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> <span class="token class-name">OrderMapper</span> orderMapper<span class="token punctuation">;</span><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> <span class="token class-name">StateMachine</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatus</span><span class="token punctuation">,</span> <span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">></span></span> orderStateMachine<span class="token punctuation">;</span><span class="token annotation punctuation">@OnTransition</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"WAIT_PAYMENT"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"WAIT_DELIVER"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">payTransition</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">></span></span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">)</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"支付，状态机反馈信息：&#123;&#125;"</span><span class="token punctuation">,</span>  message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//更新订单</span>        order<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>WAIT_DELIVER<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//TODO 其他业务</span>        <span class="token comment">//模拟异常</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"执行业务异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//成功 则为1</span>        orderStateMachine<span class="token punctuation">.</span><span class="token function">getExtendedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CommonConstants</span><span class="token punctuation">.</span>payTransition<span class="token operator">+</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果出现异常，则进行回滚</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"payTransition 出现异常：&#123;&#125;"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将异常信息变量信息中，失败则为0</span>        orderStateMachine<span class="token punctuation">.</span><span class="token function">getExtendedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CommonConstants</span><span class="token punctuation">.</span>payTransition<span class="token operator">+</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送事件改造：如果获取到业务执行异常，则返回失败，不进行状态机持久化 com.zengqingfa.springboot.state.demo.service.impl.OrderServiceImpl##sendEvent</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span>   <span class="token keyword">private</span> <span class="token class-name">StateMachine</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatus</span><span class="token punctuation">,</span> <span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">></span></span> orderStateMachine<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Resource</span>   <span class="token keyword">private</span> <span class="token class-name">StateMachinePersister</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatus</span><span class="token punctuation">,</span> <span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> stateMachineMemPersister<span class="token punctuation">;</span>      <span class="token comment">/**    * 发送订单状态转换事件    * synchronized修饰保证这个方法是线程安全的    *    * @param changeEvent    * @param order    * @return    */</span>   <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">sendEvent</span><span class="token punctuation">(</span><span class="token class-name">OrderStatusChangeEvent</span> changeEvent<span class="token punctuation">,</span> <span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//启动状态机</span>           orderStateMachine<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//尝试恢复状态机状态</span>           stateMachineMemPersister<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span>orderStateMachine<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>changeEvent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           result <span class="token operator">=</span> orderStateMachine<span class="token punctuation">.</span><span class="token function">sendEvent</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//获取到监听的结果信息</span>           <span class="token class-name">Integer</span> o <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> orderStateMachine<span class="token punctuation">.</span><span class="token function">getExtendedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CommonConstants</span><span class="token punctuation">.</span>payTransition <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//操作完成之后,删除本次对应的key信息</span>           orderStateMachine<span class="token punctuation">.</span><span class="token function">getExtendedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">CommonConstants</span><span class="token punctuation">.</span>payTransition<span class="token operator">+</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//如果事务执行成功，则持久化状态机</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token comment">//持久化状态机状态</span>               stateMachineMemPersister<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>orderStateMachine<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token comment">//订单执行业务异常</span>               <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"订单操作失败:&#123;&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>           orderStateMachine<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> result<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码优化</p><ul><li> 发送事件只针对了支付，如果是非支付事件呢？</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取到监听的结果信息</span><span class="token class-name">Integer</span> o <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> orderStateMachine<span class="token punctuation">.</span><span class="token function">getExtendedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CommonConstants</span><span class="token punctuation">.</span>payTransition <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li> 监听设置状态的代码有重复代码，需要进行优化，可使用aop</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//TODO 其他业务</span>        <span class="token comment">//成功 则为1</span>        orderStateMachine<span class="token punctuation">.</span><span class="token function">getExtendedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CommonConstants</span><span class="token punctuation">.</span>payTransition<span class="token operator">+</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果出现异常，则进行回滚</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"payTransition 出现异常：&#123;&#125;"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将异常信息变量信息中，失败则为0</span>        orderStateMachine<span class="token punctuation">.</span><span class="token function">getExtendedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CommonConstants</span><span class="token punctuation">.</span>payTransition<span class="token operator">+</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常量类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommonConstants</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> orderHeader<span class="token operator">=</span><span class="token string">"order"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> payTransition<span class="token operator">=</span><span class="token string">"payTransition"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> deliverTransition<span class="token operator">=</span><span class="token string">"deliverTransition"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> receiveTransition<span class="token operator">=</span><span class="token string">"receiveTransition"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>支付发送事件：com.zengqingfa.springboot.state.demo.service.impl.OrderServiceImpl##pay</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span>   <span class="token keyword">private</span> <span class="token class-name">StateMachine</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatus</span><span class="token punctuation">,</span> <span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">></span></span> orderStateMachine<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Resource</span>   <span class="token keyword">private</span> <span class="token class-name">StateMachinePersister</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatus</span><span class="token punctuation">,</span> <span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> stateMachineMemPersister<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Resource</span>   <span class="token keyword">private</span> <span class="token class-name">OrderMapper</span> orderMapper<span class="token punctuation">;</span>      <span class="token comment">/**    * 对订单进行支付    *    * @param id    * @return    */</span>   <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Order</span> order <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>       log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"线程名称：&#123;&#125;,尝试支付，订单号：&#123;&#125;"</span> <span class="token punctuation">,</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">sendEvent</span><span class="token punctuation">(</span><span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">.</span>PAYED<span class="token punctuation">,</span> order<span class="token punctuation">,</span><span class="token class-name">CommonConstants</span><span class="token punctuation">.</span>payTransition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"线程名称：&#123;&#125;,支付失败, 状态异常，订单信息：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"支付失败, 订单状态异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> order<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>      <span class="token comment">/**    * 发送订单状态转换事件    * synchronized修饰保证这个方法是线程安全的    *    * @param changeEvent    * @param order    * @return    */</span>   <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">sendEvent</span><span class="token punctuation">(</span><span class="token class-name">OrderStatusChangeEvent</span> changeEvent<span class="token punctuation">,</span> <span class="token class-name">Order</span> order<span class="token punctuation">,</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//启动状态机</span>           orderStateMachine<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//尝试恢复状态机状态</span>           stateMachineMemPersister<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span>orderStateMachine<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>changeEvent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           result <span class="token operator">=</span> orderStateMachine<span class="token punctuation">.</span><span class="token function">sendEvent</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//获取到监听的结果信息</span>           <span class="token class-name">Integer</span> o <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> orderStateMachine<span class="token punctuation">.</span><span class="token function">getExtendedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//操作完成之后,删除本次对应的key信息</span>           orderStateMachine<span class="token punctuation">.</span><span class="token function">getExtendedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token operator">+</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//如果事务执行成功，则持久化状态机</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token comment">//持久化状态机状态</span>               stateMachineMemPersister<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>orderStateMachine<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token comment">//订单执行业务异常</span>               <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"订单操作失败:&#123;&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>           orderStateMachine<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> result<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用aop对监听事件切面，把业务执行结果封装到状态机的变量中，注解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">LogResult</span> <span class="token punctuation">&#123;</span>       <span class="token comment">/**        *执行的业务key        *        * @return String        */</span>       <span class="token class-name">String</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切面：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>   <span class="token annotation punctuation">@Aspect</span>   <span class="token annotation punctuation">@Slf4j</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogResultAspect</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//拦截 LogHistory注解</span>       <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.zengqingfa.springboot.state.demo.aop.annotation.LogResult)"</span><span class="token punctuation">)</span>       <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">logResultPointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//logResultPointCut 日志注解切点</span>       <span class="token punctuation">&#125;</span>       <span class="token annotation punctuation">@Resource</span>       <span class="token keyword">private</span> <span class="token class-name">StateMachine</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatus</span><span class="token punctuation">,</span> <span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">></span></span> orderStateMachine<span class="token punctuation">;</span>              <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"logResultPointCut()"</span><span class="token punctuation">)</span>       <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">logResultAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//获取参数</span>           <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"参数args:&#123;&#125;"</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">)</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//获取方法</span>           <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 获取LogHistory注解</span>           <span class="token class-name">LogResult</span> logResult <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">LogResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">String</span> key <span class="token operator">=</span> logResult<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Object</span> returnVal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>           <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               <span class="token comment">//执行方法</span>               returnVal <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//如果业务执行正常，则保存信息</span>               <span class="token comment">//成功 则为1</span>               orderStateMachine<span class="token punctuation">.</span><span class="token function">getExtendedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"e:&#123;&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//如果业务执行异常，则保存信息</span>               <span class="token comment">//将异常信息变量信息中，失败则为0</span>               orderStateMachine<span class="token punctuation">.</span><span class="token function">getExtendedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">throw</span> e<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">return</span> returnVal<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>监听类使用注解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"orderStateListener"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@WithStateMachine</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"orderStateMachine"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@Slf4j</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderStateListenerImpl</span> <span class="token punctuation">&#123;</span>       <span class="token annotation punctuation">@Resource</span>       <span class="token keyword">private</span> <span class="token class-name">OrderMapper</span> orderMapper<span class="token punctuation">;</span>          <span class="token annotation punctuation">@OnTransition</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"WAIT_PAYMENT"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"WAIT_DELIVER"</span><span class="token punctuation">)</span>       <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>       <span class="token annotation punctuation">@LogResult</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token class-name">CommonConstants</span><span class="token punctuation">.</span>payTransition<span class="token punctuation">)</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">payTransition</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">></span></span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">)</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"支付，状态机反馈信息：&#123;&#125;"</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//更新订单</span>           order<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>WAIT_DELIVER<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           orderMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//TODO 其他业务</span>           <span class="token comment">//模拟异常</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"执行业务异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token annotation punctuation">@OnTransition</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"WAIT_DELIVER"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"WAIT_RECEIVE"</span><span class="token punctuation">)</span>       <span class="token annotation punctuation">@LogResult</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token class-name">CommonConstants</span><span class="token punctuation">.</span>deliverTransition<span class="token punctuation">)</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deliverTransition</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">></span></span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">)</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发货，状态机反馈信息：&#123;&#125;"</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//更新订单</span>           order<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>WAIT_RECEIVE<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           orderMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//TODO 其他业务</span>       <span class="token punctuation">&#125;</span>       <span class="token annotation punctuation">@OnTransition</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"WAIT_RECEIVE"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"FINISH"</span><span class="token punctuation">)</span>       <span class="token annotation punctuation">@LogResult</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token class-name">CommonConstants</span><span class="token punctuation">.</span>receiveTransition<span class="token punctuation">)</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveTransition</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatusChangeEvent</span><span class="token punctuation">></span></span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">)</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"确认收货，状态机反馈信息：&#123;&#125;"</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//更新订单</span>           order<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>FINISH<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           orderMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//TODO 其他业务</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 状态机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计好接口的36个锦囊</title>
      <link href="/2023/05/17/she-ji-hao-jie-kou-de-36-ge-jin-nang/"/>
      <url>/2023/05/17/she-ji-hao-jie-kou-de-36-ge-jin-nang/</url>
      
        <content type="html"><![CDATA[<h2 id="1-接口参数校验"><a href="#1-接口参数校验" class="headerlink" title="1. 接口参数校验"></a>1. 接口参数校验</h2><p>入参出参校验是每个程序员必备的基本素养。你设计的接口，必须先校验参数。比如入参是否允许为空，入参长度是否符合你的预期长度。这个要养成习惯哈，日常开发中，很多低级bug都是不校验参数导致的。</p><blockquote><p>比如你的数据库表字段设置为<code>varchar(16)</code>,对方传了一个32位的字符串过来，如果你不校验参数，插入数据库直接异常了。</p></blockquote><p>出参也是，比如你定义的接口报文，参数是不为空的，但是你的接口返回参数，没有做校验，因为程序某些原因，直返回别人一个<code>null</code>值。。。</p><h2 id="2-修改老接口时，注意接口的兼容性"><a href="#2-修改老接口时，注意接口的兼容性" class="headerlink" title="2. 修改老接口时，注意接口的兼容性"></a>2. 修改老接口时，注意接口的兼容性</h2><p>很多bug都是因为修改了对外旧接口，但是却不做兼容导致的。关键这个问题多数是比较严重的，可能直接导致系统发版失败的。新手程序员很容易犯这个错误哦~</p><p>所以，如果你的需求是在原来接口上修改，尤其这个接口是对外提供服务的话，一定要考虑接口兼容。举个例子吧，比如dubbo接口，原本是只接收A，B参数，现在你加了一个参数C，就可以考虑这样处理：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//老接口</span><span class="token keyword">void</span> <span class="token function">oldService</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">B</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//兼容新接口，传个null代替C</span>  <span class="token function">newService</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">B</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//新接口，暂时不能删掉老接口，需要做兼容。</span><span class="token keyword">void</span> <span class="token function">newService</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">B</span><span class="token punctuation">,</span><span class="token class-name">C</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-设计接口时，充分考虑接口的可扩展性"><a href="#3-设计接口时，充分考虑接口的可扩展性" class="headerlink" title="3. 设计接口时，充分考虑接口的可扩展性"></a>3. 设计接口时，充分考虑接口的可扩展性</h2><p>要根据实际业务场景设计接口，充分考虑接口的可扩展性。</p><p>比如你接到一个需求：是用户添加或者修改员工时，需要刷脸。那你是反手提供一个员工管理的提交刷脸信息接口？还是先思考：提交刷脸是不是通用流程呢？比如转账或者一键贴现需要接入刷脸的话，你是否需要重新实现一个接口呢？还是当前按业务类型划分模块，复用这个接口就好，保留接口的可扩展性。</p><p>如果按模块划分的话，未来如果其他场景比如一键贴现接入刷脸的话，不用再搞一套新的接口，只需要新增枚举，然后复用刷脸通过流程接口，实现一键贴现刷脸的差异化即可。</p><h2 id="4-接口考虑是否需要防重处理"><a href="#4-接口考虑是否需要防重处理" class="headerlink" title="4.接口考虑是否需要防重处理"></a>4.接口考虑是否需要防重处理</h2><p>如果前端重复请求，你的逻辑如何处理？是不是考虑接口去重处理。</p><p>当然，如果是查询类的请求，其实不用防重。如果是更新修改类的话，尤其金融转账类的，就要过滤重复请求了。简单点，你可以使用Redis防重复请求，同样的请求方，一定时间间隔内的相同请求，考虑是否过滤。当然，转账类接口，并发不高的话，推荐使用数据库防重表，以唯一流水号作为主键或者唯一索引。</p><h2 id="5-重点接口，考虑线程池隔离。"><a href="#5-重点接口，考虑线程池隔离。" class="headerlink" title="5. 重点接口，考虑线程池隔离。"></a>5. 重点接口，考虑线程池隔离。</h2><p>一些登陆、转账交易、下单等重要接口，考虑线程池隔离哈。如果你所有业务都共用一个线程池，有些业务出bug导致线程池阻塞打满的话，那就杯具了，所有业务都影响了。因此进行线程池隔离，重要业务分配多一点的核心线程，就更好保护重要业务。</p><h2 id="6-调用第三方接口要考虑异常和超时处理"><a href="#6-调用第三方接口要考虑异常和超时处理" class="headerlink" title="6. 调用第三方接口要考虑异常和超时处理"></a>6. 调用第三方接口要考虑异常和超时处理</h2><p>如果你调用第三方接口，或者分布式远程服务的的话，需要考虑：</p><ul><li> 异常处理</li></ul><blockquote><p>比如，你调别人的接口，如果异常了，怎么处理，是重试还是当做失败还是告警处理。</p></blockquote><ul><li> 接口超时</li></ul><blockquote><p>没法预估对方接口一般多久返回，一般设置个超时断开时间，以保护你的接口。之前见过一个生产问题，就是http调用不设置超时时间，最后响应方进程假死，请求一直占着线程不释放，拖垮线程池。</p></blockquote><ul><li> 重试次数</li></ul><blockquote><p>你的接口调失败，需不需要重试？重试几次？需要站在业务上角度思考这个问题</p></blockquote><h2 id="7-接口实现考虑熔断和降级"><a href="#7-接口实现考虑熔断和降级" class="headerlink" title="7. 接口实现考虑熔断和降级"></a>7. 接口实现考虑熔断和降级</h2><p>当前互联网系统一般都是分布式部署的。而分布式系统中经常会出现某个基础服务不可用，最终导致整个系统不可用的情况, 这种现象被称为服务雪崩效应。</p><p>比如分布式调用链路<code>A-&gt;B-&gt;C....</code>，下图所示：</p><blockquote><p>如果服务C出现问题，比如是因为慢SQL导致调用缓慢，那将导致B也会延迟，从而A也会延迟。堵住的A请求会消耗占用系统的线程、IO等资源。当请求A的服务越来越多，占用计算机的资源也越来越多，最终会导致系统瓶颈出现，造成其他的请求同样不可用，最后导致业务系统崩溃。</p></blockquote><p>为了应对服务雪崩, 常见的做法是熔断和降级。最简单是加开关控制，当下游系统出问题时，开关降级，不再调用下游系统。还可以选用开源组件<code>Hystrix</code>。</p><h2 id="8-日志打印好，接口的关键代码，要有日志保驾护航。"><a href="#8-日志打印好，接口的关键代码，要有日志保驾护航。" class="headerlink" title="8. 日志打印好，接口的关键代码，要有日志保驾护航。"></a>8. 日志打印好，接口的关键代码，要有日志保驾护航。</h2><p>关键业务代码无论身处何地，都应该有足够的日志保驾护航。比如：你实现转账业务，转个几百万，然后转失败了，接着客户投诉，然后你还没有打印到日志，想想那种水深火热的困境下，你却毫无办法。。。</p><p>那么，你的转账业务都需要哪些日志信息呢？至少，方法调用前，入参需要打印需要吧，接口调用后，需要捕获一下异常吧，同时打印异常相关日志吧，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">TransferDTO</span> transferDTO<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"invoke tranfer begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//打印入参</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"invoke tranfer,paramters:&#123;&#125;"</span><span class="token punctuation">,</span>transferDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      res<span class="token operator">=</span>  transferService<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>transferDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"transfer fail,account：&#123;&#125;"</span><span class="token punctuation">,</span>     transferDTO<span class="token punctuation">.</span>getAccount（）<span class="token punctuation">)</span>     log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"transfer fail,exception:&#123;&#125;"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"invoke tranfer end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-接口的功能定义要具备单一性"><a href="#9-接口的功能定义要具备单一性" class="headerlink" title="9. 接口的功能定义要具备单一性"></a>9. 接口的功能定义要具备单一性</h2><p>单一性是指接口做的事情比较单一、专一。比如一个登陆接口，它做的事情就只是校验账户名密码，然后返回登陆成功以及<code>userId</code>即可。但是如果你为了减少接口交互，把一些注册、一些配置查询等全放到登陆接口，就不太妥。</p><p>其实这也是微服务一些思想，接口的功能单一、明确。比如订单服务、积分、商品信息相关的接口都是划分开的。将来拆分微服务的话，是不是就比较简便啦。</p><h2 id="10-接口有些场景，使用异步更合理"><a href="#10-接口有些场景，使用异步更合理" class="headerlink" title="10.接口有些场景，使用异步更合理"></a>10.接口有些场景，使用异步更合理</h2><p>举个简单的例子，比如你实现一个用户注册的接口。用户注册成功时，发个邮件或者短信去通知用户。这个邮件或者发短信，就更适合异步处理。因为总不能一个通知类的失败，导致注册失败吧。</p><p>至于做异步的方式，简单的就是用线程池。还可以使用消息队列，就是用户注册成功后，生产者产生一个注册成功的消息，消费者拉到注册成功的消息，就发送通知。</p><p>不是所有的接口都适合设计为同步接口。比如你要做一个转账的功能，如果你是单笔的转账，你是可以把接口设计同步。用户发起转账时，客户端在静静等待转账结果就好。如果你是批量转账，一个批次一千笔，甚至一万笔的，你则可以把接口设计为异步。就是用户发起批量转账时，持久化成功就先返回受理成功。然后用户隔十分钟或者十五分钟等再来查转账结果就好。又或者，批量转账成功后，再回调上游系统。</p><h2 id="11-优化接口耗时，远程串行考虑改并行调用"><a href="#11-优化接口耗时，远程串行考虑改并行调用" class="headerlink" title="11. 优化接口耗时，远程串行考虑改并行调用"></a>11. 优化接口耗时，远程串行考虑改并行调用</h2><p>假设我们设计一个APP首页的接口，它需要查用户信息、需要查banner信息、需要查弹窗信息等等。那你是一个一个接口串行调，还是并行调用呢？</p><p>如果是串行一个一个查，比如查用户信息200ms，查banner信息100ms、查弹窗信息50ms，那一共就耗时<code>350ms</code>了，如果还查其他信息，那耗时就更大了。这种场景是可以改为并行调用的。也就是说查用户信息、查banner信息、查弹窗信息，可以同时发起。</p><p>在Java中有个异步编程利器：<code>CompletableFuture</code>，就可以很好实现这个功能。</p><h2 id="12-接口合并或者说考虑批量处理思想"><a href="#12-接口合并或者说考虑批量处理思想" class="headerlink" title="12. 接口合并或者说考虑批量处理思想"></a>12. 接口合并或者说考虑批量处理思想</h2><p>数据库操作或或者是远程调用时，能批量操作就不要for循环调用。</p><p>一个简单例子，我们平时一个列表明细数据插入数据库时，不要在for循环一条一条插入，建议一个批次几百条，进行批量插入。同理远程调用也类似想法，比如你查询营销标签是否命中，可以一个标签一个标签去查，也可以批量标签去查，那批量进行，效率就更高嘛。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//反例</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">remoteSingleQuery</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//正例</span><span class="token function">remoteBatchQuery</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小伙伴们是否了解过<code>kafka</code>为什么这么快呢？其实其中一点原因，就是kafka使用批量消息提升服务端处理能力。</p><h2 id="13-接口实现过程中，恰当使用缓存"><a href="#13-接口实现过程中，恰当使用缓存" class="headerlink" title="13. 接口实现过程中，恰当使用缓存"></a>13. 接口实现过程中，恰当使用缓存</h2><p>哪些场景适合使用缓存？读多写少且数据时效要求越低的场景。</p><p>缓存用得好，可以承载更多的请求，提升查询效率，减少数据库的压力。</p><blockquote><p>比如一些平时变动很小或者说几乎不会变的商品信息，可以放到缓存，请求过来时，先查询缓存，如果没有再查数据库，并且把数据库的数据更新到缓存。但是，使用缓存增加了需要考虑这些点：缓存和数据库一致性如何保证、集群、缓存击穿、缓存雪崩、缓存穿透等问题。</p></blockquote><ul><li> 保证数据库和缓存一致性： 缓存延时双删、删除缓存重试机制、读取biglog异步删除缓存</li><li> 缓存击穿：设置数据永不过期</li><li> 缓存 雪崩：Redis集群高可用、均匀设置过期时间</li><li> 缓存穿透：接口层校验、查询为空设置个默认空值标记、布隆过滤器。</li></ul><p>一般用<code>Redis</code>分布式缓存，当然有些时候也可以考虑使用本地缓存，如<code>Guava Cache、Caffeine</code>等。使用本地缓存有些缺点，就是无法进行大数据存储，并且应用进程的重启，缓存会失效。</p><h2 id="14-接口考虑热点数据隔离性"><a href="#14-接口考虑热点数据隔离性" class="headerlink" title="14. 接口考虑热点数据隔离性"></a>14. 接口考虑热点数据隔离性</h2><p>瞬时间的高并发，可能会打垮你的系统。可以做一些热点数据的隔离。比如业务隔离、系统隔离、用户隔离、数据隔离等。</p><ul><li> 业务隔离性，比如12306的分时段售票，将热点数据分散处理，降低系统负载压力。</li><li> 系统隔离：比如把系统分成了用户、商品、社区三个板块。这三个块分别使用不同的域名、服务器和数据库，做到从接入层到应用层再到数据层三层完全隔离。</li><li> 用户隔离：重点用户请求到配置更好的机器。</li><li> 数据隔离：使用单独的缓存集群或者数据库服务热点数据。</li></ul><h2 id="15-可变参数配置化，比如红包皮肤切换等"><a href="#15-可变参数配置化，比如红包皮肤切换等" class="headerlink" title="15. 可变参数配置化，比如红包皮肤切换等"></a>15. 可变参数配置化，比如红包皮肤切换等</h2><p>假如产品经理提了个红包需求，圣诞节的时候，红包皮肤为圣诞节相关的，春节的时候，为春节红包皮肤等。</p><p>如果在代码写死控制，可有类似以下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>duringChristmas<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   img <span class="token operator">=</span> redPacketChristmasSkin<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>duringSpringFestival<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   img <span class="token operator">=</span>  redSpringFestivalSkin<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果到了元宵节的时候，运营小姐姐突然又有想法，红包皮肤换成灯笼相关的，这时候，是不是要去修改代码了，重新发布了？</p><p>从一开始接口设计时，可以实现一张红包皮肤的配置表，将红包皮肤做成配置化呢？更换红包皮肤，只需修改一下表数据就好了。</p><p>当然，还有一些场景适合一些配置化的参数：一个分页多少数量控制、某个抢红包多久时间过期这些，都可以搞到参数配置化表里面。这也是扩展性思想的一种体现。</p><h2 id="16-接口考虑幂等性"><a href="#16-接口考虑幂等性" class="headerlink" title="16.接口考虑幂等性"></a>16.接口考虑幂等性</h2><p>接口是需要考虑幂等性的，尤其抢红包、转账这些重要接口。最直观的业务场景，就是用户连着点击两次，你的接口有没有hold住。或者消息队列出现重复消费的情况，你的业务逻辑怎么控制？</p><p>回忆下，什么是幂等？</p><blockquote><p>计算机科学中，幂等表示一次和多次请求某一个资源应该具有同样的副作用，或者说，多次请求所产生的影响与一次请求执行的影响效果相同。</p></blockquote><p>大家别搞混哈，防重和幂等设计其实是有区别的。防重主要为了避免产生重复数据，把重复请求拦截下来即可。而幂等设计除了拦截已经处理的请求，还要求每次相同的请求都返回一样的效果。不过呢，很多时候，它们的处理流程、方案是类似的哈。</p><p>接口幂等实现方案主要有8种：</p><ul><li> select+insert+主键/唯一索引冲突</li><li> 直接insert + 主键/唯一索引冲突</li><li> 状态机幂等</li><li> 抽取防重表</li><li> token令牌</li><li> 悲观锁</li><li> 乐观锁</li><li> 分布式锁</li></ul><h2 id="17-读写分离，优先考虑读从库，注意主从延迟问题"><a href="#17-读写分离，优先考虑读从库，注意主从延迟问题" class="headerlink" title="17. 读写分离，优先考虑读从库，注意主从延迟问题"></a>17. 读写分离，优先考虑读从库，注意主从延迟问题</h2><p>我们的数据库都是集群部署的，有主库也有从库，当前一般都是读写分离的。比如你写入数据，肯定是写入主库，但是对于读取实时性要求不高的数据，则优先考虑读从库，因为可以分担主库的压力。</p><p>如果读取从库的话，需要考虑主从延迟的问题。</p><h2 id="18-接口注意返回的数据量，如果数据量大需要分页"><a href="#18-接口注意返回的数据量，如果数据量大需要分页" class="headerlink" title="18.接口注意返回的数据量，如果数据量大需要分页"></a>18.接口注意返回的数据量，如果数据量大需要分页</h2><p>一个接口返回报文，不应该包含过多的数据量。过多的数据量不仅处理复杂，并且数据量传输的压力也非常大。因此数量实在是比较大，可以分页返回，如果是功能不相关的报文，那应该考虑接口拆分。</p><h2 id="19-好的接口实现，离不开SQL优化"><a href="#19-好的接口实现，离不开SQL优化" class="headerlink" title="19. 好的接口实现，离不开SQL优化"></a>19. 好的接口实现，离不开SQL优化</h2><p>我们做后端的，写好一个接口，离不开SQL优化。</p><p>SQL优化从这几个维度思考：</p><ul><li> explain 分析SQL查询计划（重点关注type、extra、filtered字段）</li><li> show profile分析，了解SQL执行的线程的状态以及消耗的时间</li><li> 索引优化 （覆盖索引、最左前缀原则、隐式转换、order by以及group by的优化、join优化）</li><li> 大分页问题优化（延迟关联、记录上一页最大ID）</li><li> 数据量太大（ 分库分表、同步到es，用es查询）</li></ul><h2 id="20-代码锁的粒度控制好"><a href="#20-代码锁的粒度控制好" class="headerlink" title="20.代码锁的粒度控制好"></a>20.代码锁的粒度控制好</h2><p>什么是加锁粒度呢？</p><blockquote><p>其实就是就是你要锁住的范围是多大。比如你在家上卫生间，你只要锁住卫生间就可以了吧，不需要将整个家都锁起来不让家人进门吧，卫生间就是你的加锁粒度。</p></blockquote><p>我们写代码时，如果不涉及到共享资源，就没有必要锁住的。这就好像你上卫生间，不用把整个家都锁住，锁住卫生间门就可以了。</p><p>比如，在业务代码中，有一个ArrayList因为涉及到多线程操作，所以需要加锁操作，假设刚好又有一段比较耗时的操作（代码中的<code>slowNotShare</code>方法）不涉及线程安全问题，你会如何加锁呢？</p><p>反例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//不涉及共享资源的慢方法</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">slowNotShare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//错误的加锁方法</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">wrong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">//加锁粒度太粗了，slowNotShare其实不涉及共享资源</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">slowNotShare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"cosume time:&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token function">slowNotShare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以不加锁</span>        <span class="token comment">//只对List这部分加锁</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            data<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"cosume time:&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-接口状态和错误需要统一明确"><a href="#21-接口状态和错误需要统一明确" class="headerlink" title="21.接口状态和错误需要统一明确"></a>21.接口状态和错误需要统一明确</h2><p>提供必要的接口调用状态信息。比如你的一个转账接口调用是成功、失败、处理中还是受理成功等，需要明确告诉客户端。如果接口失败，那么具体失败的原因是什么。这些必要的信息都必须要告诉给客户端，因此需要定义明确的错误码和对应的描述。同时，尽量对报错信息封装一下，不要把后端的异常信息完全抛出到客户端。</p><h2 id="22-接口要考虑异常处理"><a href="#22-接口要考虑异常处理" class="headerlink" title="22.接口要考虑异常处理"></a>22.接口要考虑异常处理</h2><p>实现一个好的接口，离不开优雅的异常处理。对于异常处理，提十个小建议吧：</p><ul><li> 尽量不要使用 <code>e.printStackTrace()</code>,而是使用 <code>log</code>打印。因为 <code>e.printStackTrace()</code>语句可能会导致内存占满。</li><li> <code>catch</code>住异常时，建议打印出具体的 <code>exception</code>，利于更好定位问题</li><li> 不要用一个 <code>Exception</code>捕捉所有可能的异常</li><li> 记得使用 <code>finally</code>关闭流资源或者直接使用 <code>try-with-resource</code></li><li> 捕获异常与抛出异常必须是完全匹配，或者捕获异常是抛异常的父类</li><li> 捕获到的异常，不能忽略它，至少打点日志吧</li><li> 注意异常对你的代码层次结构的侵染</li><li> 自定义封装异常，不要丢弃原始异常的信息 <code>Throwable cause</code></li><li> 运行时异常 <code>RuntimeException</code> ，不应该通过 <code>catch</code>的方式来处理，而是先预检查，比如： <code>NullPointerException</code>处理</li><li> 注意异常匹配的顺序，优先捕获具体的异常</li></ul><h2 id="23-优化程序逻辑"><a href="#23-优化程序逻辑" class="headerlink" title="23. 优化程序逻辑"></a>23. 优化程序逻辑</h2><p>优化程序逻辑这块还是挺重要的，也就是说，你实现的业务代码，如果是比较复杂的话，建议把注释写清楚。还有，代码逻辑尽量清晰，代码尽量高效。</p><blockquote><p>比如，你要使用用户信息的属性，你根据session已经获取到<code>userId</code>了，然后就把用户信息从数据库查询出来，使用完后，后面可能又要用到用户信息的属性，有些小伙伴没想太多，反手就把<code>userId</code>再传进去，再查一次数据库。。。我在项目中，见过这种代码。。。直接把用户对象传下来不好嘛。。</p></blockquote><p>反例伪代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">UserInfo</span> user <span class="token operator">=</span> <span class="token class-name">UserDao</span><span class="token punctuation">.</span><span class="token function">queryByUserId</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       reutrn <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">do</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token keyword">do</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">UserId</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//多查了一次数据库</span>  <span class="token class-name">UserInfo</span> user <span class="token operator">=</span> <span class="token class-name">UserDao</span><span class="token punctuation">.</span><span class="token function">queryByUserId</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">UserInfo</span> user <span class="token operator">=</span> <span class="token class-name">UserDao</span><span class="token punctuation">.</span><span class="token function">queryByUserId</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       reutrn <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">do</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//直接传UserInfo对象过来即可，不用再多查一次数据库</span><span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token keyword">do</span><span class="token punctuation">(</span><span class="token class-name">UserInfo</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，这只是一些很小的一个例子，还有很多类似的例子，需要大家开发过程中，多点思考的哈。</p><h2 id="24-接口实现过程中，注意大文件、大事务、大对象"><a href="#24-接口实现过程中，注意大文件、大事务、大对象" class="headerlink" title="24. 接口实现过程中，注意大文件、大事务、大对象"></a>24. 接口实现过程中，注意大文件、大事务、大对象</h2><ul><li> 读取大文件时，不要 <code>Files.readAllBytes</code>直接读取到内存，这样会OOM的，建议使用 <code>BufferedReader</code>一行一行来。</li><li> 大事务可能导致死锁、回滚时间长、主从延迟等问题，开发中尽量避免大事务。</li><li> 注意一些大对象的使用，因为大对象是直接进入老年代的，可能会触发fullGC</li></ul><h2 id="25-你的接口，需要考虑限流"><a href="#25-你的接口，需要考虑限流" class="headerlink" title="25. 你的接口，需要考虑限流"></a>25. 你的接口，需要考虑限流</h2><p>如果你的系统每秒扛住的请求是1000，如果一秒钟来了十万请求呢？换个角度就是说，高并发的时候，流量洪峰来了，超过系统的承载能力，怎么办呢？</p><p>如果不采取措施，所有的请求打过来，系统CPU、内存、Load负载飚的很高，最后请求处理不过来，所有的请求无法正常响应。</p><p>针对这种场景，我们可以采用限流方案。就是为了保护系统，多余的请求，直接丢弃。</p><p>限流定义：</p><blockquote><p>在计算机网络中，限流就是控制网络接口发送或接收请求的速率，它可防止DoS攻击和限制Web爬虫。限流，也称流量控制。是指系统在面临高并发，或者大流量请求的情况下，限制新的请求对系统的访问，从而保证系统的稳定性。</p></blockquote><p>可以使用Guava的<code>RateLimiter</code>单机版限流，也可以使用<code>Redis</code>分布式限流，还可以使用阿里开源组件<code>sentinel</code>限流</p><h2 id="26-代码实现时，注意运行时异常（比如空指针、下标越界等）"><a href="#26-代码实现时，注意运行时异常（比如空指针、下标越界等）" class="headerlink" title="26.代码实现时，注意运行时异常（比如空指针、下标越界等）"></a>26.代码实现时，注意运行时异常（比如空指针、下标越界等）</h2><p>日常开发中，我们需要采取措施规避数组边界溢出，被零整除，空指针等运行时错误。类似代码比较常见：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//list可能越界，因为不一定有2个元素哈</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>应该采取措施，预防一下数组边界溢出。正例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">CollectionsUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> name <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="27-保证接口安全性"><a href="#27-保证接口安全性" class="headerlink" title="27.保证接口安全性"></a>27.保证接口安全性</h2><p>如果你的API接口是对外提供的，需要保证接口的安全性。保证接口的安全性有token机制和接口签名。</p><p>token机制身份验证方案还比较简单的，就是</p><ol><li> 客户端发起请求，申请获取token。</li><li> 服务端生成全局唯一的token，保存到redis中（一般会设置一个过期时间），然后返回给客户端。</li><li> 客户端带着token，发起请求。</li><li> 服务端去redis确认token是否存在，一般用 redis.del(token)的方式，如果存在会删除成功，即处理业务逻辑，如果删除失败不处理业务逻辑，直接返回结果。</li></ol><p>接口签名的方式，就是把接口请求相关信息（请求报文，包括请求时间戳、版本号、appid等），客户端私钥加签，然后服务端用公钥验签，验证通过才认为是合法的、没有被篡改过的请求。</p><p>除了加签验签和token机制，接口报文一般是要加密的。当然，用https协议是会对报文加密的。如果是我们服务层的话，如何加解密呢？</p><blockquote><p>可以参考HTTPS的原理，就是服务端把公钥给客户端，然后客户端生成对称密钥，接着客户端用服务端的公钥加密对称密钥，再发到服务端，服务端用自己的私钥解密，得到客户端的对称密钥。这时候就可以愉快传输报文啦，客户端用对称密钥加密请求报文，服务端用对应的对称密钥解密报文。</p></blockquote><p>有时候，接口的安全性，还包括手机号、身份证等信息的脱敏。就是说，用户的隐私数据，不能随便暴露。</p><h2 id="28-分布式事务，如何保证"><a href="#28-分布式事务，如何保证" class="headerlink" title="28.分布式事务，如何保证"></a>28.分布式事务，如何保证</h2><blockquote><p>分布式事务：就是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。简单来说，分布式事务指的就是分布式系统中的事务，它的存在就是为了保证不同数据库节点的数据一致性。</p></blockquote><p>分布式事务的几种解决方案：</p><ul><li> 2PC(二阶段提交)方案、3PC</li><li> TCC（Try、Confirm、Cancel）</li><li> 本地消息表</li><li> 最大努力通知</li><li> seata</li></ul><h2 id="29-事务失效的一些经典场景"><a href="#29-事务失效的一些经典场景" class="headerlink" title="29. 事务失效的一些经典场景"></a>29. 事务失效的一些经典场景</h2><p>我们的接口开发过程中，经常需要使用到事务。所以需要避开事务失效的一些经典场景。</p><ul><li> 方法的访问权限必须是public，其他private等权限，事务失效</li><li> 方法被定义成了final的，这样会导致事务失效。</li><li> 在同一个类中的方法直接内部调用，会导致事务失效。</li><li> 一个方法如果没交给spring管理，就不会生成spring事务。</li><li> 多线程调用，两个方法不在同一个线程中，获取到的数据库连接不一样的。</li><li> 表的存储引擎不支持事务</li><li> 如果自己try…catch误吞了异常，事务失效。</li><li> 错误的传播特性</li></ul><h2 id="30-掌握常用的设计模式"><a href="#30-掌握常用的设计模式" class="headerlink" title="30. 掌握常用的设计模式"></a>30. 掌握常用的设计模式</h2><p>把代码写好，还是需要熟练常用的设计模式，比如策略模式、工厂模式、模板方法模式、观察者模式等等。设计模式，是代码设计经验的总结。使用设计模式可以可重用代码、让代码更容易被他人理解、保证代码可靠性。</p><p>我之前写过一篇总结工作中常用设计模式的文章，写得挺不错的，大家可以看下：[实战！工作中常用到哪些设计模式][Link 4]</p><h2 id="31-写代码时，考虑线性安全问题"><a href="#31-写代码时，考虑线性安全问题" class="headerlink" title="31. 写代码时，考虑线性安全问题"></a>31. 写代码时，考虑线性安全问题</h2><p>在高并发情况下，<code>HashMap</code>可能会出现死循环。因为它是非线性安全的，可以考虑使用<code>ConcurrentHashMap</code>。所以这个也尽量养成习惯，不要上来反手就是一个<code>new HashMap()</code>;</p><blockquote><ul><li> Hashmap、Arraylist、LinkedList、TreeMap等都是线性不安全的；</li><li> Vector、Hashtable、ConcurrentHashMap等都是线性安全的</li></ul></blockquote><h2 id="32-接口定义清晰易懂，命名规范。"><a href="#32-接口定义清晰易懂，命名规范。" class="headerlink" title="32.接口定义清晰易懂，命名规范。"></a>32.接口定义清晰易懂，命名规范。</h2><p>我们写代码，不仅仅是为了实现当前的功能，也要有利于后面的维护。说到维护，代码不仅仅是写给自己看的，也是给别人看的。所以接口定义要清晰易懂，命名规范。</p><h2 id="33-接口的版本控制"><a href="#33-接口的版本控制" class="headerlink" title="33. 接口的版本控制"></a>33. 接口的版本控制</h2><p>接口要做好版本控制。就是说，请求基础报文，应该包含<code>version</code>接口版本号字段，方便未来做接口兼容。其实这个点也算接口扩展性的一个体现点吧。</p><p>比如客户端APP某个功能优化了，新老版本会共存，这时候我们的<code>version</code>版本号就派上用场了，对<code>version</code>做升级，做好版本控制。</p><h2 id="34-注意代码规范问题"><a href="#34-注意代码规范问题" class="headerlink" title="34. 注意代码规范问题"></a>34. 注意代码规范问题</h2><p>注意一些常见的代码坏味道：</p><ul><li> 大量重复代码（抽共用方法，设计模式）</li><li> 方法参数过多（可封装成一个DTO对象）</li><li> 方法过长（抽小函数）</li><li> 判断条件太多（优化if…else）</li><li> 不处理没用的代码</li><li> 不注重代码格式</li><li> 避免过度设计</li></ul><p>代码的坏味道，这里我都写到啦：[25种代码坏味道总结+优化示例][25]</p><h2 id="35-保证接口正确性，其实就是保证更少的bug"><a href="#35-保证接口正确性，其实就是保证更少的bug" class="headerlink" title="35.保证接口正确性，其实就是保证更少的bug"></a>35.保证接口正确性，其实就是保证更少的bug</h2><p>保证接口的正确性，换个角度讲，就是保证更少的bug，甚至是没有bug。所以接口开发完后，一般需要开发自测一下。然后的话，接口的正确还体现在，多线程并发的时候，保证数据的正确性,等等。比如你做一笔转账交易，扣减余额的时候，可以通过CAS乐观锁的方式保证余额扣减正确吧。</p><p>如果你是实现秒杀接口，得防止超卖问题吧。你可以使用Redis分布式锁防止超卖问题。使用Redis分布式锁，有几个注意要点，大家可以看下我之前这篇文章哈：[七种方案！探讨Redis分布式锁的正确使用姿势][Redis]</p><h2 id="36-学会沟通，跟前端沟通，跟产品沟通"><a href="#36-学会沟通，跟前端沟通，跟产品沟通" class="headerlink" title="36.学会沟通，跟前端沟通，跟产品沟通"></a>36.学会沟通，跟前端沟通，跟产品沟通</h2><p>我把这一点放到最后，学会沟通是非常非常重要的。比如你开发定义接口时，一定不能上来就自己埋头把接口定义完了，需要跟客户端先对齐接口。遇到一些难点时，跟技术leader对齐方案。实现需求的过程中，有什么问题，及时跟产品沟通。</p><p>总之就是，开发接口过程中，一定要沟通好~</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java日常开发的21个坑</title>
      <link href="/2023/05/17/java-ri-chang-kai-fa-de-21-ge-keng/"/>
      <url>/2023/05/17/java-ri-chang-kai-fa-de-21-ge-keng/</url>
      
        <content type="html"><![CDATA[<h4 id="1-1包装类型的空指针问题"><a href="#1-1包装类型的空指针问题" class="headerlink" title="1.1包装类型的空指针问题"></a>1.1包装类型的空指针问题</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NullPointTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">testInteger</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">testInteger</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//包装类型，传参可能为null，直接计算，则会导致空指针问题</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-级联调用的空指针问题"><a href="#1-2-级联调用的空指针问题" class="headerlink" title="1.2 级联调用的空指针问题"></a>1.2 级联调用的空指针问题</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NullPointTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//fruitService.getAppleService() 可能为空，会导致空指针问题</span>        fruitService<span class="token punctuation">.</span><span class="token function">getAppleService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-Equals方法左边的空指针问题"><a href="#1-3-Equals方法左边的空指针问题" class="headerlink" title="1.3 Equals方法左边的空指针问题"></a>1.3 Equals方法左边的空指针问题</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NullPointTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//s可能为空，会导致空指针问题</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"公众号：捡田螺的小男孩，666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-ConcurrentHashMap-这样的容器不支持-Key，Value-为-null。"><a href="#1-4-ConcurrentHashMap-这样的容器不支持-Key，Value-为-null。" class="headerlink" title="1.4 ConcurrentHashMap 这样的容器不支持 Key，Value 为 null。"></a>1.4 ConcurrentHashMap 这样的容器不支持 Key，Value 为 null。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NullPointTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-5-集合，数组直接获取元素"><a href="#1-5-集合，数组直接获取元素" class="headerlink" title="1.5 集合，数组直接获取元素"></a>1.5 集合，数组直接获取元素</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NullPointTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//空指针异常</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//空指针一场</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-6-对象直接获取属性"><a href="#1-6-对象直接获取属性" class="headerlink" title="1.6 对象直接获取属性"></a>1.6 对象直接获取属性</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NullPointTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//空指针异常</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-日期YYYY格式设置的坑"><a href="#2-日期YYYY格式设置的坑" class="headerlink" title="2. 日期YYYY格式设置的坑"></a>2. 日期YYYY格式设置的坑</h3><p>日常开发，经常需要对日期格式化，但是呢，年份设置为YYYY大写的时候，是有坑的哦。</p><p>反例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span>DECEMBER<span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> testDate <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SimpleDateFormat</span> dtf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2019-12-31 转 YYYY-MM-dd 格式后 "</span> <span class="token operator">+</span> dtf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>testDate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">2019</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">31</span> 转 YYYY<span class="token operator">-</span>MM<span class="token operator">-</span>dd 格式后 <span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">31</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>「解析：」</p><p>为什么明明是2019年12月31号，就转了一下格式，就变成了2020年12月31号了？因为YYYY是基于周来计算年的，它指向当天所在周属于的年份，一周从周日开始算起，周六结束，只要本周跨年，那么这一周就算下一年的了。正确姿势是使用yyyy格式。</p><p><img src="/2023/05/17/java-ri-chang-kai-fa-de-21-ge-keng/java_0dbfb1b4.png" alt="java_0dbfb1b4.png"></p><p>正例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span>DECEMBER<span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> testDate <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SimpleDateFormat</span> dtf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2019-12-31 转 yyyy-MM-dd 格式后 "</span> <span class="token operator">+</span> dtf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>testDate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-金额数值计算精度的坑"><a href="#3-金额数值计算精度的坑" class="headerlink" title="3.金额数值计算精度的坑"></a>3.金额数值计算精度的坑</h3><p>看下这个浮点数计算的例子吧：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token operator">+</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">-</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">4.015</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">123.3</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> amount1 <span class="token operator">=</span> <span class="token number">3.15</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> amount2 <span class="token operator">=</span> <span class="token number">2.10</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>amount1 <span class="token operator">-</span> amount2 <span class="token operator">==</span> <span class="token number">1.05</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0.30000000000000004</span><span class="token number">0.19999999999999996</span><span class="token number">401.49999999999994</span><span class="token number">1.2329999999999999</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现，结算结果跟我们预期不一致，其实是因为计算机是以二进制存储数值的，对于浮点数也是。对于计算机而言，0.1无法精确表达，这就是为什么浮点数会导致精确度缺失的。因此，「金额计算，一般都是用BigDecimal 类型」</p><p>对于以上例子，我们改为BigDecimal，再看看运行效果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">4.015</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">123.3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0.3000000000000000166533453693773481063544750213623046875</span><span class="token number">0.1999999999999999555910790149937383830547332763671875</span><span class="token number">401.49999999999996802557689079549163579940795898437500</span><span class="token number">1.232999999999999971578290569595992565155029296875</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>发现结果还是不对，「其实」，使用 BigDecimal 表示和计算浮点数，必须使用「字符串的构造方法」来初始化 BigDecimal，正例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"4.015"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"123.3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在进行金额计算，使用BigDecimal的时候，我们还需要「注意BigDecimal的几位小数点，还有它的八种舍入模式哈」。</p><h3 id="4-FileReader默认编码导致乱码问题"><a href="#4-FileReader默认编码导致乱码问题" class="headerlink" title="4. FileReader默认编码导致乱码问题"></a>4. FileReader默认编码导致乱码问题</h3><p>看下这个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileReaderTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">deleteIfExists</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jay.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jay.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"你好,捡田螺的小男孩"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统默认编码："</span><span class="token operator">+</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileReader</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"jay.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> count<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>count <span class="token operator">=</span> fileReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                content <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">系统默认编码：UTF<span class="token operator">-</span><span class="token number">8</span>���<span class="token punctuation">,</span>�����ݵ�С�к�<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从运行结果，可以知道，系统默认编码是utf8，demo中读取出来，出现乱码了。为什么呢？</p><blockquote><p>❝</p><p>FileReader 是以当「前机器的默认字符集」来读取文件的，如果希望指定字符集的话，需要直接使用 InputStreamReader 和 FileInputStream。</p><p>❞</p></blockquote><p>正例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileReaderTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">deleteIfExists</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jay.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jay.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"你好,捡田螺的小男孩"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统默认编码："</span><span class="token operator">+</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"jay.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">InputStreamReader</span> inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">,</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> count<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>count <span class="token operator">=</span> inputStreamReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                content <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Integer缓存的坑"><a href="#5-Integer缓存的坑" class="headerlink" title="5. Integer缓存的坑"></a>5. Integer缓存的坑</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntegerTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a==b:"</span><span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> d <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c==d:"</span><span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">a<span class="token operator">==</span>b<span class="token operator">:</span><span class="token boolean">true</span>c<span class="token operator">==</span>d<span class="token operator">:</span><span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为什么Integer值如果是128就不相等了呢？「编译器会把 Integer a = 127 转换为 Integer.valueOf(127)。」 我们看下源码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现，i在一定范围内，是会返回缓存的。</p><blockquote><p>❝</p><p>默认情况下呢，这个缓存区间就是[-128, 127]，所以我们业务日常开发中，如果涉及Integer值的比较，需要注意这个坑哈。还有呢，设置 JVM 参数加上 -XX:AutoBoxCacheMax=1000，是可以调整这个区间参数的，大家可以自己试一下哈</p><p>❞</p></blockquote><h3 id="6-static静态变量依赖spring实例化变量，可能导致初始化出错"><a href="#6-static静态变量依赖spring实例化变量，可能导致初始化出错" class="headerlink" title="6. static静态变量依赖spring实例化变量，可能导致初始化出错"></a>6. static静态变量依赖spring实例化变量，可能导致初始化出错</h3><p>之前看到过类似的代码。静态变量依赖于spring容器的bean。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SmsService</span> smsService <span class="token operator">=</span> <span class="token class-name">SpringContextUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">SmsService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个静态的smsService有可能获取不到的，因为类加载顺序不是确定的，正确的写法可以这样，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SmsService</span>  smsService <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//使用到的时候采取获取</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SmsService</span> <span class="token function">getSmsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>smsService<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     smsService <span class="token operator">=</span> <span class="token class-name">SpringContextUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">SmsService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> smsService<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-使用ThreadLocal，线程重用导致信息错乱的坑"><a href="#7-使用ThreadLocal，线程重用导致信息错乱的坑" class="headerlink" title="7. 使用ThreadLocal，线程重用导致信息错乱的坑"></a>7. 使用ThreadLocal，线程重用导致信息错乱的坑</h3><p>使用ThreadLocal缓存信息，有可能出现信息错乱的情况。看下下面这个例子吧。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> currentUser <span class="token operator">=</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"wrong"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">wrong</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置用户信息之前先查询一次ThreadLocal中的用户信息</span>    <span class="token class-name">String</span> before  <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> currentUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置用户信息到ThreadLocal</span>    currentUser<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置用户信息之后再查询一次ThreadLocal中的用户信息</span>    <span class="token class-name">String</span> after  <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> currentUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//汇总输出两次查询结果</span>    <span class="token class-name">Map</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"before"</span><span class="token punctuation">,</span> before<span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"after"</span><span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按理说，每次获取的before应该都是null，但是呢，程序运行在 Tomcat 中，执行程序的线程是 Tomcat 的工作线程，而 Tomcat 的工作线程是基于线程池的。</p><blockquote><p>❝</p><p>线程池会重用固定的几个线程，一旦线程重用，那么很可能首次从 ThreadLocal 获取的值是之前其他用户的请求遗留的值。这时，ThreadLocal 中的用户信息就是其他用户的信息。</p><p>❞</p></blockquote><p>把tomcat的工作线程设置为1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">server<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>max<span class="token operator">-</span>threads<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用户1，请求过来，会有以下结果，符合预期：</p><p><img src="/2023/05/17/java-ri-chang-kai-fa-de-21-ge-keng/java_b5367867.png" alt="java_b5367867.png"></p><p>用户2请求过来，会有以下结果，「不符合预期」：</p><p><img src="/2023/05/17/java-ri-chang-kai-fa-de-21-ge-keng/java_642409bc.png" alt="java_642409bc.png"></p><p>因此，使用类似 ThreadLocal 工具来存放一些数据时，需要特别注意在代码运行完后，显式地去清空设置的数据，正例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"right"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> before  <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> currentUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentUser<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> after <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> currentUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"before"</span><span class="token punctuation">,</span> before<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"after"</span><span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//在finally代码块中删除ThreadLocal中的数据，确保数据不串</span>        currentUser<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-疏忽switch的return和break"><a href="#8-疏忽switch的return和break" class="headerlink" title="8. 疏忽switch的return和break"></a>8. 疏忽switch的return和break</h3><p>这一点严格来说，应该不算坑，但是呢，大家写代码的时候，有些朋友容易疏忽了。直接看例子吧</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 关注公众号： * 捡田螺的小男孩 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwitchTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testSwitch结果是："</span><span class="token operator">+</span><span class="token function">testSwitch</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">testSwitch</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">"1"</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"2"</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">"2"</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"3"</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回默认值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">"4"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">测试<span class="token keyword">switch</span><span class="token number">1</span><span class="token number">2</span>testSwitch结果是：<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>switch 是会「沿着case一直往下匹配的，知道遇到return或者break。」 所以，在写代码的时候留意一下，是不是你要的结果。</p><h3 id="9-Arrays-asList的几个坑"><a href="#9-Arrays-asList的几个坑" class="headerlink" title="9. Arrays.asList的几个坑"></a>9. Arrays.asList的几个坑</h3><h4 id="9-1-基本类型不能作为-Arrays-asList方法的参数，否则会被当做一个参数。"><a href="#9-1-基本类型不能作为-Arrays-asList方法的参数，否则会被当做一个参数。" class="headerlink" title="9.1 基本类型不能作为 Arrays.asList方法的参数，否则会被当做一个参数。"></a>9.1 基本类型不能作为 Arrays.asList方法的参数，否则会被当做一个参数。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayAsListTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Arrays.asList源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="9-2-Arrays-asList-返回的-List-不支持增删操作。"><a href="#9-2-Arrays-asList-返回的-List-不支持增删操作。" class="headerlink" title="9.2 Arrays.asList 返回的 List 不支持增删操作。"></a>9.2 Arrays.asList 返回的 List 不支持增删操作。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayAsListTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>UnsupportedOperationException</span> at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>AbstractList</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">AbstractList</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">148</span><span class="token punctuation">)</span> at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>AbstractList</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">AbstractList</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">108</span><span class="token punctuation">)</span> at <span class="token class-name"><span class="token namespace">object<span class="token punctuation">.</span></span>ArrayAsListTest</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">ArrayAsListTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Arrays.asList 返回的 List 并不是我们期望的 java.util.ArrayList，而是 Arrays 的内部类 ArrayList。内部类的ArrayList没有实现add方法，而是父类的add方法的实现，是会抛出异常的呢。</p><h4 id="9-3-使用Arrays-asLis的时候，对原始数组的修改会影响到我们获得的那个List"><a href="#9-3-使用Arrays-asLis的时候，对原始数组的修改会影响到我们获得的那个List" class="headerlink" title="9.3 使用Arrays.asLis的时候，对原始数组的修改会影响到我们获得的那个List"></a>9.3 使用Arrays.asLis的时候，对原始数组的修改会影响到我们获得的那个List</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayAsListTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"4"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始数组"</span><span class="token operator">+</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list数组"</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">原始数组<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>list数组<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从运行结果可以看到，原数组改变，Arrays.asList转化来的list也跟着改变啦，大家使用的时候要注意一下哦，可以用new ArrayList(Arrays.asList(arr))包一下的。</p><h4 id="10-ArrayList-toArray-强转的坑"><a href="#10-ArrayList-toArray-强转的坑" class="headerlink" title="10. ArrayList.toArray() 强转的坑"></a>10. ArrayList.toArray() 强转的坑</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"公众号：捡田螺的小男孩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array21 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//类型转换异常</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为返回的是Object类型，Object类型数组强转String数组，会发生ClassCastException。解决方案是，使用toArray()重载方法toArray(T[] a)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以正常运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="11-异常使用的几个坑"><a href="#11-异常使用的几个坑" class="headerlink" title="11. 异常使用的几个坑"></a>11. 异常使用的几个坑</h3><h4 id="11-1-不要弄丢了你的堆栈异常信息"><a href="#11-1-不要弄丢了你的堆栈异常信息" class="headerlink" title="11.1 不要弄丢了你的堆栈异常信息"></a>11.1 不要弄丢了你的堆栈异常信息</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">wrong1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//没有把异常e取出来，原始异常信息丢失  </span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"系统忙请稍后再试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">wrong2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//只保留了异常消息，栈没有记录啦</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"文件读取错误, &#123;&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"系统忙请稍后再试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确的打印方式，应该酱紫</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//把整个IO异常都记录下来，而不是只打印消息</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"文件读取错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"系统忙请稍后再试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-2-不要把异常定义为静态变量"><a href="#11-2-不要把异常定义为静态变量" class="headerlink" title="11.2 不要把异常定义为静态变量"></a>11.2 不要把异常定义为静态变量</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> testStaticExeceptionOne<span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">exceptionOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"exception one error"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">exceptionTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"exception two error"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">exceptionOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//这里有问题</span>    <span class="token keyword">throw</span> <span class="token class-name">Exceptions</span><span class="token punctuation">.</span>ONEORTWO<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">exceptionTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//这里有问题</span>    <span class="token keyword">throw</span> <span class="token class-name">Exceptions</span><span class="token punctuation">.</span>ONEORTWO<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exceptionTwo抛出的异常，很可能是 exceptionOne的异常哦。正确使用方法，应该是new 一个出来。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">exceptionTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"业务异常"</span><span class="token punctuation">,</span> <span class="token number">0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="11-3-生产环境不要使用e-printStackTrace"><a href="#11-3-生产环境不要使用e-printStackTrace" class="headerlink" title="11.3 生产环境不要使用e.printStackTrace();"></a>11.3 生产环境不要使用e.printStackTrace();</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">wrong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//生产环境别用它</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为它占用太多内存，造成锁死，并且，日志交错混合，也不易读。正确使用如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"异常日志正常打印方式"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="11-4-线程池提交过程中，出现异常怎么办？"><a href="#11-4-线程池提交过程中，出现异常怎么办？" class="headerlink" title="11.4 线程池提交过程中，出现异常怎么办？"></a>11.4 线程池提交过程中，出现异常怎么办？</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadExceptionTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-></span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发生异常啦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前执行第几:"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">当前执行第几<span class="token operator">:</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span>当前执行第几<span class="token operator">:</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span>当前执行第几<span class="token operator">:</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span>当前执行第几<span class="token operator">:</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">4</span>发生异常啦当前执行第几<span class="token operator">:</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">6</span>当前执行第几<span class="token operator">:</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">7</span>当前执行第几<span class="token operator">:</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">8</span>当前执行第几<span class="token operator">:</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">9</span>当前执行第几<span class="token operator">:</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现，如果是使用submit方法提交到线程池的异步任务，异常会被吞掉的，所以在日常发现中，如果会有可预见的异常，可以采取这几种方案处理：</p><ul><li> 1.在任务代码try/catch捕获异常</li><li> 2.通过Future对象的get方法接收抛出的异常，再处理</li><li> 3.为工作者线程设置UncaughtExceptionHandler，在uncaughtException方法中处理异常</li><li> 4.重写ThreadPoolExecutor的afterExecute方法，处理传递的异常引用</li></ul><h4 id="11-5-finally重新抛出的异常也要注意啦"><a href="#11-5-finally重新抛出的异常也要注意啦" class="headerlink" title="11.5 finally重新抛出的异常也要注意啦"></a>11.5 finally重新抛出的异常也要注意啦</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">wrong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"try"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//异常丢失</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"try"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个方法是不会出现两个异常的呢，所以finally的异常会把try的「异常覆盖」。正确的使用方式应该是，finally 代码块「负责自己的异常捕获和处理」。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"try"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"try"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"finally"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-JSON序列化-Long类型被转成Integer类型！"><a href="#12-JSON序列化-Long类型被转成Integer类型！" class="headerlink" title="12.JSON序列化,Long类型被转成Integer类型！"></a>12.JSON序列化,Long类型被转成Integer类型！</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JSONTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Long</span> idValue <span class="token operator">=</span> <span class="token number">3000L</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> idValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"捡田螺的小男孩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>idValue<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> jsonString <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 反序列化时Long被转为了Integer</span>        <span class="token class-name">Map</span> map <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> idObj <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反序列化的类型是否为Integer："</span><span class="token operator">+</span><span class="token punctuation">(</span>idObj <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>idValue<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> idObj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>「运行结果：」</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> 反序列化的类型是否为<span class="token class-name">Integer</span>：<span class="token boolean">true</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ClassCastException</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span> cannot be cast <span class="token keyword">to</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Long</span> at <span class="token class-name"><span class="token namespace">object<span class="token punctuation">.</span></span>JSONTest</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">JSONTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>❝</p><p>「注意啦」，序列化为Json串后，Josn串是没有Long类型呢。而且反序列化回来如果也是Object接收，数字小于Interger最大值的话，给转成Integer啦！</p><p>❞</p></blockquote><h3 id="13-使用Executors声明线程池，newFixedThreadPool的OOM问题"><a href="#13-使用Executors声明线程池，newFixedThreadPool的OOM问题" class="headerlink" title="13. 使用Executors声明线程池，newFixedThreadPool的OOM问题"></a>13. 使用Executors声明线程池，newFixedThreadPool的OOM问题</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//do nothing</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>「IDE指定JVM参数：-Xmx8m -Xms8m :」</p><p><img src="/2023/05/17/java-ri-chang-kai-fa-de-21-ge-keng/java_b929372f.png" alt="java_b929372f.png"></p><p>运行结果：  </p><p><img src="/2023/05/17/java-ri-chang-kai-fa-de-21-ge-keng/java_ce591804.png" alt="java_ce591804.png"></p><p>我们看下源码，其实newFixedThreadPool使用的是无界队列！  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                  <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span>        <span class="token keyword">implements</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">/**     * Creates a &#123;@code LinkedBlockingQueue&#125; with a capacity of     * &#123;@link Integer#MAX_VALUE&#125;.     */</span>    <span class="token keyword">public</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>❝</p><p>newFixedThreadPool线程池的核心线程数是固定的，它使用了近乎于无界的LinkedBlockingQueue阻塞队列。当核心线程用完后，任务会入队到阻塞队列，如果任务执行的时间比较长，没有释放，会导致越来越多的任务堆积到阻塞队列，最后导致机器的内存使用不停的飙升，造成JVM OOM。</p><p>❞</p></blockquote><h3 id="14-直接大文件或者一次性从数据库读取太多数据到内存，可能导致OOM问题"><a href="#14-直接大文件或者一次性从数据库读取太多数据到内存，可能导致OOM问题" class="headerlink" title="14. 直接大文件或者一次性从数据库读取太多数据到内存，可能导致OOM问题"></a>14. 直接大文件或者一次性从数据库读取太多数据到内存，可能导致OOM问题</h3><p>如果一次性把大文件或者数据库太多数据达到内存，是会导致OOM的。所以，为什么查询DB数据库，一般都建议分批。</p><p>读取文件的话，一般问文件不会太大，才使用<code>Files.readAllLines()</code>。为什么呢？因为它是直接把文件都读到内存的，预估下不会OOM才使用这个吧，可以看下它的源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">readAllLines</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> <span class="token class-name">Charset</span> cs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token function">newBufferedReader</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> cs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>line <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是太大的文件，可以使用Files.line()按需读取，当时读取文件这些，一般是使用完需要「关闭资源流」的哈</p><h3 id="15-先查询，再更新-删除的并发一致性问题"><a href="#15-先查询，再更新-删除的并发一致性问题" class="headerlink" title="15. 先查询，再更新/删除的并发一致性问题"></a>15. 先查询，再更新/删除的并发一致性问题</h3><p>再日常开发中，这种代码实现经常可见：先查询是否有剩余可用的票，再去更新票余量。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">selectIsAvailable</span><span class="token punctuation">(</span>ticketId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token number">1</span>、<span class="token function">deleteTicketById</span><span class="token punctuation">(</span>ticketId<span class="token punctuation">)</span>     <span class="token number">2</span>、给现金增加操作 <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> “没有可用现金券” <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是并发执行，很可能有问题的，应该利用数据库的更新/删除的原子性，正解如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">deleteAvailableTicketById</span><span class="token punctuation">(</span>ticketId<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token number">1</span>、给现金增加操作 <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> “没有可用现金券” <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-数据库使用utf-8存储，-插入表情异常的坑"><a href="#16-数据库使用utf-8存储，-插入表情异常的坑" class="headerlink" title="16. 数据库使用utf-8存储， 插入表情异常的坑"></a>16. 数据库使用utf-8存储， 插入表情异常的坑</h3><p>低版本的MySQL支持的utf8编码，最大字符长度为 3 字节，但是呢，存储表情需要4个字节，因此如果用utf8存储表情的话，会报<code>SQLException: Incorrect string value: &#39;\xF0\x9F\x98\x84&#39; for column</code>，所以一般用utf8mb4编码去存储表情。</p><h3 id="17-事务未生效的坑"><a href="#17-事务未生效的坑" class="headerlink" title="17. 事务未生效的坑"></a>17. 事务未生效的坑</h3><p>日常业务开发中，我们经常跟事务打交道，「事务失效」主要有以下几个场景：</p><ul><li> 底层数据库引擎不支持事务</li><li> 在非public修饰的方法使用</li><li> rollbackFor属性设置错误</li><li> 本类方法直接调用</li><li> 异常被try…catch吃了，导致事务失效。</li></ul><p>其中，最容易踩的坑就是后面两个，「注解的事务方法给本类方法直接调用」，伪代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionTest</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//插入一条数据</span>    <span class="token comment">//调用方法B (本地的类调用，事务失效了)</span>    <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Transactional</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//插入数据</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果异常被catch住，「那事务也是会失效呢」~，伪代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">try</span><span class="token punctuation">&#123;</span>    <span class="token comment">//插入一条数据</span>    <span class="token function">insertA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//更改一条数据</span>    <span class="token function">updateB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"异常被捕获了，那你的事务就失效咯"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18-当反射遇到方法重载的坑"><a href="#18-当反射遇到方法重载的坑" class="headerlink" title="18. 当反射遇到方法重载的坑"></a>18. 当反射遇到方法重载的坑</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** *  反射demo *  @author 捡田螺的小男孩 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectionTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">score</span><span class="token punctuation">(</span><span class="token keyword">int</span> score<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int grade ="</span> <span class="token operator">+</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">score</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> score<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Integer grade ="</span> <span class="token operator">+</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ReflectionTest</span> reflectionTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reflectionTest<span class="token punctuation">.</span><span class="token function">score</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reflectionTest<span class="token punctuation">.</span><span class="token function">score</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reflectionTest<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>reflectionTest<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reflectionTest<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>reflectionTest<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> grade <span class="token operator">=</span><span class="token number">100</span><span class="token class-name">Integer</span> grade <span class="token operator">=</span><span class="token number">100</span><span class="token keyword">int</span> grade <span class="token operator">=</span><span class="token number">60</span><span class="token class-name">Integer</span> grade <span class="token operator">=</span><span class="token number">60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果「不通过反射」，传入<code>Integer.valueOf(100)</code>，走的是Integer重载。但是呢，反射不是根据入参类型确定方法重载的，而是「以反射获取方法时传入的方法名称和参数类型来确定」的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="19-mysql-时间-timestamp的坑"><a href="#19-mysql-时间-timestamp的坑" class="headerlink" title="19. mysql 时间 timestamp的坑"></a>19. mysql 时间 timestamp的坑</h3><p>有更新语句的时候，timestamp可能会自动更新为当前时间，看个demo</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">CREATE TABLE `t` <span class="token punctuation">(</span>  `a` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token class-name">DEFAULT</span> NULL<span class="token punctuation">,</span>  `b` timestamp  <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>  `c` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON <span class="token class-name">UPDATE</span> CURRENT_TIMESTAMP<span class="token punctuation">)</span> ENGINE<span class="token operator">=</span><span class="token class-name">InnoDB</span> <span class="token class-name">DEFAULT</span> CHARSET<span class="token operator">=</span>utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以发现 「c列」 是有<code>CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code>，所以c列会随着记录更新而「更新为当前时间」。但是b列也会随着有记录更新为而「更新为当前时间」。</p><p><img src="/2023/05/17/java-ri-chang-kai-fa-de-21-ge-keng/java_7fc082c1.png" alt="java_7fc082c1.png"></p><p>可以使用datetime代替它,需要更新为当前时间，就把<code>now()</code>赋值进来，或者修改mysql的这个参数<code>explicit_defaults_for_timestamp</code>。</p><h3 id="20-mysql8数据库的时区坑"><a href="#20-mysql8数据库的时区坑" class="headerlink" title="20. mysql8数据库的时区坑"></a>20. mysql8数据库的时区坑</h3><p>之前我们对mysql数据库进行升级，新版本为8.0.12。但是升级完之后，发现now()函数，获取到的时间比北京时间晚8小时，原来是因为mysql8默认为美国那边的时间，需要指定下时区</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>test<span class="token operator">?</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&amp;</span>serverTimezone<span class="token operator">=</span><span class="token class-name">Asia</span><span class="token operator">/</span><span class="token class-name">Shanghai</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 开发事项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis分布式锁的10个坑</title>
      <link href="/2023/05/17/redis-fen-bu-shi-suo-de-10-ge-keng/"/>
      <url>/2023/05/17/redis-fen-bu-shi-suo-de-10-ge-keng/</url>
      
        <content type="html"><![CDATA[<p>日常开发中，经常会碰到秒杀抢购等业务。为了避免并发请求造成的库存超卖等问题，我们一般会用到<code>Redis</code>分布式锁。但是使用<code>Redis</code>分布式锁，很容易踩坑哦~ 本文田螺哥将给大家分析阐述，<code>Redis</code>分布式锁的<code>10</code>个坑~</p><p><img src="/2023/05/17/redis-fen-bu-shi-suo-de-10-ge-keng/redis_lock_3cad2aec.png" alt="redis_lock_3cad2aec.png"></p><h2 id="1-非原子操作（setnx-expire）"><a href="#1-非原子操作（setnx-expire）" class="headerlink" title="1. 非原子操作（setnx + expire）"></a>1. 非原子操作（setnx + expire）</h2><p>一说到实现<code>Redis</code>的分布式锁，很多小伙伴马上就会想到<code>setnx+ expire</code>命令。也就是说，先用<code>setnx</code>来抢锁，如果抢到之后，再用<code>expire</code>给锁设置一个过期时间。</p><p>伪代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span>（jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span>lock_key<span class="token punctuation">,</span>lock_value<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>）<span class="token punctuation">&#123;</span> <span class="token comment">//加锁</span>    jedis<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>lock_key，timeout）<span class="token punctuation">;</span> <span class="token comment">//设置过期时间</span>    doBusiness <span class="token comment">//业务逻辑处理</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这块代码是有坑的，因为<code>setnx</code>和<code>expire</code>两个命令是分开写的，并不是原子操作！如果刚要执行完<code>setnx</code>加锁，正要执行<code>expire</code>设置过期时间时，进程<code>crash</code>或者要重启维护了，那么这个锁就“长生不老”了，别的线程永远获取不到锁啦。</p><h2 id="2-被别的客户端请求覆盖（-setnx-value为过期时间）"><a href="#2-被别的客户端请求覆盖（-setnx-value为过期时间）" class="headerlink" title="2.被别的客户端请求覆盖（ setnx + value为过期时间）"></a>2.被别的客户端请求覆盖（ setnx + value为过期时间）</h2><p>为了解决：发生异常时，锁得不到释放的问题。有小伙伴提出，可以把过期时间放到<code>setnx</code>的<code>value</code>里面。如果加锁失败，再拿出<code>value</code>值和当前系统时间校验一下是否过期即可。伪代码实现如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> expireTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timeout<span class="token punctuation">;</span> <span class="token comment">//系统时间+设置的超时时间</span><span class="token class-name">String</span> expireTimeStr <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>expireTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转化为String字符串</span><span class="token comment">// 如果当前锁不存在，返回加锁成功</span><span class="token keyword">if</span> <span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span>lock_key<span class="token punctuation">,</span> expireTimeStr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 如果锁已经存在，获取锁的过期时间</span><span class="token class-name">String</span> oldExpireTimreStr <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lock_key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果获取到的老的预期过期时间，小于系统当前时间，表示已经过期了</span><span class="token keyword">if</span> <span class="token punctuation">(</span>oldExpireTimreStr <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>oldExpireTimreStr<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">//锁已过期，获取上一个锁的过期时间，并设置现在锁的过期时间（不了解redis的getSet命令的小伙伴，可以去官网看下哈）</span>    <span class="token class-name">String</span> oldValueStr <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">getSet</span><span class="token punctuation">(</span>lock_key<span class="token punctuation">,</span> expireTimeStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValueStr <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> oldValueStr<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>oldExpireTimreStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//考虑多线程并发的情况，只有一个线程的设置值和当前值相同，它才可以加锁</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//其他情况，均返回加锁失败</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种实现的方案，也是有坑的：如果锁过期的时候，并发多个客户端同时请求过来，都执行<code>jedis.getSet()</code>，最终只能有一个客户端加锁成功，但是该客户端锁的过期时间，可能被别的客户端覆盖。</p><h2 id="3-忘记设置过期时间"><a href="#3-忘记设置过期时间" class="headerlink" title="3. 忘记设置过期时间"></a>3. 忘记设置过期时间</h2><p>之前<code>review</code>代码的时候，看到这样实现的分布式锁，伪代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span>lock_key<span class="token punctuation">,</span>lock_value<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//加锁</span>     doBusiness <span class="token comment">//业务逻辑处理</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//加锁成功，处理完业务逻辑返回</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//加锁失败</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token function">unlock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span> <span class="token comment">//释放锁</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这块有什么问题呢？是的，忘记设置过期时间了。如果程序在运行期间，机器突然挂了，代码层面没有走到<code>finally</code>代码块，即在宕机前，锁并没有被删除掉，这样的话，就没办法保证解锁，所以这里需要给<code>lockKey</code>加一个过期时间。注意哈，使用分布式锁，一定要设置过期时间哈。</p><h2 id="4-业务处理完，忘记释放锁"><a href="#4-业务处理完，忘记释放锁" class="headerlink" title="4. 业务处理完，忘记释放锁"></a>4. 业务处理完，忘记释放锁</h2><p>很多小伙伴，会使用<code>Redis</code>的<code>set</code>指令扩展参数来实现分布式锁。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">set指令扩展参数：SET key value<span class="token punctuation">[</span>EX seconds<span class="token punctuation">]</span><span class="token punctuation">[</span>PX milliseconds<span class="token punctuation">]</span><span class="token punctuation">[</span>NX<span class="token operator">|</span>XX<span class="token punctuation">]</span><span class="token operator">-</span> NX <span class="token operator">:</span>表示key不存在的时候，才能set成功，也即保证只有第一个客户端请求才能获得锁，  而其他客户端请求只能等其释放锁，才能获取。<span class="token operator">-</span> EX seconds <span class="token operator">:</span>设定key的过期时间，时间单位是秒。<span class="token operator">-</span> PX milliseconds<span class="token operator">:</span> 设定key的过期时间，单位为毫秒<span class="token operator">-</span> XX<span class="token operator">:</span> 仅当key存在时设置值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小伙伴会写出如下伪代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> requestId<span class="token punctuation">,</span> <span class="token string">"NX"</span><span class="token punctuation">,</span> <span class="token string">"PX"</span><span class="token punctuation">,</span> expireTime<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//加锁</span>   doBusiness <span class="token comment">//业务逻辑处理</span>   <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//加锁成功，处理完业务逻辑返回</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//加锁失败</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这块伪代码，初看觉得没啥问题，但是细想，不太对呀。因为忘记释放锁了！如果每次加锁成功，都要等到超时时间才释放锁，是会有问题的。这样程序不高效，应当每次处理完业务逻辑，都要释放锁。</p><p>正例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> requestId<span class="token punctuation">,</span> <span class="token string">"NX"</span><span class="token punctuation">,</span> <span class="token string">"PX"</span><span class="token punctuation">,</span> expireTime<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//加锁</span>     doBusiness <span class="token comment">//业务逻辑处理</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//加锁成功，处理完业务逻辑返回</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//加锁失败</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token function">unlock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span> <span class="token comment">//释放锁</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-B的锁被A给释放了"><a href="#5-B的锁被A给释放了" class="headerlink" title="5. B的锁被A给释放了"></a>5. B的锁被A给释放了</h2><p>我们来看下这块伪代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> requestId<span class="token punctuation">,</span> <span class="token string">"NX"</span><span class="token punctuation">,</span> <span class="token string">"PX"</span><span class="token punctuation">,</span>expireTime<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//加锁</span>     doBusiness <span class="token comment">//业务逻辑处理</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//加锁成功，处理完业务逻辑返回</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//加锁失败</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token function">unlock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//释放锁</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大家觉得会有哪些坑呢？</p><blockquote><p>假设在这样的并发场景下：<code>A、B</code>两个线程来尝试给Redis的key<code>lockKey</code>加锁，<code>A</code>线程先拿到锁（假如锁超时时间是<code>3</code>秒后过期）。如果线程<code>A</code>执行的业务逻辑很耗时，超过了<code>3</code>秒还是没有执行完。这时候，<code>Redis</code>会自动释放<code>lockKey</code>锁。刚好这时，线程<code>B</code>过来了，它就能抢到锁了，开始执行它的业务逻辑，恰好这时，线程<code>A</code>执行完逻辑，去释放锁的时候，它就把<code>B</code>的锁给释放掉了。</p></blockquote><p>正确的方式应该是，在用<code>set</code>扩展参数加锁时，放多一个这个线程请求的唯一标记，比如<code>requestId</code>，然后释放锁的时候，判断一下是不是刚刚的请求。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> requestId<span class="token punctuation">,</span> <span class="token string">"NX"</span><span class="token punctuation">,</span> <span class="token string">"PX"</span><span class="token punctuation">,</span>expireTime<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//加锁</span>     doBusiness <span class="token comment">//业务逻辑处理</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//加锁成功，处理完业务逻辑返回</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//加锁失败</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>requestId<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//判断一下是不是自己的requestId</span>      <span class="token function">unlock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放锁</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-释放锁时，不是原子性"><a href="#6-释放锁时，不是原子性" class="headerlink" title="6. 释放锁时，不是原子性"></a>6. 释放锁时，不是原子性</h2><p>以上的这块代码，还是有坑：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>requestId<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//判断一下是不是自己的requestId</span>   <span class="token function">unlock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放锁</span> <span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为判断是不是当前线程加的锁和释放锁不是一个原子操作。如果调用<code>unlock(lockKey)</code>释放锁的时候，锁已经过期，所以这把锁已经可能已经不属于当前客户端，会解除他人加的锁。</p><p>因此，这个坑就是：<code>判断和删除</code>是两个操作，不是原子的，有一致性问题。<code>释放锁必须保证原子性</code>，可以使用<code>Redis+Lua</code>脚本来完成，类似<code>Lua</code>脚本如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> then    <span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'del'</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">else</span>   <span class="token keyword">return</span> <span class="token number">0</span>end<span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-锁过期释放，业务没执行完"><a href="#7-锁过期释放，业务没执行完" class="headerlink" title="7. 锁过期释放，业务没执行完"></a>7. 锁过期释放，业务没执行完</h2><p>加锁后，如果超时了，<code>Redis</code>会自动释放清除锁，这样有可能业务还没处理完，锁就提前释放了。怎么办呢？</p><p>有些小伙伴认为，稍微把锁过期时间设置长一些就可以啦。其实我们设想一下，是否可以给获得锁的线程，开启一个定时守护线程，每隔一段时间检查锁是否还存在，存在则对锁的过期时间延长，防止锁过期提前释放。</p><p>当前开源框架Redisson解决了这个问题。我们一起来看下<code>Redisson</code>底层原理图吧：</p><p><img src="/2023/05/17/redis-fen-bu-shi-suo-de-10-ge-keng/redis_lock_8d126fc7.png" alt="redis_lock_8d126fc7.png"></p><p>只要线程<code>一</code>加锁成功，就会启动一个<code>watch dog</code>看门狗，它是一个后台线程，会每隔<code>10</code>秒检查一下，如果线程一还持有锁，那么就会不断的延长锁<code>key</code>的生存时间。因此，<code>Redisson</code>就是使用<code>Redisson</code>解决了锁过期释放，业务没执行完问题。</p><h2 id="8-Redis分布式锁和-transactional一起使用失效"><a href="#8-Redis分布式锁和-transactional一起使用失效" class="headerlink" title="8. Redis分布式锁和@transactional一起使用失效"></a>8. Redis分布式锁和@transactional一起使用失效</h2><p>大家看下这块伪代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateDB</span><span class="token punctuation">(</span><span class="token keyword">int</span> lockKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">boolean</span> lockFlag <span class="token operator">=</span> redisLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lockFlag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>“请稍后再试”<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>   doBusiness <span class="token comment">//业务逻辑处理</span>   redisLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在事务中,使用了<code>Redis</code>分布式锁.这个方法一旦执行,事务生效，接着就<code>Redis</code>分布式锁生效，代码执行完后,先释放<code>Redis</code>分布式锁,然后再提交事务数据，最后事务结束。在这个过程中,事务没有提交之前,分布式锁已经被释放，导致分布式锁失效</p><p>这是因为:</p><blockquote><p><code>spring</code>的<code>Aop</code>，会在<code>updateDB</code>方法之前开启事务，之后再加锁，当锁住的代码执行完成后，再提交事务，因此锁住的代码块执行是在事务之内执行的，可以推断在代码块执行完时，事务还未提交，锁已经被释放，此时其他线程拿到锁之后进行锁住的代码块，读取的库存数据不是最新的。</p></blockquote><p>正确的实现方法,可以在<code>updateDB</code>方法之前就上锁，即还没有开事务之前就加锁，那么就可以保证线程的安全性.</p><h2 id="9-锁可重入"><a href="#9-锁可重入" class="headerlink" title="9.锁可重入"></a>9.锁可重入</h2><p>前面讨论的<code>Redis</code>分布式锁，都是不可重入的。</p><blockquote><p>所谓的不可重入，就是当前线程执行某个方法已经获取了该锁，那么在方法中尝试再次获取锁时，会阻塞，不可以再次获得锁。同一个人拿一个锁 ，只能拿一次不能同时拿<code>2</code>次。</p></blockquote><p>不可重入的分布式锁的话，是可以满足绝大多数的业务场景。但是有时候一些业务场景，我们还是需要可重入的分布式锁，大家实现分布式锁的过程中，需要注意一下，你当前的业务场景是否需要可重入的分布式锁。</p><p><code>Redis</code>只要解决这两个问题，就能实现重入锁了：</p><ul><li> 怎么保存当前持有的线程</li><li> 怎么维护加锁次数（即重入了多少次）</li></ul><p>实现一个可重入的分布式锁，我们可以参考<code>JDK</code>的<code>ReentrantLock</code>的设计思想。实际上，可以直接使用<code>Redisson</code>框架，它是支持可重入锁的。</p><h2 id="10-Redis主从复制导致的坑"><a href="#10-Redis主从复制导致的坑" class="headerlink" title="10.Redis主从复制导致的坑"></a>10.Redis主从复制导致的坑</h2><p>实现<code>Redis</code>分布式锁的话，要注意<code>Redis</code>主从复制的坑。因为<code>Redis</code>一般都是集群部署的：</p><p><img src="/2023/05/17/redis-fen-bu-shi-suo-de-10-ge-keng/redis_lock_126845b9.png" alt="redis_lock_126845b9.png"></p><p>如果线程一在<code>Redis</code>的<code>master</code>节点上拿到了锁，但是加锁的<code>key</code>还没同步到<code>slave</code>节点。恰好这时，<code>master</code>节点发生故障，一个<code>slave</code>节点就会升级为<code>master</code>节点。线程二就可以获取同个<code>key</code>的锁啦，但线程一也已经拿到锁了，锁的安全性就没了。</p><p>为了解决这个问题，Redis作者 antirez提出一种高级的分布式锁算法：<code>Redlock</code>。<code>Redlock</code>核心思想是这样的：</p><blockquote><p>搞多个Redis master部署，以保证它们不会同时宕掉。并且这些master节点是完全相互独立的，相互之间不存在数据同步。同时，需要确保在这多个master实例上，是与在Redis单实例，使用相同方法来获取和释放锁。</p></blockquote><p>我们假设当前有<code>5</code>个<code>Redis master</code>节点，在<code>5</code>台服务器上面运行这些<code>Redis</code>实例。</p><p><img src="/2023/05/17/redis-fen-bu-shi-suo-de-10-ge-keng/redis_lock_f98f9617.png" alt="redis_lock_f98f9617.png"></p><p>RedLock的实现步骤如下:</p><ol><li> 获取当前时间，以毫秒为单位。</li><li> 按顺序向 <code>5</code>个 <code>master</code>节点请求加锁。客户端设置网络连接和响应超时时间，并且超时时间要小于锁的失效时间。（假设锁自动失效时间为 <code>10</code>秒，则超时时间一般在 <code>5-50</code>毫秒之间,我们就假设超时时间是 <code>50ms</code>吧）。如果超时，跳过该 <code>master</code>节点，尽快去尝试下一个 <code>master</code>节点。</li><li> 客户端使用当前时间减去开始获取锁时间（即步骤 <code>1</code>记录的时间），得到获取锁使用的时间。当且仅当超过一半（ <code>N/2+1</code>，这里是 <code>5/2+1=3</code>个节点）的 <code>Redis master</code>节点都获得锁，并且使用的时间小于锁失效时间时，锁才算获取成功。（如上图， <code>10s&gt; 30ms+40ms+50ms+4m0s+50ms</code>）</li><li> 如果取到了锁， <code>key</code>的真正有效时间就变啦，需要减去获取锁所使用的时间。</li><li> 如果获取锁失败（没有在至少 <code>N/2+1个master</code>实例取到锁，有或者获取锁时间已经超过了有效时间），客户端要在所有的 <code>master</code>节点上解锁（即便有些 <code>master</code>节点根本就没有加锁成功，也需要解锁，以防止有些漏网之鱼）。</li></ol><p>简化下步骤就是：</p><ul><li> 按顺序向5个master节点请求加锁</li><li> 根据设置的超时时间来判断，是不是要跳过该master节点。</li><li> 如果大于等于3个节点加锁成功，并且使用的时间小于锁的有效期，即可认定加锁成功啦。</li><li> 如果获取锁失败，解锁！</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis锁 </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>细数线程池的10个坑</title>
      <link href="/2023/05/17/xi-shu-xian-cheng-chi-de-10-ge-keng/"/>
      <url>/2023/05/17/xi-shu-xian-cheng-chi-de-10-ge-keng/</url>
      
        <content type="html"><![CDATA[<h2 id="1-线程池默认使用无界队列，任务过多导致OOM"><a href="#1-线程池默认使用无界队列，任务过多导致OOM" class="headerlink" title="1.线程池默认使用无界队列，任务过多导致OOM"></a>1.线程池默认使用无界队列，任务过多导致OOM</h2><p>JDK开发者提供了线程池的实现类，我们基于<code>Executors</code>组件，就可以快速创建一个线程池。日常工作中，一些小伙伴为了开发效率，反手就用<code>Executors</code>新建个线程池。写出类似以下的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewFixedTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//do nothing</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>newFixedThreadPool</code>创建的线程池，是会有坑的，它默认是无界的阻塞队列，如果任务过多，会导致<code>OOM</code>问题。运行一下以上代码，出现了<code>OOM</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>OutOfMemoryError</span><span class="token operator">:</span> GC overhead limit exceeded at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>LinkedBlockingQueue</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">416</span><span class="token punctuation">)</span> at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1371</span><span class="token punctuation">)</span> at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>dto<span class="token punctuation">.</span></span>NewFixedTest</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">NewFixedTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为<code>newFixedThreadPool</code>使用了无界的阻塞队列的<code>LinkedBlockingQueue</code>，如果线程获取一个任务后，任务的执行时间比较长(比如，上面demo代码设置了<code>10</code>秒)，会导致队列的任务越积越多，导致机器内存使用不停飙升， 最终出现<code>OOM</code>。</p><p>看下<code>newFixedThreadPool</code>的相关源码，是可以看到一个无界的阻塞队列的，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//阻塞队列是LinkedBlockingQueue，并且是使用的是无参构造函数</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                  <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//无参构造函数，默认最大容量是Integer.MAX_VALUE，相当于无界的阻塞队列的了</span><span class="token keyword">public</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，工作中，建议大家自定义线程池，并使用指定长度的阻塞队列。</p><h2 id="2-线程池创建线程过多，导致OOM"><a href="#2-线程池创建线程过多，导致OOM" class="headerlink" title="2. 线程池创建线程过多，导致OOM"></a>2. 线程池创建线程过多，导致OOM</h2><p>有些小伙伴说，既然<code>Executors</code>组件创建出的线程池<code>newFixedThreadPool</code>，使用的是无界队列，可能会导致<code>OOM</code>。那么，<code>Executors</code>组件还可以创建别的线程池，如<code>newCachedThreadPool</code>，我们用它也不行嘛？</p><p>我们可以看下<code>newCachedThreadPool</code>的构造函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                  <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它的最大线程数是<code>Integer.MAX_VALUE</code>。大家应该意识到使用它，可能会引发什么问题了吧。没错，如果创建了大量的线程也有可能引发<code>OOM</code>！</p><blockquote><p>笔者在以前公司，遇到这么一个OOM问题：一个第三方提供的包，是直接使用<code>new Thread</code>实现多线程的。在某个夜深人静的夜晚，我们的监控系统报警了。。。这个相关的业务请求瞬间特别多，监控系统告警OOM了。</p></blockquote><p>所以我们使用线程池的时候，还要当心线程创建过多，导致<code>OOM</code>问题。大家尽量不要使用<code>newCachedThreadPool</code>，并且如果自定义线程池时，要注意一下最大线程数。</p><h2 id="3-共享线程池，次要逻辑拖垮主要逻辑"><a href="#3-共享线程池，次要逻辑拖垮主要逻辑" class="headerlink" title="3. 共享线程池，次要逻辑拖垮主要逻辑"></a>3. 共享线程池，次要逻辑拖垮主要逻辑</h2><p>要避免所有的业务逻辑共享一个线程池。比如你用线程池A来做登录异步通知，又用线程池A来做对账。如下图：</p><p><img src="/2023/05/17/xi-shu-xian-cheng-chi-de-10-ge-keng/thread_f2194b4f.png" alt="thread_f2194b4f.png"></p><p>如果对账任务<code>checkBillService</code>响应时间过慢，会占据大量的线程池资源，可能直接导致没有足够的线程资源去执行<code>loginNotifyService</code>的任务，最后影响登录。就这样，因为一个次要服务，影响到重要的登录接口，显然这是绝对不允许的。因此，我们不能将所有的业务一锅炖，都共享一个线程池，因为这样做，风险太高了，犹如所有鸡蛋放到一个篮子里。应当做线程池隔离！</p><p><img src="/2023/05/17/xi-shu-xian-cheng-chi-de-10-ge-keng/thread_20dc99ad.png" alt="thread_20dc99ad.png"></p><h2 id="4-线程池拒绝策略的坑，使用不当导致阻塞"><a href="#4-线程池拒绝策略的坑，使用不当导致阻塞" class="headerlink" title="4. 线程池拒绝策略的坑，使用不当导致阻塞"></a>4. 线程池拒绝策略的坑，使用不当导致阻塞</h2><p>我们知道线程池主要有四种拒绝策略，如下：</p><ul><li> AbortPolicy: 丢弃任务并抛出 <code>RejectedExecutionException</code>异常。(默认拒绝策略)</li><li> DiscardPolicy：丢弃任务，但是不抛出异常。</li><li> DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务。</li><li> CallerRunsPolicy：由调用方线程处理该任务。</li></ul><p>如果线程池拒绝策略设置不合理，就容易有坑。我们把拒绝策略设置为<code>DiscardPolicy或DiscardOldestPolicy</code>并且在被拒绝的任务，<code>Future</code>对象调用<code>get()</code>方法,那么调用线程会一直被阻塞。</p><p>我们来看个demo：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiscardThreadPoolTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 一个核心线程，队列最大为1，最大线程数也是1.拒绝策略是DiscardPolicy</span>        <span class="token class-name">ThreadPoolExecutor</span> executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Future</span> f1 <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"提交任务1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Future</span> f2 <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"提交任务2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Future</span> f3 <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"提交任务3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务1完成 "</span> <span class="token operator">+</span> f1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等待任务1执行完毕</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务2完成"</span> <span class="token operator">+</span> f2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等待任务2执行完毕</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务3完成"</span> <span class="token operator">+</span> f3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等待任务3执行完毕</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 关闭线程池，阻塞直到所有任务执行完毕</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：一直在运行中。。。</p><p><img src="/2023/05/17/xi-shu-xian-cheng-chi-de-10-ge-keng/thread_0aa7afa9.png" alt="thread_0aa7afa9.png"></p><p>这是因为<code>DiscardPolicy</code>拒绝策略，是什么都没做，源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DiscardPolicy</span> <span class="token keyword">implements</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**      * Creates a &#123;@code DiscardPolicy&#125;.      */</span>    <span class="token keyword">public</span> <span class="token class-name">DiscardPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">/**      * Does nothing, which has the effect of discarding task r.      */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再来看看线程池<code>submit</code> 的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//把Runnable任务包装为Future对象</span>    <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//执行任务</span>    <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回Future对象</span>    <span class="token keyword">return</span> ftask<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">,</span> <span class="token class-name">V</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>callable <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">callable</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> NEW<span class="token punctuation">;</span>  <span class="token comment">//Future的初始化状态是New</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再来看看<code>Future的get()</code> 方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//状态大于COMPLETING，才会返回，要不然都会阻塞等待</span><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> s <span class="token operator">=</span> state<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;=</span> COMPLETING<span class="token punctuation">)</span>          s <span class="token operator">=</span> <span class="token function">awaitDone</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">report</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token class-name">FutureTask</span>的状态枚举  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NEW          <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COMPLETING   <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NORMAL       <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> EXCEPTIONAL  <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CANCELLED    <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INTERRUPTING <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INTERRUPTED  <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>阻塞的真相水落石出啦，<code>FutureTask</code>的状态大于<code>COMPLETING</code>才会返回，要不然都会一直阻塞等待。又因为拒绝策略啥没做，没有修改<code>FutureTask</code>的状态，因此<code>FutureTask</code>的状态一直是<code>NEW</code>，所以它不会返回，会一直等待。</p><p>这个问题，可以使用别的拒绝策略，比如<code>CallerRunsPolicy</code>，它让主线程去执行拒绝的任务，会更新<code>FutureTask</code>状态。如果确实想用<code>DiscardPolicy</code>，则需要重写<code>DiscardPolicy</code>的拒绝策略。</p><p>温馨提示，日常开发中，使用<code>Future.get()</code> 时，尽量使用带超时时间的，因为它是阻塞的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>难道使用别的拒绝策略，就万无一失了嘛？不是的，如果使用<code>CallerRunsPolicy</code>拒绝策略，它表示拒绝的任务给调用方线程用，如果这是主线程，那会不会可能也导致主线程阻塞呢？总结起来，大家日常开发的时候，多一份心眼吧，多一点思考吧。</p><h2 id="5-Spring内部线程池的坑"><a href="#5-Spring内部线程池的坑" class="headerlink" title="5. Spring内部线程池的坑"></a>5. Spring内部线程池的坑</h2><p>工作中，个别开发者，为了快速开发，喜欢直接用<code>spring</code>的<code>@Async</code>，来执行异步任务。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Async</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理异步任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Spring内部线程池，其实是<code>SimpleAsyncTaskExecutor</code>，这玩意有点坑，它不会复用线程的，它的设计初衷就是执行大量的短时间的任务。有兴趣的小伙伴，可以去看看它的源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** &#123;@link TaskExecutor&#125; implementation that fires up a new Thread for each task,* executing it asynchronously.** &lt;p>Supports limiting concurrent threads through the "concurrencyLimit"* bean property. By default, the number of concurrent threads is unlimited.** &lt;p>&lt;b>NOTE: This implementation does not reuse threads!&lt;/b> Consider a* thread-pooling TaskExecutor implementation instead, in particular for* executing a large number of short-lived tasks.** @author Juergen Hoeller* @since 2.0* @see #setConcurrencyLimit* @see SyncTaskExecutor* @see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor* @see org.springframework.scheduling.commonj.WorkManagerTaskExecutor*/</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"serial"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleAsyncTaskExecutor</span> <span class="token keyword">extends</span> <span class="token class-name">CustomizableThreadCreator</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncListenableTaskExecutor</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说来了一个请求，就会新建一个线程！大家使用<code>spring</code>的<code>@Async</code>时，要避开这个坑，自己再定义一个线程池。正例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"threadPoolTaskExecutor"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">threadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ThreadPoolTaskExecutor</span> executor<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"tianluo-%d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 其他参数设置</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-使用线程池时，没有自定义命名"><a href="#6-使用线程池时，没有自定义命名" class="headerlink" title="6. 使用线程池时，没有自定义命名"></a>6. 使用线程池时，没有自定义命名</h2><p>使用线程池时，如果没有给线程池一个有意义的名称，将不好排查回溯问题。这不算一个坑吧，只能说给以后排查埋坑，哈哈。我还是单独把它放出来算一个点，因为个人觉得这个还是比较重要的。反例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPoolExecutor</span> executorOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                 <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorOne<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小男孩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Exception</span> in thread <span class="token string">"pool-1-thread-1"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>NullPointerException</span> at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>dto<span class="token punctuation">.</span></span>ThreadTest</span><span class="token punctuation">.</span>lambda$main$<span class="token function">0</span><span class="token punctuation">(</span><span class="token class-name">ThreadTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">17</span><span class="token punctuation">)</span> at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span><span class="token punctuation">.</span><span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1149</span><span class="token punctuation">)</span> at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span>$<span class="token class-name">Worker</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">624</span><span class="token punctuation">)</span> at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">748</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现，默认打印的线程池名字是<code>pool-1-thread-1</code>，如果排查问题起来，并不友好。因此建议大家给自己线程池自定义个容易识别的名字。其实用<code>CustomizableThreadFactory</code>即可，正例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPoolExecutor</span> executorOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">CustomizableThreadFactory</span><span class="token punctuation">(</span><span class="token string">"Tianluo-Thread-pool"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorOne<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小男孩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-线程池参数设置不合理"><a href="#7-线程池参数设置不合理" class="headerlink" title="7. 线程池参数设置不合理"></a>7. 线程池参数设置不合理</h2><p>线程池最容易出坑的地方，就是线程参数设置不合理。比如核心线程设置多少合理，最大线程池设置多少合理等等。当然，这块不是乱设置的，需要结合具体业务。</p><p>比如线程池如何调优，如何确认最佳线程数？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">最佳线程数目 <span class="token operator">=</span> （（线程等待时间<span class="token operator">+</span>线程CPU时间）<span class="token operator">/</span>线程CPU时间 ）<span class="token operator">*</span> CPU数目<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>我们的服务器CPU核数为8核，一个任务线程cpu耗时为20ms，线程等待（网络IO、磁盘IO）耗时80ms，那最佳线程数目：( 80 + 20 )/20 * 8 = 40。也就是设置 40个线程数最佳。</p></blockquote><ul><li> 有兴趣的小伙伴，也可以看这篇文章哈：[线程池到底设置多少线程比较合适？][Link 1]</li><li> 对于线程池参数，如果小伙伴还有疑惑的话，可以看我之前这篇文章哈：[Java线程池解析][Java]</li></ul><h2 id="8-线程池异常处理的坑"><a href="#8-线程池异常处理的坑" class="headerlink" title="8. 线程池异常处理的坑"></a>8. 线程池异常处理的坑</h2><p>我们来看段代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPoolExecutor</span> executorOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">CustomizableThreadFactory</span><span class="token punctuation">(</span><span class="token string">"Tianluo-Thread-pool"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            executorOne<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"current thread name"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"result## "</span> <span class="token operator">+</span> object<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按道理，运行这块代码应该抛空指针异常才是的，对吧。但是，运行结果却是这样的;</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">current thread nameTianluo<span class="token operator">-</span><span class="token class-name">Thread</span><span class="token operator">-</span>pool1current thread nameTianluo<span class="token operator">-</span><span class="token class-name">Thread</span><span class="token operator">-</span>pool2current thread nameTianluo<span class="token operator">-</span><span class="token class-name">Thread</span><span class="token operator">-</span>pool3current thread nameTianluo<span class="token operator">-</span><span class="token class-name">Thread</span><span class="token operator">-</span>pool4current thread nameTianluo<span class="token operator">-</span><span class="token class-name">Thread</span><span class="token operator">-</span>pool5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为使用<code>submit</code>提交任务，不会把异常直接这样抛出来。大家有兴趣的话，可以去看看源码。可以改为<code>execute</code>方法执行，当然最好就是<code>try...catch捕获</code>，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPoolExecutor</span> executorOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">CustomizableThreadFactory</span><span class="token punctuation">(</span><span class="token string">"Tianluo-Thread-pool"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            executorOne<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"current thread name"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"result## "</span> <span class="token operator">+</span> object<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常了"</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实，我们还可以为工作者线程设置<code>UncaughtExceptionHandler</code>，在<code>uncaughtException</code>方法中处理异常。大家知道这个坑就好啦。</p><h2 id="9-线程池使用完毕后，忘记关闭"><a href="#9-线程池使用完毕后，忘记关闭" class="headerlink" title="9. 线程池使用完毕后，忘记关闭"></a>9. 线程池使用完毕后，忘记关闭</h2><p>如果线程池使用完，忘记关闭的话，有可能会导致内存泄露问题。所以，大家使用完线程池后，记得关闭一下。同时，线程池最好也设计成单例模式，给它一个好的命名，以方便排查问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPoolExecutor</span> executorOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CustomizableThreadFactory</span><span class="token punctuation">(</span><span class="token string">"Tianluo-Thread-pool"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorOne<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小男孩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭线程池</span>        executorOne<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-ThreadLocal与线程池搭配，线程复用，导致信息错乱。"><a href="#10-ThreadLocal与线程池搭配，线程复用，导致信息错乱。" class="headerlink" title="10. ThreadLocal与线程池搭配，线程复用，导致信息错乱。"></a>10. ThreadLocal与线程池搭配，线程复用，导致信息错乱。</h2><p>使用<code>ThreadLocal</code>缓存信息，如果配合线程池一起，有可能出现信息错乱的情况。先看下一下例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> currentUser <span class="token operator">=</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"wrong"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">wrong</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置用户信息之前先查询一次ThreadLocal中的用户信息</span>    <span class="token class-name">String</span> before  <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> currentUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置用户信息到ThreadLocal</span>    currentUser<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置用户信息之后再查询一次ThreadLocal中的用户信息</span>    <span class="token class-name">String</span> after  <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> currentUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//汇总输出两次查询结果</span>    <span class="token class-name">Map</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"before"</span><span class="token punctuation">,</span> before<span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"after"</span><span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按理说，每次获取的<code>before</code>应该都是<code>null</code>，但是呢，程序运行在 <code>Tomcat</code> 中，执行程序的线程是<code>Tomcat</code>的工作线程，而<code>Tomcat</code>的工作线程是基于线程池的。</p><blockquote><p>线程池会重用固定的几个线程，一旦线程重用，那么很可能首次从 ThreadLocal 获取的值是之前其他用户的请求遗留的值。这时，ThreadLocal 中的用户信息就是其他用户的信息。</p></blockquote><p>把tomcat的工作线程设置为1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">server<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>max<span class="token operator">-</span>threads<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用户1，请求过来，会有以下结果，符合预期：</p><p><img src="/2023/05/17/xi-shu-xian-cheng-chi-de-10-ge-keng/thread_1f3fd833.png" alt="thread_1f3fd833.png"></p><p>用户2请求过来，会有以下结果，「不符合预期」：</p><p><img src="/2023/05/17/xi-shu-xian-cheng-chi-de-10-ge-keng/thread_7645148d.png" alt="thread_7645148d.png"></p><p>因此，使用类似 ThreadLocal 工具来存放一些数据时，需要特别注意在代码运行完后，显式地去清空设置的数据，正例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"right"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> before  <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> currentUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentUser<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> after <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> currentUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"before"</span><span class="token punctuation">,</span> before<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"after"</span><span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//在finally代码块中删除ThreadLocal中的数据，确保数据不串</span>        currentUser<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot规则引擎drools</title>
      <link href="/2023/05/04/springboot-gui-ze-yin-qing-drools/"/>
      <url>/2023/05/04/springboot-gui-ze-yin-qing-drools/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/05/04/springboot-gui-ze-yin-qing-drools/drools_761a7322-20230504134954234.png" alt="drools_761a7322.png"></p><p>现在有这么个需求，网上购物，需要根据不同的规则计算商品折扣，比如VIP客户增加5%的折扣，购买金额超过1000元的增加10%的折扣等，而且这些规则可能随时发生变化，甚至增加新的规则。面对这个需求，你该怎么实现呢？难道是计算规则一变，就要修改业务代码，重新测试，上线吗。</p><p>其实，我们可以通过规则引擎来实现，Drools 就是一个开源的业务规则引擎，可以很容易地与 spring boot 应用程序集成，那本文就用Drools来实现一下上面说的需求吧。</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>我们创建一个spring boot应用程序，pom中添加drools相关的依赖，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>  <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>drools<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>drools<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">7.59</span><span class="token number">.0</span><span class="token punctuation">.</span>Final<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>  <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>drools<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>drools<span class="token operator">-</span>compiler<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">7.59</span><span class="token number">.0</span><span class="token punctuation">.</span>Final<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>  <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>drools<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>drools<span class="token operator">-</span>decisiontables<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">7.59</span><span class="token number">.0</span><span class="token punctuation">.</span>Final<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Drools配置类"><a href="#Drools配置类" class="headerlink" title="Drools配置类"></a>Drools配置类</h2><p>创建一个名为<code>DroolsConfig</code>的配置 java 类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DroolsConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 制定规则文件的路径</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> RULES_CUSTOMER_RULES_DRL <span class="token operator">=</span> <span class="token string">"rules/customer-discount.drl"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">KieServices</span> kieServices <span class="token operator">=</span> <span class="token class-name">KieServices<span class="token punctuation">.</span>Factory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">KieContainer</span> <span class="token function">kieContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">KieFileSystem</span> kieFileSystem <span class="token operator">=</span> kieServices<span class="token punctuation">.</span><span class="token function">newKieFileSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        kieFileSystem<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ResourceFactory</span><span class="token punctuation">.</span><span class="token function">newClassPathResource</span><span class="token punctuation">(</span>RULES_CUSTOMER_RULES_DRL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">KieBuilder</span> kb <span class="token operator">=</span> kieServices<span class="token punctuation">.</span><span class="token function">newKieBuilder</span><span class="token punctuation">(</span>kieFileSystem<span class="token punctuation">)</span><span class="token punctuation">;</span>        kb<span class="token punctuation">.</span><span class="token function">buildAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">KieModule</span> kieModule <span class="token operator">=</span> kb<span class="token punctuation">.</span><span class="token function">getKieModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">KieContainer</span> kieContainer <span class="token operator">=</span> kieServices<span class="token punctuation">.</span><span class="token function">newKieContainer</span><span class="token punctuation">(</span>kieModule<span class="token punctuation">.</span><span class="token function">getReleaseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> kieContainer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 定义了一个 <code>KieContainer</code>的 <code>Spring Bean</code> ， <code>KieContainer</code>用于通过加载应用程序的 <code>/resources</code>文件夹下的规则文件来构建规则引擎。</li><li> 创建 <code>KieFileSystem</code>实例并配置规则引擎并从应用程序的资源目录加载规则的 <code>DRL</code> 文件。</li><li> 使用 <code>KieBuilder</code>实例来构建 <code>drools</code> 模块。我们可以使用KieSerive单例实例来创建 <code>KieBuilder</code> 实例。</li><li> 最后，使用 <code>KieService</code> 创建一个 <code>KieContainer</code> 并将其配置为 <code>spring bean</code>。</li></ul><h2 id="添加业务Model"><a href="#添加业务Model" class="headerlink" title="添加业务Model"></a>添加业务Model</h2><p>创建一个订单对象<code>OrderRequest</code>，这个类中的字段后续回作为输入信息发送给定义的<code>drools</code>规则中，用来计算给定客户订单的折扣金额。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderRequest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 客户号     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> customerNumber<span class="token punctuation">;</span>    <span class="token comment">/**     * 年龄     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token comment">/**     * 订单金额     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> amount<span class="token punctuation">;</span>    <span class="token comment">/**     * 客户类型     */</span>    <span class="token keyword">private</span> <span class="token class-name">CustomerType</span> customerType<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外，定义一个客户类型<code>CustomerType</code> 的枚举，规则引擎会根据该值计算客户订单折扣百分比，如下所示。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">CustomerType</span> <span class="token punctuation">&#123;</span>    LOYAL<span class="token punctuation">,</span> NEW<span class="token punctuation">,</span> DISSATISFIED<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，创建一个订单折扣类 <code>OrderDiscount</code> ，用来表示计算得到的最终的折扣，如下所示。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderDiscount</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 折扣     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> discount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们将使用上述响应对象返回计算出的折扣。</p><h2 id="定义drools-规则"><a href="#定义drools-规则" class="headerlink" title="定义drools 规则"></a>定义drools 规则</h2><p>前面的<code>DroolsConfig</code>类中指定<code>drools</code>规则的目录，现在我们在<code>/src/main/resources/rules</code>目录下添加<code>customer-discount.drl</code>文件，在里面定义对应的规则。</p><p><img src="/2023/05/04/springboot-gui-ze-yin-qing-drools/drools_4d26c3de-20230504134913328.png" alt="drools_4d26c3de.png"></p><p>这个<code>drl</code>文件虽然不是java文件，但还是很容易看懂的。</p><ul><li> 我们使用了一个名为 <code>orderDiscount</code> 的全局参数，可以在多个规则之间共享。</li><li> <code>drl</code> 文件可以包含一个或多个规则。我们可以使用 <code>mvel</code>语法来指定规则。此外，每个规则使用 <code>rule</code>关键字进行描述。</li><li> 每个规则 <code>when-then</code>语法来定义规则的条件。</li><li> 根据订单请求的输入值，我们正在为结果添加折扣。如果规则表达式匹配，每个规则都会向全局结果变量添加额外的折扣。</li></ul><p>完整的规则源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alvin<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">OrderRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alvin<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">CustomerType</span><span class="token punctuation">;</span>global <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alvin<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span>OrderDiscount</span> orderDiscount<span class="token punctuation">;</span>dialect <span class="token string">"mvel"</span><span class="token comment">// 规则1: 根据年龄判断</span>rule <span class="token string">"Age based discount"</span>    when        <span class="token comment">// 当客户年龄在20岁以下或者50岁以上</span>        <span class="token class-name">OrderRequest</span><span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token operator">||</span> age <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span>    then        <span class="token comment">// 则添加10%的折扣</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========Adding 10% discount for Kids/ senior customer============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDiscount<span class="token punctuation">.</span><span class="token function">setDiscount</span><span class="token punctuation">(</span>orderDiscount<span class="token punctuation">.</span><span class="token function">getDiscount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span class="token comment">// 规则2： 根据客户类型的规则</span>rule <span class="token string">"Customer type based discount - Loyal customer"</span>    when        <span class="token comment">// 当客户类型是LOYAL</span>        <span class="token class-name">OrderRequest</span><span class="token punctuation">(</span>customerType<span class="token punctuation">.</span>getValue <span class="token operator">==</span> <span class="token string">"LOYAL"</span><span class="token punctuation">)</span>    then        <span class="token comment">// 则增加5%的折扣</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========Adding 5% discount for LOYAL customer============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDiscount<span class="token punctuation">.</span><span class="token function">setDiscount</span><span class="token punctuation">(</span>orderDiscount<span class="token punctuation">.</span><span class="token function">getDiscount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>endrule <span class="token string">"Customer type based discount - others"</span>    when    <span class="token class-name">OrderRequest</span><span class="token punctuation">(</span>customerType<span class="token punctuation">.</span>getValue <span class="token operator">!=</span> <span class="token string">"LOYAL"</span><span class="token punctuation">)</span>then    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========Adding 3% discount for NEW or DISSATISFIED customer============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    orderDiscount<span class="token punctuation">.</span><span class="token function">setDiscount</span><span class="token punctuation">(</span>orderDiscount<span class="token punctuation">.</span><span class="token function">getDiscount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>endrule <span class="token string">"Amount based discount"</span>    when        <span class="token class-name">OrderRequest</span><span class="token punctuation">(</span>amount <span class="token operator">></span> <span class="token number">1000L</span><span class="token punctuation">)</span>    then        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========Adding 5% discount for amount more than 1000$============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    orderDiscount<span class="token punctuation">.</span><span class="token function">setDiscount</span><span class="token punctuation">(</span>orderDiscount<span class="token punctuation">.</span><span class="token function">getDiscount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加Service层"><a href="#添加Service层" class="headerlink" title="添加Service层"></a>添加Service层</h2><p>创建一个名为<code>OrderDiscountService</code> 的服务类，如下：。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderDiscountService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">KieContainer</span> kieContainer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OrderDiscount</span> <span class="token function">getDiscount</span><span class="token punctuation">(</span><span class="token class-name">OrderRequest</span> orderRequest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">OrderDiscount</span> orderDiscount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderDiscount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 开启会话</span>        <span class="token class-name">KieSession</span> kieSession <span class="token operator">=</span> kieContainer<span class="token punctuation">.</span><span class="token function">newKieSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置折扣对象</span>        kieSession<span class="token punctuation">.</span><span class="token function">setGlobal</span><span class="token punctuation">(</span><span class="token string">"orderDiscount"</span><span class="token punctuation">,</span> orderDiscount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置订单对象</span>        kieSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>orderRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 触发规则</span>        kieSession<span class="token punctuation">.</span><span class="token function">fireAllRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 中止会话</span>        kieSession<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> orderDiscount<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 注入 <code>KieContainer</code>实例并创建一个 <code>KieSession</code>实例。</li><li> 设置了一个 <code>OrderDiscount</code>类型的全局参数，它将保存规则执行结果。</li><li> 使用 <code>insert()</code>方法将请求对象传递给 <code>drl</code> 文件。</li><li> 调用 <code>fireAllRules()</code>方法触发所有规则。</li><li> 最后通过调用 <code>KieSession</code> 的 <code>dispose()</code>方法终止会话。</li></ul><h2 id="添加Controller"><a href="#添加Controller" class="headerlink" title="添加Controller"></a>添加Controller</h2><p>创建一个名为<code>OrderDiscountController</code> 的<code>Controller</code>类，具体代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderDiscountController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">OrderDiscountService</span> orderDiscountService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/get-discount"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderDiscount</span><span class="token punctuation">></span></span> <span class="token function">getDiscount</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">OrderRequest</span> orderRequest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">OrderDiscount</span> discount <span class="token operator">=</span> orderDiscountService<span class="token punctuation">.</span><span class="token function">getDiscount</span><span class="token punctuation">(</span>orderRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>discount<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h2><p>运行 <code>spring boot</code> 应用程序并通过发送客户订单请求 JSON 来访问 REST API 端点。</p><ul><li> 对于年龄 &lt; 20 且金额 &gt; 1000 的 <code>LOYAL</code> 客户类型，我们应该根据我们定义的规则获得 <code>20%</code> 的折扣。</li></ul><p><img src="/2023/05/04/springboot-gui-ze-yin-qing-drools/drools_b88c53cc-20230504134913271.png" alt="drools_b88c53cc.png"> <img src="/2023/05/04/springboot-gui-ze-yin-qing-drools/drools_76aa6a82-20230504134913343.png" alt="drools_76aa6a82.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们通过<code>drools</code>规则引擎简单实现了这样一个折扣的业务，现在产品经理说要你加一条规则，比如地址是杭州的折扣加10%，你就直接改这个drl文件，其他时间用来摸鱼就好了，哈哈~~。更多关于<code>drools</code>的用法大家可以去官网探索。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 规则引擎 </tag>
            
            <tag> drools </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个Spring注解轻松搞定循环重试功能</title>
      <link href="/2023/04/24/yi-ge-spring-zhu-jie-qing-song-gao-ding-xun-huan-chong-shi-gong-neng/"/>
      <url>/2023/04/24/yi-ge-spring-zhu-jie-qing-song-gao-ding-xun-huan-chong-shi-gong-neng/</url>
      
        <content type="html"><![CDATA[<p>在实际工作中，重处理是一个非常常见的场景，比如:</p><ul><li> 发送消息失败。</li><li> 调用远程服务失败。</li><li> 争抢锁失败。</li></ul><p>这些错误可能是因为网络波动造成的，等待过后重处理就能成功。通常来说，会用<code>try/catch</code>，<code>while</code>循环之类的语法来进行重处理，但是这样的做法缺乏统一性，并且不是很方便，要多写很多代码。然而<code>spring-retry</code>却可以通过注解，在不入侵原有业务逻辑代码的方式下，优雅的实现重处理功能。</p><h2 id="一、-Retryable是什么？"><a href="#一、-Retryable是什么？" class="headerlink" title="一、@Retryable是什么？"></a>一、@Retryable是什么？</h2><p>spring系列的<code>spring-retry</code>是另一个实用程序模块，可以帮助我们以标准方式处理任何特定操作的重试。在<code>spring-retry</code>中，所有配置都是基于简单注释的。</p><h2 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h2><h3 id="1-POM依赖"><a href="#1-POM依赖" class="headerlink" title="1.POM依赖"></a>1.POM依赖</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span> <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>retry<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span> <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>retry<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-启用-Retryable"><a href="#2-启用-Retryable" class="headerlink" title="2.启用@Retryable"></a>2.启用<code>@Retryable</code></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableRetry</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">HelloApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-在方法上添加-Retryable"><a href="#3-在方法上添加-Retryable" class="headerlink" title="3.在方法上添加@Retryable"></a>3.在方法上添加<code>@Retryable</code></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRetryServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TestRetryService</span> <span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>maxAttempts <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>backoff <span class="token operator">=</span> <span class="token annotation punctuation">@Backoff</span><span class="token punctuation">(</span>delay <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">,</span>multiplier <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test被调用,时间："</span><span class="token operator">+</span><span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"情况不对头！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test被调用,情况对头了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来简单解释一下注解中几个参数的含义：</p><ul><li> <code>value</code> ：抛出指定异常才会重试</li><li> <code>include</code> ：和value一样，默认为空，当exclude也为空时，默认所有异常</li><li> <code>exclude</code> ：指定不处理的异常</li><li> <code>maxAttempts</code> ：最大重试次数，默认3次</li><li> <code>backoff</code> ：重试等待策略，默认使用 <code>@Backoff</code> ， <code>@Backoff</code> 的value默认为1000L，我们设置为2000L； <code>multiplier</code> （指定延迟倍数）默认为0，表示固定暂停1秒后进行重试，如果把 <code>multiplier</code> 设置为1.5，则第一次重试为2秒，第二次为3秒，第三次为4.5秒。</li><li> 另外，最新 Java 面试题整理好了，大家可以在 Java面试库 小程序在线刷题。</li></ul><p>当重试耗尽时还是失败，会出现什么情况呢？</p><p>当重试耗尽时，<code>RetryOperations</code>可以将控制传递给另一个回调，即<code>RecoveryCallback</code>。<code>Spring-Retry</code>还提供了<code>@Recover</code>注解，用于@Retryable重试失败后处理方法。如果不需要回调方法，可以直接不写回调方法，那么实现的效果是，重试次数完了后，如果还是没成功没符合业务判断，就抛出异常。</p><h3 id="4-Recover"><a href="#4-Recover" class="headerlink" title="4.@Recover"></a>4.@Recover</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Recover</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">,</span> <span class="token keyword">int</span> code<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"回调方法执行！！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//记日志到数据库 或者调用其余的方法</span>    <span class="token keyword">return</span> <span class="token number">400</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到传参里面写的是 <code>Exception e</code>，这个是作为回调的接头暗号（重试次数用完了，还是失败，我们抛出这个<code>Exception e</code>通知触发这个回调方法）。</p><p>对于<code>@Recover</code>注解的方法，需要特别注意的是：</p><ul><li> 方法的返回值必须与 <code>@Retryable</code> 方法一致</li><li> 方法的第一个参数，必须是Throwable类型的，建议是与 <code>@Retryable</code> 配置的异常一致，其他的参数，需要哪个参数，写进去就可以了（ <code>@Recover</code> 方法中有的）</li><li> 该回调方法与重试方法写在同一个实现类里面</li></ul><h3 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a>5. 注意事项</h3><ul><li> 由于是基于AOP实现，所以不支持类里自调用方法</li><li> 如果重试失败需要给 <code>@Recover</code> 注解的方法做后续处理，那这个重试的方法不能有返回值，只能是void</li><li> 方法内不能使用 <code>try catch</code> ，只能往外抛异常</li><li> <code>@Recover</code> 注解来开启重试失败后调用的方法(注意,需跟重处理方法在同一个类中)，此注解注释的方法参数一定要是 <code>@Retryable</code> 抛出的异常，否则无法识别，可以在该方法中进行日志处理。</li></ul><p>本篇主要简单介绍了Springboot中的<code>Retryable</code>的使用，主要的适用场景和注意事项，当需要重试的时候还是很有用的。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊Redis高可用</title>
      <link href="/2023/04/24/liao-liao-redis-gao-ke-yong/"/>
      <url>/2023/04/24/liao-liao-redis-gao-ke-yong/</url>
      
        <content type="html"><![CDATA[<p>我们在项目中使用redis，肯定不会是单点部署Redis服务的。因为单点部署一旦宕机，就不可用了。为了实现高可用，通常的做法是，将数据库复制多个副本以部署在不同的服务器上，其中一台挂了也可以继续提供服务。Redis 实现高可用有三种部署模式：主从模式，哨兵模式，集群模式。</p><h2 id="1-主从模式"><a href="#1-主从模式" class="headerlink" title="1.主从模式"></a>1.主从模式</h2><p>主从模式中，Redis部署了多台机器，有主节点，负责读写操作，有从节点，只负责读操作。从节点的数据来自主节点，实现原理就是主从复制机制</p><p>主从复制包括全量复制，增量复制两种。一般当slave第一次启动连接master，或者认为是第一次连接，就采用全量复制，全量复制流程如下：</p><p><img src="/2023/04/24/liao-liao-redis-gao-ke-yong/redis_c9d9d39c.png" alt="redis_c9d9d39c.png"></p><ul><li> 1.slave发送sync命令到master。</li><li> 2.master接收到SYNC命令后，执行bgsave命令，生成RDB全量文件。</li><li> 3.master使用缓冲区，记录RDB快照生成期间的所有写命令。</li><li> 4.master执行完bgsave后，向所有slave发送RDB快照文件。</li><li> 5.slave收到RDB快照文件后，载入、解析收到的快照。</li><li> 6.master使用缓冲区，记录RDB同步期间生成的所有写的命令。</li><li> 7.master快照发送完毕后，开始向slave发送缓冲区中的写命令;</li><li> 8.salve接受命令请求，并执行来自master缓冲区的写命令</li></ul><p>redis2.8版本之后，已经使用psync来替代sync，因为sync命令非常消耗系统资源，psync的效率更高。</p><p>slave与master全量同步之后，master上的数据，如果再次发生更新，就会触发增量复制。</p><p>当master节点发生数据增减时，就会触发<code>replicationFeedSalves()</code>函数，接下来在 Master节点上调用的每一个命令会使用<code>replicationFeedSlaves()</code>来同步到Slave节点。执行此函数之前呢，master节点会判断用户执行的命令是否有数据更新，如果有数据更新的话，并且slave节点不为空，就会执行此函数。这个函数作用就是：把用户执行的命令发送到所有的slave节点，让slave节点执行。流程如下：</p><p><img src="/2023/04/24/liao-liao-redis-gao-ke-yong/redis_672f896f.png" alt="redis_672f896f.png"></p><h2 id="2-哨兵模式"><a href="#2-哨兵模式" class="headerlink" title="2.哨兵模式"></a>2.哨兵模式</h2><p>主从模式中，一旦主节点由于故障不能提供服务，需要人工将从节点晋升为主节点，同时还要通知应用方更新主节点地址。显然，多数业务场景都不能接受这种故障处理方式。Redis从2.8开始正式提供了Redis Sentinel（哨兵）架构来解决这个问题。</p><p>哨兵模式，由一个或多个Sentinel实例组成的Sentinel系统，它可以监视所有的Redis主节点和从节点，并在被监视的主节点进入下线状态时，自动将下线主服务器属下的某个从节点升级为新的主节点。但是呢，一个哨兵进程对Redis节点进行监控，就可能会出现问题（单点问题），因此，可以使用多个哨兵来进行监控Redis节点，并且各个哨兵之间还会进行监控。</p><p><img src="/2023/04/24/liao-liao-redis-gao-ke-yong/redis_627a5c9c.png" alt="redis_627a5c9c.png"> Sentinel哨兵模式</p><p>简单来说，哨兵模式就三个作用：</p><ul><li> 发送命令，等待Redis服务器（包括主服务器和从服务器）返回监控其运行状态；</li><li> 哨兵监测到主节点宕机，会自动将从节点切换成主节点，然后通过发布订阅模式通知其他的从节点，修改配置文件，让它们切换主机；</li><li> 哨兵之间还会相互监控，从而达到高可用。</li></ul><p>故障切换的过程是怎样的呢</p><blockquote><p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover 操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。这样对于客户端而言，一切都是透明的。</p></blockquote><p>哨兵的工作模式如下：</p><ol><li> 每个Sentinel以每秒钟一次的频率向它所知的Master，Slave以及其他Sentinel实例发送一个 PING命令。</li><li> 如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被 Sentinel标记为主观下线。</li><li> 如果一个Master被标记为主观下线，则正在监视这个Master的所有 Sentinel 要以每秒一次的频率确认Master的确进入了主观下线状态。</li><li> 当有足够数量的 Sentinel（大于等于配置文件指定的值）在指定的时间范围内确认Master的确进入了主观下线状态， 则Master会被标记为客观下线。</li><li> 在一般情况下， 每个 Sentinel 会以每10秒一次的频率向它已知的所有Master，Slave发送 INFO 命令。</li><li> 当Master被 Sentinel 标记为客观下线时，Sentinel 向下线的 Master 的所有 Slave 发送 INFO 命令的频率会从 10 秒一次改为每秒一次</li><li> 若没有足够数量的 Sentinel同意Master已经下线， Master的客观下线状态就会被移除；若Master 重新向 Sentinel 的 PING 命令返回有效回复， Master 的主观下线状态就会被移除。</li></ol><h2 id="3-Cluster集群模式"><a href="#3-Cluster集群模式" class="headerlink" title="3. Cluster集群模式"></a>3. Cluster集群模式</h2><p>哨兵模式基于主从模式，实现读写分离，它还可以自动切换，系统可用性更高。但是它每个节点存储的数据是一样的，浪费内存，并且不好在线扩容。因此，Cluster集群应运而生，它在Redis3.0加入的，实现了Redis的分布式存储。对数据进行分片，也就是说每台Redis节点上存储不同的内容，来解决在线扩容的问题。并且，它也提供复制和故障转移的功能。</p><h3 id="3-1-Cluster集群节点的通讯"><a href="#3-1-Cluster集群节点的通讯" class="headerlink" title="3.1 Cluster集群节点的通讯"></a>3.1 Cluster集群节点的通讯</h3><p>一个Redis集群由多个节点组成，各个节点之间是怎么通信的呢？通过Gossip协议！</p><p>Redis Cluster集群通过Gossip协议进行通信，节点之前不断交换信息，交换的信息内容包括节点出现故障、新节点加入、主从节点变更信息、slot信息等等。常用的Gossip消息分为4种，分别是：ping、pong、meet、fail。</p><p><img src="/2023/04/24/liao-liao-redis-gao-ke-yong/redis_e62b67ab.png" alt="redis_e62b67ab.png"></p><blockquote><ul><li> meet消息：通知新节点加入。消息发送者通知接收者加入到当前集群，meet消息通信正常完成后，接收节点会加入到集群中并进行周期性的ping、pong消息交换。</li><li> ping消息：集群内交换最频繁的消息，集群内每个节点每秒向多个其他节点发送ping消息，用于检测节点是否在线和交换彼此状态信息。</li><li> pong消息：当接收到ping、meet消息时，作为响应消息回复给发送方确认消息正常通信。pong消息内部封装了自身状态数据。节点也可以向集群内广播自身的pong消息来通知整个集群对自身状态进行更新。</li><li> fail消息：当节点判定集群内另一个节点下线时，会向集群内广播一个fail消息，其他节点接收到fail消息之后把对应节点更新为下线状态。</li></ul></blockquote><p>特别的，每个节点是通过集群总线(cluster bus) 与其他的节点进行通信的。通讯时，使用特殊的端口号，即对外服务端口号加10000。例如如果某个node的端口号是6379，那么它与其它nodes通信的端口号是 16379。nodes 之间的通信采用特殊的二进制协议。</p><h3 id="3-2-Hash-Slot插槽算法"><a href="#3-2-Hash-Slot插槽算法" class="headerlink" title="3.2 Hash Slot插槽算法"></a>3.2 Hash Slot插槽算法</h3><p>既然是分布式存储，Cluster集群使用的分布式算法是一致性Hash嘛？并不是，而是Hash Slot插槽算法。</p><p>插槽算法把整个数据库被分为16384个slot（槽），每个进入Redis的键值对，根据key进行散列，分配到这16384插槽中的一个。使用的哈希映射也比较简单，用CRC16算法计算出一个16 位的值，再对16384取模。数据库中的每个键都属于这16384个槽的其中一个，集群中的每个节点都可以处理这16384个槽。</p><p>集群中的每个节点负责一部分的hash槽，比如当前集群有A、B、C个节点，每个节点上的哈希槽数 =16384/3，那么就有：</p><ul><li> 节点A负责0~5460号哈希槽</li><li> 节点B负责5461~10922号哈希槽</li><li> 节点C负责10923~16383号哈希槽</li></ul><h3 id="3-3-Redis-Cluster集群"><a href="#3-3-Redis-Cluster集群" class="headerlink" title="3.3 Redis Cluster集群"></a>3.3 Redis Cluster集群</h3><p>Redis Cluster集群中，需要确保16384个槽对应的node都正常工作，如果某个node出现故障，它负责的slot也会失效，整个集群将不能工作。</p><p>因此为了保证高可用，Cluster集群引入了主从复制，一个主节点对应一个或者多个从节点。当其它主节点 ping 一个主节点 A 时，如果半数以上的主节点与 A 通信超时，那么认为主节点 A 宕机了。如果主节点宕机时，就会启用从节点。</p><p>在Redis的每一个节点上，都有两个玩意，一个是插槽（slot），它的取值范围是0<del>16383。另外一个是cluster，可以理解为一个集群管理的插件。当我们存取的key到达时，Redis 会根据CRC16算法得出一个16 bit的值，然后把结果对16384取模。酱紫每个key都会对应一个编号在 0</del>16383 之间的哈希槽，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作。</p><p>虽然数据是分开存储在不同节点上的，但是对客户端来说，整个集群Cluster，被看做一个整体。客户端端连接任意一个node，看起来跟操作单实例的Redis一样。当客户端操作的key没有被分配到正确的node节点时，Redis会返回转向指令，最后指向正确的node，这就有点像浏览器页面的302 重定向跳转。</p><p><img src="/2023/04/24/liao-liao-redis-gao-ke-yong/redis_b0cdeacd.png" alt="redis_b0cdeacd.png"></p><h3 id="3-4-故障转移"><a href="#3-4-故障转移" class="headerlink" title="3.4 故障转移"></a>3.4 故障转移</h3><p>Redis集群实现了高可用，当集群内节点出现故障时，通过故障转移，以保证集群正常对外提供服务。</p><p>redis集群通过ping/pong消息，实现故障发现。这个环境包括主观下线和客观下线。</p><p>主观下线： 某个节点认为另一个节点不可用，即下线状态，这个状态并不是最终的故障判定，只能代表一个节点的意见，可能存在误判情况。</p><p><img src="/2023/04/24/liao-liao-redis-gao-ke-yong/redis_2612fd1d.png" alt="redis_2612fd1d.png"> 主观下线</p><p>客观下线： 指标记一个节点真正的下线，集群内多个节点都认为该节点不可用，从而达成共识的结果。如果是持有槽的主节点故障，需要为该节点进行故障转移。</p><ul><li> 假如节点A标记节点B为主观下线，一段时间后，节点A通过消息把节点B的状态发到其它节点，当节点C接受到消息并解析出消息体时，如果发现节点B的pfail状态时，会触发客观下线流程；</li><li> 当下线为主节点时，此时Redis Cluster集群为统计持有槽的主节点投票，看投票数是否达到一半，当下线报告统计数大于一半时，被标记为 客观下线状态。</li></ul><p>流程如下：</p><p><img src="/2023/04/24/liao-liao-redis-gao-ke-yong/redis_796dd1f0.png" alt="redis_796dd1f0.png"> 客观下线</p><p>故障恢复：故障发现后，如果下线节点的是主节点，则需要在它的从节点中选一个替换它，以保证集群的高可用。流程如下：</p><p><img src="/2023/04/24/liao-liao-redis-gao-ke-yong/redis_3630b9c2.png" alt="redis_3630b9c2.png"></p><ul><li> 资格检查：检查从节点是否具备替换故障主节点的条件。</li><li> 准备选举时间：资格检查通过后，更新触发故障选举时间。</li><li> 发起选举：到了故障选举时间，进行选举。</li><li> 选举投票：只有持有槽的 主节点才有票，从节点收集到足够的选票（大于一半），触发 替换主节点操作</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 中间件 </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Canal和RabbitMQ监听数据变更</title>
      <link href="/2023/04/04/springboot-zheng-he-canal-he-rabbitmq-jian-ting-shu-ju-bian-geng/"/>
      <url>/2023/04/04/springboot-zheng-he-canal-he-rabbitmq-jian-ting-shu-ju-bian-geng/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>我想要在SpringBoot中采用一种与业务代码解耦合的方式，来实现数据的变更记录，记录的内容是新数据，如果是更新操作还得有旧数据内容。 经过调研发现，使用Canal来监听MySQL的binlog变化可以实现这个需求，可是在监听到变化后需要马上保存变更记录，除非再做一些逻辑处理，于是我又结合了RabbitMQ来处理保存变更记录的操作。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li> 启动MySQL环境，并开启binlog</li><li> 启动Canal环境，为其创建一个MySQL账号，然后以Slave的形式连接MySQL</li><li> Canal服务模式设为TCP，用Java编写客户端代码，监听MySQL的binlog修改</li><li> Canal服务模式设为RabbitMQ，启动RabbitMQ环境，配置Canal和RabbitMQ的连接，用消息队列去接收binlog修改事件</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>环境搭建基于docker-compose：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">version<span class="token operator">:</span> <span class="token string">"3"</span>  services<span class="token operator">:</span>      mysql<span class="token operator">:</span>          network_mode<span class="token operator">:</span> mynetwork          container_name<span class="token operator">:</span> mymysql          ports<span class="token operator">:</span>              <span class="token operator">-</span> <span class="token number">3306</span><span class="token operator">:</span><span class="token number">3306</span>          restart<span class="token operator">:</span> always          volumes<span class="token operator">:</span>              <span class="token operator">-</span> <span class="token operator">/</span>etc<span class="token operator">/</span>localtime<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>localtime              <span class="token operator">-</span> <span class="token operator">/</span>home<span class="token operator">/</span>mycontainers<span class="token operator">/</span>mymysql<span class="token operator">/</span>data<span class="token operator">:</span><span class="token operator">/</span>data              <span class="token operator">-</span> <span class="token operator">/</span>home<span class="token operator">/</span>mycontainers<span class="token operator">/</span>mymysql<span class="token operator">/</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>mysql              <span class="token operator">-</span> <span class="token operator">/</span>home<span class="token operator">/</span>mycontainers<span class="token operator">/</span>mymysql<span class="token operator">/</span>conf<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql          environment<span class="token operator">:</span>              <span class="token operator">-</span> MYSQL_ROOT_PASSWORD<span class="token operator">=</span>root          command<span class="token operator">:</span>               <span class="token operator">--</span>character<span class="token operator">-</span>set<span class="token operator">-</span>server<span class="token operator">=</span>utf8mb4              <span class="token operator">--</span>collation<span class="token operator">-</span>server<span class="token operator">=</span>utf8mb4_unicode_ci              <span class="token operator">--</span>log<span class="token operator">-</span>bin<span class="token operator">=</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token operator">-</span>bin              <span class="token operator">--</span>server<span class="token operator">-</span>id<span class="token operator">=</span><span class="token number">1</span>              <span class="token operator">--</span>binlog<span class="token operator">-</span>format<span class="token operator">=</span>ROW              <span class="token operator">--</span>expire_logs_days<span class="token operator">=</span><span class="token number">7</span>              <span class="token operator">--</span>max_binlog_size<span class="token operator">=</span><span class="token number">500</span>M          image<span class="token operator">:</span> mysql<span class="token operator">:</span><span class="token number">5.7</span><span class="token number">.20</span>      rabbitmq<span class="token operator">:</span>             container_name<span class="token operator">:</span> myrabbit          ports<span class="token operator">:</span>              <span class="token operator">-</span> <span class="token number">15672</span><span class="token operator">:</span><span class="token number">15672</span>              <span class="token operator">-</span> <span class="token number">5672</span><span class="token operator">:</span><span class="token number">5672</span>          restart<span class="token operator">:</span> always          volumes<span class="token operator">:</span>              <span class="token operator">-</span> <span class="token operator">/</span>etc<span class="token operator">/</span>localtime<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>localtime              <span class="token operator">-</span> <span class="token operator">/</span>home<span class="token operator">/</span>mycontainers<span class="token operator">/</span>myrabbit<span class="token operator">/</span>rabbitmq<span class="token operator">:</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>rabbitmq          network_mode<span class="token operator">:</span> mynetwork          environment<span class="token operator">:</span>              <span class="token operator">-</span> RABBITMQ_DEFAULT_USER<span class="token operator">=</span>admin              <span class="token operator">-</span> RABBITMQ_DEFAULT_PASS<span class="token operator">=</span><span class="token number">123456</span>          image<span class="token operator">:</span> rabbitmq<span class="token operator">:</span><span class="token number">3.8</span><span class="token operator">-</span>management      canal<span class="token operator">-</span>server<span class="token operator">:</span>          container_name<span class="token operator">:</span> canal<span class="token operator">-</span>server          restart<span class="token operator">:</span> always          ports<span class="token operator">:</span>              <span class="token operator">-</span> <span class="token number">11110</span><span class="token operator">:</span><span class="token number">11110</span>              <span class="token operator">-</span> <span class="token number">11111</span><span class="token operator">:</span><span class="token number">11111</span>              <span class="token operator">-</span> <span class="token number">11112</span><span class="token operator">:</span><span class="token number">11112</span>          volumes<span class="token operator">:</span>              <span class="token operator">-</span> <span class="token operator">/</span>home<span class="token operator">/</span>mycontainers<span class="token operator">/</span>canal<span class="token operator">-</span>server<span class="token operator">/</span>conf<span class="token operator">/</span>canal<span class="token punctuation">.</span>properties<span class="token operator">:</span><span class="token operator">/</span>home<span class="token operator">/</span>admin<span class="token operator">/</span>canal<span class="token operator">-</span>server<span class="token operator">/</span>conf<span class="token operator">/</span>canal<span class="token punctuation">.</span>properties              <span class="token operator">-</span> <span class="token operator">/</span>home<span class="token operator">/</span>mycontainers<span class="token operator">/</span>canal<span class="token operator">-</span>server<span class="token operator">/</span>conf<span class="token operator">/</span>instance<span class="token punctuation">.</span>properties<span class="token operator">:</span><span class="token operator">/</span>home<span class="token operator">/</span>admin<span class="token operator">/</span>canal<span class="token operator">-</span>server<span class="token operator">/</span>conf<span class="token operator">/</span>example<span class="token operator">/</span>instance<span class="token punctuation">.</span>properties              <span class="token operator">-</span> <span class="token operator">/</span>home<span class="token operator">/</span>mycontainers<span class="token operator">/</span>canal<span class="token operator">-</span>server<span class="token operator">/</span>logs<span class="token operator">:</span><span class="token operator">/</span>home<span class="token operator">/</span>admin<span class="token operator">/</span>canal<span class="token operator">-</span>server<span class="token operator">/</span>logs          network_mode<span class="token operator">:</span> mynetwork          depends_on<span class="token operator">:</span>              <span class="token operator">-</span> mysql              <span class="token operator">-</span> rabbitmq              # <span class="token operator">-</span> canal<span class="token operator">-</span>admin          image<span class="token operator">:</span> canal<span class="token operator">/</span>canal<span class="token operator">-</span>server<span class="token operator">:</span>v1<span class="token punctuation">.</span><span class="token number">1.5</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们需要修改下Canal环境的配置文件： <code>canal.properties</code>和 <code>instance.properties</code>，映射Canal中的以下两个路径：</p><ul><li> <code>/home/admin/canal-server/conf/canal.properties</code></li></ul><p>配置文件中， <code>canal.destinations</code>意思是server上部署的instance列表，</p><ul><li> <code>/home/admin/canal-server/conf/example/instance.properties</code></li></ul><p>这里的/example是指instance即实例名，要和上面 <code>canal.properties</code>内instance配置对应，canal会为实例创建对应的文件夹，一个Client对应一个实例 以下是我们需要准备的两个配置文件具体内容：</p><h4 id="canal-properties"><a href="#canal-properties" class="headerlink" title="canal.properties"></a>canal.properties</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">################################################  ########     common argument   ############  ################################################  # tcp bind ip  canal<span class="token punctuation">.</span>ip <span class="token operator">=</span>  # register ip <span class="token keyword">to</span> <span class="token namespace">zookeeper</span>  canal<span class="token punctuation">.</span>register<span class="token punctuation">.</span>ip <span class="token operator">=</span>  canal<span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token number">11111</span>  canal<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>pull<span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token number">11112</span>  # canal instance user<span class="token operator">/</span>passwd  # canal<span class="token punctuation">.</span>user <span class="token operator">=</span> canal  # canal<span class="token punctuation">.</span>passwd <span class="token operator">=</span> E3619321C1A937C46A0D8BD1DAC39F93B27D4458    # canal admin config  # canal<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>manager <span class="token operator">=</span> canal<span class="token operator">-</span>admin<span class="token operator">:</span><span class="token number">8089</span>    # canal<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token number">11110</span>  # canal<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>user <span class="token operator">=</span> admin  # canal<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>passwd <span class="token operator">=</span> <span class="token number">6</span>BB4837EB74329105EE4568DDA7DC67ED2CA2AD9    # admin auto register 自动注册  # canal<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>register<span class="token punctuation">.</span>auto <span class="token operator">=</span> <span class="token boolean">true</span>  # 集群名，单机则不写  # canal<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>register<span class="token punctuation">.</span>cluster <span class="token operator">=</span>  # <span class="token class-name">Canal</span> <span class="token class-name">Server</span> 名字  # canal<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>register<span class="token punctuation">.</span>name <span class="token operator">=</span> canal<span class="token operator">-</span>admin    canal<span class="token punctuation">.</span>zkServers <span class="token operator">=</span>  # flush data <span class="token keyword">to</span> <span class="token namespace">zk</span>  canal<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>flush<span class="token punctuation">.</span>period <span class="token operator">=</span> <span class="token number">1000</span>  canal<span class="token punctuation">.</span>withoutNetty <span class="token operator">=</span> <span class="token boolean">false</span>  # tcp<span class="token punctuation">,</span> kafka<span class="token punctuation">,</span> rocketMQ<span class="token punctuation">,</span> rabbitMQ<span class="token punctuation">,</span> pulsarMQ  canal<span class="token punctuation">.</span>serverMode <span class="token operator">=</span> tcp  # flush meta cursor<span class="token operator">/</span>parse position <span class="token keyword">to</span> <span class="token namespace">file</span>  canal<span class="token punctuation">.</span>file<span class="token punctuation">.</span>data<span class="token punctuation">.</span>dir <span class="token operator">=</span> $<span class="token punctuation">&#123;</span>canal<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>dir<span class="token punctuation">&#125;</span>  canal<span class="token punctuation">.</span>file<span class="token punctuation">.</span>flush<span class="token punctuation">.</span>period <span class="token operator">=</span> <span class="token number">1000</span>  # memory store <span class="token class-name">RingBuffer</span> size<span class="token punctuation">,</span> should be <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">16384</span>  # memory store <span class="token class-name">RingBuffer</span> used memory unit size <span class="token punctuation">,</span> <span class="token keyword">default</span> <span class="token number">1</span>kb  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>memunit <span class="token operator">=</span> <span class="token number">1024</span>   # meory store gets mode used MEMSIZE or ITEMSIZE  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>batch<span class="token punctuation">.</span>mode <span class="token operator">=</span> MEMSIZE  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>rawEntry <span class="token operator">=</span> <span class="token boolean">true</span>    # detecing config  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>detecting<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">false</span>  #canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>detecting<span class="token punctuation">.</span>sql <span class="token operator">=</span> insert into retl<span class="token punctuation">.</span>xdual <span class="token function">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> on duplicate key update x<span class="token operator">=</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>detecting<span class="token punctuation">.</span>sql <span class="token operator">=</span> select <span class="token number">1</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>detecting<span class="token punctuation">.</span>interval<span class="token punctuation">.</span>time <span class="token operator">=</span> <span class="token number">3</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>detecting<span class="token punctuation">.</span>retry<span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token number">3</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>detecting<span class="token punctuation">.</span>heartbeatHaEnable <span class="token operator">=</span> <span class="token boolean">false</span>    # support maximum transaction size<span class="token punctuation">,</span> more than the size of the transaction will be cut into multiple transactions delivery  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>size <span class="token operator">=</span>  <span class="token number">1024</span>  # mysql fallback connected <span class="token keyword">to</span> <span class="token keyword">new</span> master should fallback times  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>fallbackIntervalInSeconds <span class="token operator">=</span> <span class="token number">60</span>    # network config  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>network<span class="token punctuation">.</span>receiveBufferSize <span class="token operator">=</span> <span class="token number">16384</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>network<span class="token punctuation">.</span>sendBufferSize <span class="token operator">=</span> <span class="token number">16384</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>network<span class="token punctuation">.</span>soTimeout <span class="token operator">=</span> <span class="token number">30</span>    # binlog filter config  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>ddl <span class="token operator">=</span> <span class="token boolean">true</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>query<span class="token punctuation">.</span>dcl <span class="token operator">=</span> <span class="token boolean">false</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>query<span class="token punctuation">.</span>dml <span class="token operator">=</span> <span class="token boolean">false</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>query<span class="token punctuation">.</span>ddl <span class="token operator">=</span> <span class="token boolean">false</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>table<span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token boolean">false</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>rows <span class="token operator">=</span> <span class="token boolean">false</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>entry <span class="token operator">=</span> <span class="token boolean">false</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>dml<span class="token punctuation">.</span>insert <span class="token operator">=</span> <span class="token boolean">false</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>dml<span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token boolean">false</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>dml<span class="token punctuation">.</span>delete <span class="token operator">=</span> <span class="token boolean">false</span>    # binlog format<span class="token operator">/</span>image check  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>binlog<span class="token punctuation">.</span>format <span class="token operator">=</span> ROW<span class="token punctuation">,</span>STATEMENT<span class="token punctuation">,</span>MIXED   canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>binlog<span class="token punctuation">.</span>image <span class="token operator">=</span> FULL<span class="token punctuation">,</span>MINIMAL<span class="token punctuation">,</span>NOBLOB    # binlog ddl isolation  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>get<span class="token punctuation">.</span>ddl<span class="token punctuation">.</span>isolation <span class="token operator">=</span> <span class="token boolean">false</span>    # parallel parser config  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>parser<span class="token punctuation">.</span>parallel <span class="token operator">=</span> <span class="token boolean">true</span>  # concurrent thread number<span class="token punctuation">,</span> <span class="token keyword">default</span> <span class="token number">60</span><span class="token operator">%</span> available processors<span class="token punctuation">,</span> suggest not <span class="token keyword">to</span> <span class="token namespace">exceed</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>parser<span class="token punctuation">.</span>parallelThreadSize <span class="token operator">=</span> <span class="token number">16</span>  # disruptor ringbuffer size<span class="token punctuation">,</span> must be power of <span class="token number">2</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>parser<span class="token punctuation">.</span>parallelBufferSize <span class="token operator">=</span> <span class="token number">256</span>    # table meta tsdb info  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>tsdb<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>tsdb<span class="token punctuation">.</span>dir <span class="token operator">=</span> $<span class="token punctuation">&#123;</span>canal<span class="token punctuation">.</span>file<span class="token punctuation">.</span>data<span class="token punctuation">.</span>dir<span class="token operator">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span>/conf<span class="token punctuation">&#125;</span><span class="token operator">/</span>$<span class="token punctuation">&#123;</span>canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>destination<span class="token operator">:</span><span class="token punctuation">&#125;</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>tsdb<span class="token punctuation">.</span>url <span class="token operator">=</span> jdbc<span class="token operator">:</span>h2<span class="token operator">:</span>$<span class="token punctuation">&#123;</span>canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>tsdb<span class="token punctuation">.</span>dir<span class="token punctuation">&#125;</span><span class="token operator">/</span>h2<span class="token punctuation">;</span>CACHE_SIZE<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>MODE<span class="token operator">=</span>MYSQL<span class="token punctuation">;</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>tsdb<span class="token punctuation">.</span>dbUsername <span class="token operator">=</span> canal  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>tsdb<span class="token punctuation">.</span>dbPassword <span class="token operator">=</span> canal  # dump snapshot interval<span class="token punctuation">,</span> <span class="token keyword">default</span> <span class="token number">24</span> hour  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>tsdb<span class="token punctuation">.</span>snapshot<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token number">24</span>  # purge snapshot expire <span class="token punctuation">,</span> <span class="token keyword">default</span> <span class="token number">360</span> <span class="token function">hour</span><span class="token punctuation">(</span><span class="token number">15</span> days<span class="token punctuation">)</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>tsdb<span class="token punctuation">.</span>snapshot<span class="token punctuation">.</span>expire <span class="token operator">=</span> <span class="token number">360</span>    ################################################  ########     destinations    ############  ################################################  canal<span class="token punctuation">.</span>destinations <span class="token operator">=</span> canal<span class="token operator">-</span>exchange  # conf root dir  canal<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>dir <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>/conf  # auto scan instance dir add<span class="token operator">/</span>remove and start<span class="token operator">/</span>stop instance  canal<span class="token punctuation">.</span>auto<span class="token punctuation">.</span>scan <span class="token operator">=</span> <span class="token boolean">true</span>  canal<span class="token punctuation">.</span>auto<span class="token punctuation">.</span>scan<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token number">5</span>  # set <span class="token keyword">this</span> value <span class="token keyword">to</span> <span class="token string">'true'</span> means that when binlog pos not found<span class="token punctuation">,</span> skip <span class="token keyword">to</span> <span class="token namespace">latest<span class="token punctuation">.</span></span>  # WARN<span class="token operator">:</span> pls keep <span class="token string">'false'</span> in production env<span class="token punctuation">,</span> or <span class="token keyword">if</span> you know what you want<span class="token punctuation">.</span>  canal<span class="token punctuation">.</span>auto<span class="token punctuation">.</span>reset<span class="token punctuation">.</span>latest<span class="token punctuation">.</span>pos<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token boolean">false</span>    canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>tsdb<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>xml <span class="token operator">=</span> classpath<span class="token operator">:</span>spring<span class="token operator">/</span>tsdb<span class="token operator">/</span>h2<span class="token operator">-</span>tsdb<span class="token punctuation">.</span>xml  #canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>tsdb<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>xml <span class="token operator">=</span> classpath<span class="token operator">:</span>spring<span class="token operator">/</span>tsdb<span class="token operator">/</span>mysql<span class="token operator">-</span>tsdb<span class="token punctuation">.</span>xml    canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>global<span class="token punctuation">.</span>mode <span class="token operator">=</span> spring  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>global<span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token boolean">false</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>global<span class="token punctuation">.</span>manager<span class="token punctuation">.</span>address <span class="token operator">=</span> $<span class="token punctuation">&#123;</span>canal<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>manager<span class="token punctuation">&#125;</span>  #canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>global<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>xml <span class="token operator">=</span> classpath<span class="token operator">:</span>spring<span class="token operator">/</span>memory<span class="token operator">-</span>instance<span class="token punctuation">.</span>xml  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>global<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>xml <span class="token operator">=</span> classpath<span class="token operator">:</span>spring<span class="token operator">/</span>file<span class="token operator">-</span>instance<span class="token punctuation">.</span>xml  #canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>global<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>xml <span class="token operator">=</span> classpath<span class="token operator">:</span>spring<span class="token operator">/</span><span class="token keyword">default</span><span class="token operator">-</span>instance<span class="token punctuation">.</span>xml    #################################################  ########         MQ <span class="token class-name">Properties</span>      ############  #################################################  # aliyun ak<span class="token operator">/</span>sk <span class="token punctuation">,</span> support rds<span class="token operator">/</span>mq  canal<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>accessKey <span class="token operator">=</span>  canal<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>secretKey <span class="token operator">=</span>  canal<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>uid<span class="token operator">=</span>    canal<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>flatMessage <span class="token operator">=</span> <span class="token boolean">true</span>  canal<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>canalBatchSize <span class="token operator">=</span> <span class="token number">50</span>  canal<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>canalGetTimeout <span class="token operator">=</span> <span class="token number">100</span>  # <span class="token class-name">Set</span> <span class="token keyword">this</span> value <span class="token keyword">to</span> <span class="token string">"cloud"</span><span class="token punctuation">,</span> <span class="token keyword">if</span> you want <span class="token keyword">open</span> <span class="token namespace">message</span> trace feature in aliyun<span class="token punctuation">.</span>  canal<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>accessChannel <span class="token operator">=</span> local    canal<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>database<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token boolean">true</span>  canal<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>send<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">30</span>  canal<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>build<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">8</span>    #################################################  ########         <span class="token class-name">RabbitMQ</span>       ############  #################################################  rabbitmq<span class="token punctuation">.</span>host <span class="token operator">=</span> myrabbit  rabbitmq<span class="token punctuation">.</span>virtual<span class="token punctuation">.</span>host <span class="token operator">=</span> <span class="token operator">/</span>  rabbitmq<span class="token punctuation">.</span>exchange <span class="token operator">=</span> canal<span class="token operator">-</span>exchange  rabbitmq<span class="token punctuation">.</span>username <span class="token operator">=</span> admin  rabbitmq<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token class-name">RabbitMQ</span>密码  rabbitmq<span class="token punctuation">.</span>deliveryMode <span class="token operator">=</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时 <code>canal.serverMode = tcp</code>，即TCP直连，我们先开启这个服务，然后手写Java客户端代码去连接它，等下再改为RabbitMQ。 通过注释可以看到，canal支持的服务模式有：tcp, kafka, rocketMQ, rabbitMQ, pulsarMQ，即主流的消息队列都支持。</p><h4 id="instance-properties"><a href="#instance-properties" class="headerlink" title="instance.properties"></a>instance.properties</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">################################################  # mysql serverId <span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token number">0.26</span><span class="token operator">+</span> will autoGen  #canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>slaveId<span class="token operator">=</span><span class="token number">123</span>    # enable gtid use <span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>gtidon<span class="token operator">=</span><span class="token boolean">false</span>    # position info  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>master<span class="token punctuation">.</span>address<span class="token operator">=</span>mymysql<span class="token operator">:</span><span class="token number">3306</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>master<span class="token punctuation">.</span>journal<span class="token punctuation">.</span>name<span class="token operator">=</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>master<span class="token punctuation">.</span>position<span class="token operator">=</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>master<span class="token punctuation">.</span>timestamp<span class="token operator">=</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>master<span class="token punctuation">.</span>gtid<span class="token operator">=</span>    # rds oss binlog  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>rds<span class="token punctuation">.</span>accesskey<span class="token operator">=</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>rds<span class="token punctuation">.</span>secretkey<span class="token operator">=</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>rds<span class="token punctuation">.</span>instanceId<span class="token operator">=</span>    # table meta tsdb info  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>tsdb<span class="token punctuation">.</span>enable<span class="token operator">=</span><span class="token boolean">true</span>  #canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>tsdb<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>canal_tsdb  #canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>tsdb<span class="token punctuation">.</span>dbUsername<span class="token operator">=</span>canal  #canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>tsdb<span class="token punctuation">.</span>dbPassword<span class="token operator">=</span>canal    #canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>standby<span class="token punctuation">.</span>address <span class="token operator">=</span>  #canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>standby<span class="token punctuation">.</span>journal<span class="token punctuation">.</span>name <span class="token operator">=</span>  #canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>standby<span class="token punctuation">.</span>position <span class="token operator">=</span>  #canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>standby<span class="token punctuation">.</span>timestamp <span class="token operator">=</span>  #canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>standby<span class="token punctuation">.</span>gtid<span class="token operator">=</span>    # username<span class="token operator">/</span>password  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>dbUsername<span class="token operator">=</span>canal  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>dbPassword<span class="token operator">=</span>canal  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>connectionCharset <span class="token operator">=</span> UTF<span class="token operator">-</span><span class="token number">8</span>  # enable druid <span class="token class-name">Decrypt</span> database password  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>enableDruid<span class="token operator">=</span><span class="token boolean">false</span>  #canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>pwdPublicKey<span class="token operator">=</span><span class="token class-name">MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALK4BUxdDltRRE5</span><span class="token operator">/</span>zXpVEVPUgunvscYFtEip3pmLlhrWpacX7y7GCMo2<span class="token operator">/</span><span class="token class-name">JM6LeHmiiNdH1FWgGCpUfircSwlWKUCAwEAAQ</span><span class="token operator">==</span>    # table regex  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>regex<span class="token operator">=</span><span class="token punctuation">.</span>*\<span class="token punctuation">.</span><span class="token punctuation">.</span>*  # table black regex  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>black<span class="token punctuation">.</span>regex<span class="token operator">=</span>mysql\<span class="token punctuation">.</span>slave_<span class="token punctuation">.</span>*  # table field <span class="token function">filter</span><span class="token punctuation">(</span>format<span class="token operator">:</span> schema1<span class="token punctuation">.</span>tableName1<span class="token operator">:</span>field1<span class="token operator">/</span>field2<span class="token punctuation">,</span>schema2<span class="token punctuation">.</span>tableName2<span class="token operator">:</span>field1<span class="token operator">/</span>field2<span class="token punctuation">)</span>  #canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>field<span class="token operator">=</span>test1<span class="token punctuation">.</span>t_product<span class="token operator">:</span>id<span class="token operator">/</span>subject<span class="token operator">/</span>keywords<span class="token punctuation">,</span>test2<span class="token punctuation">.</span>t_company<span class="token operator">:</span>id<span class="token operator">/</span>name<span class="token operator">/</span>contact<span class="token operator">/</span>ch  # table field black <span class="token function">filter</span><span class="token punctuation">(</span>format<span class="token operator">:</span> schema1<span class="token punctuation">.</span>tableName1<span class="token operator">:</span>field1<span class="token operator">/</span>field2<span class="token punctuation">,</span>schema2<span class="token punctuation">.</span>tableName2<span class="token operator">:</span>field1<span class="token operator">/</span>field2<span class="token punctuation">)</span>  #canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>black<span class="token punctuation">.</span>field<span class="token operator">=</span>test1<span class="token punctuation">.</span>t_product<span class="token operator">:</span>subject<span class="token operator">/</span>product_image<span class="token punctuation">,</span>test2<span class="token punctuation">.</span>t_company<span class="token operator">:</span>id<span class="token operator">/</span>name<span class="token operator">/</span>contact<span class="token operator">/</span>ch    # mq config  canal<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>topic<span class="token operator">=</span>canal<span class="token operator">-</span>routing<span class="token operator">-</span>key  # dynamic topic route by schema or table regex  #canal<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>dynamicTopic<span class="token operator">=</span>mytest1<span class="token punctuation">.</span>user<span class="token punctuation">,</span>topic2<span class="token operator">:</span>mytest2\<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">,</span><span class="token punctuation">.</span>*\<span class="token punctuation">.</span><span class="token punctuation">.</span>*  canal<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>partition<span class="token operator">=</span><span class="token number">0</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把这两个配置文件映射好，再次提醒，注意实例的路径名，默认是： <code>/example/instance.properties</code></p><h4 id="修改canal配置文件"><a href="#修改canal配置文件" class="headerlink" title="修改canal配置文件"></a>修改canal配置文件</h4><p>我们需要修改这个实例配置文件，去连接MySQL，确保以下的配置正确：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>master<span class="token punctuation">.</span>address<span class="token operator">=</span>mymysql<span class="token operator">:</span><span class="token number">3306</span>  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>dbUsername<span class="token operator">=</span>canal  canal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>dbPassword<span class="token operator">=</span>canal  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>mymysql是同为docker容器的MySQL环境，端口3306是指内部端口。 这里多说明一下，docker端口配置时假设为：13306:3306，那么容器对外的端口就是13306，内部是3306，在本示例中，MySQL和Canal都是容器环境，所以Canal连接MySQL需要满足以下条件：</p><ul><li> 处于同一网段（docker-compose.yml中的mynetwork）</li><li> 访问内部端口（即3306，而非13306）</li></ul><p>dbUsername和dbPassword为MySQL账号密码，为了开发方便可以使用root/root，但是我仍建议自行创建用户并分配访问权限：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># 进入docker中的mysql容器  docker exec <span class="token operator">-</span>it mymysql bash  # 进入mysql指令模式  mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>proot    # 编写<span class="token class-name">MySQL</span>语句并执行  <span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">--</span> 选择mysql  use mysql<span class="token punctuation">;</span>  <span class="token operator">--</span> 创建canal用户，账密：canal<span class="token operator">/</span>canal  create user <span class="token string">'canal'</span>@<span class="token string">'%'</span> identified by <span class="token string">'canal'</span><span class="token punctuation">;</span>  <span class="token operator">--</span> 分配权限，以及允许所有主机登录该用户  grant SELECT<span class="token punctuation">,</span> INSERT<span class="token punctuation">,</span> UPDATE<span class="token punctuation">,</span> DELETE<span class="token punctuation">,</span> <span class="token class-name">REPLICATION</span> SLAVE<span class="token punctuation">,</span> REPLICATION CLIENT on <span class="token operator">*</span><span class="token punctuation">.</span>* <span class="token keyword">to</span> <span class="token string">'canal'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span>    <span class="token operator">--</span> 刷新一下使其生效  flush privileges<span class="token punctuation">;</span>    <span class="token operator">--</span> 附带一个删除用户指令  drop user <span class="token string">'canal'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用navicat或者shell去登录canal这个用户，可以访问即创建成功</p><h2 id="整合SpringBoot-Canal实现客户端"><a href="#整合SpringBoot-Canal实现客户端" class="headerlink" title="整合SpringBoot Canal实现客户端"></a>整合SpringBoot Canal实现客户端</h2><p>Maven依赖：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>canal<span class="token punctuation">.</span>version<span class="token punctuation">></span></span><span class="token number">1.1</span><span class="token number">.5</span><span class="token operator">&lt;</span><span class="token operator">/</span>canal<span class="token punctuation">.</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>canal<span class="token operator">--</span><span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>otter<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>canal<span class="token punctuation">.</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span>$<span class="token punctuation">&#123;</span>canal<span class="token punctuation">.</span>version<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>otter<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>canal<span class="token punctuation">.</span>protocol<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span>$<span class="token punctuation">&#123;</span>canal<span class="token punctuation">.</span>version<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新增组件并启动：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>otter<span class="token punctuation">.</span>canal<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">CanalConnector</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>otter<span class="token punctuation">.</span>canal<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">CanalConnectors</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>otter<span class="token punctuation">.</span>canal<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span></span><span class="token class-name">CanalEntry</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>otter<span class="token punctuation">.</span>canal<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">CommandLineRunner</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Component</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CanalClient</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> BATCH_SIZE <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 创建链接  </span>        <span class="token class-name">CanalConnector</span> connector <span class="token operator">=</span> <span class="token class-name">CanalConnectors</span><span class="token punctuation">.</span><span class="token function">newSingleConnector</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">11111</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"canal-exchange"</span><span class="token punctuation">,</span> <span class="token string">"canal"</span><span class="token punctuation">,</span> <span class="token string">"canal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>              <span class="token comment">//打开连接  </span>            connector<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//订阅数据库表,全部表  </span>            connector<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">".*\..*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//回滚到未进行ack的地方，下次fetch的时候，可以从最后一个没有ack的地方开始拿  </span>            connector<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token comment">// 获取指定数量的数据  </span>                <span class="token class-name">Message</span> message <span class="token operator">=</span> connector<span class="token punctuation">.</span><span class="token function">getWithoutAck</span><span class="token punctuation">(</span>BATCH_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//获取批量ID  </span>                <span class="token keyword">long</span> batchId <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//获取批量的数量  </span>                <span class="token keyword">int</span> size <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//如果没有数据  </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>batchId <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                          <span class="token comment">//线程休眠2秒  </span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">&#125;</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                      <span class="token comment">//如果有数据,处理数据  </span>                    <span class="token function">printEntry</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                  <span class="token comment">//进行 batch id 的确认。确认之后，小于等于此 batchId 的 Message 都会被确认。  </span>                connector<span class="token punctuation">.</span><span class="token function">ack</span><span class="token punctuation">(</span>batchId<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>              connector<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>        <span class="token comment">/**       * 打印canal server解析binlog获得的实体类信息       */</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printEntry</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CanalEntry<span class="token punctuation">.</span>Entry</span><span class="token punctuation">></span></span> entrys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CanalEntry<span class="token punctuation">.</span>Entry</span> entry <span class="token operator">:</span> entrys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getEntryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">CanalEntry<span class="token punctuation">.</span>EntryType</span><span class="token punctuation">.</span>TRANSACTIONBEGIN <span class="token operator">||</span> entry<span class="token punctuation">.</span><span class="token function">getEntryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">CanalEntry<span class="token punctuation">.</span>EntryType</span><span class="token punctuation">.</span>TRANSACTIONEND<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token comment">//开启/关闭事务的实体类型，跳过  </span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token comment">//RowChange对象，包含了一行数据变化的所有特征  </span>            <span class="token comment">//比如isDdl 是否是ddl变更操作 sql 具体的ddl sql beforeColumns afterColumns 变更前后的数据字段等等  </span>            <span class="token class-name">CanalEntry<span class="token punctuation">.</span>RowChange</span> rowChage<span class="token punctuation">;</span>              <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                  rowChage <span class="token operator">=</span> <span class="token class-name">CanalEntry<span class="token punctuation">.</span>RowChange</span><span class="token punctuation">.</span><span class="token function">parseFrom</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getStoreValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"ERROR # parser of eromanga-event has an error , data:"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token comment">//获取操作类型：insert/update/delete类型  </span>            <span class="token class-name">CanalEntry<span class="token punctuation">.</span>EventType</span> eventType <span class="token operator">=</span> rowChage<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//打印Header信息  </span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"================》; binlog[%s:%s] , name[%s,%s] , eventType : %s"</span><span class="token punctuation">,</span>                      entry<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLogfileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLogfileOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      entry<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSchemaName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      eventType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//判断是否是DDL语句  </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rowChage<span class="token punctuation">.</span><span class="token function">getIsDdl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================》;isDdl: true,sql:"</span> <span class="token operator">+</span> rowChage<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token comment">//获取RowChange对象里的每一行数据，打印出来  </span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CanalEntry<span class="token punctuation">.</span>RowData</span> rowData <span class="token operator">:</span> rowChage<span class="token punctuation">.</span><span class="token function">getRowDatasList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token comment">//如果是删除语句  </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>eventType <span class="token operator">==</span> <span class="token class-name">CanalEntry<span class="token punctuation">.</span>EventType</span><span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token function">printColumn</span><span class="token punctuation">(</span>rowData<span class="token punctuation">.</span><span class="token function">getBeforeColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//如果是新增语句  </span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eventType <span class="token operator">==</span> <span class="token class-name">CanalEntry<span class="token punctuation">.</span>EventType</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token function">printColumn</span><span class="token punctuation">(</span>rowData<span class="token punctuation">.</span><span class="token function">getAfterColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//如果是更新的语句  </span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                      <span class="token comment">//变更前的数据  </span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------->; before"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token function">printColumn</span><span class="token punctuation">(</span>rowData<span class="token punctuation">.</span><span class="token function">getBeforeColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//变更后的数据  </span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------->; after"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token function">printColumn</span><span class="token punctuation">(</span>rowData<span class="token punctuation">.</span><span class="token function">getAfterColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printColumn</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CanalEntry<span class="token punctuation">.</span>Column</span><span class="token punctuation">></span></span> columns<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CanalEntry<span class="token punctuation">.</span>Column</span> column <span class="token operator">:</span> columns<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> column<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"    update="</span> <span class="token operator">+</span> column<span class="token punctuation">.</span><span class="token function">getUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动类Application：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseApplication</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> <span class="token class-name">CanalClient</span> canalClient<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>          canalClient<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序，此时新增或修改数据库中的数据，我们就能从客户端中监听到 不过我建议监听的信息放到消息队列中，在空闲的时候去处理，所以直接配置Canal整合RabbitMQ更好。</p><h2 id="Canal整合RabbitMQ"><a href="#Canal整合RabbitMQ" class="headerlink" title="Canal整合RabbitMQ"></a>Canal整合RabbitMQ</h2><p>修改canal.properties中的serverMode：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">canal<span class="token punctuation">.</span>serverMode <span class="token operator">=</span> rabbitMQ  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改instance.properties中的topic：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">canal<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>topic<span class="token operator">=</span>canal<span class="token operator">-</span>routing<span class="token operator">-</span>key  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后找到关于RabbitMQ的配置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">#################################################  ########         <span class="token class-name">RabbitMQ</span>       ############  #################################################  # 连接rabbit，写IP，因为同个网络下，所以可以写容器名  rabbitmq<span class="token punctuation">.</span>host <span class="token operator">=</span> myrabbit  rabbitmq<span class="token punctuation">.</span>virtual<span class="token punctuation">.</span>host <span class="token operator">=</span> <span class="token operator">/</span>  # 交换器名称，等等我们要去手动创建  rabbitmq<span class="token punctuation">.</span>exchange <span class="token operator">=</span> canal<span class="token operator">-</span>exchange  # 账密  rabbitmq<span class="token punctuation">.</span>username <span class="token operator">=</span> admin  rabbitmq<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token number">123456</span>  # 暂不支持指定端口，使用的是默认的<span class="token number">5762</span>，好在在本示例中适用  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新启动容器，进入RabbitMQ管理页面创建exchange交换器和队列queue：</p><ul><li> 新建exchange，命名为： <code>canal-exchange</code></li><li> 新建queue，命名为： <code>canal-queue</code></li><li> 绑定exchange和queue，routing-key设置为： <code>canal-routing-key</code>，这里对应上面 <code>instance.properties</code>的 <code>canal.mq.topic</code></li></ul><p>顺带一提，上面这段可以忽略，因为在SpringBoot的RabbitMQ配置中，会自动创建交换器exchange和队列queue，不过手动创建的话，可以在忽略SpringBoot的基础上，直接在RabbitMQ的管理页面上看到修改记录的消息。</p><h2 id="SpringBoot整合RabbitMQ"><a href="#SpringBoot整合RabbitMQ" class="headerlink" title="SpringBoot整合RabbitMQ"></a>SpringBoot整合RabbitMQ</h2><p>依赖：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>amqp<span class="token punctuation">.</span>version<span class="token punctuation">></span></span><span class="token number">2.3</span><span class="token number">.4</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>amqp<span class="token punctuation">.</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>消息队列<span class="token operator">--</span><span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>amqp<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span>$<span class="token punctuation">&#123;</span>amqp<span class="token punctuation">.</span>version<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.yml ：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring<span class="token operator">:</span>    rabbitmq<span class="token operator">:</span>      #    host<span class="token operator">:</span> myserverhost      host<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.0</span><span class="token number">.108</span>      port<span class="token operator">:</span> <span class="token number">5672</span>      username<span class="token operator">:</span> admin      password<span class="token operator">:</span> <span class="token class-name">RabbitMQ</span>密码      # 消息确认配置项      # 确认消息已发送到交换机<span class="token punctuation">(</span><span class="token class-name">Exchange</span><span class="token punctuation">)</span>      publisher<span class="token operator">-</span>confirm<span class="token operator">-</span>type<span class="token operator">:</span> correlated      # 确认消息已发送到队列<span class="token punctuation">(</span><span class="token class-name">Queue</span><span class="token punctuation">)</span>      publisher<span class="token operator">-</span>returns<span class="token operator">:</span> <span class="token boolean">true</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RabbitMQ配置类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@Bean</span>      <span class="token keyword">public</span> <span class="token class-name">RabbitTemplate</span> <span class="token function">rabbitTemplate</span><span class="token punctuation">(</span><span class="token class-name">ConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">RabbitTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>          template<span class="token punctuation">.</span><span class="token function">setMessageConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Jackson2JsonMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> template<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token comment">/**       * template.setMessageConverter(new Jackson2JsonMessageConverter());       * 这段和上面这行代码解决RabbitListener循环报错的问题       */</span>      <span class="token annotation punctuation">@Bean</span>      <span class="token keyword">public</span> <span class="token class-name">SimpleRabbitListenerContainerFactory</span> <span class="token function">rabbitListenerContainerFactory</span><span class="token punctuation">(</span><span class="token class-name">ConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">SimpleRabbitListenerContainerFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleRabbitListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          factory<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>          factory<span class="token punctuation">.</span><span class="token function">setMessageConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Jackson2JsonMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> factory<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Canal消息生产者：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token class-name">CanalQueue</span> <span class="token operator">=</span> <span class="token string">"canal-queue"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token class-name">CanalExchange</span> <span class="token operator">=</span> <span class="token string">"canal-exchange"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token class-name">CanalRouting</span> <span class="token operator">=</span> <span class="token string">"canal-routing-key"</span><span class="token punctuation">;</span>  <span class="token comment">/**   * Canal消息提供者，canal-server生产的消息通过RabbitMQ消息队列发送   */</span>  <span class="token annotation punctuation">@Configuration</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CanalProvider</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/**       * 队列       */</span>      <span class="token annotation punctuation">@Bean</span>      <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">canalQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">/**           * durable:是否持久化，默认false，持久化队列：会被存储在磁盘上，当消息代理重启时仍然存在；暂存队列：当前连接有效           * exclusive:默认为false，只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable           * autoDelete:是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除           */</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token class-name">RabbitConstant<span class="token punctuation">.</span>CanalQueue</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token comment">/**       * 交换机，这里使用直连交换机       */</span>      <span class="token annotation punctuation">@Bean</span>      <span class="token class-name">DirectExchange</span> <span class="token function">canalExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token class-name">RabbitConstant<span class="token punctuation">.</span>CanalExchange</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token comment">/**       * 绑定交换机和队列，并设置匹配键       */</span>      <span class="token annotation punctuation">@Bean</span>      <span class="token class-name">Binding</span> <span class="token function">bindingCanal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">canalQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">canalExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">RabbitConstant<span class="token punctuation">.</span>CanalRouting</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Canal消息消费者：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * Canal消息消费者   */</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token class-name">RabbitConstant<span class="token punctuation">.</span>CanalQueue</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CanalComsumer</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SysBackupService</span> sysBackupService<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">CanalComsumer</span><span class="token punctuation">(</span><span class="token class-name">SysBackupService</span> sysBackupService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>sysBackupService <span class="token operator">=</span> sysBackupService<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@RabbitHandler</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到canal消息："</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">boolean</span> isDdl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"isDdl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 不处理DDL事件  </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isDdl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>            <span class="token comment">// TiCDC的id，应该具有唯一性，先保存再说  </span>        <span class="token keyword">int</span> tid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// TiCDC生成该消息的时间戳，13位毫秒级  </span>        <span class="token keyword">long</span> ts <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"ts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 数据库  </span>        <span class="token class-name">String</span> database <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"database"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 表  </span>        <span class="token class-name">String</span> table <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 类型：INSERT/UPDATE/DELETE  </span>        <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 每一列的数据值  </span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 仅当type为UPDATE时才有值，记录每一列的名字和UPDATE之前的数据值  </span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> old <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"old"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 跳过sys_backup，防止无限循环  </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"sys_backup"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>            <span class="token comment">// 只处理指定类型  </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"INSERT"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>                  <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">"UPDATE"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>                  <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">"DELETE"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试一下，修改MySQL中的一条消息，Canal就会发送信息到RabbitMQ，我们就能从监听的RabbitMQ队列中得到该条消息。 </p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mq </tag>
            
            <tag> canal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务seata</title>
      <link href="/2023/03/31/fen-bu-shi-shi-wu-seata/"/>
      <url>/2023/03/31/fen-bu-shi-shi-wu-seata/</url>
      
        <content type="html"><![CDATA[<h2 id="分布式事务的产生"><a href="#分布式事务的产生" class="headerlink" title="分布式事务的产生"></a>分布式事务的产生</h2><p>我们先看看百度上对于分布式事务的定义：分布式事务是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_28b348ed.png" alt="default_name_28b348ed.png"></p><p>额~ 有点抽象，简单的画个图好理解一下，拿下单减库存、扣余额来说举例：</p><p>当系统的体量很小时，单体架构完全可以满足现有业务需求，所有的业务共用一个数据库，整个下单流程或许只用在一个方法里同一个事务下操作数据库即可。此时做到所有操作要么全部提交 或 要么全部回滚很容易。</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_6f9e7deb.png" alt="default_name_6f9e7deb.png"></p><h3 id="分库分表、SOA"><a href="#分库分表、SOA" class="headerlink" title="分库分表、SOA"></a>分库分表、SOA</h3><p>可随着业务量的不断增长，单体架构渐渐扛不住巨大的流量，此时就需要对数据库、表做 <code>分库分表</code>处理，将应用 <code>SOA</code> 服务化拆分。也就产生了订单中心、用户中心、库存中心等，由此带来的问题就是业务间相互隔离，每个业务都维护着自己的数据库，数据的交换只能进行 <code>RPC</code> 调用。</p><p>当用户再次下单时，需同时对订单库 <code>order</code>、库存库 <code>storage</code>、用户库 <code>account</code> 进行操作，可此时我们只能保证自己本地的数据一致性，无法保证调用其他服务的操作是否成功，所以为了保证整个下单流程的数据一致性，就需要分布式事务介入。</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_10be8e25.png" alt="default_name_10be8e25.png"></p><h2 id="Seata-优势"><a href="#Seata-优势" class="headerlink" title="Seata 优势"></a>Seata 优势</h2><p>实现分布式事务的方案比较多，常见的比如基于 <code>XA</code> 协议的 <code>2PC</code>、<code>3PC</code>，基于业务层的 <code>TCC</code>，还有应用消息队列 + 消息表实现的最终一致性方案，还有今天要说的 <code>Seata</code> 中间件，下边看看各个方案的优缺点。</p><h3 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a><code>2PC</code></h3><p>基于 XA 协议实现的分布式事务，XA 协议中分为两部分：事务管理器和本地资源管理器。其中本地资源管理器往往由数据库实现，比如 Oracle、MYSQL 这些数据库都实现了 XA 接口，而事务管理器则作为一个全局的调度者。</p><p>两阶段提交（<code>2PC</code>），对业务侵⼊很小，它最⼤的优势就是对使⽤⽅透明，用户可以像使⽤本地事务⼀样使⽤基于 XA 协议的分布式事务，能够严格保障事务 ACID 特性。</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_96a80b25.png" alt="default_name_96a80b25.png"></p><p>可 <code>2PC</code>的缺点也是显而易见，它是一个强一致性的同步阻塞协议，事务执⾏过程中需要将所需资源全部锁定，也就是俗称的 <code>刚性事务</code>。所以它比较适⽤于执⾏时间确定的短事务，整体性能比较差。</p><p>一旦事务协调者宕机或者发生网络抖动，会让参与者一直处于锁定资源的状态或者只有一部分参与者提交成功，导致数据的不一致。因此，在⾼并发性能⾄上的场景中，基于 XA 协议的分布式事务并不是最佳选择。</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_0d56f7ff.png" alt="default_name_0d56f7ff.png"></p><h3 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a><code>3PC</code></h3><p>三段提交（<code>3PC</code>）是二阶段提交（<code>2PC</code>）的一种改进版本 ，为解决两阶段提交协议的阻塞问题，上边提到两段提交，当协调者崩溃时，参与者不能做出最后的选择，就会一直保持阻塞锁定资源。</p><p><code>2PC</code> 中只有协调者有超时机制，<code>3PC</code> 在协调者和参与者中都引入了超时机制，协调者出现故障后，参与者就不会一直阻塞。而且在第一阶段和第二阶段中又插入了一个准备阶段（如下图，看着有点啰嗦），保证了在最后提交阶段之前各参与节点的状态是一致的。</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_a7c09776.png" alt="default_name_a7c09776.png"></p><p>虽然 <code>3PC</code> 用超时机制，解决了协调者故障后参与者的阻塞问题，但与此同时却多了一次网络通信，性能上反而变得更差，也不太推荐。</p><h3 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h3><p>所谓的 <code>TCC</code> 编程模式，也是两阶段提交的一个变种，不同的是 <code>TCC</code> 为在业务层编写代码实现的两阶段提交。<code>TCC</code> 分别指 <code>Try</code>、<code>Confirm</code>、<code>Cancel</code> ，一个业务操作要对应的写这三个方法。</p><p>以下单扣库存为例，<code>Try</code> 阶段去占库存，<code>Confirm</code> 阶段则实际扣库存，如果库存扣减失败 <code>Cancel</code> 阶段进行回滚，释放库存。</p><p>TCC 不存在资源阻塞的问题，因为每个方法都直接进行事务的提交，一旦出现异常通过则 <code>Cancel</code> 来进行回滚补偿，这也就是常说的补偿性事务。</p><p>原本一个方法，现在却需要三个方法来支持，可以看到 TCC 对业务的侵入性很强，而且这种模式并不能很好地被复用，会导致开发量激增。还要考虑到网络波动等原因，为保证请求一定送达都会有重试机制，所以考虑到接口的幂等性。</p><h3 id="消息事务（最终一致性）"><a href="#消息事务（最终一致性）" class="headerlink" title="消息事务（最终一致性）"></a>消息事务（最终一致性）</h3><p>消息事务其实就是基于消息中间件的两阶段提交，将本地事务和发消息放在同一个事务里，保证本地操作和发送消息同时成功。下单扣库存原理图：</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_5cb4c0ed.png" alt="default_name_5cb4c0ed.png"></p><ul><li> 订单系统向 <code>MQ</code> 发送一条预备扣减库存消息， <code>MQ</code> 保存预备消息并返回成功 <code>ACK</code></li><li> 接收到预备消息执行成功 <code>ACK</code>，订单系统执行本地下单操作，为防止消息发送成功而本地事务失败，订单系统会实现 <code>MQ</code> 的回调接口，其内不断的检查本地事务是否执行成功，如果失败则 <code>rollback</code> 回滚预备消息；成功则对消息进行最终 <code>commit</code> 提交。</li><li> 库存系统消费扣减库存消息，执行本地事务，如果扣减失败，消息会重新投，一旦超出重试次数，则本地表持久化失败消息，并启动定时任务做补偿。</li></ul><p>基于消息中间件的两阶段提交方案，通常用在高并发场景下使用，牺牲数据的强一致性换取性能的大幅提升，不过实现这种方式的成本和复杂度是比较高的，还要看实际业务情况。</p><h3 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h3><p><code>Seata</code> 也是从两段提交演变而来的一种分布式事务解决方案，提供了 <code>AT</code>、<code>TCC</code>、<code>SAGA</code> 和 <code>XA</code> 等事务模式，这里重点介绍 <code>AT</code>模式。</p><p>既然 <code>Seata</code> 是两段提交，那我们看看它在每个阶段都做了点啥？下边我们还以下单扣库存、扣余额举例。</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_db82ee8f.png" alt="default_name_db82ee8f.png"></p><p>先介绍 <code>Seata</code> 分布式事务的几种角色：</p><ul><li> <code>Transaction Coordinator(TC)</code>: 全局事务协调者，用来协调全局事务和各个分支事务（不同服务）的状态， 驱动全局事务和各个分支事务的回滚或提交。</li><li> <code>Transaction Manager™</code>: 事务管理者，业务层中用来开启/提交/回滚一个整体事务（在调用服务的方法中用注解开启事务）。</li><li> <code>Resource Manager(RM)</code>: 资源管理者，一般指业务数据库代表了一个分支事务（<code>Branch Transaction</code>），管理分支事务与 <code>TC</code> 进行协调注册分支事务并且汇报分支事务的状态，驱动分支事务的提交或回滚。</li></ul><blockquote><p>Seata 实现分布式事务，设计了一个关键角色 <code>UNDO_LOG</code> （回滚日志记录表），我们在每个应用分布式事务的业务库中创建这张表，这个表的核心作用就是，将业务数据在更新前后的数据镜像组织成回滚日志，备份在 <code>UNDO_LOG</code> 表中，以便业务异常能随时回滚。</p></blockquote><h3 id="第一个阶段"><a href="#第一个阶段" class="headerlink" title="第一个阶段"></a>第一个阶段</h3><p>比如：下边我们更新 <code>user</code> 表的 <code>name</code> 字段。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">update user set name <span class="token operator">=</span> <span class="token string">'小富最帅'</span> where name <span class="token operator">=</span> <span class="token string">'程序员内点事'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先 Seata 的 <code>JDBC</code> 数据源代理通过对业务 SQL 解析，提取 SQL 的元数据，也就是得到 SQL 的类型（<code>UPDATE</code>），表（<code>user</code>），条件（<code>where name = &#39;程序员内点事&#39;</code>）等相关的信息。</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_ac43d99a.png" alt="default_name_ac43d99a.png"> 第一个阶段的流程图</p><p>先查询数据前镜像，根据解析得到的条件信息，生成查询语句，定位一条数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">select  name from user where name <span class="token operator">=</span> <span class="token string">'程序员内点事'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_11709096.png" alt="default_name_11709096.png"> 数据前镜像</p><p>紧接着执行业务 SQL，根据前镜像数据主键查询出后镜像数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">select name from user where id <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_7affcfdd.png" alt="default_name_7affcfdd.png"> 数据后镜像</p><p>把业务数据在更新前后的数据镜像组织成回滚日志，将业务数据的更新和回滚日志在同一个本地事务中提交，分别插入到业务表和 <code>UNDO_LOG</code> 表中。</p><p>回滚记录数据格式如下：包括 <code>afterImage</code> 后镜像、<code>beforeImage</code> 前镜像、 <code>branchId</code> 分支事务ID、<code>xid</code> 全局事务ID</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">&#123;</span>    <span class="token string">"branchId"</span><span class="token operator">:</span><span class="token number">641789253</span><span class="token punctuation">,</span>    <span class="token string">"xid"</span><span class="token operator">:</span><span class="token string">"xid:xxx"</span><span class="token punctuation">,</span>    <span class="token string">"undoItems"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"afterImage"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token string">"rows"</span><span class="token operator">:</span><span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span>                        <span class="token string">"fields"</span><span class="token operator">:</span><span class="token punctuation">[</span>                            <span class="token punctuation">&#123;</span>                                <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"id"</span><span class="token punctuation">,</span>                                <span class="token string">"type"</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>                                <span class="token string">"value"</span><span class="token operator">:</span><span class="token number">1</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">"tableName"</span><span class="token operator">:</span><span class="token string">"product"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string">"beforeImage"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token string">"rows"</span><span class="token operator">:</span><span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span>                        <span class="token string">"fields"</span><span class="token operator">:</span><span class="token punctuation">[</span>                            <span class="token punctuation">&#123;</span>                                <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"id"</span><span class="token punctuation">,</span>                                <span class="token string">"type"</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>                                <span class="token string">"value"</span><span class="token operator">:</span><span class="token number">1</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">"tableName"</span><span class="token operator">:</span><span class="token string">"product"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string">"sqlType"</span><span class="token operator">:</span><span class="token string">"UPDATE"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以保证，任何提交的业务数据的更新一定有相应的回滚日志。</p><blockquote><p>在本地事务提交前，各分支事务需向 <code>全局事务协调者</code> TC 注册分支 ( <code>Branch Id</code>) ，为要修改的记录申请 全局锁 ，要为这条数据加锁，利用 <code>SELECT FOR UPDATE</code> 语句。而如果一直拿不到锁那就需要回滚本地事务。TM 开启事务后会生成全局唯一的 <code>XID</code>，会在各个调用的服务间进行传递。</p></blockquote><p>有了这样的机制，本地事务分支（<code>Branch Transaction</code>）便可以在全局事务的第一阶段提交，并马上释放本地事务锁定的资源。相比于传统的 <code>XA</code> 事务在第二阶段释放资源，<code>Seata</code> 降低了锁范围提高效率，即使第二阶段发生异常需要回滚，也可以快速 从<code>UNDO_LOG</code> 表中找到对应回滚数据并反解析成 SQL 来达到回滚补偿。</p><p>最后本地事务提交，业务数据的更新和前面生成的 UNDO LOG 数据一并提交，并将本地事务提交的结果上报给全局事务协调者 TC。</p><h3 id="第二个阶段"><a href="#第二个阶段" class="headerlink" title="第二个阶段"></a>第二个阶段</h3><p>第二阶段是根据各分支的决议做提交或回滚：</p><p>如果决议是全局提交，此时各分支事务已提交并成功，这时 <code>全局事务协调者（TC）</code> 会向分支发送第二阶段的请求。收到 TC 的分支提交请求，该请求会被放入一个异步任务队列中，并马上返回提交成功结果给 TC。异步队列中会异步和批量地根据 <code>Branch ID</code> 查找并删除相应 <code>UNDO LOG</code> 回滚记录。</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_be75c1e2.png" alt="default_name_be75c1e2.png"></p><p>如果决议是全局回滚，过程比全局提交麻烦一点，<code>RM</code> 服务方收到 <code>TC</code> 全局协调者发来的回滚请求，通过 <code>XID</code> 和 <code>Branch ID</code> 找到相应的回滚日志记录，通过回滚记录生成反向的更新 SQL 并执行，以完成分支的回滚。</p><blockquote><p>注意：这里删除回滚日志记录操作，一定是在本地业务事务执行之后</p></blockquote><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_3dfaeff7.png" alt="default_name_3dfaeff7.png"></p><p>上边说了几种分布式事务各自的优缺点，下边实践一下分布式事务中间 Seata 感受一下。</p><h2 id="Seata-实践"><a href="#Seata-实践" class="headerlink" title="Seata 实践"></a>Seata 实践</h2><p>Seata 是一个需独立部署的中间件，所以先搭 Seata Server，这里以最新的 <code>seata-server-1.4.0</code> 版本为例，下载地址：<code>https://seata.io/en-us/blog/download.html</code></p><p>解压后的文件我们只需要关心 <code>\seata\conf</code> 目录下的 <code>file.conf</code> 和 <code>registry.conf</code> 文件。</p><h3 id="Seata-Server"><a href="#Seata-Server" class="headerlink" title="Seata Server"></a>Seata Server</h3><h3 id="file-conf"><a href="#file-conf" class="headerlink" title="file.conf"></a>file.conf</h3><p><code>file.conf</code> 文件用于配置持久化事务日志的模式，目前提供 <code>file</code>、<code>db</code>、<code>redis</code> 三种方式。</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_6f713293.png" alt="default_name_6f713293.png"> file.conf 文件配置</p><p>注意：在选择 <code>db</code> 方式后，需要在对应数据库创建 <code>globalTable</code>（持久化全局事务）、<code>branchTable</code>（持久化各提交分支的事务）、 <code>lockTable</code>（持久化各分支锁定资源事务）三张表。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">--</span> the table <span class="token keyword">to</span> <span class="token namespace">store</span> <span class="token class-name">GlobalSession</span> data<span class="token operator">--</span> 持久化全局事务CREATE TABLE IF NOT EXISTS `global_table`<span class="token punctuation">(</span>    `xid`                       <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>    `transaction_id`            BIGINT<span class="token punctuation">,</span>    `status`                    TINYINT      <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>    `application_id`            <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    `transaction_service_group` <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    `transaction_name`          <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    `timeout`                   INT<span class="token punctuation">,</span>    `begin_time`                BIGINT<span class="token punctuation">,</span>    `application_data`          <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    `gmt_create`                DATETIME<span class="token punctuation">,</span>    `gmt_modified`              DATETIME<span class="token punctuation">,</span>    <span class="token class-name">PRIMARY</span> KEY <span class="token punctuation">(</span>`xid`<span class="token punctuation">)</span><span class="token punctuation">,</span>    KEY `idx_gmt_modified_status` <span class="token punctuation">(</span>`gmt_modified`<span class="token punctuation">,</span> `status`<span class="token punctuation">)</span><span class="token punctuation">,</span>    KEY `idx_transaction_id` <span class="token punctuation">(</span>`transaction_id`<span class="token punctuation">)</span><span class="token punctuation">)</span> ENGINE <span class="token operator">=</span> <span class="token class-name">InnoDB</span>  <span class="token class-name">DEFAULT</span> CHARSET <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token operator">--</span> the table <span class="token keyword">to</span> <span class="token namespace">store</span> <span class="token class-name">BranchSession</span> data<span class="token operator">--</span> 持久化各提交分支的事务CREATE TABLE IF NOT EXISTS `branch_table`<span class="token punctuation">(</span>    `branch_id`         BIGINT       <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>    `xid`               <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>    `transaction_id`    BIGINT<span class="token punctuation">,</span>    `resource_group_id` <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    `resource_id`       <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    `branch_type`       <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    `status`            TINYINT<span class="token punctuation">,</span>    `client_id`         <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    `application_data`  <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    `gmt_create`        <span class="token function">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    `gmt_modified`      <span class="token function">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">PRIMARY</span> KEY <span class="token punctuation">(</span>`branch_id`<span class="token punctuation">)</span><span class="token punctuation">,</span>    KEY `idx_xid` <span class="token punctuation">(</span>`xid`<span class="token punctuation">)</span><span class="token punctuation">)</span> ENGINE <span class="token operator">=</span> <span class="token class-name">InnoDB</span>  <span class="token class-name">DEFAULT</span> CHARSET <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token operator">--</span> the table <span class="token keyword">to</span> <span class="token namespace">store</span> lock data<span class="token operator">--</span> 持久化每个分支锁表事务CREATE TABLE IF NOT EXISTS `lock_table`<span class="token punctuation">(</span>    `row_key`        <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>    `xid`            <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    `transaction_id` BIGINT<span class="token punctuation">,</span>    `branch_id`      BIGINT       <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>    `resource_id`    <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    `table_name`     <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    `pk`             <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    `gmt_create`     DATETIME<span class="token punctuation">,</span>    `gmt_modified`   DATETIME<span class="token punctuation">,</span>    <span class="token class-name">PRIMARY</span> KEY <span class="token punctuation">(</span>`row_key`<span class="token punctuation">)</span><span class="token punctuation">,</span>    KEY `idx_branch_id` <span class="token punctuation">(</span>`branch_id`<span class="token punctuation">)</span><span class="token punctuation">)</span> ENGINE <span class="token operator">=</span> <span class="token class-name">InnoDB</span>  <span class="token class-name">DEFAULT</span> CHARSET <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="registry-conf"><a href="#registry-conf" class="headerlink" title="registry.conf"></a>registry.conf</h3><p><code>registry.conf</code> 文件设置 注册中心 和 配置中心：</p><p>目前注册中心支持 <code>nacos</code> 、<code>eureka</code>、<code>redis</code>、<code>zk</code>、<code>consul</code>、<code>etcd3</code>、<code>sofa</code> 七种，这里我使用的 <code>eureka</code>作为注册中心 ；配置中心支持 <code>nacos</code> 、<code>apollo</code>、<code>zk</code>、<code>consul</code>、<code>etcd3</code> 五种方式。</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_7cc17e15.png" alt="default_name_7cc17e15.png"> registry.conf 文件配置</p><p>配置完以后在 <code>\seata\bin</code> 目录下启动 <code>seata-server</code> 即可，到这 <code>Seata</code> 的服务端就搭建好了。</p><h3 id="Seata-Client"><a href="#Seata-Client" class="headerlink" title="Seata Client"></a>Seata Client</h3><p><code>Seata Server</code> 环境搭建完，接下来我们新建三个服务 <code>order-server</code>（下单服务）、<code>storage-server</code>（扣减库存服务）、<code>account-server</code>（账户金额服务），分别服务注册到 <code>eureka</code>。</p><p>每个服务的大体核心配置如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring<span class="token operator">:</span>    application<span class="token operator">:</span>        name<span class="token operator">:</span> storage<span class="token operator">-</span>server    cloud<span class="token operator">:</span>        alibaba<span class="token operator">:</span>            seata<span class="token operator">:</span>                tx<span class="token operator">-</span>service<span class="token operator">-</span>group<span class="token operator">:</span> my_test_tx_group    datasource<span class="token operator">:</span>        driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span>        url<span class="token operator">:</span> jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">47.93</span><span class="token number">.6</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>seat<span class="token operator">-</span>storage        username<span class="token operator">:</span> root        password<span class="token operator">:</span> root# eureka 注册中心eureka<span class="token operator">:</span>    client<span class="token operator">:</span>        serviceUrl<span class="token operator">:</span>            defaultZone<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>$<span class="token punctuation">&#123;</span>eureka<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>hostname<span class="token punctuation">&#125;</span><span class="token operator">:</span><span class="token number">8761</span><span class="token operator">/</span>eureka<span class="token operator">/</span>    instance<span class="token operator">:</span>        hostname<span class="token operator">:</span> <span class="token number">47.93</span><span class="token number">.6</span><span class="token number">.5</span>        prefer<span class="token operator">-</span>ip<span class="token operator">-</span>address<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>业务大致流程：用户发起下单请求，本地 order 订单服务创建订单记录，并通过 <code>RPC</code> 远程调用 <code>storage</code> 扣减库存服务和 <code>account</code> 扣账户余额服务，只有三个服务同时执行成功，才是一个完整的下单流程。如果某个服执行失败，则其他服务全部回滚。</p><p>Seata 对业务代码的侵入性非常小，代码中使用只需用 <code>@GlobalTransactional</code> 注解开启一个全局事务即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@GlobalTransactional</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"create-order"</span><span class="token punctuation">,</span> rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> xid <span class="token operator">=</span> <span class="token class-name">RootContext</span><span class="token punctuation">.</span><span class="token function">getXID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->交易开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//本地方法</span>    orderDao<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//远程方法 扣减库存</span>    storageApi<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//远程方法 扣减账户余额</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->扣减账户开始order中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    accountApi<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->扣减账户结束order中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->交易结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"全局事务 xid： &#123;&#125;"</span><span class="token punctuation">,</span> xid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前边说过 Seata AT 模式实现分布式事务，必须在相关的业务库中创建 <code>undo_log</code> 表来存数据回滚日志，表结构如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">--</span> <span class="token keyword">for</span> AT mode you must <span class="token keyword">to</span> <span class="token namespace">init</span> <span class="token keyword">this</span> sql <span class="token keyword">for</span> you business database<span class="token punctuation">.</span> the seata server not need it<span class="token punctuation">.</span>CREATE TABLE IF NOT EXISTS `undo_log`<span class="token punctuation">(</span>    `id`            <span class="token function">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>   NOT NULL AUTO_INCREMENT COMMENT <span class="token string">'increment id'</span><span class="token punctuation">,</span>    `branch_id`     <span class="token function">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>   NOT NULL COMMENT <span class="token string">'branch transaction id'</span><span class="token punctuation">,</span>    `xid`           <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> NOT NULL COMMENT <span class="token string">'global transaction id'</span><span class="token punctuation">,</span>    `context`       <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> NOT NULL COMMENT <span class="token string">'undo_log context,such as serialization'</span><span class="token punctuation">,</span>    `rollback_info` LONGBLOB     NOT NULL COMMENT <span class="token string">'rollback info'</span><span class="token punctuation">,</span>    `log_status`    <span class="token function">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>      NOT NULL COMMENT <span class="token string">'0:normal status,1:defense status'</span><span class="token punctuation">,</span>    `log_created`   DATETIME     NOT NULL COMMENT <span class="token string">'create datetime'</span><span class="token punctuation">,</span>    `log_modified`  DATETIME     NOT NULL COMMENT <span class="token string">'modify datetime'</span><span class="token punctuation">,</span>    <span class="token class-name">PRIMARY</span> KEY <span class="token punctuation">(</span>`id`<span class="token punctuation">)</span><span class="token punctuation">,</span>    UNIQUE KEY `ux_undo_log` <span class="token punctuation">(</span>`xid`<span class="token punctuation">,</span> `branch_id`<span class="token punctuation">)</span><span class="token punctuation">)</span> ENGINE <span class="token operator">=</span> <span class="token class-name">InnoDB</span>  AUTO_INCREMENT <span class="token operator">=</span> <span class="token number">1</span>  <span class="token class-name">DEFAULT</span> CHARSET <span class="token operator">=</span> utf8 COMMENT <span class="token operator">=</span><span class="token string">'AT transaction mode undo table'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>到这环境搭建的工作就完事了，完整案例会在后边贴出 <code>GitHub</code> 地址，就不在这占用篇幅了。</p></blockquote><h2 id="测试-Seata"><a href="#测试-Seata" class="headerlink" title="测试 Seata"></a>测试 Seata</h2><p>项目中的服务调用过程如下图：</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_78e76e27.png" alt="default_name_78e76e27.png"> 服务调用过程</p><p>启动各个服务后，我们直接请求下单接口看看效果，只要 <code>order</code> 订单表创建记录成功，<code>storage</code> 库存表 <code>used</code> 字段数量递增、<code>account</code> 余额表 <code>used</code> 字段数量递增则表示下单流程成功。</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_4d9ed111.png" alt="default_name_4d9ed111.png"> 原始数据</p><p>请求后正向流程是没问题的，数据和预想的一样</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_14eadf22.png" alt="default_name_14eadf22.png"> 下单数据</p><p>而且发现 <code>TM</code> 事务管理者 <code>order-server</code> 服务的控制台也打印出了两阶段提交的日志</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_f0522b59.png" alt="default_name_f0522b59.png"> 控制台两次提交</p><p>那么再看看如果其中一个服务异常，会不会正常回滚呢？在 <code>account-server</code> 服务中模拟超时异常，看能否实现全局事务回滚。</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_2ae0e6ff.png" alt="default_name_2ae0e6ff.png"> 全局事务回滚</p><p>发现数据全没执行成功，说明全局事务回滚也成功了</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_a6024f66.png" alt="default_name_a6024f66.png"></p><p>那看一下 <code>undo_log</code> 回滚记录表的变化情况，由于 <code>Seata</code> 删除回滚日志的速度很快，所以要想在表中看见回滚日志，必须要在某一个服务上打断点才看的更明显。</p><p><img src="/2023/03/31/fen-bu-shi-shi-wu-seata/default_name_5f239d72.png" alt="default_name_5f239d72.png"> 回滚记录</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上边简单介绍了 <code>2PC</code>、<code>3PC</code>、<code>TCC</code>、<code>MQ</code>、<code>Seata</code> 这五种分布式事务解决方案，还详细的实践了 <code>Seata</code> 中间件。但不管我们选哪一种方案，在项目中应用都要谨慎再谨慎，除特定的数据强一致性场景外，能不用尽量就不要用，因为无论它们性能如何优越，一旦项目套上分布式事务，整体效率会几倍的下降，在高并发情况下弊端尤为明显。</p><blockquote><p>本案例 github 地址：<a href="https://github.com/yangxiaodg/Springboot-Notebook.git">https://github.com/yangxiaodg/Springboot-Notebook.git</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 分布式事务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅写代码</title>
      <link href="/2023/03/23/ru-he-you-ya-xie-dai-ma/"/>
      <url>/2023/03/23/ru-he-you-ya-xie-dai-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="1-为什么要保持代码整洁"><a href="#1-为什么要保持代码整洁" class="headerlink" title="1.为什么要保持代码整洁?"></a>1.为什么要保持代码整洁?</h2><p>不整洁的代码随着时间的增加而增加时,生产力会随之降低. 导致的结果就是:</p><ul><li> 代码不易扩展或扩展容易引发其他问题</li><li> 程序崩溃</li><li> 加班</li><li> 增加公司成本(加人) 甚至可能造成公司倒闭 一图胜千言</li></ul><p><img src="/2023/03/23/ru-he-you-ya-xie-dai-ma/default_name_d7a6e176.png" alt="default_name_d7a6e176.png"></p><h3 id="1-1-所以从一开始就要保持整洁"><a href="#1-1-所以从一开始就要保持整洁" class="headerlink" title="1.1 所以从一开始就要保持整洁"></a>1.1 所以从一开始就要保持整洁</h3><p>所以在一开始就要写整洁的代码,如果有不整洁的代码就要及时的整改. 绝对不要有以后再改,以后再说的想法， 因为！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">later equal never<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>想想是不是这个道理,你有多少以后再说、以后再改的东西都抛诸脑后了.</p><p>如果是一定要做的事情,那就趁早做!</p><h3 id="1-2-如何写出整洁的代码"><a href="#1-2-如何写出整洁的代码" class="headerlink" title="1.2 如何写出整洁的代码?"></a>1.2 如何写出整洁的代码?</h3><p>那么现在的问题就是,怎样的代码才算是整洁的代码呢:</p><ul><li><p>可读性要高: 代码要像散文一样优雅易读,见码知意</p></li><li><p>拒绝重复代码</p></li><li><p>满足设计模式原则</p></li><li><p>单一职责</p><p>开闭原则</p><p>里氏替换原则</p><p>依赖倒转原则</p><p>接口隔离原则</p><p>迪米特法则</p><p>合成复用法则</p></li></ul><h2 id="2-命名"><a href="#2-命名" class="headerlink" title="2.命名"></a>2.命名</h2><p>好的命名可提高代码的可读性,让人见码知意, 降低理解成本,提高效率, 减少加班.</p><h3 id="2-1-不好的命名方式"><a href="#2-1-不好的命名方式" class="headerlink" title="2.1 不好的命名方式"></a>2.1 不好的命名方式</h3><ol><li> 没有任何意义的命名方式</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在我们有一个动物的接口, 里面有一个方法abc(),看了让人一头雾水, 调用这个方法的人也完全不知道这个方法是干什么的,因为他的命名毫无意义</p><p>有意义的命名方式:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们将方法名命名为cry(喊叫,呼喊),调用的人就知道这个方法的作用是什么了.</p><p>所以命名一定要有意义且让人见码知意.</p><ol><li> 命名前后不一致 这种情况体现在明明是同一行为,但是却有不同的命名,前后不一致,让人造成混淆.</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AlertAll</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Student</span> <span class="token function">findOneById</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">queryAllStudent</span><span class="token punctuation">(</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面两个方法都是查询 xxx, 但是命名一会叫 query 一会叫 find,这种情况应该加以规范,保持一致, 修改后:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AlertAll</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Student</span> <span class="token function">findOneById</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">findAll</span><span class="token punctuation">(</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li> 命名冗余 体现在命名有很多没必要的成分在里面, 并且这些”废话”并不能帮助区分它们的区别, 例如在变量命名中添加了 Variable 这个词, 在表名中添加了 Table 这个词. 所以命名中不要出现冗余的单词 , 并且提前约定好命名的规范.</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取单个对象的方法用get做前缀</span><span class="token function">getXxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取多个对象用list做前缀</span><span class="token function">listXxxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-类"><a href="#3-类" class="headerlink" title="3.类"></a>3.类</h2><p>整洁的类应满足一下内容:</p><ul><li> 单一职责</li><li> 开闭原则</li><li> 高内聚性</li></ul><h3 id="3-1单一职责"><a href="#3-1单一职责" class="headerlink" title="3.1单一职责"></a>3.1单一职责</h3><p>类应该短小,类或模块应有且只有一条加以修改的理由 , 如果一个类过于庞大的话,那么说明它承担的职责过多了.</p><p>优点:</p><ul><li> 降低类的复杂度</li><li> 提高类的可读性</li><li> 提高系统的可维护性</li><li> 降低变更引起的风险</li></ul><blockquote><p>如何判定类是否足够短小?</p></blockquote><p>通过计算类的职责来判断是否够短小,类的名称描述其全责, 如果无法为某个类命以准确的名称, 这个类大概就太长了, 类名越含糊,可能拥有越多的职责.</p><p>职责过多的例子,可以看到以下类有两个职责:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Sql</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 操作SQL的职责</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 统计SQL操作的职责</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">countInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将统计的职责抽取到另一个类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CountSql</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">countInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-开闭原则"><a href="#3-2-开闭原则" class="headerlink" title="3.2 开闭原则"></a>3.2 开闭原则</h3><p>开闭原则: 面向修改关闭, 面向扩展开放.</p><p>面向修改关闭意味着增加新的逻辑不会修改原有的代码,降低了出错的可能性.</p><p>面向扩展开放则是提高了代码的可扩展性,可很容易的增加新的代码逻辑.</p><p>不满足开闭原则的例子:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Sql</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们现在要新增查询的操作,就需要修改Sql这个类,没有做到面向修改关闭</p><p>重构后:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Sql</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateSql</span> <span class="token keyword">extends</span> <span class="token class-name">Sql</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@java.lang.Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 省略实现</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpdateSql</span> <span class="token keyword">extends</span> <span class="token class-name">Sql</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 省略实现</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们要增加删除方法时可以很容易的扩展.</p><p>使用大量的短小的类看似比使用少量庞大的类增加了工作量(增加了更多的类),但是真的是这样吗? 这里有一个很好的类比:</p><blockquote><p>你是想把工具归置到有许多抽屉、每个抽屉中装有定义和标记良好的组件的工具箱呢, 还是想要少数几个能随便把所有东西扔进去的抽屉?</p></blockquote><p>最终的结论:</p><blockquote><p>系统应该由许多短小的类而不是少量巨大的类组成,每个小类封装一个权责,只有一个修改的原因,并与少数其他类一起协同达成期望的系统行为.</p></blockquote><h3 id="3-3-内聚"><a href="#3-3-内聚" class="headerlink" title="3.3 内聚"></a>3.3 内聚</h3><p>方法操作的变量越多,就越粘聚到类上. 如果一个类中的每个变量都被每个方法所使用, 则该类具有最大的内聚性. 我们应该将类的内聚性保持在较高的位置. 内聚性高意味着方法和变量互相依赖, 互相结合成一个逻辑整体.</p><blockquote><p>为什么要保持高内聚? 保持内聚性就会得到许多短小的类,就越满足单一职责.</p></blockquote><blockquote><p>内聚性低怎么办? 如果类的内聚性就不够高,就将原有的类拆分为新的类和方法.</p></blockquote><h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4.函数"></a>4.函数</h2><p>要想让函数变得整洁,应保证:</p><ul><li> 只做一件事</li><li> 好的命名</li><li> 整洁的参数</li><li> 注意返回内容</li></ul><h3 id="4-1-只做一件事"><a href="#4-1-只做一件事" class="headerlink" title="4.1 只做一件事"></a>4.1 只做一件事</h3><p>what? 函数的第一规则是短小 第二规则是更短小 短小到只做一件事情. (没错和类的原则很像)</p><p>why? 函数越短小,越能满足单一职责.</p><p>how? 以下是重构前的代码, 这个方法有三个职责,并且该方法很长达到了80+50+5 = 135行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PicService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 校验图片的方法 伪代码80行</span>        <span class="token comment">// 压缩图片的方法 伪代码50行</span>        <span class="token comment">// 返回成功或失败标识 0,1 伪代码5行</span>        <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原有的upload方法做了很多的事情, 重构后只做了一件事情: 把大一些的概念(换言之,函数的名称)拆分为另一抽象层上的一系列步骤:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">// 校验图片的方法</span>       <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 压缩图片的方法</span>       <span class="token function">compress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 返回成功或失败标识 0,1</span>       <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而里面的每个方法,也都有着自己各自的职责(校验图片 、压缩图片 、返回结果).</p><h3 id="4-2-函数命名"><a href="#4-2-函数命名" class="headerlink" title="4.2 函数命名"></a>4.2 函数命名</h3><h4 id="1-函数名应见名知意"><a href="#1-函数名应见名知意" class="headerlink" title="1. 函数名应见名知意"></a>1. 函数名应见名知意</h4><p>函数要有描述性的名称，不要害怕长名称.</p><p>不好的命名方式:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addCharacter</span><span class="token punctuation">(</span><span class="token class-name">String</span> originString<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个函数，一咋看，还不错，从函数字面意思看是给某个字符串添加一个字符。但是到底是在原有字符串首部添加，还是在原有字符串末尾追加呢？亦或是在某个固定位置插入呢？从函数名字完全看不出来这个函数的真正意图，只能继续往下读这个函数的具体实现才知道。</p><p>而下面这几个名字就比上面要好得多：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 追加到末尾</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">appendCharacter</span><span class="token punctuation">(</span><span class="token class-name">String</span> originString<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 插入指定位置</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">insertCharacter</span><span class="token punctuation">(</span><span class="token class-name">String</span> originString<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> insertPosition<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-函数应该无副作用"><a href="#2-函数应该无副作用" class="headerlink" title="2. 函数应该无副作用"></a>2. 函数应该无副作用</h4><p>函数应该无副作用， 意思就是函数应该只做一件事，但是做这件事的时候做了另一件有副作用的事情.</p><p>例如: 校验密码时会初始化 session，导致会话丢失。如果无法移除这种副作用，应该在方法名中展示出来，避免用户误用 checkPasswordasswordAndInitializeSession, 从命名上就要体现副作用.</p><h3 id="4-3-参数"><a href="#4-3-参数" class="headerlink" title="4.3 参数"></a>4.3 参数</h3><h4 id="1-参数越少越好"><a href="#1-参数越少越好" class="headerlink" title="1. 参数越少越好"></a>1. 参数越少越好</h4><p>参数越少，越容易理解，参数超过三个可以将参数进行封装，要按参数的语义进行封装，不一定封装成一个大而全的参数，可以封装为多个，原则是按语义补充; 示例:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">findStudent</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> country<span class="token punctuation">,</span> <span class="token keyword">int</span> gender<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//封装参数</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">findStudent</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-不要使用标识参数"><a href="#2-不要使用标识参数" class="headerlink" title="2. 不要使用标识参数"></a>2. 不要使用标识参数</h4><p>标识参数是参数为 Boolean 类型, 用户传递 true or false . 不要使用标识参数因为这意味着你的函数违背了单一职责(true false 两套逻辑). 正确的做法是拆分为两个方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//标识参数方法</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span> isSuite<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重构为两个方法</span><span class="token function">reanderForSuite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">renderForSingleTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-不要使用输出参数"><a href="#3-不要使用输出参数" class="headerlink" title="3. 不要使用输出参数"></a>3. 不要使用输出参数</h4><p>什么是输出参数?</p><p>将变量作为参数传入方法,并且将变量输出, 这就是输出参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">doSomething</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> student<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 省略一些student逻辑</span><span class="token keyword">return</span> student<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>为什么不应该有输出参数?</p></blockquote><p>因为增加了理解成本在里面,我们需要查看 doSomething到底对 student 做了什么. student 是输入还是输出参数? 都不明确.</p><p>重构:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 将doSomething()方法内聚到student对象本身</span>student<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-4-返回值"><a href="#4-4-返回值" class="headerlink" title="4.4 返回值"></a>4.4 返回值</h3><h4 id="1-分离指令与讯问"><a href="#1-分离指令与讯问" class="headerlink" title="1. 分离指令与讯问"></a>1. 分离指令与讯问</h4><p>示例代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pulic</span> <span class="token class-name">Boolean</span> <span class="token function">addElement</span><span class="token punctuation">(</span><span class="token class-name">Element</span> element<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指令为增加某个元素,询问是否成功,</p><p>这样做的坏处是职责不单一，所以应该拆分为两个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addElement</span><span class="token punctuation">(</span><span class="token class-name">Element</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">isAdd</span><span class="token punctuation">(</span><span class="token class-name">Element</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-使用异常替代返回错误码"><a href="#2-使用异常替代返回错误码" class="headerlink" title="2. 使用异常替代返回错误码"></a>2. 使用异常替代返回错误码</h4><p>直接抛出异常,而不是返回错误码进行判断, 可以使代码更简洁. 因为使用错误码有可能会进行多层嵌套片段 代码示例:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用错误码导致多层嵌套...</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeviceController</span><span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendShutDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">DeviceHandle</span> handle<span class="token operator">=</span><span class="token function">getHandle</span><span class="token punctuation">(</span>DEV1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//Check the state of the device </span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>handle <span class="token operator">!=</span> <span class="token class-name">DeviceHandle</span><span class="token punctuation">.</span>INVALID<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">// Save the device status to the record field </span>   <span class="token function">retrieveDeviceRecord</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// If nat suspended,shut down</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>DEVICE_SUSPENDED<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token function">pauseDevice</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">clearDeviceWorkQueue</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">closeDevice</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Device suspended. Unable to shut down"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>   logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Invalid handle for: "</span> <span class="token operator">+</span>DEV1<span class="token punctuation">.</span><span class="token function">tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重构后:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//  将代码拆分为一小段一小段, 降低复杂度,更加清晰</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeviceController</span><span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendShutDowm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">try</span><span class="token punctuation">&#123;</span>   <span class="token function">tryToShutDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DeviceShutDownError</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">tryToShutDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DeviceShutDownError</span><span class="token punctuation">&#123;</span>   <span class="token class-name">DeviceHandle</span> handle <span class="token operator">=</span><span class="token function">getHandle</span><span class="token punctuation">(</span>DEV1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">retrieveDeviceRecord</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">pauseDevice</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">clearDeviceWorkQueue</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">closeDevice</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">private</span> <span class="token class-name">DeviceHandle</span> <span class="token function">getHandle</span><span class="token punctuation">(</span><span class="token class-name">DeviceID</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token comment">// 省略业务逻辑</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DeviceShutDownError</span><span class="token punctuation">(</span><span class="token string">"Invalid handle for:"</span><span class="token operator">+</span>id<span class="token punctuation">.</span><span class="token function">tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-怎样写出这样的函数"><a href="#4-5-怎样写出这样的函数" class="headerlink" title="4.5 怎样写出这样的函数?"></a>4.5 怎样写出这样的函数?</h3><p>没人能一开始就写出完美的代码, 先写出满足功能的代码,之后紧接着进行重构</p><p>为什么是紧接着? 因为 later equal never!</p><h3 id="4-6-代码质量扫描工具"><a href="#4-6-代码质量扫描工具" class="headerlink" title="4.6 代码质量扫描工具"></a>4.6 代码质量扫描工具</h3><p>使用 SonarLint 可以帮助我们发现代码的问题,并且还提供了相应的解决方案. 对于每一个问题，SonarLint 都给出了示例，还有相应的解决方案，教我们怎么修改，极大的方便了我们的开发</p><p>比如，对于日期类型尽量用 LocalDate、LocalTime、LocalDateTime，还有重复代码、潜在的空指针异常、循环嵌套等等问题。</p><p>有了代码规范与质量检测工具以后，很多东西就可以量化了，比如 bug 率、代码重复率等.</p><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h2><p>测试很重要,可以帮助我们验证写的代码是否没问题,同样的测试代码也应该保持整洁.</p><h3 id="5-1-TDD"><a href="#5-1-TDD" class="headerlink" title="5.1 TDD"></a>5.1 TDD</h3><p>TDD 是测试驱动开发（Test-Driven Development），是敏捷开发中的一项核心实践和技术，也是一种设计方法论。</p><ul><li> 优点：在任意一个开发节点都可以拿出一个可以使用，含少量bug并具一定功能和能够发布的产品。</li><li> 缺点：增加代码量。测试代码是系统代码的两倍或更多，但是同时节省了调试程序及挑错时间。</li></ul><p>how?</p><ol><li> 在开发代码前先写测试</li><li> 只可编写刚好无法通过的单元测试，不能编译也算不通过</li><li> 开发代码不可超过测试</li></ol><p>关于2的解释: 单测与生产代码同步进行，写到一个不可编译的单测就开始写生产代码，如此反复循环，单测就能包含到所有生产代码。</p><h3 id="5-2-FIRST原则"><a href="#5-2-FIRST原则" class="headerlink" title="5.2 FIRST原则"></a>5.2 FIRST原则</h3><p>FIRST 原则就是一个指导编写单元测试的原则</p><ul><li> fast 快速 单测执行应该快速的完成</li><li> independent 独立 单测之间相互独立</li><li> repeatable 可重复 单测不依赖于环境，随处可运行</li><li> self validating 程序可通过输出的Boolean自我验证，而不需要通过人工的方式验证（看日志输出、对比两个文件不同等）</li><li> timely 及时 单测在生产代码之前编写</li></ul><p>单元测试是代码测试中的基础测试，FIRST 是写好单元测试的重要原则，它要求我们的单元测试快速，独立，可重复，自我校验，及时/完整。</p><h3 id="5-3-测试代码模式"><a href="#5-3-测试代码模式" class="headerlink" title="5.3 测试代码模式"></a>5.3 测试代码模式</h3><p>开发测试代码可以使用 given-when-then 模式</p><ul><li> given 制造模拟数据</li><li> when 执行测试代码</li><li> then 验证测试结果</li></ul><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * If an item is loaded from the repository, the name of that item should   * be transformed into uppercase.  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shouldReturnItemNameInUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// Given</span>    <span class="token class-name">Item</span> mockedItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token string">"it1"</span><span class="token punctuation">,</span> <span class="token string">"Item 1"</span><span class="token punctuation">,</span> <span class="token string">"This is item 1"</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">when</span><span class="token punctuation">(</span>itemRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token string">"it1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>mockedItem<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// When</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> itemService<span class="token punctuation">.</span><span class="token function">getItemNameUpperCase</span><span class="token punctuation">(</span><span class="token string">"it1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Then</span>    <span class="token function">verify</span><span class="token punctuation">(</span>itemRepository<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token string">"it1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">is</span><span class="token punctuation">(</span><span class="token string">"ITEM 1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用give-when-then 模式可提高测试代码的可读性.</p><h3 id="5-4-自动生成单测"><a href="#5-4-自动生成单测" class="headerlink" title="5.4 自动生成单测"></a>5.4 自动生成单测</h3><p>介绍两款 IDEA 自动生成单测的插件</p><ul><li> Squaretest 插件（收费）</li><li> TestMe 插件(免费)</li></ul><h2 id="6-结束语"><a href="#6-结束语" class="headerlink" title="6.结束语"></a>6.结束语</h2><p>编写整洁的代码可以让我们 提高代码的可读性,使代码变得更易扩展。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">       <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot使用装饰器模式</title>
      <link href="/2023/03/14/springboot-shi-yong-zhuang-shi-qi-mo-shi/"/>
      <url>/2023/03/14/springboot-shi-yong-zhuang-shi-qi-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="装饰器模式（Decorator-Pattern）-也称为包装模式-Wrapper-Pattern-是指在不改变原有对象的基础之上，将功能附加到对象上，提供了比继承更有弹性的替代方案-扩展原有对象的功能-，属于结构型模式。"><a href="#装饰器模式（Decorator-Pattern）-也称为包装模式-Wrapper-Pattern-是指在不改变原有对象的基础之上，将功能附加到对象上，提供了比继承更有弹性的替代方案-扩展原有对象的功能-，属于结构型模式。" class="headerlink" title="装饰器模式（Decorator Pattern） 也称为包装模式(Wrapper Pattern) 是指在不改变原有对象的基础之上，将功能附加到对象上，提供了比继承更有弹性的替代方案(扩展原有对象的功能)，属于结构型模式。"></a>装饰器模式（Decorator Pattern） 也称为包装模式(Wrapper Pattern) 是指在不改变原有对象的基础之上，将功能附加到对象上，提供了比继承更有弹性的替代方案(扩展原有对象的功能)，属于结构型模式。</h2><h2 id="装饰器模式的核心是功能扩展，使用装饰器模式可以透明且动态地扩展类的功能。"><a href="#装饰器模式的核心是功能扩展，使用装饰器模式可以透明且动态地扩展类的功能。" class="headerlink" title="装饰器模式的核心是功能扩展，使用装饰器模式可以透明且动态地扩展类的功能。"></a>装饰器模式的核心是功能扩展，使用装饰器模式可以透明且动态地扩展类的功能。</h2><h2 id="大白话一点："><a href="#大白话一点：" class="headerlink" title="大白话一点："></a>大白话一点：</h2><h2 id="有点像是-组合，-就是-我不动原先的业务东西，但是-又想给这个业务东西-加点额外的职责东西。"><a href="#有点像是-组合，-就是-我不动原先的业务东西，但是-又想给这个业务东西-加点额外的职责东西。" class="headerlink" title="有点像是 组合， 就是 我不动原先的业务东西，但是 又想给这个业务东西 加点额外的职责东西。"></a>有点像是 组合， 就是 我不动原先的业务东西，但是 又想给这个业务东西 加点额外的职责东西。</h2><ul><li> 非入侵的。</li><li> 可拼凑的。<h3 id="实战开搞"><a href="#实战开搞" class="headerlink" title="实战开搞"></a>实战开搞</h3><h5 id="实例简述预热"><a href="#实例简述预热" class="headerlink" title="实例简述预热"></a>实例简述预热</h5></li></ul><p><code>ISurfTheInternetService</code> 网上冲浪冲浪业务 接口 interface</p><ul><li> <code>FadInternetCafe implements ISurfTheInternetService</code> 时尚网咖 实现冲浪业务接口，实现重写提供 网上冲浪方法</li><li> <code>RetroInternetBar implements ISurfTheInternetService</code> 复古网吧 实现冲浪业务接口，实现重写提供 网上冲浪方法</li></ul><p>然后在这个原有的冲浪业务下， 不做代码入侵， 我们想给网上冲浪冲浪业务加一点额外的职责，比如XXX,XXX啥的xxx业务。</p><p>于是乎，我们开始玩装饰器设计模式</p><ul><li> <code>SurfDecorator implements ISurfTheInternetService</code> 网上冲浪装饰器</li></ul><p>怎么玩的？看代码， 后面还会说怎么多层装饰 。</p><p>事不宜迟。</p><h5 id="①-ISurfTheInternetService-java-网上冲浪冲浪业务-接口"><a href="#①-ISurfTheInternetService-java-网上冲浪冲浪业务-接口" class="headerlink" title="① ISurfTheInternetService.java 网上冲浪冲浪业务 接口"></a>① ISurfTheInternetService.java 网上冲浪冲浪业务 接口</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: JCccc * @Date: 2022-10-07 15:18 * @Description: 网上冲浪 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISurfTheInternetService</span> <span class="token punctuation">&#123;</span>     <span class="token comment">/**     * 冲起来     */</span>    <span class="token keyword">void</span> <span class="token function">doSurfing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="②-FadInternetCafe-java-时尚网咖业务实现类"><a href="#②-FadInternetCafe-java-时尚网咖业务实现类" class="headerlink" title="② FadInternetCafe.java 时尚网咖业务实现类"></a>② FadInternetCafe.java 时尚网咖业务实现类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mydemo<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ISurfTheInternetService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span> <span class="token comment">/** * @Author: JCccc * @Date: 2022-10-07 15:21 * @Description: 时尚 网咖 */</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"fadInternetCafeService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FadInternetCafe</span> <span class="token keyword">implements</span> <span class="token class-name">ISurfTheInternetService</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSurfing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在时尚 网咖 ,网上冲浪咯~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="③-RetroInternetBar-java-复古网吧业务实现类"><a href="#③-RetroInternetBar-java-复古网吧业务实现类" class="headerlink" title="③ RetroInternetBar.java 复古网吧业务实现类"></a>③ RetroInternetBar.java 复古网吧业务实现类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mydemo<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ISurfTheInternetService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span> <span class="token comment">/** * @Author: JCccc * @Date: 2022-10-07 15:21 * @Description: 复古 网吧 */</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"retroInternetBarService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetroInternetBar</span> <span class="token keyword">implements</span> <span class="token class-name">ISurfTheInternetService</span> <span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSurfing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在复古 网吧 ,网上冲浪咯~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先到这， 写个controller方法，模拟平时搬砖真实场景 ：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"fadInternetCafeService"</span><span class="token punctuation">)</span><span class="token class-name">ISurfTheInternetService</span> fadInternetCafeService<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"retroInternetBarService"</span><span class="token punctuation">)</span><span class="token class-name">ISurfTheInternetService</span> retroInternetBarService<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/doTest"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fadInternetCafeService<span class="token punctuation">.</span><span class="token function">doSurfing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    retroInternetBarService<span class="token punctuation">.</span><span class="token function">doSurfing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到调用效果是这样的：</p><p><img src="/2023/03/14/springboot-shi-yong-zhuang-shi-qi-mo-shi/default_name_40fabb72.png" alt="default_name_40fabb72.png">  </p><p>然后。</p><p>然后在这个原有的冲浪业务下， 不做代码入侵， 我们想给网上冲浪冲浪业务加一点额外的职责，比如XXX,XXX啥的xxx业务。</p><h5 id="④-SurfDecorator-java-网上冲浪装饰器"><a href="#④-SurfDecorator-java-网上冲浪装饰器" class="headerlink" title="④ SurfDecorator.java 网上冲浪装饰器"></a>④ SurfDecorator.java 网上冲浪装饰器</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: JCccc * @Date: 2022-10-07 15:29 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SurfDecorator</span> <span class="token keyword">implements</span>  <span class="token class-name">ISurfTheInternetService</span> <span class="token punctuation">&#123;</span>     <span class="token comment">/**     * 内部维护一个冲浪接口类     */</span>    <span class="token keyword">private</span> <span class="token class-name">ISurfTheInternetService</span> surfTheInternetService<span class="token punctuation">;</span>     <span class="token comment">/**     * 构造方法 把传入的 类 赋值给内部类     * @param surfTheInternetService     */</span>    <span class="token keyword">public</span> <span class="token class-name">SurfDecorator</span><span class="token punctuation">(</span><span class="token class-name">ISurfTheInternetService</span> surfTheInternetService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>surfTheInternetService <span class="token operator">=</span> surfTheInternetService<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">/**     * 增强的网上冲浪方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSurfing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SurfDecorator 模拟业务 增强器在玩一点很新的东西,可能是一些额外的职责业务...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//增强</span>        surfTheInternetService<span class="token punctuation">.</span><span class="token function">doSurfing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SurfDecorator 模拟业务 增强器在玩一点很新的东西,可能是一些额外的职责业务，比如说是XXXX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们通过装饰器去 调用方法，实现增强职责：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/useDecoratorTest"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useDecoratorTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">SurfDecorator</span> fadInternetCafeDecoratorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SurfDecorator</span><span class="token punctuation">(</span>fadInternetCafeService<span class="token punctuation">)</span><span class="token punctuation">;</span>    fadInternetCafeDecoratorService<span class="token punctuation">.</span><span class="token function">doSurfing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SurfDecorator</span> retroInternetBarDecoratorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SurfDecorator</span><span class="token punctuation">(</span>retroInternetBarService<span class="token punctuation">)</span><span class="token punctuation">;</span>    retroInternetBarDecoratorService<span class="token punctuation">.</span><span class="token function">doSurfing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/14/springboot-shi-yong-zhuang-shi-qi-mo-shi/default_name_1e4f40a2.png" alt="default_name_1e4f40a2.png">  </p><p>可以看到效果， 它装起来了 ：</p><p><img src="/2023/03/14/springboot-shi-yong-zhuang-shi-qi-mo-shi/default_name_875f576d.png" alt="default_name_875f576d.png">  </p><p>然后，如果我们想多层装饰， 也就是 ，针对不同也网上冲浪业务实现类，想装一层又一层，</p><p>比如 时尚网卡的网上冲浪业务， 网咖老板比较腹黑，不仅仅需要做 A 增强业务，</p><p>还想看看每个来上网的人到底是不是有钱人，所以想检测一下卡里面的钱有多少，好安排一些‘优质服务’。</p><h5 id="⑤-又一层装饰器-RechargeDecorator-java-："><a href="#⑤-又一层装饰器-RechargeDecorator-java-：" class="headerlink" title="⑤ 又一层装饰器 RechargeDecorator.java ："></a>⑤ 又一层装饰器 RechargeDecorator.java ：</h5><h5 id="ps-：它继承了基本的网上冲浪装饰器，-然后增强了自己的检测充值金额业务方法。"><a href="#ps-：它继承了基本的网上冲浪装饰器，-然后增强了自己的检测充值金额业务方法。" class="headerlink" title="ps ：它继承了基本的网上冲浪装饰器， 然后增强了自己的检测充值金额业务方法。"></a>ps ：它继承了基本的网上冲浪装饰器， 然后增强了自己的检测充值金额业务方法。</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: JCccc * @Date: 2022-10-07 15:29 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RechargeDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">SurfDecorator</span><span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token class-name">RechargeDecorator</span><span class="token punctuation">(</span><span class="token class-name">ISurfTheInternetService</span> surfTheInternetService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>surfTheInternetService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSurfing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doSurfing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkRecharge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkRecharge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"RechargeDecorator 也在增强,看看这个货卡里面充了有多少,就来上网"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后看看 我们怎么玩 多层装饰：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/moreDecoratorTest"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">moreDecoratorTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//先装一哈</span>    <span class="token class-name">SurfDecorator</span> retroInternetBarDecoratorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SurfDecorator</span><span class="token punctuation">(</span>retroInternetBarService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//再包装一哈</span>    <span class="token class-name">RechargeDecorator</span> rechargeDecorator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RechargeDecorator</span><span class="token punctuation">(</span>retroInternetBarDecoratorService<span class="token punctuation">)</span><span class="token punctuation">;</span>    rechargeDecorator<span class="token punctuation">.</span><span class="token function">doSurfing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/03/14/springboot-shi-yong-zhuang-shi-qi-mo-shi/default_name_393ace62.png" alt="default_name_393ace62.png">  </p><p>可以看到效果，它装起来了，又装起来了：</p><p><img src="/2023/03/14/springboot-shi-yong-zhuang-shi-qi-mo-shi/default_name_552030bb.png" alt="default_name_552030bb.png">  </p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA这些设置可以更好用</title>
      <link href="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/"/>
      <url>/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/</url>
      
        <content type="html"><![CDATA[<p>IDEA 作为Java开发工具的后起之秀，几乎以碾压之势把其他对手甩在了身后，主要原因还是归功于：好用；虽然有点重，但依旧瑕不掩瑜，内置了非常多的功能，大大提高了日常的开发效率，下面汇总了常用的30个使用小技巧，学会之后，让你的撸码效率直接起飞…</p><p>\1.  查看代码历史版本</p><p>\2.  调整idea的虚拟内存：</p><p>\3.  idea设置成eclipse的快捷键</p><p>\4.  设置提示词忽略大小写</p><p>\5.  关闭代码检查</p><p>\6.  设置文档注释模板</p><p>\7.  显示方法分隔符</p><p>\8.  设置多行tab</p><p>\9.  快速匹配方法的大括号位置</p><p>\10. 代码结尾补全</p><p>\11. 模糊搜索方法</p><p>\12. 预览某个类的代码</p><p>\13. 查看方法在哪里被调用</p><p>\14. 代码模板（代码快捷键）</p><p>\15. 自动导包、自动移除没用的包</p><p>\16. codota插件：可以优先显示使用频率较高的类、方法</p><p>\17. 快速查看类、字段的注释</p><p>\18. 括号颜色区分</p><p>\19. 微服务项目中 将不同项目添加到同一个启动窗口</p><p>\20. idea全局设置 （打开新窗口的设置）</p><p>\21. java mapper层代码文件和mapper.xml文件相互跳转</p><p>\22. 设置idea背景图片</p><p>\23. maven tree （查看maven jar包依赖关系）</p><p>\24. 快捷键切换回上一个点击开的tab</p><p>\25. idea自带的ssh连接工具</p><p>\26. 代码调用链路图插件</p><p>\27. 获取当前线程dump</p><p>\28. idea同个项目不同端口多开</p><p>&gt; 注意：不同idea版本菜单、目录可能有细微差别，自己稍加分析都能找到</p><p><strong>## 1.查看代码历史版本</strong> </p><p>鼠标在需要查看的java类 右键 找到<code>Local History</code> &gt;&gt; <code>Show History</code> 点开即可看到历史版本，常用于自己忘记代码改了哪些内容 或需要恢复至某个版本 (注意 只能看近期修改 太久了也是看不到的)</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_bff5efab.png" alt="image_bff5efab.png"></p><p><strong>## 2.调整idea的虚拟内存</strong> </p><p>尽管本质都是去改变 .vmoptions配置文件，但推荐使用<code>Change Memory Settings</code>去调整，选择<code>Edit Custom VM Options</code> 或者在本地磁盘目录更改，通过某些方法破解的idea 很可能造成idea打不开的情况</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_e784542a.png" alt="image_e784542a.png"></p><p><strong>## 3.idea设置成eclipse的快捷键</strong> </p><p>这对eclipse转idea的开发人员来说 非常友好，这样不需要记两套快捷键</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_9d2ffec7.png" alt="image_9d2ffec7.png"></p><p><strong>## 4.设置提示词忽略大小写</strong> </p><p>把这个勾去掉，（有的idea版本是选择选项 选择none即可），例如String 输入string 、String 都可以提示</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_01a81d4a.png" alt="image_01a81d4a.png"></p><p><strong>## 5.关闭代码检查</strong> </p><p>与eclipse类似，idea也可以自己关闭代码检查 减少资源使用，但不推荐全部关闭，（是大佬当我没说），把我们项目中不会使用到的关闭就好了</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_ede49635.png" alt="image_ede49635.png"></p><p><strong>## 6.设置文档注释模板</strong> </p><p>文档注释快捷键及模板</p><p>&gt; <a href="https://blog.csdn.net/qq/_36268103/article/details/108027486">https://blog.csdn.net/qq\_36268103/article/details/108027486</a></p><p><strong>## 7.显示方法分隔符</strong> </p><p>方便查看方法与方法之间的间隔，在代码不规范的项目中 很好用！</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_fb8fd868.png" alt="image_fb8fd868.png"></p><p><strong>## 8.设置多行tab</strong> </p><p>idea默认是选择显示单行的，我们把这个去掉，就可以显示多行tab了，在打开tab过多时的场景非常方便！</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_b78ff2b8.png" alt="image_b78ff2b8.png"> <img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_5be98596.png" alt="image_5be98596.png"></p><p>8.1 tab过多会自动关闭</p><p><code>settings</code> - <code>editor</code> - <code>General</code> - <code>Editor tabs</code> - <code>tab limit</code> 数值设大就好了</p><p><strong>## 9.快速匹配方法的大括号位置</strong> </p><p><code>ctrl+[ ctrl+]</code> 可以快速跳转到方法大括号的起止位置，配合方法分隔符使用，不怕找不到方法在哪儿分割了</p><p><strong>## 10.代码结尾补全</strong> </p><p>例如一行代码补全分号，或者是<code>if(xxx)</code> 补全大括号，按<code>ctrl+shift+enter</code> 无需切换鼠标光标，大幅度提升了编码效率</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_b0766baa.png" alt="image_b0766baa.png"></p><p><strong>## 11.模糊搜索方法</strong> </p><p>例如People类里面的test方法，按<code>ctrl+shift+alt+n</code>输入<code>Peo.te</code> 就可以查到该方法了，如果觉得这个快捷键难记 也可以按<code>ctrl+shift+r</code> （查找某个文件名的快捷键 下图中的Files）,再手动选择Symbols</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_a01a827f.png" alt="image_a01a827f.png"></p><p><strong>## 12.预览某个类的代码</strong> </p><p>例如People类里面的test方法，按<code>ctrl+shift+a</code></p><p>例如我们在test类中，有句代码：<code>People p = new People();</code>我们想稍微查看一下People这个类，但是tab已经够多了，<code>ctrl+alt+b</code>会打开新的标签，标签多了就混乱了，尤其一堆命名类似的tab,这时候我们可以按<code>ctrl+shift+i</code> 实现预览功能，不占tab</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_c8fbf6c9.png" alt="image_c8fbf6c9.png"></p><p><strong>## 13.查看方法在哪里被调用</strong> </p><p><code>ctrl+alt+h</code> 可以清楚看到方法在哪些地方被调用；在知道这个快捷键之前，都是<code>ctrl+h</code>（idea默认 <code>ctrl+shift+f</code>）搜索，肉眼找的…</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_c91858b7.png" alt="image_c91858b7.png"></p><p><strong>## 14.代码模板(代码快捷键)</strong> </p><p>例如 : eclipse 中的syso是打印控制台输出 ，但是idea默认是sout , 如果非要改成syso 可以在<code>Postfix Completion</code>里面设置，类似的 fori等都是在里面设置</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_ada59294.png" alt="image_ada59294.png"></p><p><strong>## 15.自动导包、自动移除没用的包</strong> </p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_61cf98bb.png" alt="image_61cf98bb.png"></p><p>15.1 手动导包 :alt+enter 手动移除未使用包: crtl+alt+o</p><p><strong>## 16.codota插件：可以优先显示使用频率较高的类、方法</strong> </p><p>这个根据个人是否要使用 有的时候工具只能作参考，自己记忆才能保证准确</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_1178467b.png" alt="image_1178467b.png"></p><p><strong>## 17.快速查看类、字段的注释</strong> </p><p>这是一个很有用的小技巧 按F2可以快速查看某个类或某个字段的文档注释 ;基于这点 其它IDE应该也是可以快速查看文档注释内容 不仅仅是idea特性,这也是为什么阿里编码规范里面会明确声明实体类字段需要用文档注释 而不能使用双斜杠// 注释 ,还记得刚看到这个规范的时候 很不理解 特地去百度 看到有人说就是个习惯问题 很显然不能说服人，直到发现F2可以快速查看之后 恍然大悟！</p><p><strong>## 18.括号颜色区分</strong> </p><p><code>Rainbow Brackets</code> 插件 成对的括号用相同的颜色表示出来了</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_9fd21d92.png" alt="image_9fd21d92.png"></p><p><strong>## 19.微服务项目中将不同项目添加到同一个启动窗口</strong> </p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_0cd03e80.png" alt="image_0cd03e80.png"></p><p>步骤：<code>View</code> ——&gt;<code>Tool Windows</code> ——&gt; <code>services</code> ——&gt;<code>add services</code></p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_1806cf77.png" alt="image_1806cf77.png"></p><p><strong>## 20.idea全局设置（打开新窗口设置）</strong> </p><p>例如我们打开新窗口时，maven配置会恢复 这时就需要对打开新窗口的设置进行修改 达到一个全局的目的。</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_39edde32.png" alt="image_39edde32.png"></p><p>在低版本idea中 也是在File下 例如idea2018是叫<code>other settings</code></p><p><strong>## 21.java mapper层代码文件和mapper.xml文件相互跳转</strong> </p><p><code>Free MyBatis plugin</code> 插件</p><p>点击绿色箭头可以直接跳转 非常方便</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_d222b7e6.png" alt="image_d222b7e6.png"></p><p><strong>## 22.设置idea背景图片</strong> </p><p>BackgroundImage插件</p><p>设置喜欢的图片作为背景图</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_d2fb9f4d.png" alt="image_d2fb9f4d.png"></p><p><strong>## 23.maven tree（查看maven jar包依赖关系）</strong> </p><p>如果是使用 <code>mvn dependency:tree</code> 命令 , 结果是下图这样 很不方便查看</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_f4bcde4b.png" alt="image_f4bcde4b.png"></p><p>我们可以在idea右上角点击这个<code>ShowDependencies</code>按钮 以图片形式展示出来 图片按住ctrl和鼠标滑轮 可以放大，这个在排除依赖冲突 查看jar包来源时 非常好用</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_132a0647.png" alt="image_132a0647.png"></p><p>有的时候 可能莫名其妙看不到这个图标 ，我们可以点一下设置</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_4e391093.png" alt="image_4e391093.png"></p><p>把这个勾上，它就能显示了，等显示后，再把这个勾去掉</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_9ca375ea.png" alt="image_9ca375ea.png"></p><p><strong>## 24.快捷键切换回上一个点开的tab</strong> </p><p>当我们打开了多个tab的时候 ， 想要快速回到上一个点击的tab中 有的时候肉眼很难找</p><p>我们可以用快捷键 <code>alt + ←</code> 键 (eclipse版快捷键 idea默认快捷键需要自测) ，有的时候我们在后面tab编辑了内容 按一次可能不够 需要再多按几次 ,相应的 <code>alt + →</code>切换到下一个点击的tab</p><p>&gt; 常见应用场景：debug发生类跳转时 、利用快捷键在其它类中创建方法时</p><p>即使两个tab不相邻 也可以切换回去</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_25d11218.png" alt="image_25d11218.png"></p><p><strong>## 25.idea自带的ssh连接工具</strong> </p><p>&gt; 类似的idea还有自带的数据库连接工具 但是视图界面并不如Navicat 所以很多人都不选择用</p><p> *  第一步：配置账号密码</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_c5043d5f.png" alt="image_c5043d5f.png"></p><p> *  第二步：开启ssh会话</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_dcd3e329.png" alt="image_dcd3e329.png"></p><p><strong>## 26.代码调用链路图插件</strong> </p><p>SequenceDiagram 插件</p><p>这其实是本文第13点的上位替代方案，idea自带的快捷键查看代码调用，只是以菜单形式展示，不太直观，如果是自己写的代码或比较规范的代码，那用自带的也就无所谓，如果是比较复杂的源码或不规范的代码，那使用 SequenceDiagram 会直观特别多。</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_e90e3f2b.png" alt="image_e90e3f2b.png"></p><p>在要查看的java文件鼠标右键，点击 <code>Sequence Diagram</code></p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_82dbc8be.png" alt="image_82dbc8be.png"></p><p>效果示例：</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_d64ceacb.png" alt="image_d64ceacb.png"></p><p><strong>## 27.获取当前线程dump</strong> </p><p>在断点调试的时候，我们可以通过点击下图红色箭头指向的相机图标，获取当前线程的dump信息。</p><p>这个功能有什么用呢？我们可以通过线程名，分析当前是哪个线程执行的，在多线程环境下对代码运行分析起到辅助作用。</p><p>比如下图1， <code>run()</code>方法是通过main主线程执行的，只是方法调用，并没有启动多线程（这是我们熟知结论的实践证明）</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_7d902d16.png" alt="image_7d902d16.png"></p><p>当我们把run方法改成<code>start()</code>方法时，可以看到是线程thread0执行的。</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_8eeed8f1.png" alt="image_8eeed8f1.png"></p><p><strong>## 28.idea同个项目不同端口多开</strong> </p><p>这是个非常实用的功能，可以模拟集群 测试负载均衡。</p><p>此外 在开发阶段也是非常好用，开发过程中，让别人直接连自己本地测试 是不是非常方便？</p><p>那自己又想打断点调试 会影响别人 怎么办呢 ？这个时候多开的作用就体现出来了！</p><p>网上很多方法提到勾选 <code>Allow parallel run</code> (不同版本idea 名称不一样) ，我也亲眼见过有老师是可以多开启动的， 但我本地启动发现每次都会同时同端口启动多个，不知道是版本问题还是操作问题，这里我用的是另一种有效的方法：</p><p>在 <code>VM options</code> 加上</p><p>```java</p><p># 8993是区别于 application.yml 配置中 port 的另一个端口，达到不同端口多开的效果</p><p>-Dserver.port=8993</p><p>```</p><p><img src="/2023/02/20/idea-zhe-xie-she-zhi-ke-yi-geng-hao-yong/image_9b9f8662.png" alt="image_9b9f8662.png"> </p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA快捷键</title>
      <link href="/2023/01/29/idea-kuai-jie-jian/"/>
      <url>/2023/01/29/idea-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p>一、IntelliJ IDEA 快捷键大全 Win 版</p></li><li><p>一、Ctrl 快捷键</p><p>二、Alt 快捷键</p><p>三、Shift 快捷键</p><p>四、Ctrl + Alt 快捷键</p><p>五、Ctrl + Shift 快捷键</p><p>六、Alt + Shift 快捷键</p><p>七、Ctrl + Shift + Alt 快捷键</p><p>八、其他快捷键</p></li><li><p>二、IntelliJ IDEA 快捷键大全 Mac</p></li><li><p>Mac 键盘符号和修饰键说明</p><p>一、Editing（编辑）</p><p>二、Search/Replace（查询/替换）</p><p>三、Usage Search（使用查询）</p><p>四、Compile and Run（编译和运行）</p><p>五、Debugging（调试）</p><p>六、Navigation（导航）</p><p>七、Refactoring（重构）</p><p>八、VCS/Local History（版本控制/本地历史记录）</p><p>九、Live Templates（动态代码模板）</p><p>十、General（通用）</p><p>十一、Other（一些官方文档上没有体现的快捷键）</p></li><li><p>三、高清 pdf 版本</p></li><li><p>四、往期资源需要请自取</p></li></ul><h2 id="一、IntelliJ-IDEA-快捷键大全-Win-版"><a href="#一、IntelliJ-IDEA-快捷键大全-Win-版" class="headerlink" title="一、IntelliJ IDEA 快捷键大全 Win 版"></a>一、IntelliJ IDEA 快捷键大全 Win 版</h2><h3 id="一、Ctrl-快捷键"><a href="#一、Ctrl-快捷键" class="headerlink" title="一、Ctrl 快捷键"></a>一、Ctrl 快捷键</h3><table width="657">  <thead>   <tr>    <th>快捷键</th>    <th>说明</th>    <th>常用</th>   </tr>  </thead>  <tbody>   <tr>    <td>Ctrl + F</td>    <td>在当前文件进行文本查找</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + R</td>    <td>在当前文件进行文本替换</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Z</td>    <td>撤销</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Y</td>    <td>删除光标所在行 或 删除选中的行</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + X</td>    <td>剪切光标所在行 或 剪切选择内容</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + C</td>    <td>复制光标所在行 或 复制选择内容</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + D</td>    <td>复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + W</td>    <td>递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + E</td>    <td>显示最近打开的文件记录列表</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + N</td>    <td>根据输入的 名/类名 查找类文件</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + G</td>    <td>在当前文件跳转到指定行处</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + J</td>    <td>插入自定义动态代码模板</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + P</td>    <td>方法参数提示显示</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Q</td>    <td>光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + U</td>    <td>前往当前光标所在的方法的父类的方法 / 接口定义</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + B</td>    <td>进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + K</td>    <td>版本控制提交项目，需要此项目有加入到版本控制才可用</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + T</td>    <td>版本控制更新项目，需要此项目有加入到版本控制才可用</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + H</td>    <td>显示当前类的层次结构</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + O</td>    <td>选择可重写的方法</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + I</td>    <td>选择可继承的方法</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + +</td>    <td>展开代码</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + -</td>    <td>折叠代码</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + /</td>    <td>注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + U</td>    <td>前往当前光标所在的方法的父类的方法 / 接口定义</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + B</td>    <td>进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + K</td>    <td>版本控制提交项目，需要此项目有加入到版本控制才可用</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + T</td>    <td>版本控制更新项目，需要此项目有加入到版本控制才可用</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + H</td>    <td>显示当前类的层次结构</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + O</td>    <td>选择可重写的方法</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + I</td>    <td>选择可继承的方法</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + +</td>    <td>展开代码</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + -</td>    <td>折叠代码</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + /</td>    <td>释光标所在行代码，会根据当前不同文件类型使用不同的注释符号</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + [</td>    <td>移动光标到当前所在代码的花括号开始位置</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + ]</td>    <td>移动光标到当前所在代码的花括号结束位置</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + F1</td>    <td>在光标所在的错误代码处显示错误信息</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + F3</td>    <td>调转到所选中的词的下一个引用位置</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + F4</td>    <td>关闭当前编辑文件</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + F8</td>    <td>在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + F9</td>    <td>执行 Make Project 操作</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + F11</td>    <td>选中文件 / 文件夹，使用助记符设定 / 取消书签</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + F12</td>    <td>弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Tab</td>    <td>编辑窗口切换，如果在切换的过程又加按上 delete，则是关闭对应选中的窗口</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + End</td>    <td>跳到文件尾</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Home</td>    <td>跳到文件头</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Space</td>    <td>基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议 修改为 Ctrl +逗号</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Delete</td>    <td>删除光标后面的单词或是中文句</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl +BackSpace</td>    <td>删除光标前面的单词或是中文句</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl +1,2,3…9</td>    <td>定位到对应数值的书签位置</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + 左键单击</td>    <td>在打开的文件标题上，弹出该文件路径</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + 光标定位按 Ctrl 不要松开</td>    <td>会显示光标所在的类信息摘要</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + 左方向键</td>    <td>光标跳转到当前单词 / 中文句的左侧开头位置</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + 右方向键</td>    <td>光标跳转到当前单词 / 中文句的右侧开头位置</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + 前方向键</td>    <td>等效于鼠标滚轮向前效果</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + 后方向键</td>    <td>等效于鼠标滚轮向后效果</td>    <td>√</td>   </tr>  </tbody> </table><h3 id="二、Alt-快捷键"><a href="#二、Alt-快捷键" class="headerlink" title="二、Alt 快捷键"></a>二、Alt 快捷键</h3><table width="657">  <thead>   <tr>    <th>快捷键</th>    <th>说明</th>    <th>常用</th>   </tr>  </thead>  <tbody>   <tr>    <td>Alt +</td>    <td>显示版本控制常用操作菜单弹出层</td>    <td>√</td>   </tr>   <tr>    <td>Alt + Q</td>    <td>弹出一个提示，显示当前类的声明 / 上下文信息</td>    <td><br></td>   </tr>   <tr>    <td>Alt + F1</td>    <td>显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择</td>    <td>√</td>   </tr>   <tr>    <td>Alt + F2</td>    <td>对于前面页面，显示各类浏览器打开目标选择弹出层</td>    <td><br></td>   </tr>   <tr>    <td>Alt + F3</td>    <td>选中文本，逐个往下查找相同文本，并高亮显示</td>    <td><br></td>   </tr>   <tr>    <td>Alt + F7</td>    <td>查找光标所在的方法 / 变量 / 类被调用的地方</td>    <td><br></td>   </tr>   <tr>    <td>Alt + F8</td>    <td>在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td>    <td><br></td>   </tr>   <tr>    <td>Alt + Home</td>    <td>定位 / 显示到当前文件的 Navigation Bar</td>    <td><br></td>   </tr>   <tr>    <td>Alt + Enter</td>    <td>IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示 的结果也不同</td>    <td>√</td>   </tr>   <tr>    <td>Alt + Insert</td>    <td>代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等</td>    <td>√</td>   </tr>   <tr>    <td>Alt + 左方向键</td>    <td>切换当前已打开的窗口中的子视图，比如 Debug 窗口中有 Output、Debugger 等子视图，用此快捷键就可以在子视图中切换</td>    <td>√</td>   </tr>   <tr>    <td>Alt + 右方向键</td>    <td>按切换当前已打开的窗口中的子视图，比如 Debug 窗口中有 Output、Debugger 等子视图，用此快捷键就可以在子视图中切换</td>    <td>√</td>   </tr>   <tr>    <td>Alt + 前方向键</td>    <td>当前光标跳转到当前文件的前一个方法名位置</td>    <td>√</td>   </tr>   <tr>    <td>Alt + 后方向键</td>    <td>当前光标跳转到当前文件的后一个方法名位置</td>    <td>√</td>   </tr>   <tr>    <td>Alt +1,2,3…9</td>    <td>显示对应数值的选项卡，其中 1 是 Project 用得最多</td>    <td>√</td>   </tr>  </tbody> </table><h3 id="三、Shift-快捷键"><a href="#三、Shift-快捷键" class="headerlink" title="三、Shift 快捷键"></a>三、Shift 快捷键</h3><table width="657">  <thead>   <tr>    <th>快捷键</th>    <th>说明</th>    <th>常用</th>   </tr>  </thead>  <tbody>   <tr>    <td>Shift + F1</td>    <td>如果有外部文档可以连接外部文档</td>    <td><br></td>   </tr>   <tr>    <td>Shift + F2</td>    <td>跳转到上一个高亮错误 或 警告位置</td>    <td><br></td>   </tr>   <tr>    <td>Shift + F3</td>    <td>在查找模式下，查找匹配上一个</td>    <td><br></td>   </tr>   <tr>    <td>Shift + F4</td>    <td>对当前打开的文件，使用新 Windows 窗口打开，旧窗口保留</td>    <td><br></td>   </tr>   <tr>    <td>Shift + F6</td>    <td>对文件 / 文件夹 重命名</td>    <td><br></td>   </tr>   <tr>    <td>Shift + F7</td>    <td>在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td>    <td><br></td>   </tr>   <tr>    <td>Shift + F8</td>    <td>在 Debug 模式下，跳出，表现出来的效果跟 F9 一样</td>    <td><br></td>   </tr>   <tr>    <td>Shift + F9</td>    <td>等效于点击工具栏的 Debug 按钮</td>    <td><br></td>   </tr>   <tr>    <td>Shift + F10</td>    <td>等效于点击工具栏的 Run 按钮</td>    <td><br></td>   </tr>   <tr>    <td>Shift + F11</td>    <td>弹出书签显示层</td>    <td>√</td>   </tr>   <tr>    <td>Shift + Tab</td>    <td>取消缩进</td>    <td>√</td>   </tr>   <tr>    <td>Shift + ESC</td>    <td>隐藏当前 或 最后一个激活的工具窗口</td>    <td><br></td>   </tr>   <tr>    <td>Shift + End</td>    <td>选中光标到当前行尾位置</td>    <td><br></td>   </tr>   <tr>    <td>Shift + Home</td>    <td>选中光标到当前行头位置</td>    <td><br></td>   </tr>   <tr>    <td>Shift + Enter</td>    <td>开始新一行。光标所在行下空出一行，光标定位到新行位置</td>    <td>√</td>   </tr>   <tr>    <td>Shift + 左键单击</td>    <td>在打开的文件名上按此快捷键，可以关闭当前打开文件</td>    <td>√</td>   </tr>   <tr>    <td>Shift + 滚轮前后滚动</td>    <td>当前文件的横向滚动轴滚动</td>    <td>√</td>   </tr>  </tbody> </table><h3 id="四、Ctrl-Alt-快捷键"><a href="#四、Ctrl-Alt-快捷键" class="headerlink" title="四、Ctrl + Alt 快捷键"></a>四、Ctrl + Alt 快捷键</h3><table width="657">  <thead>   <tr>    <th>快捷键</th>    <th>说明</th>    <th>常用</th>   </tr>  </thead>  <tbody>   <tr>    <td>Ctrl + Alt + L</td>    <td>格式化代码，可以对当前文件和整个包目录使用</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Alt + O</td>    <td>优化导入的类，可以对当前文件和整个包目录使用</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Alt + I</td>    <td>光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Alt + T</td>    <td>对选中的代码弹出环绕选项弹出层</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Alt + J</td>    <td>弹出模板选择窗口，将选定的代码加入动态模板中</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Alt + H</td>    <td>调用层次</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Alt + B</td>    <td>在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Alt + V</td>    <td>快速引进变量</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Alt + Y</td>    <td>同步、刷新</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Alt + S</td>    <td>打开 IntelliJ IDEA 系统设置</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Alt + F7</td>    <td>显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Alt + F11</td>    <td>切换全屏模式</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Alt + Enter</td>    <td>光标所在行上空出一行，光标定位到新行</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Alt + Home</td>    <td>弹出跟当前文件有关联的文件弹出层</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Alt + Space</td>    <td>类名自动完成</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Alt + 左方向键</td>    <td>退回到上一个操作的地方</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Alt + 右方向键</td>    <td>前进到上一个操作的地方</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Alt + 前方向键</td>    <td>在查找模式下，跳到上个查找的文件</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Alt + 后方向键</td>    <td>在查找模式下，跳到下个查找的文件</td>    <td><br></td>   </tr>  </tbody> </table><h3 id="五、Ctrl-Shift-快捷键"><a href="#五、Ctrl-Shift-快捷键" class="headerlink" title="五、Ctrl + Shift 快捷键"></a>五、Ctrl + Shift 快捷键</h3><table width="657">  <thead>   <tr>    <th>快捷键</th>    <th>说明</th>    <th>常用</th>   </tr>  </thead>  <tbody>   <tr>    <td>Ctrl + Shift + F</td>    <td>根据输入内容查找整个项目 或 指定目录内文件</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + R</td>    <td>根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + J</td>    <td>自动将下一行合并到当前行末尾</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + Z</td>    <td>取消撤销</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + W</td>    <td>递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + N</td>    <td>通过文件名定位 / 打开文件 / 目录，打开目录需要在 输入的内容后面多加一个正斜杠</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + U</td>    <td>对选中的代码进行大 / 小写轮流转换</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + T</td>    <td>对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + C</td>    <td>复制当前文件磁盘路径到剪贴板</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + V</td>    <td>弹出缓存的最近拷贝的内容管理器弹出层</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Shift + E</td>    <td>显示最近修改的文件列表的弹出层</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Shift + H</td>    <td>显示方法层次结构</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Shift + B</td>    <td>跳转到类型声明处</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + I</td>    <td>快速查看光标所在的方法 或 类的定义</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Shift + A</td>    <td>查找动作 / 设置</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Shift + /</td>    <td>代码块注释</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + [</td>    <td>选中从光标所在位置到它的顶部中括号位置</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + ]</td>    <td>选中从光标所在位置到它的底部中括号位置</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + +</td>    <td>展开所有代码</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + -</td>    <td>折叠所有代码</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + F7</td>    <td>高亮显示所有该选中文本，按 Esc 高亮消失</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + F8</td>    <td>在 Debug 模式下，指定断点进入条件</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Shift + F9</td>    <td>编译选中的文件 / 包 / Module</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Shift + F12</td>    <td>编辑器最大化</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + Space</td>    <td>智能代码提示</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Shift + Enter</td>    <td>自动结束代码，行末自动添加分号</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift +Backspace</td>    <td>退回到上次修改的地方</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift +1,2,3…9</td>    <td>快速添加指定数值的书签</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + 左键单击</td>    <td>把光标放在某个类变量上，按此快捷键可以直接定位到该类中</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + 左方向键</td>    <td>在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置， 同时选中该单词 / 中文句</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + 右方向键</td>    <td>在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置， 同时选中该单词 / 中文句</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + 前方向键</td>    <td>光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + 后方向键</td>    <td>光标放在方法名上，将方法移动到下一个方法前面，调整方法</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Shift + 右方向键</td>    <td>在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置， 同时选中该单词 / 中文句</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + 前方向键</td>    <td>光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + 后方向键</td>    <td>光标放在方法名上，将方法移动到下一个方法前面，调整方法 排序</td>    <td>√</td>   </tr>  </tbody> </table><h3 id="六、Alt-Shift-快捷键"><a href="#六、Alt-Shift-快捷键" class="headerlink" title="六、Alt + Shift 快捷键"></a>六、Alt + Shift 快捷键</h3><table width="657">  <thead>   <tr>    <th>快捷键</th>    <th>说明</th>    <th>常用</th>   </tr>  </thead>  <tbody>   <tr>    <td>Alt + Shift + N</td>    <td>选择 / 添加 task</td>    <td>√</td>   </tr>   <tr>    <td>Alt + Shift + F</td>    <td>显示添加到收藏夹弹出层 / 添加到收藏夹</td>    <td><br></td>   </tr>   <tr>    <td>Alt + Shift + C</td>    <td>查看最近操作项目的变化情况列表</td>    <td><br></td>   </tr>   <tr>    <td>Alt + Shift + I</td>    <td>查看项目当前文件</td>    <td><br></td>   </tr>   <tr>    <td>Alt + Shift + F7</td>    <td>在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td>    <td><br></td>   </tr>   <tr>    <td>Alt + Shift + F9</td>    <td>弹出 Debug 的可选择菜单</td>    <td><br></td>   </tr>   <tr>    <td>Alt + Shift + F10</td>    <td>弹出 Run 的可选择菜单</td>    <td><br></td>   </tr>   <tr>    <td>Alt + Shift + 左键双击</td>    <td>选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句</td>    <td>√</td>   </tr>   <tr>    <td>Alt + Shift + 前方向键</td>    <td>移动光标所在行向上移动</td>    <td>√</td>   </tr>   <tr>    <td>Alt + Shift + 后方向键</td>    <td>移动光标所在行向下移动</td>    <td>√</td>   </tr>  </tbody> </table><h3 id="七、Ctrl-Shift-Alt-快捷键"><a href="#七、Ctrl-Shift-Alt-快捷键" class="headerlink" title="七、Ctrl + Shift + Alt 快捷键"></a>七、Ctrl + Shift + Alt 快捷键</h3><table width="657">  <thead>   <tr>    <th>快捷键</th>    <th>说明</th>    <th>常用</th>   </tr>  </thead>  <tbody>   <tr>    <td>Ctrl + Shift + Alt + V</td>    <td>无格式黏贴</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + Alt + N</td>    <td>前往指定的变量 / 方法</td>    <td><br></td>   </tr>   <tr>    <td>Ctrl + Shift + Alt + S</td>    <td>打开当前项目设置</td>    <td>√</td>   </tr>   <tr>    <td>Ctrl + Shift + Alt + C</td>    <td>复制参考信息</td>    <td><br></td>   </tr>  </tbody> </table><h3 id="八、其他快捷键"><a href="#八、其他快捷键" class="headerlink" title="八、其他快捷键"></a>八、其他快捷键</h3><table width="657">  <thead>   <tr>    <th>快捷键</th>    <th>说明</th>    <th>常用</th>   </tr>  </thead>  <tbody>   <tr>    <td>F2</td>    <td>跳转到下一个高亮错误 或 警告位置</td>    <td>√</td>   </tr>   <tr>    <td>F3</td>    <td>在查找模式下，定位到下一个匹配处</td>    <td><br></td>   </tr>   <tr>    <td>F4</td>    <td>编辑源</td>    <td>√</td>   </tr>   <tr>    <td>F7</td>    <td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td>    <td><br></td>   </tr>   <tr>    <td>F8</td>    <td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td>    <td><br></td>   </tr>   <tr>    <td>F9</td>    <td>在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td>    <td><br></td>   </tr>   <tr>    <td>F11</td>    <td>添加书签</td>    <td>√</td>   </tr>   <tr>    <td>F12</td>    <td>回到前一个工具窗口</td>    <td>√</td>   </tr>   <tr>    <td>Tab</td>    <td>缩进</td>    <td>√</td>   </tr>   <tr>    <td>ESC</td>    <td>从工具窗口进入代码文件窗口</td>    <td>√</td>   </tr>   <tr>    <td>连按两次 Shift</td>    <td>弹出 Search Everywhere 弹出层</td>    <td>√</td>   </tr>  </tbody> </table><h2 id="二、IntelliJ-IDEA-快捷键大全-Mac"><a href="#二、IntelliJ-IDEA-快捷键大全-Mac" class="headerlink" title="二、IntelliJ IDEA 快捷键大全 Mac"></a>二、IntelliJ IDEA 快捷键大全 Mac</h2><h3 id="Mac-键盘符号和修饰键说明"><a href="#Mac-键盘符号和修饰键说明" class="headerlink" title="Mac 键盘符号和修饰键说明"></a>Mac 键盘符号和修饰键说明</h3><table width="657">  <thead>   <tr>    <th>按键</th>    <th>说明</th>   </tr>  </thead>  <tbody>   <tr>    <td>⌘</td>    <td>Command</td>   </tr>   <tr>    <td>⇧</td>    <td>Shift</td>   </tr>   <tr>    <td>⌥</td>    <td>Option</td>   </tr>   <tr>    <td>⌃</td>    <td>Control</td>   </tr>   <tr>    <td>↩︎</td>    <td>Return/Enter</td>   </tr>   <tr>    <td>⌫</td>    <td>Delete</td>   </tr>   <tr>    <td>⌦</td>    <td>向前删除键（Fn+Delete）</td>   </tr>   <tr>    <td>↑</td>    <td>上箭头</td>   </tr>   <tr>    <td>↓</td>    <td>下箭头</td>   </tr>   <tr>    <td>←</td>    <td>左箭头</td>   </tr>   <tr>    <td>→</td>    <td>右箭头</td>   </tr>   <tr>    <td>⇞</td>    <td>Page Up（Fn+↑）</td>   </tr>   <tr>    <td>⇟</td>    <td>Page Down（Fn+↓）</td>   </tr>   <tr>    <td>Home</td>    <td>Fn + ←</td>   </tr>   <tr>    <td>End</td>    <td>Fn + →</td>   </tr>   <tr>    <td>⇥</td>    <td>右制表符（Tab 键）</td>   </tr>   <tr>    <td>⇤</td>    <td>左制表符（Shift+Tab）</td>   </tr>   <tr>    <td>⎋</td>    <td>Escape (Esc)</td>   </tr>  </tbody> </table><h3 id="一、Editing（编辑）"><a href="#一、Editing（编辑）" class="headerlink" title="一、Editing（编辑）"></a>一、Editing（编辑）</h3><table width="657">  <thead>   <tr>    <th>快捷键</th>    <th>说明</th>   </tr>  </thead>  <tbody>   <tr>    <td>⌃Space</td>    <td>基本的代码补全（补全任何类、方法、变量）</td>   </tr>   <tr>    <td>⌃⇧Space</td>    <td>智能代码补全（过滤器方法列表和变量的预期类型）</td>   </tr>   <tr>    <td>⌘⇧↩</td>    <td>自动结束代码，行末自动添加分号</td>   </tr>   <tr>    <td>⌘P</td>    <td>显示方法的参数信息</td>   </tr>   <tr>    <td>⌃J, Mid. button click</td>    <td>快速查看文档</td>   </tr>   <tr>    <td>⇧F1</td>    <td>查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</td>   </tr>   <tr>    <td>⌘+鼠标放在代码上</td>    <td>显示代码简要信息</td>   </tr>   <tr>    <td>⌘F1</td>    <td>在错误或警告处显示具体描述信息</td>   </tr>   <tr>    <td>⌘N, ⌃↩, ⌃N</td>    <td>生成代码（getter、setter、构造函数、hashCode/equals,toString）</td>   </tr>   <tr>    <td>⌃O</td>    <td>覆盖方法（重写父类方法）</td>   </tr>   <tr>    <td>⌃I</td>    <td>实现方法（实现接口中的方法）</td>   </tr>   <tr>    <td>⌘⌥T</td>    <td>包围代码（使用 if…else, try…catch, for, synchronized 等包围 选中的代码）</td>   </tr>   <tr>    <td>⌘/</td>    <td>注释/取消注释与行注释</td>   </tr>   <tr>    <td>⌘⌥/</td>    <td>注释/取消注释与块注释</td>   </tr>   <tr>    <td>⌥↑</td>    <td>连续选中代码块</td>   </tr>   <tr>    <td>⌥↓</td>    <td>减少当前选中的代码块</td>   </tr>   <tr>    <td>⌃⇧Q</td>    <td>显示上下文信息</td>   </tr>   <tr>    <td>⌥↩</td>    <td>显示意向动作和快速修复代码</td>   </tr>   <tr>    <td>⌘⌥L</td>    <td>格式化代码</td>   </tr>   <tr>    <td>⌃⌥O</td>    <td>优化 import</td>   </tr>   <tr>    <td>⌃⌥I</td>    <td>自动缩进线</td>   </tr>   <tr>    <td>⇥ / ⇧⇥</td>    <td>缩进代码 / 反缩进代码</td>   </tr>   <tr>    <td>⌘X</td>    <td>剪切当前行或选定的块到剪贴板</td>   </tr>   <tr>    <td>⌘C</td>    <td>复制当前行或选定的块到剪贴板</td>   </tr>   <tr>    <td>⌘V</td>    <td>从剪贴板粘贴</td>   </tr>   <tr>    <td>⌘⇧V</td>    <td>从最近的缓冲区粘贴</td>   </tr>   <tr>    <td>⌘D</td>    <td>复制当前行或选定的块</td>   </tr>   <tr>    <td>⌘⌫</td>    <td>删除当前行或选定的块的行</td>   </tr>   <tr>    <td>⌃⇧J</td>    <td>智能的将代码拼接成一行</td>   </tr>   <tr>    <td>⌘↩</td>    <td>智能的拆分拼接的行</td>   </tr>   <tr>    <td>⇧↩</td>    <td>开始新的一行</td>   </tr>   <tr>    <td>⌘⇧U</td>    <td>大小写切换</td>   </tr>   <tr>    <td>⌘⇧] / ⌘⇧[</td>    <td>选择直到代码块结束/开始</td>   </tr>   <tr>    <td>⌥⌦</td>    <td>删除到单词的末尾（⌦ 键为 Fn+Delete）</td>   </tr>   <tr>    <td>⌥⌫</td>    <td>删除到单词的开头</td>   </tr>   <tr>    <td>⌘+ / ⌘-</td>    <td>展开 / 折叠代码块</td>   </tr>   <tr>    <td>⌘⇧+</td>    <td>展开所以代码块</td>   </tr>   <tr>    <td>⌘⇧-</td>    <td>折叠所有代码块</td>   </tr>   <tr>    <td>⌘W</td>    <td>关闭活动的编辑器选项卡</td>   </tr>  </tbody> </table><h3 id="二、Search-Replace（查询-替换）"><a href="#二、Search-Replace（查询-替换）" class="headerlink" title="二、Search/Replace（查询/替换）"></a>二、Search/Replace（查询/替换）</h3><table width="657">  <thead>   <tr>    <th>按键</th>    <th>说明</th>   </tr>  </thead>  <tbody>   <tr>    <td>Double ⇧</td>    <td>查询任何东西</td>   </tr>   <tr>    <td>⌘F</td>    <td>文件内查找</td>   </tr>   <tr>    <td>⌘G</td>    <td>查找模式下，向下查找</td>   </tr>   <tr>    <td>⌘⇧G</td>    <td>查找模式下，向上查找</td>   </tr>   <tr>    <td>⌘R</td>    <td>文件内替换</td>   </tr>   <tr>    <td>⌘⇧F</td>    <td>全局查找（根据路径）</td>   </tr>   <tr>    <td>⌘⇧R</td>    <td>全局替换（根据路径）</td>   </tr>   <tr>    <td>⌘⇧S</td>    <td>查询结构（Ultimate Edition 版专用，需要在 Keymap 中设置）</td>   </tr>   <tr>    <td>⌘⇧M</td>    <td>替换结构（Ultimate Edition 版专用，需要在 Keymap 中设置）</td>   </tr>  </tbody> </table><h3 id="三、Usage-Search（使用查询）"><a href="#三、Usage-Search（使用查询）" class="headerlink" title="三、Usage Search（使用查询）"></a>三、Usage Search（使用查询）</h3><table width="657">  <thead>   <tr>    <th>按键</th>    <th>说明</th>   </tr>  </thead>  <tbody>   <tr>    <td>⌥F7 / ⌘F7</td>    <td>在文件中查找用法 / 在类中查找用法</td>   </tr>   <tr>    <td>⌘⇧F7</td>    <td>在文件中突出显示的用法</td>   </tr>   <tr>    <td>⌘⌥F7</td>    <td>显示用法</td>   </tr>  </tbody> </table><h3 id="四、Compile-and-Run（编译和运行）"><a href="#四、Compile-and-Run（编译和运行）" class="headerlink" title="四、Compile and Run（编译和运行）"></a>四、Compile and Run（编译和运行）</h3><table width="657">  <thead>   <tr>    <th>按键</th>    <th>说明</th>   </tr>  </thead>  <tbody>   <tr>    <td>⌘F9</td>    <td>编译 Project</td>   </tr>   <tr>    <td>⌘⇧F9</td>    <td>编译选择的文件、包或模块</td>   </tr>   <tr>    <td>⌃⌥R</td>    <td>弹出 Run 的可选择菜单</td>   </tr>   <tr>    <td>⌃⌥D</td>    <td>弹出 Debug 的可选择菜单</td>   </tr>   <tr>    <td>⌃R</td>    <td>运行</td>   </tr>   <tr>    <td>⌃D</td>    <td>调试</td>   </tr>   <tr>    <td>⌃⇧R, ⌃⇧D</td>    <td>从编辑器运行上下文环境配置</td>   </tr>  </tbody> </table><h3 id="五、Debugging（调试）"><a href="#五、Debugging（调试）" class="headerlink" title="五、Debugging（调试）"></a>五、Debugging（调试）</h3><table width="657">  <thead>   <tr>    <th>按键</th>    <th>说明</th>   </tr>  </thead>  <tbody>   <tr>    <td>F8</td>    <td>进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td>   </tr>   <tr>    <td>F7</td>    <td>进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td>   </tr>   <tr>    <td>⇧F7</td>    <td>智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</td>   </tr>   <tr>    <td>⇧F8</td>    <td>跳出</td>   </tr>   <tr>    <td>⌥F9</td>    <td>运行到光标处，如果光标前有其他断点会进入到该断点</td>   </tr>   <tr>    <td>⌥F8</td>    <td>计算表达式（可以更改变量值使其生效）</td>   </tr>   <tr>    <td>⌘⌥R</td>    <td>恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</td>   </tr>   <tr>    <td>⌘F8</td>    <td>切换断点（若光标当前行有断点则取消断点，没有则加上断点）</td>   </tr>   <tr>    <td>⌘⇧F8</td>    <td>查看断点信息</td>   </tr>  </tbody> </table><h3 id="六、Navigation（导航）"><a href="#六、Navigation（导航）" class="headerlink" title="六、Navigation（导航）"></a>六、Navigation（导航）</h3><table width="657">  <thead>   <tr>    <th>按键</th>    <th>说明</th>   </tr>  </thead>  <tbody>   <tr>    <td>⌘O</td>    <td>查找类文件</td>   </tr>   <tr>    <td>⌘⇧O</td>    <td>查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</td>   </tr>   <tr>    <td>⌘⌥O</td>    <td>前往指定的变量 / 方法</td>   </tr>   <tr>    <td>⌃← / ⌃→</td>    <td>左右切换打开的编辑 tab 页</td>   </tr>   <tr>    <td>F12</td>    <td>返回到前一个工具窗口</td>   </tr>   <tr>    <td>⎋</td>    <td>从工具窗口进入代码文件窗口</td>   </tr>   <tr>    <td>⇧⎋</td>    <td>隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</td>   </tr>   <tr>    <td>⌘⇧F4</td>    <td>关闭活动 run/messages/find/… tab</td>   </tr>   <tr>    <td>⌘L</td>    <td>在当前文件跳转到某一行的指定处</td>   </tr>   <tr>    <td>⌘E</td>    <td>显示最近打开的文件记录列表</td>   </tr>   <tr>    <td>⌘⌥← / ⌘⌥→</td>    <td>退回 / 前进到上一个操作的地方</td>   </tr>   <tr>    <td>⌘⇧⌫</td>    <td>跳转到最后一个编辑的地方</td>   </tr>   <tr>    <td>⌥F1</td>    <td>显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在 代码编辑窗口可以选择显示该文件的 Finder)</td>   </tr>   <tr>    <td>⌘B / ⌘</td>    <td>鼠标点击 进入光标所在的方法/变量的接口或是定义处</td>   </tr>   <tr>    <td>⌘⌥B</td>    <td>跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td>   </tr>   <tr>    <td>⌥ Space, ⌘Y</td>    <td>快速打开光标所在方法、类的定义</td>   </tr>   <tr>    <td>⌃⇧B</td>    <td>跳转到类型声明处</td>   </tr>   <tr>    <td>⌘U</td>    <td>前往当前光标所在方法的父类的方法 / 接口定义</td>   </tr>   <tr>    <td>⌃↓ / ⌃↑</td>    <td>当前光标跳转到当前文件的前一个/后一个方法名位置</td>   </tr>   <tr>    <td>⌘] / ⌘[</td>    <td>移动光标到当前所在代码的花括号开始/结束位置</td>   </tr>   <tr>    <td>⌘F12</td>    <td>弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</td>   </tr>   <tr>    <td>⌃H</td>    <td>显示当前类的层次结构</td>   </tr>   <tr>    <td>⌘⇧H</td>    <td>显示方法层次结构</td>   </tr>   <tr>    <td>⌃⌥H</td>    <td>显示调用层次结构</td>   </tr>   <tr>    <td>F2 / ⇧F2</td>    <td>跳转到下一个/上一个突出错误或警告的位置</td>   </tr>   <tr>    <td>F4 / ⌘↓</td>    <td>编辑/查看代码源</td>   </tr>   <tr>    <td>⌥ Home</td>    <td>显示到当前文件的导航条</td>   </tr>   <tr>    <td>F3</td>    <td>选中文件/文件夹/代码行，添加/取消书签</td>   </tr>   <tr>    <td>⌥F3</td>    <td>选中文件/文件夹/代码行，使用助记符添加/取消书签</td>   </tr>   <tr>    <td>⌃0…⌃9</td>    <td>定位到对应数值的书签位置</td>   </tr>   <tr>    <td>⌘F3</td>    <td>显示所有书签</td>   </tr>  </tbody> </table><h3 id="七、Refactoring（重构）"><a href="#七、Refactoring（重构）" class="headerlink" title="七、Refactoring（重构）"></a>七、Refactoring（重构）</h3><table width="657">  <thead>   <tr>    <th>按键</th>    <th>说明</th>   </tr>  </thead>  <tbody>   <tr>    <td>F5</td>    <td>复制文件到指定目录</td>   </tr>   <tr>    <td>F6</td>    <td>移动文件到指定目录</td>   </tr>   <tr>    <td>⌘⌫</td>    <td>在文件上为安全删除文件，弹出确认框</td>   </tr>   <tr>    <td>⇧F6</td>    <td>重命名文件</td>   </tr>   <tr>    <td>⌘F6</td>    <td>更改签名</td>   </tr>   <tr>    <td>⌘⌥N</td>    <td>一致性</td>   </tr>   <tr>    <td>⌘⌥M</td>    <td>将选中的代码提取为方法</td>   </tr>   <tr>    <td>⌘⌥V</td>    <td>提取变量</td>   </tr>   <tr>    <td>⌘⌥F</td>    <td>提取字段</td>   </tr>   <tr>    <td>⌘⌥C</td>    <td>提取常量</td>   </tr>   <tr>    <td>⌘⌥P</td>    <td>提取参数</td>   </tr>  </tbody> </table><h3 id="八、VCS-Local-History（版本控制-本地历史记录）"><a href="#八、VCS-Local-History（版本控制-本地历史记录）" class="headerlink" title="八、VCS/Local History（版本控制/本地历史记录）"></a>八、VCS/Local History（版本控制/本地历史记录）</h3><table width="657">  <thead>   <tr>    <th>按键</th>    <th>说明</th>   </tr>  </thead>  <tbody>   <tr>    <td>⌘K</td>    <td>提交代码到版本控制器</td>   </tr>   <tr>    <td>⌘T</td>    <td>从版本控制器更新代码</td>   </tr>   <tr>    <td>⌥⇧C</td>    <td>查看最近的变更记录</td>   </tr>   <tr>    <td>⌃C</td>    <td>快速弹出版本控制器操作面板</td>   </tr>  </tbody> </table><h3 id="九、Live-Templates（动态代码模板）"><a href="#九、Live-Templates（动态代码模板）" class="headerlink" title="九、Live Templates（动态代码模板）"></a>九、Live Templates（动态代码模板）</h3><table width="657">  <thead>   <tr>    <th>按键</th>    <th>说明</th>   </tr>  </thead>  <tbody>   <tr>    <td>⌘⌥J</td>    <td>弹出模板选择窗口，将选定的代码使用动态模板包住</td>   </tr>   <tr>    <td>⌘J</td>    <td>插入自定义动态代码模板</td>   </tr>  </tbody> </table><h3 id="十、General（通用）"><a href="#十、General（通用）" class="headerlink" title="十、General（通用）"></a>十、General（通用）</h3><table width="657">  <thead>   <tr>    <th>按键</th>    <th>说明</th>   </tr>  </thead>  <tbody>   <tr>    <td>⌘1…⌘9</td>    <td>打开相应编号的工具窗口</td>   </tr>   <tr>    <td>⌘S</td>    <td>保存所有</td>   </tr>   <tr>    <td>⌘⌥Y</td>    <td>同步、刷新</td>   </tr>   <tr>    <td>⌃⌘F</td>    <td>切换全屏模式</td>   </tr>   <tr>    <td>⌘⇧F12</td>    <td>切换最大化编辑器</td>   </tr>   <tr>    <td>⌥⇧F</td>    <td>添加到收藏夹</td>   </tr>   <tr>    <td>⌥⇧I</td>    <td>检查当前文件与当前的配置文件</td>   </tr>   <tr>    <td>§⌃, ⌃`</td>    <td>快速切换当前的 scheme（切换主题、代码样式等）</td>   </tr>   <tr>    <td>⌘,</td>    <td>打开 IDEA 系统设置</td>   </tr>   <tr>    <td>⌘;</td>    <td>打开项目结构对话框</td>   </tr>   <tr>    <td>⇧⌘A</td>    <td>查找动作（可设置相关选项）</td>   </tr>   <tr>    <td>⌃⇥</td>    <td>编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上 delete，则是关闭对应选中的窗口）</td>   </tr>  </tbody> </table><h3 id="十一、Other（一些官方文档上没有体现的快捷键）"><a href="#十一、Other（一些官方文档上没有体现的快捷键）" class="headerlink" title="十一、Other（一些官方文档上没有体现的快捷键）"></a>十一、Other（一些官方文档上没有体现的快捷键）</h3><table width="657">  <thead>   <tr>    <th>按键</th>    <th>说明</th>   </tr>  </thead>  <tbody>   <tr>    <td>⌘⇧8</td>    <td>竖编辑模式</td>   </tr>  </tbody> </table><h4 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h4><table width="657">  <thead>   <tr>    <th>按键</th>    <th>说明</th>   </tr>  </thead>  <tbody>   <tr>    <td>⌘O</td>    <td>查找类文件 Ctrl + N</td>   </tr>   <tr>    <td>⌘⌥O</td>    <td>前往指定的变量 / 方法 Ctrl + Shift + Alt + N</td>   </tr>   <tr>    <td>⌃← / ⌃→</td>    <td>左右切换打开的编辑 tab 页 Alt← / Alt→</td>   </tr>   <tr>    <td>⎋</td>    <td>从工具窗口进入代码文件窗口 ESC</td>   </tr>   <tr>    <td>⌘L</td>    <td>在当前文件跳转到某一行的指定处 Ctrl + G</td>   </tr>   <tr>    <td>⌘E</td>    <td>显示最近打开的文件记录列表 Ctrl + E</td>   </tr>   <tr>    <td>⌘⌥← / ⌘⌥→</td>    <td>退回 / 前进到上一个操作的地方 Ctrl + Alt + ← Ctrl + Alt + →</td>   </tr>   <tr>    <td>⌘⇧⌫</td>    <td>跳转到最后一个编辑的地方</td>   </tr>   <tr>    <td>⌃H</td>    <td>显示当前类的层次结构 Ctrl + H</td>   </tr>   <tr>    <td>⌘⇧H</td>    <td>显示方法层次结构</td>   </tr>   <tr>    <td>⌃⌥H</td>    <td>显示调用层次结构</td>   </tr>   <tr>    <td>F4 / ⌘↓</td>    <td>编辑/查看代码源</td>   </tr>   <tr>    <td>⌘⌥U</td>    <td>显示类 UML 图</td>   </tr>   <tr>    <td>⌃J</td>    <td>查看注释</td>   </tr>  </tbody> </table><h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h4><table width="657">  <thead>   <tr>    <th>按键</th>    <th>说明</th>   </tr>  </thead>  <tbody>   <tr>    <td>⌥⌦</td>    <td>删除到单词的末尾（⌦ 键为 Fn+Delete）</td>   </tr>   <tr>    <td>⌥⌫</td>    <td>删除到单词的开头</td>   </tr>   <tr>    <td>⌘+ / ⌘-</td>    <td>展开 / 折叠代码块</td>   </tr>   <tr>    <td>⌘F1</td>    <td>在错误或警告处显示具体描述信息</td>   </tr>   <tr>    <td>⌘⌥L</td>    <td>格式化代码</td>   </tr>   <tr>    <td>⌃⌥O</td>    <td>优化 import</td>   </tr>   <tr>    <td>⇧↩</td>    <td>开始新的一行</td>   </tr>   <tr>    <td>⌘⇧↩</td>    <td>自动结束代码，行末自动添加分号</td>   </tr>   <tr>    <td>⌃I</td>    <td>实现方法（实现接口中的方法）</td>   </tr>   <tr>    <td>⇧F6</td>    <td>重命名文件或者变量</td>   </tr>   <tr>    <td>⌘N, ⌃↩, ⌃N</td>    <td>生成代码（getter、setter、构造函数、hashCode/equals,toString）</td>   </tr>   <tr>    <td>⌘P</td>    <td>显示方法的参数信息</td>   </tr>  </tbody> </table><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><table width="657">  <thead>   <tr>    <th>按键</th>    <th>说明</th>   </tr>  </thead>  <tbody>   <tr>    <td>Double⇧</td>    <td>查找任何东西</td>   </tr>   <tr>    <td>⌘⇧F</td>    <td>全局查找（根据路径）</td>   </tr>   <tr>    <td>⌘F</td>    <td>文件内查找</td>   </tr>   <tr>    <td>⌘G</td>    <td>查找模式下，向下查找</td>   </tr>   <tr>    <td>⌘⇧G</td>    <td>查找模式下，向上查找</td>   </tr>   <tr>    <td>⌘⌥B</td>    <td>跳转到接口的实现</td>   </tr>   <tr>    <td>⌘U</td>    <td>查看接口定义</td>   </tr>   <tr>    <td>⌘⌥← / ⌘⌥→</td>    <td>退回 / 前进到上一个操作的地方</td>   </tr>   <tr>    <td>⌘B / ⌘</td>    <td>鼠标点击 进入光标所在的方法/变量的接口或是定义处</td>   </tr>   <tr>    <td>⌃⇧B</td>    <td>跳转到类型声明处</td>   </tr>   <tr>    <td>⌥ Space, ⌘Y</td>    <td>快速打开光标所在方法、类的定义</td>   </tr>   <tr>    <td>⌘O</td>    <td>查找类文件</td>   </tr>   <tr>    <td>⌘⇧O</td>    <td>查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</td>   </tr>   <tr>    <td>F12</td>    <td>返回到前一个工具窗口</td>   </tr>   <tr>    <td>⎋</td>    <td>从工具窗口进入代码文件窗口</td>   </tr>   <tr>    <td>⇧⎋</td>    <td>隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</td>   </tr>   <tr>    <td>F3</td>    <td>选中文件/文件夹/代码行，添加/取消书签</td>   </tr>   <tr>    <td>⌥F3</td>    <td>选中文件/文件夹/代码行，使用助记符添加/取消书签</td>   </tr>   <tr>    <td>⌃0…⌃9</td>    <td>定位到对应数值的书签位置</td>   </tr>   <tr>    <td>⌘F3</td>    <td>显示所有书签</td>   </tr>   <tr>    <td>⌥F1</td>    <td>显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的 Finder)</td>   </tr>   <tr>    <td>⌘F12</td>    <td>弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</td>   </tr>  </tbody> </table><h4 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h4><table width="657">  <thead>   <tr>    <th>按键</th>    <th>说明</th>   </tr>  </thead>  <tbody>   <tr>    <td>⌃⌘F</td>    <td>切换全屏模式</td>   </tr>  </tbody> </table>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea快捷键 </tag>
            
            <tag> 快捷键速查表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中最常用的11个扩展点</title>
      <link href="/2023/01/15/spring-zhong-zui-chang-yong-de-11-ge-kuo-zhan-dian/"/>
      <url>/2023/01/15/spring-zhong-zui-chang-yong-de-11-ge-kuo-zhan-dian/</url>
      
        <content type="html"><![CDATA[<p>我们一说到spring，可能第一个想到的是 <code>IOC</code>（控制反转） 和 <code>AOP</code>（面向切面编程）。</p><p>没错，它们是spring的基石，得益于它们的优秀设计，使得spring能够从众多优秀框架中脱颖而出。</p><p>除此之外，我们在使用spring的过程中，有没有发现它的<code>扩展能力非常强</code>。由于这个优势的存在，让spring拥有强大的包容能力，让很多第三方应用能够轻松投入spring的怀抱。比如：rocketmq、mybatis、redis等。</p><p>今天跟大家一起聊聊，在Spring中最常用的11个扩展点。</p><p><img src="/2023/01/15/spring-zhong-zui-chang-yong-de-11-ge-kuo-zhan-dian/image_bd25e50f.png" alt="image_bd25e50f.png"></p><h2 id="1-自定义拦截器"><a href="#1-自定义拦截器" class="headerlink" title="1.自定义拦截器"></a>1.自定义拦截器</h2><p>spring mvc拦截器根spring拦截器相比，它里面能够获取<code>HttpServletRequest</code>和<code>HttpServletResponse</code>等web对象实例。</p><p>spring mvc拦截器的顶层接口是：<code>HandlerInterceptor</code>，包含三个方法：</p><ul><li> preHandle 目标方法执行前执行</li><li> postHandle 目标方法执行后执行</li><li> afterCompletion 请求完成时执行</li></ul><p>为了方便我们一般情况会用<code>HandlerInterceptor</code>接口的实现类<code>HandlerInterceptorAdapter</code>类。</p><p>假如有权限认证、日志、统计的场景，可以使用该拦截器。</p><p>第一步，继承<code>HandlerInterceptorAdapter</code>类定义拦截器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">HandlerInterceptorAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> requestUrl <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkAuth</span><span class="token punctuation">(</span>requestUrl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">checkAuth</span><span class="token punctuation">(</span><span class="token class-name">String</span> requestUrl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===权限校验==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步，将该拦截器注册到spring容器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebAuthConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">AuthInterceptor</span> <span class="token function">getAuthInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AuthInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AuthInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步，在请求接口时spring mvc通过该拦截器，能够自动拦截该接口，并且校验权限。</p><h2 id="2-获取Spring容器对象"><a href="#2-获取Spring容器对象" class="headerlink" title="2.获取Spring容器对象"></a>2.获取Spring容器对象</h2><p>在我们日常开发中，经常需要从Spring容器中获取Bean，但你知道如何获取Spring容器对象吗？</p><h4 id="2-1-BeanFactoryAware接口"><a href="#2-1-BeanFactoryAware接口" class="headerlink" title="2.1 BeanFactoryAware接口"></a>2.1 BeanFactoryAware接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonService</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryAware</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BeanFactory</span> beanFactory<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">BeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> beanFactory<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现<code>BeanFactoryAware</code>接口，然后重写<code>setBeanFactory</code>方法，就能从该方法中获取到spring容器对象。</p><h4 id="2-2-ApplicationContextAware接口"><a href="#2-2-ApplicationContextAware接口" class="headerlink" title="2.2 ApplicationContextAware接口"></a>2.2 ApplicationContextAware接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonService2</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现<code>ApplicationContextAware</code>接口，然后重写<code>setApplicationContext</code>方法，也能从该方法中获取到spring容器对象。</p><h4 id="2-3-ApplicationListener接口"><a href="#2-3-ApplicationListener接口" class="headerlink" title="2.3 ApplicationListener接口"></a>2.3 ApplicationListener接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonService3</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ContextRefreshedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        applicationContext <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-全局异常处理"><a href="#3-全局异常处理" class="headerlink" title="3.全局异常处理"></a>3.全局异常处理</h2><p>以前我们在开发接口时，如果出现异常，为了给用户一个更友好的提示，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"成功"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不做任何处理请求add接口结果直接报错：</p><p><img src="/2023/01/15/spring-zhong-zui-chang-yong-de-11-ge-kuo-zhan-dian/image_1626ce05.png" alt="image_1626ce05.png"></p><p>what？用户能直接看到错误信息？</p><p>这种交互方式给用户的体验非常差，为了解决这个问题，我们通常会在接口中捕获异常：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token string">"成功"</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token string">"数据异常"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口改造后，出现异常时会提示：“数据异常”，对用户来说更友好。</p><p>看起来挺不错的，但是有问题。。。</p><p>如果只是一个接口还好，但是如果项目中有成百上千个接口，都要加上异常捕获代码吗？</p><p>答案是否定的，这时全局异常处理就派上用场了：<code>RestControllerAdvice</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"数据异常"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Exception</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"服务器内部异常"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        retur nnull<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只需在<code>handleException</code>方法中处理异常情况，业务接口中可以放心使用，不再需要捕获异常（有人统一处理了）。真是爽歪歪。</p><h2 id="4-类型转换器"><a href="#4-类型转换器" class="headerlink" title="4.类型转换器"></a>4.类型转换器</h2><p>spring目前支持3中类型转换器：</p><ul><li> Converter&lt;S,T&gt;：将 S 类型对象转为 T 类型对象</li><li> ConverterFactory&lt;S, R&gt;：将 S 类型对象转为 R 类型及子类对象</li><li> GenericConverter：它支持多个source和目标类型的转化，同时还提供了source和目标类型的上下文，这个上下文能让你实现基于属性上的注解或信息来进行类型转换。</li></ul><p>这3种类型转换器使用的场景不一样，我们以<code>Converter&lt;S,T&gt;为</code>例。假如：接口中接收参数的实体对象中，有个字段的类型是Date，但是实际传参的是字符串类型：2021-01-03 10:20:15，要如何处理呢？</p><p>第一步，定义一个实体User：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> registerDate<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步，实现<code>Converter</code>接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步，将新定义的类型转换器注入到spring容器中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFormatters</span><span class="token punctuation">(</span><span class="token class-name">FormatterRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DateConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第四步，调用接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/save"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求接口时User对象中registerDate字段会被自动转换成Date类型。</p><h2 id="5-导入配置"><a href="#5-导入配置" class="headerlink" title="5.导入配置"></a>5.导入配置</h2><p>有时我们需要在某个配置类中引入另外一些类，被引入的类也加到spring容器中。这时可以使用<code>@Import</code>注解完成这个功能。</p><p>如果你看过它的源码会发现，引入的类支持三种不同类型。</p><p>但是我认为最好将普通类和@Configuration注解的配置类分开讲解，所以列了四种不同类型：</p><p><img src="/2023/01/15/spring-zhong-zui-chang-yong-de-11-ge-kuo-zhan-dian/image_1d36b956.png" alt="image_1d36b956.png"></p><h4 id="5-1-普通类"><a href="#5-1-普通类" class="headerlink" title="5.1 普通类"></a>5.1 普通类</h4><p>这种引入方式是最简单的，被引入的类会被实例化bean对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfiguration</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>@Import</code>注解引入A类，spring就能自动实例化A对象，然后在需要使用的地方通过<code>@Autowired</code>注解注入即可：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">A</span> a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>是不是挺让人意外的？不用加<code>@Bean</code>注解也能实例化bean。</p><h4 id="5-2-配置类"><a href="#5-2-配置类" class="headerlink" title="5.2 配置类"></a>5.2 配置类</h4><p>这种引入方式是最复杂的，因为<code>@Configuration</code>注解还支持多种组合注解，比如：</p><ul><li> @Import</li><li> @ImportResource</li><li> @PropertySource等。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">A</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfiguration</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过@Import注解引入@Configuration注解的配置类，会把该配置类相关<code>@Import</code>、<code>@ImportResource</code>、<code>@PropertySource</code>等注解引入的类进行递归，一次性全部引入。</p><h4 id="5-3-ImportSelector"><a href="#5-3-ImportSelector" class="headerlink" title="5.3 ImportSelector"></a>5.3 ImportSelector</h4><p>这种引入方式需要实现<code>ImportSelector</code>接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">ImportSelector</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CLASS_NAME <span class="token operator">=</span> <span class="token string">"com.sue.cache.service.test13.A"</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>CLASS_NAME<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfiguration</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式的好处是<code>selectImports</code>方法返回的是数组，意味着可以同时引入多个类，还是非常方便的。</p><h4 id="5-4-ImportBeanDefinitionRegistrar"><a href="#5-4-ImportBeanDefinitionRegistrar" class="headerlink" title="5.4 ImportBeanDefinitionRegistrar"></a>5.4 ImportBeanDefinitionRegistrar</h4><p>这种引入方式需要实现<code>ImportBeanDefinitionRegistrar</code>接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AImportBeanDefinitionRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RootBeanDefinition</span> rootBeanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> rootBeanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AImportBeanDefinitionRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfiguration</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式是最灵活的，能在<code>registerBeanDefinitions</code>方法中获取到<code>BeanDefinitionRegistry</code>容器注册对象，可以手动控制BeanDefinition的创建和注册。</p><h2 id="6-项目启动时"><a href="#6-项目启动时" class="headerlink" title="6.项目启动时"></a>6.项目启动时</h2><p>有时候我们需要在项目启动时定制化一些附加功能，比如：加载一些系统参数、完成初始化、预热本地缓存等，该怎么办呢？</p><p>好消息是springboot提供了：</p><ul><li> CommandLineRunner</li><li> ApplicationRunner</li></ul><p>这两个接口帮助我们实现以上需求。</p><p>它们的用法还是挺简单的，以<code>ApplicationRunner</code>接口为例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRunner</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LoadDataService</span> loadDataService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        loadDataService<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现<code>ApplicationRunner</code>接口，重写<code>run</code>方法，在该方法中实现自己定制化需求。</p><p>如果项目中有多个类实现了ApplicationRunner接口，他们的执行顺序要怎么指定呢？</p><p>答案是使用<code>@Order(n)</code>注解，n的值越小越先执行。当然也可以通过<code>@Priority</code>注解指定顺序。</p><h2 id="7-修改BeanDefinition"><a href="#7-修改BeanDefinition" class="headerlink" title="7.修改BeanDefinition"></a>7.修改BeanDefinition</h2><p>Spring IOC在实例化Bean对象之前，需要先读取Bean的相关属性，保存到<code>BeanDefinition</code>对象中，然后通过BeanDefinition对象，实例化Bean对象。</p><p>如果想修改BeanDefinition对象中的属性，该怎么办呢？</p><p>答：我们可以实现<code>BeanFactoryPostProcessor</code>接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanFactoryPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> configurableListableBeanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DefaultListableBeanFactory</span> defaultListableBeanFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">)</span> configurableListableBeanFactory<span class="token punctuation">;</span>        <span class="token class-name">BeanDefinitionBuilder</span> beanDefinitionBuilder <span class="token operator">=</span> <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"苏三说技术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultListableBeanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> beanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在postProcessBeanFactory方法中，可以获取BeanDefinition的相关对象，并且修改该对象的属性。</p><h2 id="8-初始化Bean前后"><a href="#8-初始化Bean前后" class="headerlink" title="8.初始化Bean前后"></a>8.初始化Bean前后</h2><p>有时，你想在初始化Bean前后，实现一些自己的逻辑。</p><p>这时可以实现：<code>BeanPostProcessor</code>接口。</p><p>该接口目前有两个方法：</p><ul><li> postProcessBeforeInitialization 该在初始化方法之前调用。</li><li> postProcessAfterInitialization 该方法再初始化方法之后调用。</li></ul><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"苏三说技术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果spring中存在User对象，则将它的userName设置成：苏三说技术。</p><p>其实，我们经常使用的注解，比如：@Autowired、@Value、@Resource、@PostConstruct等，是通过AutowiredAnnotationBeanPostProcessor和CommonAnnotationBeanPostProcessor实现的。</p><h2 id="9-初始化方法"><a href="#9-初始化方法" class="headerlink" title="9.初始化方法"></a>9.初始化方法</h2><p>目前spring中使用比较多的初始化bean的方法有：</p><ol><li> 使用@PostConstruct注解</li><li> 实现InitializingBean接口</li></ol><h4 id="9-1-使用-PostConstruct注解"><a href="#9-1-使用-PostConstruct注解" class="headerlink" title="9.1 使用@PostConstruct注解"></a>9.1 使用@PostConstruct注解</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===初始化==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在需要初始化的方法上增加<code>@PostConstruct</code>注解，这样就有初始化的能力。</p><h4 id="9-2-实现InitializingBean接口"><a href="#9-2-实现InitializingBean接口" class="headerlink" title="9.2 实现InitializingBean接口"></a>9.2 实现InitializingBean接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BService</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===初始化==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现<code>InitializingBean</code>接口，重写<code>afterPropertiesSet</code>方法，该方法中可以完成初始化功能。</p><h2 id="10-关闭容器前"><a href="#10-关闭容器前" class="headerlink" title="10.关闭容器前"></a>10.关闭容器前</h2><p>有时候，我们需要在关闭spring容器前，做一些额外的工作，比如：关闭资源文件等。</p><p>这时可以实现<code>DisposableBean</code>接口，并且重写它的<code>destroy</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DService</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">,</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DisposableBean destroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InitializingBean afterPropertiesSet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样spring容器销毁前，会调用该destroy方法，做一些额外的工作。</p><p>通常情况下，我们会同时实现InitializingBean和DisposableBean接口，重写初始化方法和销毁方法。</p><h2 id="11-自定义作用域"><a href="#11-自定义作用域" class="headerlink" title="11.自定义作用域"></a>11.自定义作用域</h2><p>我们都知道spring默认支持的<code>Scope</code>只有两种：</p><ul><li> singleton 单例，每次从spring容器中获取到的bean都是同一个对象。</li><li> prototype 多例，每次从spring容器中获取到的bean都是不同的对象。</li></ul><p>spring web又对Scope进行了扩展，增加了：</p><ul><li> RequestScope 同一次请求从spring容器中获取到的bean都是同一个对象。</li><li> SessionScope 同一个会话从spring容器中获取到的bean都是同一个对象。</li></ul><p>即便如此，有些场景还是无法满足我们的要求。</p><p>比如，我们想在同一个线程中从spring容器获取到的bean都是同一个对象，该怎么办？</p><p>这就需要自定义Scope了。</p><p>第一步实现Scope接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalScope</span> <span class="token keyword">implements</span> <span class="token class-name">Scope</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span> THREAD_LOCAL_SCOPE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">ObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> objectFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> value <span class="token operator">=</span> THREAD_LOCAL_SCOPE<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Object</span> object <span class="token operator">=</span> objectFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        THREAD_LOCAL_SCOPE<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> object<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        THREAD_LOCAL_SCOPE<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerDestructionCallback</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> callback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">resolveContextualObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConversationId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步将新定义的Scope注入到spring容器中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalBeanFactoryPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerScope</span><span class="token punctuation">(</span><span class="token string">"threadLocalScope"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步使用新定义的Scope：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"threadLocalScope"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Optional类让你告别丑陋判空</title>
      <link href="/2023/01/11/optional-lei-rang-ni-gao-bie-chou-lou-pan-kong/"/>
      <url>/2023/01/11/optional-lei-rang-ni-gao-bie-chou-lou-pan-kong/</url>
      
        <content type="html"><![CDATA[<h2 id="认识Optional"><a href="#认识Optional" class="headerlink" title="认识Optional"></a>认识Optional</h2><p>Opitonal类就是Java提供的为了解决大家平时判断对象是否为空用，通常会用 <code>null!=obj</code>这样的方式存在的判断，从而令人头疼导致空指针异常，同Optional的存在可以让代码更加简单，可读性跟高，代码写起来更高效</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> student<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"student为null"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"student为null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试展示类Student 代码(如果有朋友不明白可以看一下这个)：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Optional对象创建"><a href="#Optional对象创建" class="headerlink" title="Optional对象创建"></a>Optional对象创建</h3><p>首先我们先打开Optional的内部,去一探究竟 先把几个创建Optional对象的方法提取出来</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> EMPTY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">T</span> value<span class="token punctuation">;</span>   <span class="token comment">// 我们可以看到两个构造方格都是private 私有的</span>   <span class="token comment">// 说明 我们没办法在外面去new出来Optional对象</span>   <span class="token keyword">private</span> <span class="token class-name">Optional</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token keyword">private</span> <span class="token class-name">Optional</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 这个静态方法大致 是创建出一个包装值为空的一个对象因为没有任何参数赋值</span>   <span class="token keyword">public</span> <span class="token keyword">static</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> EMPTY<span class="token punctuation">;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 这个静态方法大致 是创建出一个包装值非空的一个对象 因为做了赋值</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 这个静态方法大致是 如果参数value为空，则创建空对象，如果不为空，则创建有参对象</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">of</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再做一个简单的实例展示 与上面对应</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1、创建一个包装对象值为空的Optional对象</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> optEmpty <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2、创建包装对象值非空的Optional对象</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> optOf <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"optional"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3、创建包装对象值允许为空也可以不为空的Optional对象</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> optOfNullable1 <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> optOfNullable2 <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token string">"optional"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Optional-get-方法-返回对象的值"><a href="#Optional-get-方法-返回对象的值" class="headerlink" title="Optional.get()方法(返回对象的值)"></a>Optional.get()方法(返回对象的值)</h3><p>get()方法是返回一个option的实例值</p><p>源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token string">"No value present"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是如果value不为空则做返回，如果为空则抛出异常 “<code>No value present</code>” 简单实例展示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2023/01/11/optional-lei-rang-ni-gao-bie-chou-lou-pan-kong/image_f663defc-20230111230028418.png" alt="image_f663defc.png"></p><h3 id="Optional-isPresent-方法-判读是否为空"><a href="#Optional-isPresent-方法-判读是否为空" class="headerlink" title="Optional.isPresent()方法(判读是否为空)"></a>Optional.isPresent()方法(判读是否为空)</h3><p>isPresent()方法就是会返回一个boolean类型值，如果对象不为空则为真，如果为空则false</p><p>源码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>简单的实例展示:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/01/11/optional-lei-rang-ni-gao-bie-chou-lou-pan-kong/image_528dbe6b-20230111230028718.png" alt="image_528dbe6b.png"></p><h3 id="Optional-ifPresent-方法-判读是否为空并返回函数"><a href="#Optional-ifPresent-方法-判读是否为空并返回函数" class="headerlink" title="Optional.ifPresent()方法(判读是否为空并返回函数)"></a>Optional.ifPresent()方法(判读是否为空并返回函数)</h3><p>这个意思是如果对象非空，则运行函数体</p><p>源码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果value不为空，则运行accept方法体</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄："</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果对象不为空，则会打印这个年龄，因为内部已经做了NPE（非空判断），所以就不用担心空指针异常了</p><p><img src="/2023/01/11/optional-lei-rang-ni-gao-bie-chou-lou-pan-kong/image_6deaa283-20230111230028538.png" alt="image_6deaa283.png"></p><h3 id="Optional-filter-方法-过滤对象"><a href="#Optional-filter-方法-过滤对象" class="headerlink" title="Optional.filter()方法(过滤对象)"></a>Optional.filter()方法(过滤对象)</h3><p>filter()方法大致意思是，接受一个对象，然后对他进行条件过滤，如果条件符合则返回Optional对象本身，如果不符合则返回空Optional</p><p>源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果为空直接返回this</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment">//判断返回本身还是空Optional</span>        <span class="token keyword">return</span> predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token operator">:</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Optional-flatMap-方法-Optional对象进行二次包装"><a href="#Optional-flatMap-方法-Optional对象进行二次包装" class="headerlink" title="Optional.flatMap()方法(Optional对象进行二次包装)"></a>Optional.flatMap()方法(Optional对象进行二次包装)</h3><p>map()方法将对应<code>Optional&lt; Funcation &gt;</code>函数式接口中的对象，进行二次运算，封装成新的对象然后返回在Optional中</p><p>源码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">></span></span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">></span></span> <span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">Optional</span><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">></span><span class="token punctuation">></span></span> mapper<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> optName <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"name为空"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Optional-orElse-方法-为空返回对象"><a href="#Optional-orElse-方法-为空返回对象" class="headerlink" title="Optional.orElse()方法(为空返回对象)"></a>Optional.orElse()方法(为空返回对象)</h3><p>常用方法之一，这个方法意思是如果包装对象为空的话，就执行orElse方法里的value，如果非空，则返回写入对象</p><p>源码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">orElse</span><span class="token punctuation">(</span><span class="token class-name">T</span> other<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果非空，返回value，如果为空，返回other</span>    <span class="token keyword">return</span> value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> value <span class="token operator">:</span> other<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Optional-orElseGet-方法-为空返回Supplier对象"><a href="#Optional-orElseGet-方法-为空返回Supplier对象" class="headerlink" title="Optional.orElseGet()方法(为空返回Supplier对象)"></a>Optional.orElseGet()方法(为空返回Supplier对象)</h3><p>这个与orElse很相似，入参不一样，入参为Supplier对象，为空返回传入对象的.get()方法，如果非空则返回当前对象。推荐：[Java面试题][Java]</p><p>源码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> other<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> value <span class="token operator">:</span> other<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Supplier</span><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span><span class="token punctuation">></span></span> sup<span class="token operator">=</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用get()方法，此时才会调用对象的构造方法，即获得到真正对象</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span>sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Suppiler是一个接口，是类似Spring的懒加载，声明之后并不会占用内存，只有执行了get()方法之后，才会调用构造方法创建出对象 创建对象的语法的话就是<code>Supplier supStudent= Student::new;</code> 需要使用时<code>supStudent.get()</code>即可</p><h3 id="Optional-orElseThrow-方法-为空返回异常"><a href="#Optional-orElseThrow-方法-为空返回异常" class="headerlink" title="Optional.orElseThrow()方法(为空返回异常)"></a>Optional.orElseThrow()方法(为空返回异常)</h3><p>方法作用的话就是如果为空，就抛出你定义的异常，如果不为空返回当前对象，在实战中所有异常肯定是要处理好的，为了代码的可读性</p><p>源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">X</span><span class="token punctuation">></span></span> exceptionSupplier<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">X</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> exceptionSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//简单的一个查询</span><span class="token class-name">Member</span> member <span class="token operator">=</span> memberService<span class="token punctuation">.</span><span class="token function">selectByPhone</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>member<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"没有查询的相关数据"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="相似方法进行对比分析"><a href="#相似方法进行对比分析" class="headerlink" title="相似方法进行对比分析"></a>相似方法进行对比分析</h2><p>可能看到这，没用用过的话会觉得<code>orElse()</code>和<code>orElseGet()</code>还有<code>orElseThrow()</code>很相似，map()和flatMap()好相似,不用着急，都是从这一步过来的，我再给大家总结一下不同方法的异同点 <code>orElse()</code>和<code>orElseGet()</code>和<code>orElseThrow()</code>的异同点</p><blockquote><p>方法效果类似，如果对象不为空，则返回对象，如果为空，则返回方法体中的对应参数，所以可以看出这三个方法体中参数是不一样的 orElse（T 对象） orElseGet（<code>Supplier &lt; T &gt;</code>对象） orElseThrow（异常）</p></blockquote><p>map()和orElseGet的异同点</p><blockquote><p>方法效果类似，对方法参数进行二次包装，并返回,入参不同 map（function函数） <code>flatmap（Optional&lt; function &gt;</code>函数）</p></blockquote><p>具体要怎么用，要根据业务场景以及代码规范来定义，下面可以简单看一下我在实战中怎用使用神奇的Optional。推荐：[Java面试题][Java]</p><h2 id="实战场景"><a href="#实战场景" class="headerlink" title="实战场景"></a>实战场景</h2><p>场景1：在service层中 查询一个对象，返回之后判断是否为空并做处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//查询一个对象</span><span class="token class-name">Member</span> member <span class="token operator">=</span> memberService<span class="token punctuation">.</span><span class="token function">selectByIdNo</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getCertificateNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用ofNullable加orElseThrow做判断和操作</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>member<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"没有查询的相关数据"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>场景2：我们可以在dao接口层中定义返回值时就加上Optional</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LocationRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Location</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Location</span><span class="token punctuation">></span></span> <span class="token function">findLocationById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然在是Service中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">TerminalVO</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//这个方法在dao层也是用了Optional包装了</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Terminal</span><span class="token punctuation">></span></span> terminalOptional <span class="token operator">=</span> terminalRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//直接使用isPresent()判断是否为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>terminalOptional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//使用get()方法获取对象值</span>        <span class="token class-name">Terminal</span> terminal <span class="token operator">=</span> terminalOptional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在实战中，我们已经免去了用set去赋值的繁琐，直接用BeanCopy去赋值</span>        <span class="token class-name">TerminalVO</span> terminalVO <span class="token operator">=</span> <span class="token class-name">BeanCopyUtils</span><span class="token punctuation">.</span><span class="token function">copyBean</span><span class="token punctuation">(</span>terminal<span class="token punctuation">,</span> <span class="token class-name">TerminalVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用dao层方法返回包装后的对象</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Location</span><span class="token punctuation">></span></span> location <span class="token operator">=</span> locationRepository<span class="token punctuation">.</span><span class="token function">findLocationById</span><span class="token punctuation">(</span>terminal<span class="token punctuation">.</span><span class="token function">getLocationId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            terminalVO<span class="token punctuation">.</span><span class="token function">setFullName</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> terminalVO<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//不要忘记抛出异常</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"该终端不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实战场景还有很多，包括return时可以判断是否返回当前值还是跳转到另一个方法体中，其它的还有很多。</p><h2 id="Optional使用注意事项"><a href="#Optional使用注意事项" class="headerlink" title="Optional使用注意事项"></a>Optional使用注意事项</h2><p>Optional真么好用，真的可以完全替代if判断吗？我想这肯定是大家使用完之后Optional之后可能会产生的想法，答案是否定的 举一个最简单的栗子：</p><p>例子：如果我只想判断对象的某一个变量是否为空并且做出判断呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> person<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>persion<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//普通判断</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//名称不为空执行代码块</span><span class="token punctuation">&#125;</span><span class="token comment">//使用Optional做判断</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"name为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我觉得这个例子就能很好的说明这个问题，只是一个很简单判断，如果用了Optional我们还需要考虑包装值，考虑代码书写，考虑方法调用，虽然只有一行，但是可读性并不好，如果别的程序员去读，我觉得肯定没有if看的明显。</p><h2 id="Jdk-9对Optional优化"><a href="#Jdk-9对Optional优化" class="headerlink" title="Jdk 9对Optional优化"></a>Jdk 9对Optional优化</h2><p>首先增加了三个方法: <code>or()</code>、<code>ifPresentOrElse()</code> 和 <code>stream()</code>。or() 与orElse等方法相似，如果对象不为空返回对象，如果为空则返回or()方法中预设的值。</p><p><code>ifPresentOrElse()</code> 方法有两个参数：一个 Consumer 和一个 Runnable。如果对象不为空，会执行 Consumer 的动作，否则运行 Runnable。相比<code>ifPresent()</code>多了OrElse判断。<code>stream()</code>将Optional转换成stream，如果有值就返回包含值的stream，如果没值，就返回空的stream。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk1.8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring的IOC和Bean生命周期源码分析</title>
      <link href="/2022/12/21/spring-de-ioc-he-bean-sheng-ming-zhou-qi-yuan-ma-fen-xi/"/>
      <url>/2022/12/21/spring-de-ioc-he-bean-sheng-ming-zhou-qi-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要讲解 IOC 容器的创建过程，让你对整体有一个全局的认识，文章没有复杂嵌套的 debug 流程，相对来说比较简单。</p><p>不 BB，上文章目录。</p><p><img src="/2022/12/21/spring-de-ioc-he-bean-sheng-ming-zhou-qi-yuan-ma-fen-xi/image_e1e6c5da.png" alt="image_e1e6c5da.png"></p><h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h2><h3 id="1-1-什么是-Spring-IOC-？"><a href="#1-1-什么是-Spring-IOC-？" class="headerlink" title="1.1 什么是 Spring IOC ？"></a>1.1 什么是 Spring IOC ？</h3><p>IOC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。</p><p>传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试。</p><p>有了 IOC 容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，便于测试和功能复用，整个体系结构更加灵活。</p><p>理解 IOC 的关键是要明确 “谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，我们浅析一下：</p><ul><li><p>谁控制谁，控制什么：</p></li><li><p>传统 Java SE 程序设计，我们直接在对象内部通过 new 进行创建对象，是程序主动去创建依赖对象；</p><p>IOC 是有专门一个容器来创建这些对象，即由 IOC 容器来控制对象的创建；</p><p>谁控制谁？当然是 IOC 容器控制了对象；</p><p>控制什么？主要控制了外部资源获取。</p></li><li><p>为何反转，哪些方面反转：</p></li><li><p>传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；</p><p>反转则是由容器来帮忙创建及注入依赖对象；</p><p>为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；</p><p>哪些方面反转了？依赖对象的获取被反转了。</p></li></ul><h3 id="1-2-容器创建过程"><a href="#1-2-容器创建过程" class="headerlink" title="1.2 容器创建过程"></a>1.2 容器创建过程</h3><p>在看源码之前，首先搞清楚 Spring IOC 容器的创建过程，然后再深入源码。</p><p>IOC 容器如婚姻介绍所：</p><ul><li> 男人 A 要求需要一个女人，中介从婚姻介绍所根据男人 A 给他介绍了如花；</li><li> 男人 B 要求介绍一个肤白貌美大长腿，中介从婚姻介绍所根据男人 B 给他介绍了女神。</li></ul><p><img src="/2022/12/21/spring-de-ioc-he-bean-sheng-ming-zhou-qi-yuan-ma-fen-xi/image_ed4f1468.png" alt="image_ed4f1468.png"></p><p>从婚姻介绍所的例子可以大概知道 Spring IOC 是存储、定制、管理等功能的各种定制化的 bean 对象容器，下图是 Spring IOC 容器创建基本流程。</p><p><img src="/2022/12/21/spring-de-ioc-he-bean-sheng-ming-zhou-qi-yuan-ma-fen-xi/image_6896031e.png" alt="image_6896031e.png"></p><h2 id="2-核心知识"><a href="#2-核心知识" class="headerlink" title="2. 核心知识"></a>2. 核心知识</h2><h3 id="2-1-相关对象"><a href="#2-1-相关对象" class="headerlink" title="2.1 相关对象"></a>2.1 相关对象</h3><h4 id="2-1-1-ApplicationContext"><a href="#2-1-1-ApplicationContext" class="headerlink" title="2.1.1 ApplicationContext"></a>2.1.1 ApplicationContext</h4><p>ApplicationContext 接口是 BeanFactory 的子接口，也被称为 Spring 上下文，与 BeanFactory 一样，可以加载配置文件中定义的 bean，并进行管理。</p><p>它还加强了企业所需要的功能，如从属性文件中解析文本信息和将事件传递给所有指定的监视器，下图是 ApplicationContext 接口的继承关系。</p><p><img src="/2022/12/21/spring-de-ioc-he-bean-sheng-ming-zhou-qi-yuan-ma-fen-xi/image_ec03e23f.png" alt="image_ec03e23f.png"></p><p>ApplicationContext 接口主要的 5 个作用如表所示：</p><p><img src="/2022/12/21/spring-de-ioc-he-bean-sheng-ming-zhou-qi-yuan-ma-fen-xi/image_921b4745.png" alt="image_921b4745.png"></p><h4 id="2-1-2-BeanDefinitionReader"><a href="#2-1-2-BeanDefinitionReader" class="headerlink" title="2.1.2 BeanDefinitionReader"></a>2.1.2 BeanDefinitionReader</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 示例</span><span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置文件解析器，如将配置文件中的 bean 信息解析成对应的 BeanDefinition 对象。</p><p><img src="/2022/12/21/spring-de-ioc-he-bean-sheng-ming-zhou-qi-yuan-ma-fen-xi/image_d2b17718.png" alt="image_d2b17718.png"></p><p>xml 文件解析使用是就是BeanDefinitionReader 实现类 XmlBeanDefinitionReader。</p><h4 id="2-1-3-BeanFactoryPostProcessor"><a href="#2-1-3-BeanFactoryPostProcessor" class="headerlink" title="2.1.3 BeanFactoryPostProcessor"></a>2.1.3 BeanFactoryPostProcessor</h4><p>可以修改 Spring 上下文中 BeanDefinition 信息。</p><p>如下图 BeanFactoryPostProcessor 的子类 PropertySourcesPlaceholderConfigurer 的作用可以为数据库连接池 ${} 占位符赋值等等。</p><p><img src="/2022/12/21/spring-de-ioc-he-bean-sheng-ming-zhou-qi-yuan-ma-fen-xi/image_d00fcfb5.png" alt="image_d00fcfb5.png"></p><h4 id="2-1-4-BeanFactory"><a href="#2-1-4-BeanFactory" class="headerlink" title="2.1.4 BeanFactory"></a>2.1.4 BeanFactory</h4><p>是所有 Bean 容器的根接口，定义了 spring 容器基本方法。</p><p>如使用 getBean(beanName,Class) 获取对象。</p><p><img src="/2022/12/21/spring-de-ioc-he-bean-sheng-ming-zhou-qi-yuan-ma-fen-xi/image_8f9c91ca.png" alt="image_8f9c91ca.png"></p><h3 id="2-2-源码核心流程"><a href="#2-2-源码核心流程" class="headerlink" title="2.2 源码核心流程"></a>2.2 源码核心流程</h3><p>容器初始化的核心源码，都在 refresh() 方法中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1:准备刷新上下文环境</span>            <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2:获取初始化Bean工厂</span>            <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3:对bean工厂进行填充属性</span>            <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//4:Spring开放接口 留给子类去实现该接口</span>                <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//5:调用我们的bean工厂的后置处理器</span>                <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//6:注册我们bean后置处理器</span>                <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//7:初始化国际化资源处理器</span>                <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//8:初始化事件多播器</span>                <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//9:这个方法同样也是留个子类实现,其中springboot也是从这个方法进行tomcat的启动</span>                <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//10:把我们的事件监听器注册到多播器上</span>                <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//11:实例化所有的非懒加载的单实例bean</span>                <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//12:最后刷新容器 发布刷新事件(Spring cloud eureka也是从这里启动的)</span>                <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>                            <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// Destroy already created singletons to avoid dangling resources.</span>                <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Reset 'active' flag.</span>                <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Propagate exception to caller.</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// Reset common introspection caches in Spring's core, since we</span>                <span class="token comment">// might not ever need metadata for singleton beans anymore...</span>                <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>什么，内容不够精炼？那我再给大家上一个牛逼的思维导图：</p><p><img src="/2022/12/21/spring-de-ioc-he-bean-sheng-ming-zhou-qi-yuan-ma-fen-xi/image_10ea4763.png" alt="image_10ea4763.png"></p><h2 id="3-源码解析"><a href="#3-源码解析" class="headerlink" title="3. 源码解析"></a>3. 源码解析</h2><p>下面主要对 refresh() 的 12 个流程进行讲解。</p><h3 id="3-1-prepareRefresh"><a href="#3-1-prepareRefresh" class="headerlink" title="3.1 prepareRefresh()"></a>3.1 prepareRefresh()</h3><p>准备刷新上下文环境：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Switch to active.</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>startupDate <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>closed<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Refreshing "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/**         * 初始化上下文环境         */</span>        <span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 用来校验我们容器启动必须依赖的环境变量的值         */</span>        <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validateRequiredProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 创建一个早期事件监听器对象         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationListeners <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationListeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationListeners<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Reset local application listeners to pre-refresh state.</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>applicationListeners<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>applicationListeners<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationListeners<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/**         * 创建一个容器用于保存早期待发布的事件集合 什么是早期事件了?         * 就是我们的事件监听器还没有注册到事件多播器上的时候都称为早期事件         */</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationEvents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-ConfigurableListableBeanFactory"><a href="#3-2-ConfigurableListableBeanFactory" class="headerlink" title="3.2 ConfigurableListableBeanFactory()"></a>3.2 ConfigurableListableBeanFactory()</h3><p>获取初始化的 Bean 的工厂：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">ConfigurableListableBeanFactory</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//刷新bean工厂()</span>        <span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回之前容器准备工作的时候创建的的bean工厂也就是DefaultListableBeanFactory（很重要）</span>        <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Bean factory for "</span> <span class="token operator">+</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> beanFactory<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//由于BeanFactory只能刷新一次，多线程情况下可能导致线程安全问题，所有使用cas原子操作来保证</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>refreshed<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                    <span class="token string">"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//指定Bean工厂的序列化Id</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">setSerializationId</span><span class="token punctuation">(</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-prepareBeanFactory"><a href="#3-3-prepareBeanFactory" class="headerlink" title="3.3 prepareBeanFactory()"></a>3.3 prepareBeanFactory()</h3><p>对 Bean 工厂进行填充属性：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//设置bean工厂的类加载器为当前application应用上下文的加载器</span>        beanFactory<span class="token punctuation">.</span><span class="token function">setBeanClassLoader</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//为bean工厂设置SPEL表达式解析器对象StandardBeanExpressionResolver</span>        beanFactory<span class="token punctuation">.</span><span class="token function">setBeanExpressionResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardBeanExpressionResolver</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//为我们的bean工厂设置了一个propertyEditor属性资源编辑器对象(用于后面的给bean对象赋值使用)</span>        beanFactory<span class="token punctuation">.</span><span class="token function">addPropertyEditorRegistrar</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceEditorRegistrar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注册ApplicationContextAwareProcessor后置处理器用来处理ApplicationContextAware接口的回调方法</span>        beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationContextAwareProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 当Spring将ApplicationContextAwareProcessor注册后，那么在invokeAwarelnterfaces方法中调用的Aware类已经不是普通的bean了 ，         * 如ResourceLoaderAware、ApplicationEventPublisherAware、ApplicationContextAware等，那么当然需要在Spring做bean的依赖注入的时候忽略它们。         * 这个就是ignoreDependencyInterface的作用         */</span>        beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">EnvironmentAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">EmbeddedValueResolverAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEventPublisherAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">MessageSourceAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContextAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 注册了依赖解析，例如当注册BeanFactory.class的解析依赖后，         * 当bean的属性注入的时候，一旦检测到属性为BeanFactory类型便会将beanFactory的实例注入进去。         */</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">BeanFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEventPublisher</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注册了一个事件监听器探测器后置处理器接口</span>        beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationListenerDetector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>LOAD_TIME_WEAVER_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoadTimeWeaverAwareProcessor</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Set a temporary ClassLoader for type matching.</span>            beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextTypeMatchClassLoader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>ENVIRONMENT_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>ENVIRONMENT_BEAN_NAME<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>SYSTEM_PROPERTIES_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>SYSTEM_PROPERTIES_BEAN_NAME<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>SYSTEM_ENVIRONMENT_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>SYSTEM_ENVIRONMENT_BEAN_NAME<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-postProcessBeanFactory"><a href="#3-4-postProcessBeanFactory" class="headerlink" title="3.4 postProcessBeanFactory()"></a>3.4 postProcessBeanFactory()</h3><p>Spring 开放接口留给子类去实现该接口，主要用来改变 BeanFactory。</p><p>比如给 BeanFactory 添加一些自己的 BeanPostProcessor（Bean的后置处理器）</p><h3 id="3-5-invokeBeanFactoryPostProcessors"><a href="#3-5-invokeBeanFactoryPostProcessors" class="headerlink" title="3.5 invokeBeanFactoryPostProcessors()"></a>3.5 invokeBeanFactoryPostProcessors()</h3><p>调用我们的 bean 工厂的后置处理器，里面逻辑非常复杂，需要的同学可以和我联系，有详细讲解，就不扩展了。</p><h3 id="3-6-registerBeanPostProcessors"><a href="#3-6-registerBeanPostProcessors" class="headerlink" title="3.6 registerBeanPostProcessors()"></a>3.6 registerBeanPostProcessors()</h3><p>注册我们 bean 后置处理器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 往容器中注册了我们的bean的后置处理器     * bean的后置处理器在什么时候进行调用？在bean的生命周期中     * @param beanFactory     * @param applicationContext     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>            <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">,</span> <span class="token class-name">AbstractApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//去容器中获取所有的BeanPostProcessor的bean名称</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * beanFactory.getBeanPostProcessorCount()获取的是已经添加在beanFactory的beanPostProcessors集合中的         * postProcessorNames.length  beanFactory工厂中BeanPostProcessor个数 +1 又注册了BeanPostProcessorChecker的后置处理器         */</span>        <span class="token keyword">int</span> beanProcessorTargetCount <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanPostProcessorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> postProcessorNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanPostProcessorChecker</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> beanProcessorTargetCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 按照BeanPostProcessor实现的优先级接口来分离我们的后置处理器         */</span>        <span class="token comment">//保存实现了priorityOrdered接口的</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> priorityOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//容器内部的</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> internalPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//实现了我们ordered接口的</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> orderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//实现了我们任何优先级的</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> nonOrderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//循环我们的bean定义(BeanPostProcessor)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//若实现了PriorityOrdered接口的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">PriorityOrdered</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//显示的调用getBean流程创建bean的后置处理器</span>                <span class="token class-name">BeanPostProcessor</span> pp <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//加入到集合中</span>                priorityOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//判断是否实现了MergedBeanDefinitionPostProcessor</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token keyword">instanceof</span> <span class="token class-name">MergedBeanDefinitionPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//加入到集合中</span>                    internalPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//判断是否实现了Ordered</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                orderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                nonOrderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//把实现了priorityOrdered注册到容器中</span>        <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>priorityOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> priorityOrderedPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//处理实现Ordered的bean后置处理器</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> orderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ppName <span class="token operator">:</span> orderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//显示调用getBean方法</span>            <span class="token class-name">BeanPostProcessor</span> pp <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//加入到集合中</span>            orderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//判断是否实现了MergedBeanDefinitionPostProcessor</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token keyword">instanceof</span> <span class="token class-name">MergedBeanDefinitionPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//加入到集合中</span>                internalPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//排序并且注册我们实现了Order接口的后置处理器</span>        <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>orderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> orderedPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化我们所有的非排序接口的</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> nonOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ppName <span class="token operator">:</span> nonOrderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//显示调用</span>            <span class="token class-name">BeanPostProcessor</span> pp <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            nonOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//判断是否实现了MergedBeanDefinitionPostProcessor</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token keyword">instanceof</span> <span class="token class-name">MergedBeanDefinitionPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                internalPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//注册我们普通的没有实现任何排序接口的</span>        <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> nonOrderedPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注册MergedBeanDefinitionPostProcessor类型的后置处理器</span>        <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>internalPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> internalPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注册ApplicationListenerDetector应用监听器探测器的后置处理器</span>        beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationListenerDetector</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-7-initMessageSource"><a href="#3-7-initMessageSource" class="headerlink" title="3.7 initMessageSource()"></a>3.7 initMessageSource()</h3><p>初始化国际化资源处理器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * Initialize the MessageSource.     * Use parent's if none defined in this context.     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>MESSAGE_SOURCE_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>messageSource <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>MESSAGE_SOURCE_BEAN_NAME<span class="token punctuation">,</span> <span class="token class-name">MessageSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Make MessageSource aware of parent MessageSource.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageSource <span class="token keyword">instanceof</span> <span class="token class-name">HierarchicalMessageSource</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">HierarchicalMessageSource</span> hms <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HierarchicalMessageSource</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageSource<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>hms<span class="token punctuation">.</span><span class="token function">getParentMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// Only set parent context as parent MessageSource if no parent MessageSource</span>                    <span class="token comment">// registered already.</span>                    hms<span class="token punctuation">.</span><span class="token function">setParentMessageSource</span><span class="token punctuation">(</span><span class="token function">getInternalParentMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Using MessageSource ["</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageSource <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Use empty MessageSource to be able to accept getMessage calls.</span>            <span class="token class-name">DelegatingMessageSource</span> dms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegatingMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dms<span class="token punctuation">.</span><span class="token function">setParentMessageSource</span><span class="token punctuation">(</span><span class="token function">getInternalParentMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>messageSource <span class="token operator">=</span> dms<span class="token punctuation">;</span>            beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>MESSAGE_SOURCE_BEAN_NAME<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageSource<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Unable to locate MessageSource with name '"</span> <span class="token operator">+</span> MESSAGE_SOURCE_BEAN_NAME <span class="token operator">+</span>                        <span class="token string">"': using default ["</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageSource <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-8-initApplicationEventMulticaster"><a href="#3-8-initApplicationEventMulticaster" class="headerlink" title="3.8 initApplicationEventMulticaster()"></a>3.8 initApplicationEventMulticaster()</h3><p>初始化事件多播器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 从bean工厂中获取或者直接显示的new一个事件多播器赋值给applicatoinContext对象的applicationEventMulticaster属性     * 事件多播器采用典型的设计模式就是观察者模式 多播器作为的是一个被观察者     * @see org.springframework.context.event.SimpleApplicationEventMulticaster     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取我们的bean工厂对象</span>        <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断容器中是否包含了applicationEventMulticaster事件多播器组件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>APPLICATION_EVENT_MULTICASTER_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//直接显示的调用我们的getBean获取出来赋值给我们的applicationContext对象</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster <span class="token operator">=</span>                    beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>APPLICATION_EVENT_MULTICASTER_BEAN_NAME<span class="token punctuation">,</span> <span class="token class-name">ApplicationEventMulticaster</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Using ApplicationEventMulticaster ["</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//容器中没有的话</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//直接new一个</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleApplicationEventMulticaster</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//并且注入到容器中</span>            beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>APPLICATION_EVENT_MULTICASTER_BEAN_NAME<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Unable to locate ApplicationEventMulticaster with name '"</span> <span class="token operator">+</span>                        APPLICATION_EVENT_MULTICASTER_BEAN_NAME <span class="token operator">+</span>                        <span class="token string">"': using default ["</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-9-onRefresh"><a href="#3-9-onRefresh" class="headerlink" title="3.9 onRefresh()"></a>3.9 onRefresh()</h3><p>这个方法很重要，同样也是留个子类实现，其中 Spring Boot 就是从这个方法进行 tomcat 的启动。</p><h3 id="3-10-registerListeners"><a href="#3-10-registerListeners" class="headerlink" title="3.10 registerListeners()"></a>3.10 registerListeners()</h3><p>把我们的事件监听器注册到事件多播器上：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取容器中所有的监听器对象</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> listener <span class="token operator">:</span> <span class="token function">getApplicationListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//把监听器挨个的注册到我们的事件多播器上去</span>            <span class="token function">getApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addApplicationListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//获取bean定义中的监听器对象</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> listenerBeanNames <span class="token operator">=</span> <span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">ApplicationListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把监听器的名称注册到我们的事件多播器上</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> listenerBeanName <span class="token operator">:</span> listenerBeanNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">getApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addApplicationListenerBean</span><span class="token punctuation">(</span>listenerBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//在这里获取我们的早期事件</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApplicationEvent</span><span class="token punctuation">></span></span> earlyEventsToProcess <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationEvents<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationEvents <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>earlyEventsToProcess <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//通过多播器进行播发早期事件</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationEvent</span> earlyEvent <span class="token operator">:</span> earlyEventsToProcess<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">getApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multicastEvent</span><span class="token punctuation">(</span>earlyEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何发布事件，通过事件多播器方法：multicastEvent()，进入方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multicastEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">multicastEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token function">resolveDefaultEventType</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multicastEvent</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ApplicationEvent</span> event<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ResolvableType</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ResolvableType</span> type <span class="token operator">=</span> <span class="token punctuation">(</span>eventType <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> eventType <span class="token operator">:</span> <span class="token function">resolveDefaultEventType</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//从事件多播器中获取出所有的监听器</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> listener <span class="token operator">:</span> <span class="token function">getApplicationListeners</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//判断多播器中是否支持异步多播的</span>            <span class="token class-name">Executor</span> executor <span class="token operator">=</span> <span class="token function">getTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//异步播发事件</span>                executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">invokeListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//同步播发</span>                <span class="token function">invokeListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * Invoke the given listener with the given event.     * @param listener the ApplicationListener to invoke     * @param event the current event to propagate     * @since 4.1     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">invokeListener</span><span class="token punctuation">(</span><span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> listener<span class="token punctuation">,</span> <span class="token class-name">ApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ErrorHandler</span> errorHandler <span class="token operator">=</span> <span class="token function">getErrorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errorHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token function">doInvokeListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                errorHandler<span class="token punctuation">.</span><span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">doInvokeListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>doInvokeListener() 方法，Spring有一个特点，涉及到以 do 开头的方法都是真正干活的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span> <span class="token string">"unchecked"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doInvokeListener</span><span class="token punctuation">(</span><span class="token class-name">ApplicationListener</span> listener<span class="token punctuation">,</span> <span class="token class-name">ApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  listener<span class="token punctuation">.</span><span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassCastException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> msg <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">matchesClassCastMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// Possibly a lambda-defined listener which we could not resolve the generic event type for</span>   <span class="token comment">// -> let's suppress the exception and just log a debug message.</span>   <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Non-matching event type for listener: "</span> <span class="token operator">+</span> listener<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-11-finishBeanFactoryInitialization"><a href="#3-11-finishBeanFactoryInitialization" class="headerlink" title="3.11 finishBeanFactoryInitialization()"></a>3.11 finishBeanFactoryInitialization()</h3><p>实例化所有的非懒加载的单实例 bean，我们前几篇源码，其实都是讲的里面的方法，最重要的就是 getBean()。</p><h3 id="3-12-finishRefresh"><a href="#3-12-finishRefresh" class="headerlink" title="3.12 finishRefresh()"></a>3.12 finishRefresh()</h3><p>最后刷新容器发布刷新事件（Spring cloud eureka 也是从这里启动的）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//初始化生命周期处理器</span>        <span class="token function">initLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用生命周期处理器的onRefresh方法</span>        <span class="token function">getLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发布ContextRefreshedEvent事件</span>        <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Participate in LiveBeansView MBean, if active.</span>        <span class="token class-name">LiveBeansView</span><span class="token punctuation">.</span><span class="token function">registerApplicationContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(1) 初始化生命周期处理器：initLifecycleProcessor() 方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取beanFactory工厂</span>        <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断容器中是否有lifecycleProcessor，有就直接从容器中拿</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>LIFECYCLE_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lifecycleProcessor <span class="token operator">=</span>                    beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>LIFECYCLE_PROCESSOR_BEAN_NAME<span class="token punctuation">,</span> <span class="token class-name">LifecycleProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Using LifecycleProcessor ["</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lifecycleProcessor <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//没有创建一个DefaultLifecycleProcessor，然后注册到容器中</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DefaultLifecycleProcessor</span> defaultProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            defaultProcessor<span class="token punctuation">.</span><span class="token function">setBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lifecycleProcessor <span class="token operator">=</span> defaultProcessor<span class="token punctuation">;</span>            beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>LIFECYCLE_PROCESSOR_BEAN_NAME<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lifecycleProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Unable to locate LifecycleProcessor with name '"</span> <span class="token operator">+</span>                        LIFECYCLE_PROCESSOR_BEAN_NAME <span class="token operator">+</span>                        <span class="token string">"': using default ["</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lifecycleProcessor <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 调用生命周期处理器的 getLifecycleProcessor().onRefresh() 方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">startBeans</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>startBeans(true) 方法，主要的功能是找到 Spring 容器的 Lifecycle 类型的 Bean，然后调用 start() 去启动。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startBeans</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> autoStartupOnly<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">></span></span> lifecycleBeans <span class="token operator">=</span> <span class="token function">getLifecycleBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">LifecycleGroup</span><span class="token punctuation">></span></span> phases <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">LifecycleGroup</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> lifecycleBeans<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Lifecycle</span> bean <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>autoStartupOnly <span class="token operator">||</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">SmartLifecycle</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SmartLifecycle</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAutoStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> phase <span class="token operator">=</span> <span class="token function">getPhase</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">LifecycleGroup</span> group <span class="token operator">=</span> phases<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>phase<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>group <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LifecycleGroup</span><span class="token punctuation">(</span>phase<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>timeoutPerShutdownPhase<span class="token punctuation">,</span> lifecycleBeans<span class="token punctuation">,</span> autoStartupOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>                    phases<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>phase<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>phases<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>phases<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                phases<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>phases.get(key).start() 方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>members<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Starting beans in phase "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>phase<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>members<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">LifecycleGroupMember</span> member <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>members<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">doStart</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lifecycleBeans<span class="token punctuation">,</span> member<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>autoStartupOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doStart</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">></span></span> lifecycleBeans<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoStartupOnly<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Lifecycle</span> bean <span class="token operator">=</span> lifecycleBeans<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> bean <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dependenciesForBean <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDependenciesForBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> dependency <span class="token operator">:</span> dependenciesForBean<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">doStart</span><span class="token punctuation">(</span>lifecycleBeans<span class="token punctuation">,</span> dependency<span class="token punctuation">,</span> autoStartupOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//bean不在运行中并且(autoStartupOnly=false 或者 不是SmartLifecycle类型 或者 isAutoStartup() = true)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bean<span class="token punctuation">.</span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token operator">!</span>autoStartupOnly <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">SmartLifecycle</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SmartLifecycle</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAutoStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Starting bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' of type ["</span> <span class="token operator">+</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//调用生命周期Lifecycle Bean的start()方法</span>                    bean<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"Failed to start bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Successfully started bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3) 发布 ContextRefreshedEvent 事件：主要就是调用前面第八步创建的事件多播器的发布事件方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token class-name">Object</span> event<span class="token punctuation">,</span> <span class="token class-name">ResolvableType</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token string">"Event must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Publishing event in "</span> <span class="token operator">+</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Decorate event as an ApplicationEvent if necessary</span>        <span class="token class-name">ApplicationEvent</span> applicationEvent<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationEvent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            applicationEvent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationEvent</span><span class="token punctuation">)</span> event<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            applicationEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PayloadApplicationEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>eventType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                eventType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PayloadApplicationEvent</span><span class="token punctuation">)</span> applicationEvent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Multicast right now if possible - or lazily once the multicaster is initialized</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationEvents <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationEvents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>applicationEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">getApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multicastEvent</span><span class="token punctuation">(</span>applicationEvent<span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Publish event via parent context as well...</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token keyword">instanceof</span> <span class="token class-name">AbstractApplicationContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AbstractApplicationContext</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>总结一下本文内容：</p><ul><li> 讲述了 IOC 的基础知识，并通过婚介所的示例，讲解容器的创建过程；</li><li> 介绍容器创建的 4 个相关对象，以及 refresh() 的主流程；</li><li> 给出 refresh() 的 12 个主流程的核心源码，并附上详细注释。</li></ul><p>大家主要掌握 IOC 容器创建的思想和过程，以及 refresh() 的 12 个主流程即可，至于里面每一步流程，如果深究下去，其实内容非常多，建议后续如果需要，再深入学习。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java面试 </tag>
            
            <tag> spring ioc </tag>
            
            <tag> spring bean生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式一致性解决方案</title>
      <link href="/2022/12/21/fen-bu-shi-yi-zhi-xing-jie-jue-fang-an/"/>
      <url>/2022/12/21/fen-bu-shi-yi-zhi-xing-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<h1 id="1-分布式一致性"><a href="#1-分布式一致性" class="headerlink" title="1 分布式一致性"></a>1 分布式一致性</h1><ul><li> 什么是分布式一致性？分布式一致性其实更多是偏向解决多个服务间的数据副本状态的一致，而不同于关系型数据库的一致性（数据的约束）</li></ul><h1 id="2-分布式共识算法"><a href="#2-分布式共识算法" class="headerlink" title="2 分布式共识算法"></a>2 分布式共识算法</h1><h2 id="paoxs算法"><a href="#paoxs算法" class="headerlink" title="paoxs算法"></a>paoxs算法</h2><ul><li><p>Paxos算法是基于消息传递且具有高度容错特性的一致性算法，是目前公认的解决分布式一致性问题最有效的算法之一</p></li><li><p>Paxos算法的通俗理解</p></li><li><p>假设有十个人要去旅游，目的地有成都和拉萨两个地点。为了统一目的地，简单的方法可以拉个微信群组聊天，大家投票，按少数服从多数的原则。但是在Paxos算法里，觉得微信平台不可靠，它挂了怎么办？Paxos的原则是容错性一定要很强，所以paxos采取相互发短信</p><p>找另外三个人当中介人（也可从十个人中选，也不局限三个中介），十个人给他们发短信，中介者之间可以不通信</p></li><li><p>「申请阶段」：每个人的短信都会带一个发送时间，中介只会和最新短信的提议者交流，而且只能和一个人交流。每个人疯狂向中介发短信，希望获得沟通权</p></li><li><p>「沟通阶段」：如果获得半数的中介者沟通权。提议者则会给这些中介提议自己希望的旅游地（例如成都）。而收到的结果有三种；</p></li><li><p>Ａ: 超过半数的中介者同意，收东西去成都；</p><p>Ｂ: 至少有一个中介者决定了旅游地（不一定是成都，可能是其他提议者和中介商定的拉萨），那先看看是否超过半数的旅游地，如果没有，则下次顶最近时间选择出的旅游地</p><p>Ｃ: 失去沟通权，再继续发短信。。。。。。</p></li><li><p>Paxos的一致性，是为了解决冗余副本的一致性，和关系型数据库中ACID的一致性说的不是一个东西</p></li></ul><h2 id="Raft算法"><a href="#Raft算法" class="headerlink" title="Raft算法"></a>Raft算法</h2><ul><li><p>由于Paxos难以理解，也难以实现。于是有了新的共识算法。Raft有三种角色</p></li><li><p>Leader: 处理所有客户端交互，日志复制等，同一时刻只有一个有效的Leader</p><p>Follower: 类似选民，完全被动</p><p>Candidate候选人: 可以被选为一个新的领导人</p></li></ul><h3 id="选举阶段"><a href="#选举阶段" class="headerlink" title="选举阶段"></a>选举阶段</h3><ul><li><p>一开始任何一个服务器都是Follwer，它们内置一个倒计时，当倒计时结束时变成Candidate，向其他follwers发出要求选举自己的请求</p></li><li><p>此时有三个状态</p></li><li><p>A:超过半数follwers追随，成为新的leader</p><p>B:存在竞争者,且有超过半数追随者，放弃竞选，成为其follwer</p><p>C:存在竞争者,大家半斤八两。Candidate则在下个竞选周期term再次发起竞选，此时也有内置一个倒计时，谁先倒计时结束快，谁则先成为抢占半数follwer的leader(注意：前一轮成为别人的follwer不能在竞选了)</p></li></ul><h3 id="日志复制阶段"><a href="#日志复制阶段" class="headerlink" title="日志复制阶段"></a>日志复制阶段</h3><ul><li> １：Leader领导人已经选出，客户端发出增加一个日志的要求，比如日志是”hello”</li><li> ２：Leader要求Followe遵从他的指令，都将这个新的日志内容追加到他们各自日志中</li><li> ３：大多数follower服务器将日志写入磁盘文件后，确认追加成功，发出Commited Ok</li><li> ４：在下一个心跳heartbeat中，Leader会通知所有Follwer更新commited 项目</li><li> 如果在这一过程中，发生了网络分区或者网络通信故障。使得Leader不能访问大多数Follwers了，而follwers重新选举新的Leade对外提供服务。在恢复网络时，旧的leader会成为拥有多数follwer的新Leader的follwer。故障期间的commit回滚</li></ul><h2 id="zab算法"><a href="#zab算法" class="headerlink" title="zab算法"></a>zab算法</h2><h3 id="ZXID"><a href="#ZXID" class="headerlink" title="ZXID"></a>ZXID</h3><p>协议的事务编号 Zxid 设计中， Zxid 是一个 64位的数字</p><ul><li> 其中低 32 位是一个简单的单调递增的计数器， 针对客户端每一个事务请求，计数器加 1</li><li> 而高 32 位则代表 Leader 周期 epoch 的编号，每个当选产生一个新的 Leader 服务器，就会从这个 Leader 服务器上取出其本地日志中的最大事务 ZXID ,并从中读取 epoch 值，然后加 1 ，以此作为新的 epoch。而低 32 位计数器则从 0 开始重新计数</li></ul><h3 id="崩溃恢复模式（选举）"><a href="#崩溃恢复模式（选举）" class="headerlink" title="崩溃恢复模式（选举）"></a>崩溃恢复模式（选举）</h3><ul><li> 集群初始化或者Leader失去连接时，节点（任意节点）发起选主，然后集群其他节点会为发起选主的节点进行投票</li><li> 节点B判断确定A可以成为Leader，那么节点B就投票给节点A，判断的依据是：election epoch(A) &gt; election epoch (B) || zxid(A) &gt; zxid(B) || sid(A) &gt; sid(B)。并更新自己的投票为B投票</li><li> sid是服务ID，人为配置的</li></ul><h3 id="消息广播模式"><a href="#消息广播模式" class="headerlink" title="消息广播模式"></a>消息广播模式</h3><ul><li> Leader将客户端的request转化成一个Proposal（提议）</li><li> Leader为每一个Follower准备了一个FIFO队列，并把Proposal发送到队列上</li><li> Leader若收到follower的半数以上ACK反馈</li><li> Leader向所有的follower发送commit <img src="/2022/12/21/fen-bu-shi-yi-zhi-xing-jie-jue-fang-an/image_ecbaa8a3.png" alt="image_ecbaa8a3.png"></li></ul><h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><ul><li> Leader在收到客户端请求之后，会将这个请求封装成一个事务，并给这个事务分配一个全局递增的唯一ID，称为事务ID（ZXID），ZAB协议需要保证事务的顺序，因此必须将每一个事务按照ZXID进行先后排序然后处理</li><li> 在Leader和Follwer之间还有一个消息队列，用来解耦他们之间的耦合，解除同步阻塞</li><li> zookeeper集群中为保证任何所有进程能够有序的顺序执行，只能是 Leader 服务器接受写请求，即使是 Follower 服务器接受到客户端的请求，也会转发到 Leader 服务器进行处理</li></ul><h1 id="3-分布式事务一致性"><a href="#3-分布式事务一致性" class="headerlink" title="3 分布式事务一致性"></a>3 分布式事务一致性</h1><ul><li> 对于分布式一致性和分布式事务一致性。我更愿意区分开来：</li><li> Ａ-分布式一致性是为了解决数据分布在多个服务的状态一致(多个副本保持一致)</li><li> Ｂ-分布式事务一致性，更加类似关系型数据库的一致性，是约束数据在分布式服务的关系（比如数据ａ在服务Ａ的状态和数据b在服务B需要保持一个固定的映射关系）</li></ul><h2 id="分布式共识算法和分布式一致性的区别"><a href="#分布式共识算法和分布式一致性的区别" class="headerlink" title="分布式共识算法和分布式一致性的区别"></a>分布式共识算法和分布式一致性的区别</h2><ul><li> 共识算法就是为了解决分布式一致性的算法，但不适合解决分布式事务一致性（可以解决只是不合适）</li></ul><h1 id="4-分布式事务一致性的实现方案（XA模式和AT模式）"><a href="#4-分布式事务一致性的实现方案（XA模式和AT模式）" class="headerlink" title="4 分布式事务一致性的实现方案（XA模式和AT模式）"></a>4 分布式事务一致性的实现方案（XA模式和AT模式）</h1><ul><li> XA模式是预提交数据模式（预提交数据无法被其他事务访问），如果发生故障，则回滚预提交的数据</li><li> AT模式的数据是确认提交的，只不过存在锁，使该数据无法被其他事务访问。如果发生故障，则使用冲正操作修复数据。相对XA模式，AT模式更适合解决分布式事务，减少阻塞等待时间</li></ul><h2 id="两阶段提交-强一致性-XA模式"><a href="#两阶段提交-强一致性-XA模式" class="headerlink" title="两阶段提交(强一致性)(XA模式)"></a>两阶段提交(强一致性)(XA模式)</h2><p>二阶段提交协议（Two-phase Commit，即 2PC）是常用的分布式事务解决方案，即将事务的提交过程分为两个阶段来进行处理：准备阶段和提交阶段</p><h3 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h3><h4 id="阶段-1：准备阶段"><a href="#阶段-1：准备阶段" class="headerlink" title="阶段 1：准备阶段"></a>阶段 1：准备阶段</h4><ul><li> 协调者向所有参与者发送事务内容，询问是否可以提交事务，并等待所有参与者答复。</li><li> 各参与者执行事务操作，将 undo 和 redo 信息记入事务日志中（但不提交事务）。</li><li> 如参与者执行成功，给协调者反馈 yes，即可以提交；如执行失败，给协调者反馈 no，即不可提交</li></ul><h4 id="阶段-2：提交阶段"><a href="#阶段-2：提交阶段" class="headerlink" title="阶段 2：提交阶段"></a>阶段 2：提交阶段</h4><ul><li> 如果协调者收到了参与者的失败消息或者超时，直接给每个参与者发送回滚(rollback)消息；否则，发送提交(commit)消息。</li><li> 参与者根据协调者的指令执行提交或者回滚操作，释放所有事务处理过程中使用的锁资源</li></ul><h3 id="2PC-方案缺点："><a href="#2PC-方案缺点：" class="headerlink" title="2PC 方案缺点："></a>2PC 方案缺点：</h3><ul><li> 性能问题：所有参与者在事务提交阶段处于同步阻塞状态，占用系统资源，容易导致性能瓶颈</li><li> 可靠性问题：如果协调者存在单点故障问题，如果协调者出现故障，参与者将一直处于锁定状态</li><li> 数据一致性问题：在提交阶段commit时，如果发生局部网络问题，一部分事务参与者收到了提交消息，另一部分事务参与者没收到提交消息，会导致了节点之间数据的不一致</li></ul><h2 id="三阶段提交-强一致性-XA模式"><a href="#三阶段提交-强一致性-XA模式" class="headerlink" title="三阶段提交(强一致性)(XA模式)"></a>三阶段提交(强一致性)(XA模式)</h2><p>三阶段提交协议，是二阶段提交协议的改进版本，与二阶段提交不同的是，引入超时机制。同时在协调者和参与者中都引入超时机制</p><h3 id="处理流程-1"><a href="#处理流程-1" class="headerlink" title="处理流程"></a>处理流程</h3><h4 id="阶段-1：canCommit"><a href="#阶段-1：canCommit" class="headerlink" title="阶段 1：canCommit"></a>阶段 1：canCommit</h4><ul><li> 协调者向参与者发送 commit 请求，参与者如果可以提交就返回 yes 响应(参与者不执行事务操作)，否则返回 no 响应：</li><li> 协调者向所有参与者发出包含事务内容的 canCommit 请求，询问是否可以提交事务，并等待所有参与者答复</li><li> 参与者收到 canCommit 请求后，如果认为可以执行事务操作，则反馈 yes 并进入预备状态，否则反馈 no</li></ul><h4 id="阶段-2：preCommit"><a href="#阶段-2：preCommit" class="headerlink" title="阶段 2：preCommit"></a>阶段 2：preCommit</h4><ul><li><p>协调者根据阶段 1 canCommit 参与者的反应情况来决定是否可以进行基于事务的 preCommit 操作。根据响应情况，有以下两种可能</p></li><li><p>「情况 1」：阶段 1 所有参与者均反馈 yes，参与者预执行事务</p></li><li><p>协调者向所有参与者发出 preCommit 请求，进入准备阶段</p><p>参与者收到 preCommit 请求后，执行事务操作，将 undo 和 redo 信息记入事务日志中（但不提交事务）</p><p>各参与者向协调者反馈 ack 响应或 no 响应，并等待最终指令</p></li><li><p>「情况 2」：阶段 1 任何一个参与者反馈 no， 「或者等待协调者超时，无法收到所有参与者的反馈，即中断事务」</p></li><li><p>协调者向所有参与者发出 abort 请求</p><p>「无论收到协调者发出的 abort 请求，或者在等待协调者请求过程中出现超时，参与者均会中断事务」</p></li></ul><h4 id="阶段-3：do-Commit"><a href="#阶段-3：do-Commit" class="headerlink" title="阶段 3：do Commit"></a>阶段 3：do Commit</h4><ul><li><p>该阶段进行真正的事务提交，分为以下三种情况</p></li><li><p>「情况 1」：阶段 2 所有参与者均反馈 ack 响应，执行真正的事务提交</p></li><li><p>如果协调者处于工作状态，则向所有参与者发出 do Commit 请求，参与者收到 do Commit 请求后，会正式执行事务提交，并释放整个事务期间占用的资源</p><p>各参与者向协调者反馈 ack 完成的消息，协调者收到所有参与者反馈的 ack 消息后，即完成事务提交</p></li><li><p>「情况 2」：阶段 2 任何一个参与者反馈 no，或者等待超时后协调者尚无法收到所有参与者的反馈，即中断事务</p></li><li><p>如果协调者处于工作状态，向所有参与者发出 abort 请求，参与者使用阶段 1 中的 undo 信息执行回滚操作，并释放整个事务期间占用的资源</p><p>各参与者向协调者反馈 ack 完成的消息，协调者收到所有参与者反馈的 ack 消息后，即完成事务中断</p></li><li><p>「情况 3」：协调者与参与者网络出现问题</p></li><li><p>「参与者在协调者发出　do Commit　或 abort 请求等待超时，仍会继续执行事务提交」</p></li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li> 优点：在第二阶段，在等待超时后协调者或参与者会中断事务</li><li> 优点：在第三阶段，避免了协调者单点问题，在协调者出现问题时，参与者会继续提交事务(同时也是个缺点)</li><li> 缺点：数据不一致问题依然存在，在第三阶段，如果协调者请求中断事务，而协调者无法与参与者正常通信，会导致参与者继续提交事务，造成数据不一致</li></ul><h2 id="柔性事务TCC-XA模式在服务级别的实现"><a href="#柔性事务TCC-XA模式在服务级别的实现" class="headerlink" title="柔性事务TCC (XA模式在服务级别的实现)"></a>柔性事务TCC (XA模式在服务级别的实现)</h2><p><img src="/2022/12/21/fen-bu-shi-yi-zhi-xing-jie-jue-fang-an/image_0e5c7c25.png" alt="image_0e5c7c25.png"> image.png</p><ul><li> Try阶段：需要做资源的检查和预留。在扣钱场景下，Try 要做的事情是就是检查账户可用余额是否充足，再冻结账户的资金。Try 方法执行之后，账号余额虽然还是100，但是其中 30 元已经被冻结了，不能被其他事务使用</li><li> Confirm阶段：扣减 Try 阶段冻结的资金，Confirm 方法执行之后，账号在一阶段中冻结的 30 元已经被扣除，账号 A 余额变成 70 元</li><li> Cancel阶段：回滚的话，就需要在 Cancel 方法内释放一阶段 Try 冻结的 30 元，使账号的余额回到初始状态，100 元全部可用</li></ul><h2 id="AT模式（阿里分布式框架seata）"><a href="#AT模式（阿里分布式框架seata）" class="headerlink" title="AT模式（阿里分布式框架seata）"></a>AT模式（阿里分布式框架seata）</h2><h3 id="一阶段：提交"><a href="#一阶段：提交" class="headerlink" title="一阶段：提交"></a>一阶段：提交</h3><p><img src="/2022/12/21/fen-bu-shi-yi-zhi-xing-jie-jue-fang-an/image_421159f4.png" alt="image_421159f4.png"> image.png</p><ul><li> 在一阶段，Seata 会拦截“业务 SQL”，首先解析SQL语义，找到“业务 SQL”要更新的业务数据，在业务数据被更新前，将其保存成“before image”，然后执行“业务 SQL”更新业务数据，在业务数据更新之后，再将其保存成“after image”，最后生成行锁。以上操作全部在一个数据库事务内完成，这样保证了一阶段操作的原子性</li></ul><h3 id="二阶段提交或回滚"><a href="#二阶段提交或回滚" class="headerlink" title="二阶段提交或回滚"></a>二阶段提交或回滚</h3><p><img src="/2022/12/21/fen-bu-shi-yi-zhi-xing-jie-jue-fang-an/image_46545897.png" alt="image_46545897.png"> image.png</p><ul><li> 二阶段如果是提交的话，因为“业务 SQL”在一阶段已经提交至数据库， 所以 Seata 框架只需将一阶段保存的快照数据和行锁删掉，完成数据清理即可</li></ul><p><img src="/2022/12/21/fen-bu-shi-yi-zhi-xing-jie-jue-fang-an/image_3b8f6282.png" alt="image_3b8f6282.png"> image.png</p><ul><li> 二阶段如果是回滚的话，Seata 就需要回滚一阶段已经执行的“业务 SQL”，还原业务数据</li><li> 回滚方式便是用“before image”还原业务数据；但在还原前要首先要校验脏写，对比“数据库当前业务数据”和 “after image”，如果两份数据完全一致就说明没有脏写，可以还原业务数据，如果不一致就说明有脏写，出现脏写就需要转人工处理</li></ul><h2 id="事件通知-事务消息"><a href="#事件通知-事务消息" class="headerlink" title="事件通知(事务消息)"></a>事件通知(事务消息)</h2><h3 id="同步通知"><a href="#同步通知" class="headerlink" title="同步通知"></a>同步通知</h3><p><img src="/2022/12/21/fen-bu-shi-yi-zhi-xing-jie-jue-fang-an/image_c554a9fc.png" alt="image_c554a9fc.png"> image.png</p><ul><li> 人的惯性思维都会考虑到同步调用，这是简单易实现的方案。但是相对第三方系统，其是不可靠的，内部处理超时，网络断开，很容易出事故。而且等待接口返回，是个阻塞过程，影响系统性能</li></ul><h3 id="异步回调通知"><a href="#异步回调通知" class="headerlink" title="异步回调通知"></a>异步回调通知</h3><p><img src="/2022/12/21/fen-bu-shi-yi-zhi-xing-jie-jue-fang-an/image_f3b97fc9.png" alt="image_f3b97fc9.png"> image.png</p><ul><li> 相对同步通知，它的处理接口是异步回调的。因此可以避免超时处理，超时返回的问题</li><li> 考虑到回调时接口报错则需要发起重试回调，因此需要加入重试机制</li></ul><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p><img src="/2022/12/21/fen-bu-shi-yi-zhi-xing-jie-jue-fang-an/image_88f52780.png" alt="image_88f52780.png"> image.png</p><ul><li> 消息队列可以解耦服务，并且解决了错误重试的问题</li><li> 因为调接口会出错或者重复调用，需要保证接口幂等性</li><li> 普通消息处理存在的一致性问题：发送者业务逻辑处理成功　-&gt;　MQ存储消息成功　-&gt;　但是MQ处理超时　-&gt;　从而ACK确认失败　-&gt;　导致发送者本地事务回滚，但实际MQ是处理成功</li><li> 如果存在处理返回结果也可以通过消息队列回传</li></ul><h3 id="事务状态表-消息队列方案"><a href="#事务状态表-消息队列方案" class="headerlink" title="事务状态表+消息队列方案"></a>事务状态表+消息队列方案</h3><p><img src="/2022/12/21/fen-bu-shi-yi-zhi-xing-jie-jue-fang-an/image_637b2395.png" alt="image_637b2395.png"> image.png</p><ul><li> 基于本地消息的最终一致性方案的最核心做法就是在执行业务操作的时候，记录一条消息数据到DB，并且消息数据的记录与业务数据的记录必须在同一个事务内完成</li><li> 在记录完成后消息数据后，可以通过一个定时任务到DB中去轮训状态为待发送的消息，然后将消息投递给MQ。这个过程中可能存在消息投递失败的可能，此时就依靠重试机制来保证，直到成功收到MQ的ACK确认之后，再将消息状态更新或者消息清除</li><li> 同样也需要保障接口的幂等性</li></ul>]]></content>
      
      
      <categories>
          
          <category> java架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式事务 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务详解</title>
      <link href="/2022/12/21/fen-bu-shi-shi-wu-xiang-jie/"/>
      <url>/2022/12/21/fen-bu-shi-shi-wu-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="文章纲要"><a href="#文章纲要" class="headerlink" title="文章纲要"></a>文章纲要</h2><ol><li> 此次分享的缘由</li><li> 目前分布式事务问题是怎么解决的</li><li> 行业中有什么解决方案</li><li> 这些解决方案分别有什么优缺点</li><li> 别人是怎么做的</li><li> 我们可以怎么来做</li></ol><h2 id="此次分享的缘由"><a href="#此次分享的缘由" class="headerlink" title="此次分享的缘由"></a>此次分享的缘由</h2><p>支付重构</p><p>考虑支付重构的时候，自然想到原本属于一个本地事务中的处理，现在要跨应用了要怎么处理。拿充值订单举个栗子吧，假设：原本订单模块和账户模块是放在一起的，现在需要做服务拆分，拆分成订单服务，账户服务。原本收到充值回调后，可以将修改订单状态和增加金币放在一个mysql事务中完成的，但是呢，因为服务拆分了，就面临着需要协调2个服务才能完成这个事务</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-xiang-jie/image_0617d87e.png" alt="image_0617d87e.png"></p><p>所以就带出来，我们今天要分享和讨论的话题是：怎么解决分布式场景下数据一致性问题，暂且用分布式事务来定义吧。</p><p>同样的问题还存在于其他的场景：</p><p>送礼：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> 调用支付服务：先扣送礼用户的金币，然后给主播加相应的荔枝<span class="token number">2.</span> 确认第一步成功后，播放特效，发聊天室送礼评论等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>充值成功消息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> 完成充值订单<span class="token number">2.</span> 发送订单完成的kafka消息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在涉及支付交易等付费接口的时候，数据一致性的问题就显得尤为重要，因为都是钱啊</p><h2 id="目前分布式事务是怎么解决的呢？"><a href="#目前分布式事务是怎么解决的呢？" class="headerlink" title="目前分布式事务是怎么解决的呢？"></a>目前分布式事务是怎么解决的呢？</h2><p>问题肯定不是新问题，也就是目前已经有相应的解决方案了，那就看一下现在是怎么来解决这类问题的吧。</p><blockquote><p>以购买基础商品成功后发送支付订单完成消息为例：</p><p>假设支付下单购买基础商品，此刻已经收到支付回调，订单已经处理成功了，这个时候kafka服务故障，消息发送失败；而这个时候处理订单的事务已经提交了，怎么保证订单完成的消息一定能发出去呢？</p></blockquote><p><img src="/2022/12/21/fen-bu-shi-shi-wu-xiang-jie/image_93eae62a.png" alt="image_93eae62a.png"></p><p>解读一下这个流程：</p><p>绿色部分，表示流程正常运行的交互过程：</p><ol><li> 先往JobController中提交一个job（用于故障恢复）</li><li> 提交成功后，开始处理订单逻辑</li><li> 处理完订单逻辑之后，开始发送kafka消息</li><li> 消息也发送成功后，删除第一步提交的job</li></ol><p>黄色部分，表示流程出现了异常，数据可能存在不一致现象。这个时候就需要进行流程恢复</p><ol><li> JobController任务控制器定时去redis查询延时任务列表（每个任务都有一个时间戳，按时间戳排序过滤）</li><li> 将任务进行恢复（调用job注册时定义的处理方法）</li><li> 任务执行成功，表示流程完成；否则下一个定时周期重试</li></ol><p>问题：</p><ol><li> 基于redis存储恢复任务，可能存在数据丢失风险</li><li> 架构体系中没有统一的分布式事务规范，可否将这层逻辑独立为分布式事务中间件</li><li> 缺少事务执行策略管理，如：控制最大重试次数等</li><li> 事务执行状态没有记录，追查需要去翻看日志</li></ol><h2 id="行业中有什么解决方案"><a href="#行业中有什么解决方案" class="headerlink" title="行业中有什么解决方案"></a>行业中有什么解决方案</h2><blockquote><p>说解决方案之前，我们先了解一下这些方案的理论依据，有助于帮助我们来理解和实践这些方案</p></blockquote><h3 id="理论依据（讨论的前提）"><a href="#理论依据（讨论的前提）" class="headerlink" title="理论依据（讨论的前提）"></a>理论依据（讨论的前提）</h3><h4 id="本地事务、分布式事务"><a href="#本地事务、分布式事务" class="headerlink" title="本地事务、分布式事务"></a>本地事务、分布式事务</h4><p>如果说本地事务是解决单个数据源上的数据操作的一致性问题的话，那么分布式事务则是为了解决跨越多个数据源上数据操作的一致性问题。</p><h4 id="强一致性、弱一致性、最终一致性"><a href="#强一致性、弱一致性、最终一致性" class="headerlink" title="强一致性、弱一致性、最终一致性"></a>强一致性、弱一致性、最终一致性</h4><p>从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是强一致性。如果能容忍后续的部分或者全部访问不到，则是弱一致性。如果经过一段时间后要求能访问到更新后的数据，则是最终一致性.</p><p>从服务端角度，如何尽快将更新后的数据分布到整个系统，降低达到最终一致性的时间窗口，是提高系统的可用度和用户体验非常重要的方面。对于分布式数据系统：</p><ul><li> N — 数据复制的份数</li><li> W — 更新数据时需要保证写完成的节点数</li><li> R — 读取数据的时候需要读取的节点数</li></ul><p>如果W+R&gt;N，写的节点和读的节点重叠，则是强一致性。例如对于典型的一主一备同步复制的关系型数据库，N=2,W=2,R=1，则不管读的是主库还是备库的数据，都是一致的。</p><p>如果W+R&lt;=N，则是弱一致性。例如对于一主一备异步复制的关系型数据库，N=2,W=1,R=1，则如果读的是备库，就可能无法读取主库已经更新过的数据，所以是弱一致性。</p><h4 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h4><p>分布式环境下（数据分布）要任何时刻保证数据一致性是不可能的，只能采取妥协的方案来保证数据最终一致性。这个也就是著名的CAP定理。</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-xiang-jie/image_c6b076c4.png" alt="image_c6b076c4.png"></p><p>需要明确的一点是，对于一个分布式系统而言，分区容错性是一个最基本的要求。因为 既然是一个分布式系统，那么分布式系统中的组件必然需要被部署到不同的节点，否则也就无所谓分布式系统了，因此必然出现子网络。而对于分布式系统而言，网 络问题又是一个必定会出现的异常情况，因此分区容错性也就成为了一个分布式系统必然需要面对和解决的问题。因此系统架构师往往需要把精力花在如何根据业务 特点在C（一致性）和A（可用性）之间寻求平衡。</p><h4 id="BASE-理论"><a href="#BASE-理论" class="headerlink" title="BASE 理论"></a>BASE 理论</h4><p>BASE是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的缩写。BASE理论是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结， 是基于CAP定理逐步演化而来的。BASE理论的核心思想是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。</p><p>BASE理论面向的是大型高可用可扩展的分布式系统，和传统的事物ACID特性是相反的，它完全不同于ACID的强一致性模型，而是通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。但同时，在实际的分布式场景中，不同业务单元和组件对数据一致性的要求是不同的，因此在具体的分布式系统架构设计过程中，ACID特性和BASE理论往往又会结合在一起。</p><h4 id="柔性事务"><a href="#柔性事务" class="headerlink" title="柔性事务"></a>柔性事务</h4><p>不同于ACID的刚性事务，在分布式场景下基于BASE理论，就出现了柔性事务的概念。要想通过柔性事务来达到最终的一致性，就需要依赖于一些特性，这些特性在具体的方案中不一定都要满足，因为不同的方案要求不一样；但是都不满足的话，是不可能做柔性事务的。</p><h4 id="可见性-对外可查询"><a href="#可见性-对外可查询" class="headerlink" title="可见性(对外可查询)"></a>可见性(对外可查询)</h4><p>在分布式事务执行过程中，如果某一个步骤执行出错，就需要明确的知道其他几个操作的处理情况，这就需要其他的服务都能够提供查询接口，保证可以通过查询来判断操作的处理情况。</p><p>为了保证操作的可查询，需要对于每一个服务的每一次调用都有一个全局唯一的标识，可以是业务单据号（如订单号）、也可以是系统分配的操作流水号（如支付记录流水号）。除此之外，操作的时间信息也要有完整的记录。</p><h4 id="幂等操作"><a href="#幂等操作" class="headerlink" title="幂等操作"></a>幂等操作</h4><p>幂等性，其实是一个数学概念。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。</p><blockquote><p>f(f(x)) = f(x)</p></blockquote><p>在编程中一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。也就是说，同一个方法，使用同样的参数，调用多次产生的业务结果与调用一次产生的业务结果相同。这一个要求其实也比较好理解，因为要保证数据的最终一致性，很多解决防范都会有很多重试的操作，如果一个方法不保证幂等，那么将无法被重试。幂等操作的实现方式有多种，如在系统中缓存所有的请求与处理结果、检测到重复操作后，直接返回上一次的处理结果等</p><h3 id="业界方案"><a href="#业界方案" class="headerlink" title="业界方案"></a>业界方案</h3><h4 id="两阶段提交（2PC）"><a href="#两阶段提交（2PC）" class="headerlink" title="两阶段提交（2PC）"></a>两阶段提交（2PC）</h4><p>XA是X/Open CAE Specification (Distributed Transaction Processing)模型中定义的TM（Transaction Manager）与RM（Resource Manager）之间进行通信的接口。</p><p>在XA规范中，数据库充当RM角色，应用需要充当TM的角色，即生成全局的txId，调用XAResource接口，把多个本地事务协调为全局统一的分布式事务。</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-xiang-jie/image_59f993d3.png" alt="image_59f993d3.png"></p><p>二阶段提交是XA的标准实现。它将分布式事务的提交拆分为2个阶段：prepare和commit/rollback。</p><p>2PC模型中，在prepare阶段需要等待所有参与子事务的反馈，因此可能造成数据库资源锁定时间过长，不适合并发高以及子事务生命周长较长的业务场景。两阶段提交这种解决方案属于牺牲了一部分可用性来换取的一致性。</p><h4 id="saga"><a href="#saga" class="headerlink" title="saga"></a>saga</h4><p>saga的提出，最早是为了解决可能会长时间运行的分布式事务（long-running process）的问题。所谓long-running的分布式事务，是指那些企业业务流程，需要跨应用、跨企业来完成某个事务，甚至在事务流程中还需要有手工操作的参与，这类事务的完成时间可能以分计，以小时计，甚至可能以天计。这类事务如果按照事务的ACID的要求去设计，势必造成系统的可用性大大的降低。试想一个由两台服务器一起参与的事务，服务器A发起事务，服务器B参与事务，B的事务需要人工参与，所以处理时间可能很长。如果按照ACID的原则，要保持事务的隔离性、一致性，服务器A中发起的事务中使用到的事务资源将会被锁定，不允许其他应用访问到事务过程中的中间结果，直到整个事务被提交或者回滚。这就造成事务A中的资源被长时间锁定，系统的可用性将不可接受。</p><p>而saga，则是一种基于补偿的消息驱动的用于解决long-running process的一种解决方案。目标是为了在确保系统高可用的前提下尽量确保数据的一致性。 还是上面的例子，如果用saga来实现，那就是这样的流程：服务器A的事务先执行，如果执行顺利，那么事务A就先行提交；如果提交成功，那么就开始执行事务B，如果事务B也执行顺利，则事务B也提交，整个事务就算完成。但是如果事务B执行失败，那事务B本身需要回滚，这时因为事务A已经提交，所以需要执行一个补偿操作，将已经提交的事务A执行的操作作反操作，恢复到未执行前事务A的状态。这样的基于消息驱动的实现思路，就是saga。我们可以看出，saga是牺牲了数据的强一致性，仅仅实现了最终一致性，但是提高了系统整体的可用性。</p><h4 id="补偿事务（TCC）"><a href="#补偿事务（TCC）" class="headerlink" title="补偿事务（TCC）"></a>补偿事务（TCC）</h4><p>TCC 其实就是采用的补偿机制，其核心思想是：针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作。TCC模型是把锁的粒度完全交给业务处理。它分为三个阶段：</p><ol><li> Try 阶段主要是对业务系统做检测及资源预留</li><li> Confirm 阶段主要是对业务系统做确认提交，Try阶段执行成功并开始执行 Confirm阶段时，默认 Confirm阶段是不会出错的。即：只要Try成功，Confirm一定成功。</li><li> Cancel 阶段主要是在业务执行错误，需要回滚的状态下执行的业务取消，预留资源释放</li></ol><p>下面对TCC模式下，A账户往B账户汇款100元为例子，对业务的改造进行详细的分析：</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-xiang-jie/image_cdfe1873.png" alt="image_cdfe1873.png"></p><p>汇款服务和收款服务分别需要实现，Try-Confirm-Cancel接口，并在业务初始化阶段将其注入到TCC事务管理器中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>汇款服务<span class="token punctuation">]</span><span class="token class-name">Try</span>：    检查<span class="token class-name">A</span>账户有效性，即查看<span class="token class-name">A</span>账户的状态是否为“转帐中”或者“冻结”；    检查<span class="token class-name">A</span>账户余额是否充足；    从<span class="token class-name">A</span>账户中扣减<span class="token number">100</span>元，并将状态置为“转账中”；    预留扣减资源，将从<span class="token class-name">A</span>往<span class="token class-name">B</span>账户转账<span class="token number">100</span>元这个事件存入消息或者日志中；<span class="token class-name">Confirm</span>： 不做任何操作；<span class="token class-name">Cancel</span>：    <span class="token class-name">A</span>账户增加<span class="token number">100</span>元； 从日志或者消息中，释放扣减资源。<span class="token punctuation">[</span>收款服务<span class="token punctuation">]</span><span class="token class-name">Try</span>： 检查<span class="token class-name">B</span>账户账户是否有效；<span class="token class-name">Confirm</span>：    读取日志或者消息，<span class="token class-name">B</span>账户增加<span class="token number">100</span>元；    从日志或者消息中，释放扣减资源；<span class="token class-name">Cancel</span>： 不做任何操作。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此可以看出，TCC模型对业务的侵入强，改造的难度大。</p><h4 id="本地消息表（异步确保）"><a href="#本地消息表（异步确保）" class="headerlink" title="本地消息表（异步确保）"></a>本地消息表（异步确保）</h4><p>本地消息表这种实现方式应该是业界使用最多的，其核心思想是将分布式事务拆分成本地事务进行处理，这种思路是来源于ebay。我们可以从下面的流程图中看出其中的一些细节：</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-xiang-jie/image_c4314832.png" alt="image_c4314832.png"></p><p>基本思路就是：</p><p>消息生产方，需要额外建一个消息表，并记录消息发送状态。消息表和业务数据要在一个事务里提交，也就是说他们要在一个数据库里面。然后消息会经过MQ发送到消息的消费方。如果消息发送失败，会进行重试发送。</p><p>消息消费方，需要处理这个消息，并完成自己的业务逻辑。此时如果本地事务处理成功，表明已经处理成功了，如果处理失败，那么就会重试执行。如果是业务上面的失败，可以给生产方发送一个业务补偿消息，通知生产方进行回滚等操作。</p><p>生产方和消费方定时扫描本地消息表，把还没处理完成的消息或者失败的消息再发送一遍。如果有靠谱的自动对账补账逻辑，这种方案还是非常实用的。</p><h4 id="事务消息"><a href="#事务消息" class="headerlink" title="事务消息"></a>事务消息</h4><p>事务消息作为一种异步确保型事务， 将两个事务分支通过MQ进行异步解耦，事务消息的设计流程同样借鉴了两阶段提交理论，整体交互流程如下图所示：</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-xiang-jie/image_261fbce2.png" alt="image_261fbce2.png"></p><ol><li> 事务发起方首先发送prepare消息到MQ。</li><li> 在发送prepare消息成功后执行本地事务。</li><li> 根据本地事务执行结果返回commit或者是rollback。</li><li> 如果消息是rollback，MQ将删除该prepare消息不进行下发，如果是commit消息，MQ将会把这个消息发送给consumer端。</li><li> 如果执行本地事务过程中，执行端挂掉，或者超时，MQ将会不停的询问其同组的其它producer来获取状态。</li><li> Consumer端的消费成功机制有MQ保证。</li></ol><p>有一些第三方的MQ是支持事务消息的，比如RocketMQ，但是市面上一些主流的MQ都是不支持事务消息的，比如 RabbitMQ 和 Kafka 都不支持。</p><h4 id="尽最大努力通知"><a href="#尽最大努力通知" class="headerlink" title="尽最大努力通知"></a>尽最大努力通知</h4><p>最大努力通知方案主要也是借助MQ消息系统来进行事务控制，这一点与可靠消息最终一致方案一样。看来MQ中间件确实在一个分布式系统架构中，扮演者重要的角色。最大努力通知方案是比较简单的分布式事务方案，它本质上就是通过定期校对，实现数据一致性。</p><p>最大努力通知方案的实现:</p><ol><li> 业务活动的主动方，在完成业务处理之后，向业务活动的被动方发送消息，允许消息丢失。</li><li> 主动方可以设置时间阶梯型通知规则，在通知失败后按规则重复通知，直到通知N次后不再通知。</li><li> 主动方提供校对查询接口给被动方按需校对查询，用于恢复丢失的业务消息。</li><li> 业务活动的被动方如果正常接收了数据，就正常返回响应，并结束事务。</li><li> 如果被动方没有正常接收，根据定时策略，向业务活动主动方查询，恢复丢失的业务消息</li></ol><p>最大努力通知方案的特点:</p><ol><li> 用到的服务模式：可查询操作、幂等操作。</li><li> 被动方的处理结果不影响主动方的处理结果；</li><li> 适用于对业务最终一致性的时间敏感度低的系统；</li><li> 适合跨企业的系统间的操作，或者企业内部比较独立的系统间的操作，比如银行通知、商户通知等；</li></ol><h2 id="方案对比"><a href="#方案对比" class="headerlink" title="方案对比"></a>方案对比</h2><table>  <thead>   <tr>    <th>属性</th>    <th>2PC</th>    <th>TCC</th>    <th>本地消息表</th>    <th>事务消息</th>    <th>尽最大努力通知</th>   </tr>  </thead>  <tbody>   <tr>    <td>事务一致性</td>    <td>强</td>    <td>弱</td>    <td>弱</td>    <td>弱</td>    <td>弱</td>   </tr>   <tr>    <td>复杂性</td>    <td>中</td>    <td>高</td>    <td>低</td>    <td>低</td>    <td>低</td>   </tr>   <tr>    <td>业务侵入性</td>    <td>小</td>    <td>大</td>    <td>中</td>    <td>中</td>    <td>中</td>   </tr>   <tr>    <td>使用局限性</td>    <td>大</td>    <td>大</td>    <td>小</td>    <td>中</td>    <td>中</td>   </tr>   <tr>    <td>性能</td>    <td>低</td>    <td>中</td>    <td>高</td>    <td>高</td>    <td>高</td>   </tr>   <tr>    <td>维护成本</td>    <td>低</td>    <td>高</td>    <td>低</td>    <td>中</td>    <td>中</td>   </tr>  </tbody> </table><h2 id="别人是怎么做的"><a href="#别人是怎么做的" class="headerlink" title="别人是怎么做的"></a>别人是怎么做的</h2><h3 id="alipay的分布式事务服务DTS"><a href="#alipay的分布式事务服务DTS" class="headerlink" title="alipay的分布式事务服务DTS"></a>alipay的分布式事务服务DTS</h3><p>分布式事务服务（Distributed Transaction Service，简称 DTS）是一个分布式事务框架，用来保障在大规模分布式环境下事务的最终一致性。DTS 从架构上分为 xts-client 和 xts-server 两部分，前者是一个嵌入客户端应用的 Jar 包，主要负责事务数据的写入和处理；后者是一个独立的系统，主要负责异常事务的恢复。</p><p>核心概念</p><p>在 DTS 内部，我们将一个分布式事务的关联方，分为发起方和参与者两类：</p><p>发起方： 分布式事务的发起方负责启动分布式事务，触发创建相应的主事务记录。发起方是分布式事务的协调者，负责调用参与者的服务，并记录相应的事务日志，感知整个分布式事务状态来决定整个事务是 COMMIT 还是 ROLLBACK。</p><p>参与者： 参与者是分布式事务中的一个原子单位，所有参与者都必须在一阶段接口（Prepare）中标注（Annotation）参与者的标识，它定义了 prepare、commit、rollback 3个基本接口，业务系统需要实现这3个接口，并保证其业务数据的幂等性，也必须保证 prepare 中的数据操作能够被提交（COMMIT）或者回滚（ROLLBACK）。从存储结构上，DTS 的事务状态数据可以分为主事务记录（Activity）和分支事务记录（Action）两类：</p><ul><li> 主事务记录 Activity：主事务记录是整个分布式事务的主体，其最核心的数据结构是事务号（TX_ID）和事务状态（STATE），它是在启动分布式事务的时候持久化写入数据库的，它的状态决定了这笔分布式事务的状态。</li><li> 分支事务记录 Action： 分支事务记录是主事务记录的一个子集，它记录了一个参与者的信息，其中包括参与者的 NAME 名称，DTS 通过这个 NAME 来唯一定位一个参与者。通过这个分支事务信息，我们就可以对参与者进行提交或者回滚操作。</li></ul><p>这应该属于我们上面所说的TCC模式。</p><h3 id="eBay-本地消息表"><a href="#eBay-本地消息表" class="headerlink" title="eBay 本地消息表"></a>eBay 本地消息表</h3><p>本地消息表这种实现方式的思路，其实是源于ebay，后来通过支付宝等公司的布道，在业内广泛使用。其基本的设计思想是将远程分布式事务拆分成一系列的本地事务。如果不考虑性能及设计优雅，借助关系型数据库中的表即可实现。</p><p>举个经典的跨行转账的例子来描述。第一步，扣款1W，通过本地事务保证了凭证消息插入到消息表中。第二步，通知对方银行账户上加1W了。那问题来了，如何通知到对方呢？</p><p>通常采用两种方式：</p><ol><li> 采用时效性高的MQ，由对方订阅消息并监听，有消息时自动触发事件</li><li> 采用定时轮询扫描的方式，去检查消息表的数据。</li></ol><p>类似使用本地消息表+消息通知的还有去哪儿，蘑菇街</p><h3 id="各种第三方支付回调"><a href="#各种第三方支付回调" class="headerlink" title="各种第三方支付回调"></a>各种第三方支付回调</h3><p>最大努力通知型。如支付宝、微信的支付回调接口方式，不断回调直至成功，或直至调用次数衰减至失败状态。</p><h2 id="我们可以怎么来做"><a href="#我们可以怎么来做" class="headerlink" title="我们可以怎么来做"></a>我们可以怎么来做</h2><p>2PC/3PC需要资源管理器(mysql, redis)支持XA协议，且整个事务的执行期间需要锁住事务资源，会降低性能。故先排除。</p><p>TCC的模式，需要事务接口提供try,confirm,cancel三个接口，提高了编程的复杂性。需要依赖于业务方来配合提供这样的接口。推行难度大，暂时排除。</p><p>最大努力通知型，应用于异构或者服务平台当中</p><p>可以看到ebay的经典模式中，分布式的事务，是通过本地事务+可靠消息，来达到事务的最终一致性的。但是出现了事务消息，就把本地事务的工作给涵盖在事务消息当中了。所以，接下来要基于事务消息来套我们的应用场景，看起是否满足我们对分布式事务产品的要求。</p>]]></content>
      
      
      <categories>
          
          <category> java架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式事务 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务基础</title>
      <link href="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/"/>
      <url>/2022/12/21/fen-bu-shi-shi-wu-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近看了几篇有关于分布式事务的博文，做一下笔记。哈哈~</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/image_bfd05b46.png" alt="image_bfd05b46.png"></p><h2 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h2><p>数据库事务（简称：事务），是数据库管理系统执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。</p><p>数据库事务的几个典型特性：原子性(Atomicity )、一致性( Consistency )、隔离性( Isolation)和持久性(Durabilily)，简称就是ACID。</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/image_5a0bde56.png" alt="image_5a0bde56.png"></p><ul><li> 原子性： 事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。</li><li> 一致性： 指在事务开始之前和事务结束以后，数据不会被破坏，假如A账户给B账户转10块钱，不管成功与否，A和B的总金额是不变的。</li><li> 隔离性： 多个事务并发访问时，事务之间是相互隔离的，即一个事务不影响其它事务运行效果。简言之，就是事务之间是进水不犯河水的。</li><li> 持久性： 表示事务完成以后，该事务对数据库所作的操作更改，将持久地保存在数据库之中。</li></ul><h2 id="事务的实现原理"><a href="#事务的实现原理" class="headerlink" title="事务的实现原理"></a>事务的实现原理</h2><h3 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h3><p>传统的单服务器，单关系型数据库下的事务，就是本地事务。本地事务由资源管理器管理，JDBC事务就是一个非常典型的本地事务。<img src="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/image_1089646c.png" alt="image_1089646c.png"></p><h3 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h3><p>innodb事务日志包括redo log和undo log。</p><h4 id="redo-log（重做日志）"><a href="#redo-log（重做日志）" class="headerlink" title="redo log（重做日志）"></a>redo log（重做日志）</h4><p>redo log通常是物理日志，记录的是数据页的物理修改，而不是某一行或某几行修改成怎样，它用来恢复提交后的物理数据页。</p><h4 id="undo-log（回滚日志）"><a href="#undo-log（回滚日志）" class="headerlink" title="undo log（回滚日志）"></a>undo log（回滚日志）</h4><p>undo log是逻辑日志，和redo log记录物理日志的不一样。可以这样认为，当delete一条记录时，undo log中会记录一条对应的insert记录，当update一条记录时，它记录一条对应相反的update记录。</p><h3 id="事务ACID特性的实现思想"><a href="#事务ACID特性的实现思想" class="headerlink" title="事务ACID特性的实现思想"></a>事务ACID特性的实现思想</h3><ul><li> 原子性：是使用 undo log来实现的，如果事务执行过程中出错或者用户执行了rollback，系统通过undo log日志返回事务开始的状态。</li><li> 持久性：使用 redo log来实现，只要redo log日志持久化了，当系统崩溃，即可通过redo log把数据恢复。</li><li> 隔离性：通过锁以及MVCC,使事务相互隔离开。</li><li> 一致性：通过回滚、恢复，以及并发情况下的隔离性，从而实现一致性。</li></ul><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><p>分布式事务： 就是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。简单来说，分布式事务指的就是分布式系统中的事务，它的存在就是为了保证不同数据库节点的数据一致性。</p><p>为什么需要分布式事务？接下来分两方面阐述：</p><h3 id="微服务架构下的分布式事务"><a href="#微服务架构下的分布式事务" class="headerlink" title="微服务架构下的分布式事务"></a>微服务架构下的分布式事务</h3><p>随着互联网的快速发展，轻盈且功能划分明确的微服务，登上了历史舞台。比如，一个用户下订单，购买直播礼物的服务，被拆分成三个service，分别是金币服务（coinService），下订单服务（orderService）、礼物服务（giftService）。这些服务都部署在不同的机器上（节点），对应的数据库（金币数据库、订单数据库、礼物数据库）也在不同节点上。</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/image_64b4ba09.png" alt="image_64b4ba09.png"></p><p>用户下单购买礼物，礼物数据库、金币数据库、订单数据库在不同节点上，用本地事务是不可以的，那么如何保证不同数据库（节点）上的数据一致性呢？这就需要分布式事务啦~</p><h3 id="分库分表下的分布式事务"><a href="#分库分表下的分布式事务" class="headerlink" title="分库分表下的分布式事务"></a>分库分表下的分布式事务</h3><p>随着业务的发展，数据库的数据日益庞大，超过千万级别的数据，我们就需要对它分库分表（以前公司是用mycat分库分表，后来用sharding-jdbc）。一分库，数据又分布在不同节点上啦，比如有的在深圳机房，有的在北京机房<del>你再想用本地事务去保证，已经无动于衷啦</del>还是需要分布式事务啦。</p><p>比如A转10块给B，A的账户数据是在北京机房，B的账户数据是在深圳机房。流程如下：</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/image_43feb8b8.png" alt="image_43feb8b8.png"></p><h2 id="CAP-理论-amp-BASE-理论"><a href="#CAP-理论-amp-BASE-理论" class="headerlink" title="CAP 理论&amp;BASE 理论"></a>CAP 理论&amp;BASE 理论</h2><p>学习分布式事务，当然需要了解 CAP 理论和BASE 理论。</p><h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><p>CAP理论作为分布式系统的基础理论，指的是在一个分布式系统中， Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），这三个要素最多只能同时实现两点。<img src="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/image_e69f18cb.png" alt="image_e69f18cb.png"></p><p>一致性(C：Consistency)：</p><p>一致性是指数据在多个副本之间能否保持一致的特性。例如一个数据在某个分区节点更新之后，在其他分区节点读出来的数据也是更新之后的数据。</p><p>可用性(A：Availability)：</p><p>可用性是指系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。这里的重点是”有限时间内”和”返回结果”。</p><p>分区容错性（P:Partition tolerance）:</p><p>分布式系统在遇到任何网络分区故障的时候，仍然需要能够保证对外提供满足一致性和可用性的服务。</p><table width="751">  <thead>   <tr>    <th>选择</th>    <th>说明</th>   </tr>  </thead>  <tbody>   <tr>    <td>CA</td>    <td>放弃分区容错性，加强一致性和可用性，其实就是传统的单机数据库的选择</td>   </tr>   <tr>    <td>AP</td>    <td>放弃一致性，分区容错性和可用性，这是很多分布式系统设计时的选择</td>   </tr>   <tr>    <td>CP</td>    <td>放弃可用性，追求一致性和分区容错性，网络问题会直接让整个系统不可用</td>   </tr>  </tbody> </table><h3 id="BASE-理论"><a href="#BASE-理论" class="headerlink" title="BASE 理论"></a>BASE 理论</h3><p>BASE 理论， 是对CAP中AP的一个扩展，对于我们的业务系统，我们考虑牺牲一致性来换取系统的可用性和分区容错性。BASE是Basically Available(基本可用)，Soft state（软状态）,和 Eventually consistent（最终一致性）三个短语的缩写。</p><p>Basically Available</p><p>基本可用：通过支持局部故障而不是系统全局故障来实现的。如将用户分区在 5 个数据库服务器上，一个用户数据库的故障只影响这台特定主机那 20% 的用户，其他用户不受影响。</p><p>Soft State</p><p>软状态，状态可以有一段时间不同步</p><p>Eventually Consistent</p><p>最终一致，最终数据是一致的就可以了，而不是时时保持强一致。</p><h2 id="分布式事务的几种解决方案"><a href="#分布式事务的几种解决方案" class="headerlink" title="分布式事务的几种解决方案"></a>分布式事务的几种解决方案</h2><p>分布式事务解决方案主要有以下这几种：</p><ul><li> 2PC(二阶段提交)方案</li><li> TCC（Try、Confirm、Cancel）</li><li> 本地消息表</li><li> 最大努力通知</li><li> Saga事务</li></ul><h3 id="二阶段提交方案"><a href="#二阶段提交方案" class="headerlink" title="二阶段提交方案"></a>二阶段提交方案</h3><p>二阶段提交方案是常用的分布式事务解决方案。事务的提交分为两个阶段：准备阶段和提交执行方案。</p><h4 id="二阶段提交成功的情况"><a href="#二阶段提交成功的情况" class="headerlink" title="二阶段提交成功的情况"></a>二阶段提交成功的情况</h4><p>准备阶段，事务管理器向每个资源管理器发送准备消息，如果资源管理器的本地事务操作执行成功，则返回成功。</p><p>提交执行阶段，如果事务管理器收到了所有资源管理器回复的成功消息，则向每个资源管理器发送提交消息，RM 根据 TM 的指令执行提交。如图：</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/image_fa63b221.png" alt="image_fa63b221.png"></p><h4 id="二阶段提交失败的情况"><a href="#二阶段提交失败的情况" class="headerlink" title="二阶段提交失败的情况"></a>二阶段提交失败的情况</h4><p>准备阶段，事务管理器向每个资源管理器发送准备消息，如果资源管理器的本地事务操作执行成功，则返回成功，如果执行失败，则返回失败。</p><p>提交执行阶段，如果事务管理器收到了任何一个资源管理器失败的消息，则向每个资源管理器发送回滚消息。资源管理器根据事务管理器的指令回滚本地事务操作，释放所有事务处理过程中使用的锁资源。</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/image_f2e4f29c.png" alt="image_f2e4f29c.png"></p><h4 id="二阶段提交优缺点"><a href="#二阶段提交优缺点" class="headerlink" title="二阶段提交优缺点"></a>二阶段提交优缺点</h4><p>2PC方案实现起来简单，成本较低，但是主要有以下缺点：</p><ul><li> 单点问题：如果事务管理器出现故障，资源管理器将一直处于锁定状态。</li><li> 性能问题：所有资源管理器在事务提交阶段处于同步阻塞状态，占用系统资源，一直到提交完成，才释放资源，容易导致性能瓶颈。</li><li> 数据一致性问题：如果有的资源管理器收到提交的消息，有的没收到，那么会导致数据不一致问题。</li></ul><h3 id="TCC（补偿机制）"><a href="#TCC（补偿机制）" class="headerlink" title="TCC（补偿机制）"></a>TCC（补偿机制）</h3><p>TCC 采用了补偿机制，其核心思想是：针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作。</p><h4 id="TCC（Try-Confirm-Cancel）模型"><a href="#TCC（Try-Confirm-Cancel）模型" class="headerlink" title="TCC（Try-Confirm-Cancel）模型"></a>TCC（Try-Confirm-Cancel）模型</h4><p>TCC（Try-Confirm-Cancel）是通过对业务逻辑的分解来实现分布式事务。针对一个具体的业务服务，TCC 分布式事务模型需要业务系统都实现一下三段逻辑：</p><p>try阶段：尝试去执行，完成所有业务的一致性检查，预留必须的业务资源。</p><p>Confirm阶段：该阶段对业务进行确认提交，不做任何检查，因为try阶段已经检查过了，默认Confirm阶段是不会出错的。</p><p>Cancel 阶段：若业务执行失败，则进入该阶段，它会释放try阶段占用的所有业务资源，并回滚Confirm阶段执行的所有操作。</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/image_3637f8ff.png" alt="image_3637f8ff.png"></p><p>TCC 分布式事务模型包括三部分：主业务服务、从业务服务、业务活动管理器。</p><ul><li> 主业务服务：主业务服务负责发起并完成整个业务活动。</li><li> 从业务服务：从业务服务是整个业务活动的参与方，实现Try、Confirm、Cancel操作，供主业务服务调用。</li><li> 业务活动管理器：业务活动管理器管理控制整个业务活动，包括记录事务状态，调用从业务服务的 Confirm 操作，调用从业务服务的 Cancel 操作等。</li></ul><p>下面再拿用户下单购买礼物作为例子来模拟TCC实现分布式事务的过程：</p><blockquote><p>假设用户A余额为100金币，拥有的礼物为5朵。A花了10个金币，下订单，购买10朵玫瑰。余额、订单、礼物都在不同数据库。</p></blockquote><p>TCC的Try阶段：</p><ul><li> 生成一条订单记录，订单状态为待确认。</li><li> 将用户A的账户金币中余额更新为90，冻结金币为10（预留业务资源）</li><li> 将用户的礼物数量为5，预增加数量为10。</li><li> Try成功之后，便进入Confirm阶段</li><li> Try过程发生任何异常，均进入Cancel阶段</li></ul><p><img src="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/image_c8e7791b.png" alt="image_c8e7791b.png"></p><p>TCC的Confirm阶段：</p><ul><li> 订单状态更新为已支付</li><li> 更新用户余额为90，可冻结为0</li><li> 用户礼物数量更新为15，预增加为0</li><li> Confirm过程发生任何异常，均进入Cancel阶段</li><li> Confirm过程执行成功，则该事务结束</li></ul><p><img src="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/image_3a5eab37.png" alt="image_3a5eab37.png">TCC的Cancel阶段：</p><ul><li> 修改订单状态为已取消</li><li> 更新用户余额回100</li><li> 更新用户礼物数量为5</li></ul><p><img src="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/image_9e7095aa.png" alt="image_9e7095aa.png"></p><h4 id="TCC优缺点"><a href="#TCC优缺点" class="headerlink" title="TCC优缺点"></a>TCC优缺点</h4><p>TCC方案让应用可以自定义数据库操作的粒度，降低了锁冲突，可以提升性能，但是也有以下缺点：</p><ul><li> 应用侵入性强，try、confirm、cancel三个阶段都需要业务逻辑实现。</li><li> 需要根据网络、系统故障等不同失败原因实现不同的回滚策略，实现难度大，一般借助TCC开源框架，ByteTCC，TCC-transaction，Himly。</li></ul><h3 id="本地消息表"><a href="#本地消息表" class="headerlink" title="本地消息表"></a>本地消息表</h3><p>ebay最初提出本地消息表这个方案，来解决分布式事务问题。业界目前使用这种方案是比较多的，它的核心思想就是将分布式事务拆分成本地事务进行处理。可以看一下基本的实现流程图：</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/image_7ead9a36.png" alt="image_7ead9a36.png"></p><h4 id="基本实现思路"><a href="#基本实现思路" class="headerlink" title="基本实现思路"></a>基本实现思路</h4><p>发送消息方：</p><ul><li> 需要有一个消息表，记录着消息状态相关信息。</li><li> 业务数据和消息表在同一个数据库，即要保证它俩在同一个本地事务。</li><li> 在本地事务中处理完业务数据和写消息表操作后，通过写消息到MQ消息队列。</li><li> 消息会发到消息消费方，如果发送失败，即进行重试。</li></ul><p>消息消费方：</p><ul><li> 处理消息队列中的消息，完成自己的业务逻辑。</li><li> 此时如果本地事务处理成功，则表明已经处理成功了。</li><li> 如果本地事务处理失败，那么就会重试执行。</li><li> 如果是业务上面的失败，给消息生产方发送一个业务补偿消息，通知进行回滚等操作。</li></ul><p>生产方和消费方定时扫描本地消息表，把还没处理完成的消息或者失败的消息再发送一遍。如果有靠谱的自动对账补账逻辑，这种方案还是非常实用的。</p><h4 id="优点-amp-缺点："><a href="#优点-amp-缺点：" class="headerlink" title="优点&amp;缺点："></a>优点&amp;缺点：</h4><p>该方案的优点是很好地解决了分布式事务问题，实现了最终一致性。缺点是消息表会耦合到业务系统中。</p><h3 id="最大努力通知"><a href="#最大努力通知" class="headerlink" title="最大努力通知"></a>最大努力通知</h3><h4 id="什么是最大通知"><a href="#什么是最大通知" class="headerlink" title="什么是最大通知"></a>什么是最大通知</h4><p>最大努力通知也是一种分布式事务解决方案。下面是企业网银转账一个例子</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/image_68972849.png" alt="image_68972849.png"></p><ul><li> 企业网银系统调用前置接口，跳转到转账页</li><li> 企业网银调用转账系统接口</li><li> 转账系统完成转账处理，向企业网银系统发起转账结果通知，若通知失败，则转账系统按策略进行重复通知。</li><li> 企业网银系统未接收到通知，会主动调用转账系统的接口查询转账结果。</li><li> 转账系统会遇到退汇等情况，会定时回来对账。</li></ul><p>最大努力通知方案的目标，就是发起通知方通过一定的机制，最大努力将业务处理结果通知到接收方。最大努力通知实现机制如下：</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/image_6d0acbab.png" alt="image_6d0acbab.png"></p><h4 id="最大努力通知解决方案"><a href="#最大努力通知解决方案" class="headerlink" title="最大努力通知解决方案"></a>最大努力通知解决方案</h4><p>要实现最大努力通知，可以采用MQ的ack机制。</p><p>方案</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/image_b8fe1d0b.png" alt="image_b8fe1d0b.png"></p><ul><li> 1.发起方将通知发给MQ。</li><li> 2.接收通知方监听MQ消息。</li><li> 3.接收通知方收到消息后，处理完业务，回应ack。</li><li> 4.接收通知方若没有回应ack，则MQ会间隔1min、5min、10min等重复通知。</li><li> 5.接受通知方可用消息校对接口，保证消息的一致性。</li></ul><p>转账业务实现流程图：</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/image_e5475fd6.png" alt="image_e5475fd6.png">交互流程如下：</p><ul><li> 1、用户请求转账系统进行转账。</li><li> 2、转账系统完成转账，将转账结果发给MQ。</li><li> 3、企业网银系统监听MQ，接收转账结果通知，如果接收不到消息，MQ会重复发送通知。接收到转账结果，更新转账状态。</li><li> 4、企业网银系统也可以主动查询转账系统的转账结果查询接口，更新转账状态。</li></ul><h3 id="Saga事务"><a href="#Saga事务" class="headerlink" title="Saga事务"></a>Saga事务</h3><p>Saga事务由普林斯顿大学的Hector Garcia-Molina和Kenneth Salem提出，其核心思想是将长事务拆分为多个本地短事务，由Saga事务协调器协调，如果正常结束那就正常完成，如果某个步骤失败，则根据相反顺序一次调用补偿操作。</p><p>saga简介</p><ul><li> Saga = Long Live Transaction (LLT，长活事务)</li><li> LLT = T1 + T2 + T3 + … + Ti（Ti为本地短事务）</li><li> 每个本地事务Ti 有对应的补偿 Ci</li></ul><p>Saga的执行顺序</p><ul><li> 正常情况：T1 T2 T3 … Tn</li><li> 异常情况：T1 T2 T3 C3 C2 C1</li></ul><p>Saga两种恢复策略</p><ul><li> 向后恢复，如果任意本地子事务失败，补偿已完成的事务。如异常情况的执行顺序T1 T2 Ti Ci C2 C1.</li><li> 向前恢复，即重试失败的事务，假设最后每个子事务都会成功。执行顺序：T1, T2, …, Tj(失败), Tj(重试),…, Tn。</li></ul><p>举个例子，假设用户下订单，花10块钱购买了10多玫瑰，则有</p><p>T1=下订单 ，T2=扣用户10块钱，T3=用户加10朵玫瑰， T4=库存减10朵玫瑰</p><p>C1=取消订单 ，C2= 给用户加10块钱，C3 =用户减10朵玫瑰， C4=库存加10朵玫瑰</p><p><img src="/2022/12/21/fen-bu-shi-shi-wu-ji-chu/image_e533a58e.png" alt="image_e533a58e.png"></p><p>假设事务执行到T4发生异常回滚，在C4的要把玫瑰给库存加回去的时候，发现用户的玫瑰都用掉了，这是Saga的一个缺点，由于事务之间没有隔离性导致的问题。</p><p>可以通过以下方案解决这个问题：</p><ul><li> 在应⽤层⾯加⼊逻辑锁的逻辑。</li><li> Session层⾯隔离来保证串⾏化操作。</li><li> 业务层⾯采⽤预先冻结资⾦的⽅式隔离此部分资⾦。</li><li> 业务操作过程中通过及时读取当前状态的⽅式获取更新。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式事务 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分库分表经典15连问</title>
      <link href="/2022/12/21/fen-ku-fen-biao-jing-dian-15-lian-wen/"/>
      <url>/2022/12/21/fen-ku-fen-biao-jing-dian-15-lian-wen/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>几乎都会被问到分库分表。田螺哥整理了分库分表的15道经典面试题，大家看完肯定会有帮助的。</p><p><img src="/2022/12/21/fen-ku-fen-biao-jing-dian-15-lian-wen/image_195c3e5b.png" alt="image_195c3e5b.png"></p><h2 id="1-我们为什么需要分库分表"><a href="#1-我们为什么需要分库分表" class="headerlink" title="1. 我们为什么需要分库分表"></a>1. 我们为什么需要分库分表</h2><p>在分库分表之前，就需要考虑为什么需要拆分。我们做一件事，肯定是有充分理由的。所以得想好分库分表的理由是什么。我们现在就从两个维度去思考它，为什么要分库？为什么要分表？</p><h3 id="1-1-为什么要分库"><a href="#1-1-为什么要分库" class="headerlink" title="1.1 为什么要分库"></a>1.1 为什么要分库</h3><p>如果业务量剧增，数据库可能会出现性能瓶颈，这时候我们就需要考虑拆分数据库。从这两方面来看：</p><ul><li> 磁盘存储</li></ul><p>业务量剧增，MySQL单机磁盘容量会撑爆，拆成多个数据库，磁盘使用率大大降低。</p><ul><li> 并发连接支撑</li></ul><p>我们知道数据库连接数是有限的。在高并发的场景下，大量请求访问数据库，MySQL单机是扛不住的！高并发场景下，会出现<code>too many connections</code>报错。</p><p>当前非常火的微服务架构出现，就是为了应对高并发。它把订单、用户、商品等不同模块，拆分成多个应用，并且把单个数据库也拆分成多个不同功能模块的数据库（订单库、用户库、商品库），以分担读写压力。</p><h3 id="1-2-为什么要分表"><a href="#1-2-为什么要分表" class="headerlink" title="1.2 为什么要分表"></a>1.2 为什么要分表</h3><p>假如你的单表数据量非常大，存储和查询的性能就会遇到瓶颈了，如果你做了很多优化之后还是无法提升效率的时候，就需要考虑做分表了。一般千万级别数据量，就需要分表。</p><p>这是因为即使<code>SQL</code>命中了索引，如果表的数据量超过一千万的话，查询也是会明显变慢的。这是因为索引一般是<code>B+</code>树结构，数据千万级别的话，B+树的高度会增高，查询就变慢啦。MySQL的B+树的高度怎么计算的呢？跟大家复习一下：</p><p>InnoDB存储引擎最小储存单元是页，一页大小就是16k。B+树叶子存的是数据，内部节点存的是键值+指针。索引组织表通过非叶子节点的二分查找法以及指针确定数据在哪个页中，进而再去数据页中找到需要的数据，B+树结构图如下：</p><p><img src="/2022/12/21/fen-ku-fen-biao-jing-dian-15-lian-wen/image_7ce13593.png" alt="image_7ce13593.png"></p><blockquote><p>假设B+树的高度为2的话，即有一个根结点和若干个叶子结点。这棵B+树的存放总记录数为=根结点指针数*单个叶子节点记录行数。</p><p>如果一行记录的数据大小为1k，那么单个叶子节点可以存的记录数 =16k/1k =16. 非叶子节点内存放多少指针呢？我们假设主键ID为bigint类型，长度为8字节(面试官问你int类型，一个int就是32位，4字节)，而指针大小在InnoDB源码中设置为6字节，所以就是 8+6=14 字节，16k/14B =16*1024B/14B = 1170</p><p>因此，一棵高度为2的B+树，能存放1170 * 16=18720条这样的数据记录。同理一棵高度为3的B+树，能存放1170 *1170 *16 =21902400，大概可以存放两千万左右的记录。B+树高度一般为1-3层，如果B+到了4层，查询的时候会多查磁盘的次数，SQL就会变慢。</p></blockquote><p>因此单表数据量太大，SQL查询会变慢，所以就需要考虑分表啦。</p><h2 id="2-什么时候考虑分库分表？"><a href="#2-什么时候考虑分库分表？" class="headerlink" title="2. 什么时候考虑分库分表？"></a>2. 什么时候考虑分库分表？</h2><p>对于<code>MySQL</code>，<code>InnoDB</code>存储引擎的话，单表最多可以存储<code>10亿</code>级数据。但是的话，如果真的存储这么多，性能就会非常差。一般数据量千万级别，<code>B+</code>树索引高度就会到<code>3</code>层以上了，查询的时候会多查磁盘的次数，<code>SQL</code>就会变慢。</p><p>阿里巴巴的<code>《Java开发手册》</code>提出：</p><blockquote><p>单表行数超过<code>500万</code>行或者单表容量超过<code>2GB</code>，才推荐进行分库分表。</p></blockquote><p>那我们是不是等到数据量到达五百万，才开始分库分表呢？</p><blockquote><p>不是这样的，我们应该提前规划分库分表，如果估算<code>3</code>年后，你的表都不会到达这个五百万，则不需要分库分表。</p></blockquote><p>MySQL服务器如果配置更好，是不是可以超过这个500万这个量级，才考虑分库分表？</p><blockquote><p>虽然配置更好，可能数据量大之后，性能还是不错，但是如果持续发展的话，还是要考虑分库分表</p></blockquote><p>一般什么类型业务表需要才分库分表？</p><blockquote><p>通用是一些流水表、用户表等才考虑分库分表，如果是一些配置类的表，则完全不用考虑，因为不太可能到达这个量级。</p></blockquote><h2 id="3-如何选择分表键"><a href="#3-如何选择分表键" class="headerlink" title="3. 如何选择分表键"></a>3. 如何选择分表键</h2><p>分表键，即用来分库/分表的字段，换种说法就是，你以哪个维度来分库分表的。比如你按用户ID分表、按时间分表、按地区分表，这些用户ID、时间、地区就是分表键。</p><p>一般数据库表拆分的原则，需要先找到业务的主题。比如你的数据库表是一张企业客户信息表，就可以考虑用了客户号做为<code>分表键</code>。</p><p>为什么考虑用客户号做分表键呢？</p><blockquote><p>这是因为表是基于客户信息的，所以，需要将同一个客户信息的数据，落到一个表中，避免触发全表路由。</p></blockquote><h2 id="4-非分表键如何查询"><a href="#4-非分表键如何查询" class="headerlink" title="4.非分表键如何查询"></a>4.非分表键如何查询</h2><p>分库分表后，有时候无法避免一些业务场景，需要通过非分表键来查询。</p><p>假设一张用户表，根据<code>userId</code>做分表键，来分库分表。但是用户登录时，需要根据用户手机号来登陆。这时候，就需要通过手机号查询用户信息。而手机号是非分表键。</p><p>非分表键查询，一般有这几种方案：</p><ul><li> 遍历：最粗暴的方法，就是遍历所有的表，找出符合条件的手机号记录（ 不建议）</li><li> 将用户信息冗余同步到ES，同步发送到ES，然后通过ES来查询（ 推荐）</li></ul><p>其实还有基因法：比如非分表键可以解析出分表键出来，比如常见的，订单号生成时，可以包含客户号进去，通过订单号查询，就可以解析出客户号。但是这个场景除外，手机号似乎不适合冗余userId。</p><h2 id="5-分表策略如何选择"><a href="#5-分表策略如何选择" class="headerlink" title="5. 分表策略如何选择"></a>5. 分表策略如何选择</h2><h3 id="5-1-range范围"><a href="#5-1-range范围" class="headerlink" title="5.1 range范围"></a>5.1 range范围</h3><p><code>range</code>，即范围策略划分表。比如我们可以将表的主键<code>order_id</code>，按照从<code>0~300万</code>的划分为一个表，<code>300万~600万</code>划分到另外一个表。如下图：</p><p><img src="/2022/12/21/fen-ku-fen-biao-jing-dian-15-lian-wen/image_b12ebe68.png" alt="image_b12ebe68.png"></p><p>有时候我们也可以按时间范围来划分，如不同年月的订单放到不同的表，它也是一种<code>range</code>的划分策略。</p><ul><li> 优点： <code>range</code>范围分表，有利于扩容。</li><li> 缺点：可能会有热点问题。因为 <code>订单id</code>是一直在增大的，也就是说最近一段时间都是汇聚在一张表里面的。比如最近一个月的订单都在 <code>300万~600万</code>之间，平时用户一般都查最近一个月的订单比较多，请求都打到 <code>order_1</code>表啦。</li></ul><h3 id="5-2-hash取模"><a href="#5-2-hash取模" class="headerlink" title="5.2 hash取模"></a>5.2 hash取模</h3><p>hash取模策略：</p><blockquote><p>指定的路由key（一般是<code>user_id、order_id、customer_no</code>作为key）对分表总数进行取模，把数据分散到各个表中。</p></blockquote><p>比如原始订单表信息，我们把它分成4张分表：</p><p><img src="/2022/12/21/fen-ku-fen-biao-jing-dian-15-lian-wen/image_db5b9878.png" alt="image_db5b9878.png"></p><ul><li> 比如id=1，对4取模，就会得到1，就把它放到 <code>t_order_1</code>;</li><li> id=3，对4取模，就会得到3，就把它放到 <code>t_order_3;</code></li></ul><p>一般，我们会取哈希值，再做取余：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>orderId<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> table_number<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li> 优点：hash取模的方式， 不会存在明显的热点问题。</li><li> 缺点：如果未来某个时候，表数据量又到瓶颈了，需要扩容，就比较麻烦。所以一般建议提前规划好，一次性分够。（可以考虑 一致性哈希）</li></ul><h3 id="5-3-一致性Hash"><a href="#5-3-一致性Hash" class="headerlink" title="5.3 一致性Hash"></a>5.3 一致性Hash</h3><p>如果用hash方式分表，前期规划不好，需要扩容二次分表，表的数量需要增加，所以hash值需要重新计算，这时候需要迁移数据了。</p><blockquote><p>比如我们开始分了<code>10</code>张表，之后业务扩展需要，增加到<code>20</code>张表。那问题就来了，之前根据<code>orderId</code>取模<code>10</code>后的数据分散在了各个表中，现在需要重新对所有数据重新取模<code>20</code>来分配数据</p></blockquote><p>为了解决这个扩容迁移问题，可以使用一致性hash思想来解决。</p><blockquote><p>一致性哈希：在移除或者添加一个服务器时，能够尽可能小地改变已存在的服务请求与处理请求服务器之间的映射关系。一致性哈希解决了简单哈希算法在分布式哈希表存在的动态伸缩等问题</p></blockquote><h2 id="6-如何避免热点问题数据倾斜（热点数据）"><a href="#6-如何避免热点问题数据倾斜（热点数据）" class="headerlink" title="6. 如何避免热点问题数据倾斜（热点数据）"></a>6. 如何避免热点问题数据倾斜（热点数据）</h2><p>如果我们根据时间范围分片，某电商公司<code>11</code>月搞营销活动，那么大部分的数据都落在<code>11</code>月份的表里面了，其他分片表可能很少被查询，即数据倾斜了，有热点数据问题了。</p><p>我们可以使用<code>range范围+ hash哈希取模</code>结合的分表策略，简单的做法就是：</p><blockquote><p>在拆分库的时候，我们可以先用range范围方案，比如订单id在<code>0~4000万</code>的区间，划分为订单库1;id在<code>4000万~8000万</code>的数据，划分到<code>订单库2</code>,将来要扩容时，id在<code>8000万~1.2亿</code>的数据，划分到订单库3。然后订单库内，再用<code>hash取模</code>的策略，把不同订单划分到不同的表。</p></blockquote><p><img src="/2022/12/21/fen-ku-fen-biao-jing-dian-15-lian-wen/image_2e9f2ce6.png" alt="image_2e9f2ce6.png"></p><h2 id="7-分库后，事务问题如何解决"><a href="#7-分库后，事务问题如何解决" class="headerlink" title="7.分库后，事务问题如何解决"></a>7.分库后，事务问题如何解决</h2><p>分库分表后，假设两个表在不同的数据库，那么本地事务已经无效啦，需要使用分布式事务了。</p><p>常用的分布式事务解决方案有：</p><ul><li> 两阶段提交</li><li> 三阶段提交</li><li> TCC</li><li> 本地消息表</li><li> 最大努力通知</li><li> saga</li></ul><p>大家可以看下这几篇文章：</p><ul><li> [后端程序员必备：分布式事务基础篇][Link 1]</li><li> [看一遍就理解：分布式事务详解][Link 2]</li><li> [框架篇：分布式一致性解决方案][Link 3]</li></ul><h2 id="8-跨节点Join关联问题"><a href="#8-跨节点Join关联问题" class="headerlink" title="8. 跨节点Join关联问题"></a>8. 跨节点Join关联问题</h2><p>在单库未拆分表之前，我们如果要使用<code>join</code>关联多张表操作的话，简直<code>so easy</code>啦。但是分库分表之后，两张表可能都不在同一个数据库中了，那么如何跨库<code>join</code>操作呢？</p><p>跨库Join的几种解决思路：</p><ul><li> 字段冗余：把需要关联的字段放入主表中，避免关联操作；比如订单表保存了卖家ID（ <code>sellerId</code>），你把卖家名字 <code>sellerName</code>也保存到订单表，这就不用去关联卖家表了。这是一种空间换时间的思想。</li><li> 全局表：比如系统中所有模块都可能会依赖到的一些基础表（即全局表），在每个数据库中均保存一份。</li><li> 数据抽象同步：比如A库中的a表和B库中的b表有关联，可以定时将指定的表做同步，将数据汇合聚集，生成新的表。一般可以借助 <code>ETL</code>工具。</li><li> 应用层代码组装：分开多次查询，调用不同模块服务，获取到数据后，代码层进行字段计算拼装。</li></ul><h2 id="9-order-by-group-by等聚合函数问题"><a href="#9-order-by-group-by等聚合函数问题" class="headerlink" title="9. order by,group by等聚合函数问题"></a>9. order by,group by等聚合函数问题</h2><p>跨节点的<code>count,order by,group by</code>以及聚合函数等问题，都是一类的问题，它们一般都需要基于全部数据集合进行计算。可以分别在各个节点上得到结果后，再在应用程序端进行合并。</p><h2 id="10-分库分表后的分页问题"><a href="#10-分库分表后的分页问题" class="headerlink" title="10. 分库分表后的分页问题"></a>10. 分库分表后的分页问题</h2><ul><li> 方案1（ 全局视野法）：在各个数据库节点查到对应结果后，在代码端汇聚再分页。这样优点是业务无损，精准返回所需数据；缺点则是会 返回过多数据，增大网络传输</li></ul><blockquote><p>比如分库分表前，你是根据创建时间排序，然后获取第2页数据。如果你是分了两个库，那你就可以每个库都根据时间排序，然后都返回2页数据，然后把两个数据库查询回来的数据汇总，再根据创建时间进行内存排序，最后再取第2页的数据。</p></blockquote><ul><li> 方案2（ 业务折衷法-禁止跳页查询）：这种方案需要业务妥协一下，只有上一页和下一页，不允许跳页查询了。</li></ul><blockquote><p>这种方案，查询第一页时，是跟全局视野法一样的。但是下一页时，需要把当前最大的创建时间传过来，然后每个节点，都查询大于创建时间的一页数据，接着汇总，内存排序返回。</p></blockquote><h2 id="11-分布式ID"><a href="#11-分布式ID" class="headerlink" title="11. 分布式ID"></a>11. 分布式ID</h2><p>数据库被切分后，不能再依赖数据库自身的主键生成机制啦，最简单可以考虑<code>UUID</code>，或者使用雪花算法生成<code>分布式ID</code>。</p><blockquote><p>雪花算法是一种生成分布式全局唯一ID的算法，生成的ID称为<code>Snowflake IDs</code>。这种算法由<code>Twitter</code>创建，并用于推文的ID。</p></blockquote><p>一个<code>Snowflake ID</code>有<code>64</code>位。</p><ul><li> 第 <code>1</code>位：Java中long的最高位是符号位代表正负，正数是0，负数是1，一般生成ID都为正数，所以默认为0。</li><li> 接下来前 <code>41</code>位是时间戳，表示了自选定的时期以来的毫秒数。</li><li> 接下来的 <code>10</code>位代表计算机ID，防止冲突。</li><li> 其余 <code>12</code>位代表每台机器上生成ID的序列号，这允许在同一毫秒内创建多个Snowflake ID。</li></ul><p><img src="/2022/12/21/fen-ku-fen-biao-jing-dian-15-lian-wen/image_646f31c5.png" alt="image_646f31c5.png"></p><h2 id="12-分库分表选择哪种中间件"><a href="#12-分库分表选择哪种中间件" class="headerlink" title="12. 分库分表选择哪种中间件"></a>12. 分库分表选择哪种中间件</h2><p>目前流行的分库分表中间件比较多：</p><ul><li> Sharding-JDBC</li><li> cobar</li><li> Mycat</li><li> Atlas</li><li> TDDL（淘宝）</li><li> vitess</li></ul><p><img src="/2022/12/21/fen-ku-fen-biao-jing-dian-15-lian-wen/image_e6084e0b.png" alt="image_e6084e0b.png"></p><p>我们项目当前就是使用<code>Sharding-JDBC</code>实现的分库分表。</p><h2 id="13-如何评估分库数量"><a href="#13-如何评估分库数量" class="headerlink" title="13.如何评估分库数量"></a>13.如何评估分库数量</h2><ul><li> 对于MySQL来说的话，一般单库超过 <code>5千万</code>记录， <code>DB</code>的压力就非常大了。所以分库数量多少，需要看单库处理记录能力。</li><li> 如果分库数量少，达不到分散存储和减轻 <code>DB</code>性能压力的目的；如果分库的数量多，对于跨多个库的访问，应用程序需要访问多个库。</li><li> 一般是建议分 <code>4~10</code>个库，我们公司的企业客户信息，就分了 <code>10</code>个库。</li></ul><h2 id="14-垂直分库、水平分库、垂直分表、水平分表的区别"><a href="#14-垂直分库、水平分库、垂直分表、水平分表的区别" class="headerlink" title="14.垂直分库、水平分库、垂直分表、水平分表的区别"></a>14.垂直分库、水平分库、垂直分表、水平分表的区别</h2><ul><li> 水平分库：以字段为依据，按照一定策略（hash、range等），将一个库中的数据拆分到多个库中。</li><li> 水平分表：以字段为依据，按照一定策略（hash、range等），将一个表中的数据拆分到多个表中。</li><li> 垂直分库：以表为依据，按照业务归属不同，将不同的表拆分到不同的库中。</li><li> 垂直分表：以字段为依据，按照字段的活跃性，将表中字段拆到不同的表（主表和扩展表）中。</li></ul><h2 id="15-分表要停服嘛？不停服怎么做？"><a href="#15-分表要停服嘛？不停服怎么做？" class="headerlink" title="15.分表要停服嘛？不停服怎么做？"></a>15.分表要停服嘛？不停服怎么做？</h2><p>不用停服。不停服的时候，应该怎么做呢，主要分五个步骤：</p><ol><li> 编写代理层，加个开关（控制访问新的 <code>DAO</code>还是老的 <code>DAO</code>，或者是都访问），灰度期间，还是访问老的 <code>DAO</code>。</li><li> 发版全量后，开启双写，既在旧表新增和修改，也在新表新增和修改。日志或者临时表记下新表 <code>ID</code>起始值，旧表中小于这个值的数据就是存量数据，这批数据就是要迁移的。</li><li> 通过脚本把旧表的存量数据写入新表。</li><li> 停读旧表改读新表，此时新表已经承载了所有读写业务，但是这时候不要立刻停写旧表，需要保持双写一段时间。</li><li> 当读写新表一段时间之后，如果没有业务问题，就可以停写旧表啦</li></ol>]]></content>
      
      
      <categories>
          
          <category> java架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java面试 </tag>
            
            <tag> 分布式事务 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式写代码</title>
      <link href="/2022/12/01/lambda-biao-da-shi-xie-dai-ma/"/>
      <url>/2022/12/01/lambda-biao-da-shi-xie-dai-ma/</url>
      
        <content type="html"><![CDATA[<p>日常开发中，我们很多时候需要用到<code>Java 8</code>的<code>Lambda</code>表达式，它允许把函数作为一个方法的参数，让我们的代码更优雅、更简洁。所以整理了一波工作中，我常用的，有哪些<code>Lambda</code>表达式。看完一定会有帮助的。</p><ol><li>list 转 map</li></ol><p>工作中，我们经常遇到<code>list</code>转<code>map</code>的案例。<code>Collectors.toMap</code>就可以把一个<code>list</code>数组转成一个<code>Map</code>。代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">></span></span> userInfoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"芋道源码"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">"程序员芋艿"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">"打代码的芋艿"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         *  list 转 map         *  使用Collectors.toMap的时候，如果有可以重复会报错，所以需要加(k1, k2) -> k1         *  (k1, k2) -> k1 表示，如果有重复的key,则保留第一个，舍弃第二个         */</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">UserInfo</span><span class="token punctuation">></span></span> userInfoMap <span class="token operator">=</span> userInfoList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">UserInfo</span><span class="token operator">::</span><span class="token function">getUserId</span><span class="token punctuation">,</span> userInfo <span class="token operator">-></span> userInfo<span class="token punctuation">,</span> <span class="token punctuation">(</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">)</span> <span class="token operator">-></span> k1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfoMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>a<span class="token operator">-></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//运行结果</span>芋道源码程序员芋艿<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类似的，还有<code>Collectors.toList()</code>、<code>Collectors.toSet()</code>，表示把对应的流转化为<code>list</code>或者<code>Set</code>。</p><ol start="2"><li>filter（）过滤</li></ol><p>从数组集合中，过滤掉不符合条件的元素，留下符合条件的元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">></span></span> userInfoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"芋道源码"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">"程序员芋艿"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span> <span class="token string">"打代码的芋艿"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/** * filter 过滤，留下超过18岁的用户 */</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">></span></span> userInfoResultList <span class="token operator">=</span> userInfoList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>user <span class="token operator">-></span> user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userInfoResultList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>a <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//运行结果</span>程序员芋艿打代码的芋艿<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>foreach 遍历</li></ol><p>foreach 遍历list，遍历map，真的很丝滑。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * forEach 遍历集合List列表 */</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> userNameList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"芋道源码"</span><span class="token punctuation">,</span> <span class="token string">"程序员芋艿"</span><span class="token punctuation">,</span> <span class="token string">"艿艿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userNameList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"公众号"</span><span class="token punctuation">,</span> <span class="token string">"芋道源码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"职业"</span><span class="token punctuation">,</span> <span class="token string">"程序员芋艿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"昵称"</span><span class="token punctuation">,</span> <span class="token string">"艿艿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** *  forEach 遍历集合Map */</span>hashMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">":\t"</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//运行结果</span>芋道源码程序员芋艿打代码的芋艿职业<span class="token operator">:</span> 程序员芋艿公众号<span class="token operator">:</span> 芋道源码昵称<span class="token operator">:</span> 艿艿<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>groupingBy 分组</li></ol><p>提到分组，相信大家都会想起<code>SQL</code>的<code>group by</code>。我们经常需要一个List做分组操作。比如，按城市分组用户。在Java8之前，是这么实现的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">></span></span> originUserInfoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>originUserInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"芋道源码"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"深圳"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>originUserInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span> <span class="token string">"打代码的芋艿"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span><span class="token string">"湛江"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>originUserInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">"程序员芋艿"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span><span class="token string">"深圳"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">UserInfo</span> userInfo <span class="token operator">:</span> originUserInfoList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> city <span class="token operator">=</span> userInfo<span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">></span></span> userInfos <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>userInfos <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      userInfos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span> userInfos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  userInfos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而使用Java8的<code>groupingBy</code>分组器，清爽无比:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result <span class="token operator">=</span> originUserInfoList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">UserInfo</span><span class="token operator">::</span><span class="token function">getCity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li>sorted+Comparator 排序</li></ol><p>工作中，排序的需求比较多，使用<code>sorted+Comparator</code>排序，真的很香。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">></span></span> userInfoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"芋道源码"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span> <span class="token string">"打代码的芋艿"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">"程序员芋艿"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** *  sorted + Comparator.comparing 排序列表， */</span>userInfoList <span class="token operator">=</span> userInfoList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">UserInfo</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userInfoList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>a <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始降序排序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 如果想降序排序，则可以使用加reversed() */</span>userInfoList <span class="token operator">=</span> userInfoList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">UserInfo</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userInfoList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>a <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//运行结果</span><span class="token class-name">UserInfo</span><span class="token punctuation">&#123;</span>userId<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> userName<span class="token operator">=</span><span class="token string">'芋道源码'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token class-name">UserInfo</span><span class="token punctuation">&#123;</span>userId<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> userName<span class="token operator">=</span><span class="token string">'打代码的芋艿'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">26</span><span class="token punctuation">&#125;</span><span class="token class-name">UserInfo</span><span class="token punctuation">&#123;</span>userId<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> userName<span class="token operator">=</span><span class="token string">'程序员芋艿'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">&#125;</span>开始降序排序<span class="token class-name">UserInfo</span><span class="token punctuation">&#123;</span>userId<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> userName<span class="token operator">=</span><span class="token string">'程序员芋艿'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">&#125;</span><span class="token class-name">UserInfo</span><span class="token punctuation">&#123;</span>userId<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> userName<span class="token operator">=</span><span class="token string">'打代码的芋艿'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">26</span><span class="token punctuation">&#125;</span><span class="token class-name">UserInfo</span><span class="token punctuation">&#123;</span>userId<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> userName<span class="token operator">=</span><span class="token string">'芋道源码'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.distinct 去重</p><p><code>distinct</code>可以去除重复的元素:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> temp <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>temp<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="7"><li>findFirst 返回第一个</li></ol><p><code>findFirst</code> 很多业务场景，我们只需要返回集合的第一个元素即可：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="8"><li>anyMatch 是否至少匹配一个元素</li></ol><p><code>anyMatch</code> 检查流是否包含至少一个满足给定谓词的元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> match <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9"><li>allMatch 匹配所有元素</li></ol><p><code>allMatch</code> 检查流是否所有都满足给定谓词的元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> match <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出</span><span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="10"><li>map 转换</li></ol><p><code>map</code>方法可以帮我们做元素转换，比如一个元素所有字母转化为大写，又或者把获取一个元素对象的某个属性，<code>demo</code>如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"jay"</span><span class="token punctuation">,</span> <span class="token string">"tianluo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转化为大写</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> upperCaselist <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>upperCaselist<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="11"><li>Reduce</li></ol><p>Reduce可以合并流的元素，并生成一个值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="12"><li>peek 打印个日志</li></ol><p><code>peek()</code>方法是一个中间<code>Stream</code>操作，有时候我们可以使用<code>peek</code>来打印日志。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"程序员芋艿"</span><span class="token punctuation">,</span> <span class="token string">"芋道源码"</span><span class="token punctuation">,</span> <span class="token string">"打代码的芋艿"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">-></span> a<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"芋艿"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>a <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关注公众号:"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//运行结果</span>关注公众号<span class="token operator">:</span>程序员芋艿关注公众号<span class="token operator">:</span>芋道源码<span class="token punctuation">[</span>程序员芋艿<span class="token punctuation">,</span> 芋道源码<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="13"><li>Max，Min 最大最小</li></ol><p>使用lambda流求最大，最小值，非常方便。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">></span></span> userInfoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"芋道源码"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span> <span class="token string">"打代码的芋艿"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">"程序员芋艿"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">></span></span> maxAgeUserInfoOpt <span class="token operator">=</span> userInfoList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">UserInfo</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>maxAgeUserInfoOpt<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>userInfo <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max age user:"</span> <span class="token operator">+</span> userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">></span></span> minAgeUserInfoOpt <span class="token operator">=</span> userInfoList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">UserInfo</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>minAgeUserInfoOpt<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>userInfo <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"min age user:"</span> <span class="token operator">+</span> userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//运行结果</span>max age user<span class="token operator">:</span><span class="token class-name">UserInfo</span><span class="token punctuation">&#123;</span>userId<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> userName<span class="token operator">=</span><span class="token string">'程序员芋艿'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">&#125;</span>min age user<span class="token operator">:</span><span class="token class-name">UserInfo</span><span class="token punctuation">&#123;</span>userId<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> userName<span class="token operator">=</span><span class="token string">'芋道源码'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="14"><li>count 统计</li></ol><p>一般<code>count()</code>表示获取流数据元素总数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">></span></span> userInfoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"芋道源码"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span> <span class="token string">"打代码的芋艿"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">"程序员芋艿"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> count <span class="token operator">=</span> userInfoList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>user <span class="token operator">-></span> user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大于18岁的用户:"</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出</span>大于<span class="token number">18</span>岁的用户<span class="token operator">:</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="15"><li>常用函数式接口</li></ol><p>其实lambda离不开函数式接口，我们来看下JDK8常用的几个函数式接口：</p><ul><li> <code>Function&lt;T, R&gt;</code>（转换型）: 接受一个输入参数，返回一个结果</li><li> <code>Consumer&lt;T&gt;</code> （消费型）: 接收一个输入参数，并且无返回操作</li><li> <code>Predicate&lt;T&gt;</code> （判断型）: 接收一个输入参数，并且返回布尔值结果</li><li> <code>Supplier&lt;T&gt;</code> （供给型）: 无参数，返回结果</li></ul><p><code>Function&lt;T, R&gt;</code> 是一个功能转换型的接口，可以把将一种类型的数据转化为另外一种类型的数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">testFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取每个字符串的长度，并且返回</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> function <span class="token operator">=</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"程序员芋艿"</span><span class="token punctuation">,</span> <span class="token string">"芋道源码"</span><span class="token punctuation">,</span> <span class="token string">"打代码的芋艿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> resultStream <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">;</span>        resultStream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Consumer&lt;T&gt;</code>是一个消费性接口，通过传入参数，并且无返回的操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">testComsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取每个字符串的长度，并且返回</span>        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> comsumer <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"程序员芋艿"</span><span class="token punctuation">,</span> <span class="token string">"芋道源码"</span><span class="token punctuation">,</span> <span class="token string">"打代码的芋艿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>comsumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Predicate&lt;T&gt;</code>是一个判断型接口,并且返回布尔值结果.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">testPredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取每个字符串的长度，并且返回</span>        <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> predicate <span class="token operator">=</span> a <span class="token operator">-></span> a <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">;</span>        <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">"程序员芋艿"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Supplier&lt;T&gt;</code>是一个供给型接口,无参数，有返回结果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">testSupplier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这几个函数在日常开发中，也是可以灵活应用的，比如我们DAO操作完数据库，是会有个result的整型结果返回。我们就可以用<code>Supplier&lt;T&gt;</code>来统一判断是否操作成功。如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">saveDb</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> supplier<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入数据库成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入数据库失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Course</span> course<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        course<span class="token punctuation">.</span><span class="token function">setCname</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        course<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token number">100L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        course<span class="token punctuation">.</span><span class="token function">setCstatus</span><span class="token punctuation">(</span><span class="token string">"Normal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">saveDb</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> courseMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda </tag>
            
            <tag> java stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot像写诗一样写代码</title>
      <link href="/2022/11/29/springboot-xiang-xie-shi-yi-yang-xie-dai-ma/"/>
      <url>/2022/11/29/springboot-xiang-xie-shi-yi-yang-xie-dai-ma/</url>
      
        <content type="html"><![CDATA[<p>每次聊到代码优化，都会有很多人说理论、架构、核心思路，其实我觉得代码优化这事说简单了很简单，说复杂了吧它也有一定的难度，但是我觉得有一个良好的编码习惯很重要，下面分享一下14个springboot项目中优化代码的小技巧，让代码优化跟容易，就像完成一件小事。  </p><ol><li><h3 id="定义配置文件信息"><a href="#定义配置文件信息" class="headerlink" title="定义配置文件信息"></a>定义配置文件信息</h3></li></ol><p>有时候我们为了统一管理会把一些变量放到 yml 配置文件中</p><p>例如</p><p>用 @ConfigurationProperties 代替 @Value</p><p>使用方法</p><p>定义对应字段的实体</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token comment">// 指定前缀</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"developer"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeveloperProperty</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> website<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> qq<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phoneNumber<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ß<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用时注入这个bean</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertyController</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">final</span> <span class="token class-name">DeveloperProperty</span> developerProperty<span class="token punctuation">;</span>     <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/property"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> developerProperty<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><h3 id="用-RequiredArgsConstructor代替-Autowired"><a href="#用-RequiredArgsConstructor代替-Autowired" class="headerlink" title="用@RequiredArgsConstructor代替@Autowired"></a>用@RequiredArgsConstructor代替@Autowired</h3></li></ol><p>我们都知道注入一个 bean 有三种方式哦（set 注入, 构造器注入, 注解注入），Spring 推荐我们使用构造器的方式注入 Bean，我们来看看上段代码编译完之后的样子</p><p>RequiredArgsConstructor：lombok提供</p><ol start="3"><li><h3 id="代码模块化"><a href="#代码模块化" class="headerlink" title="代码模块化"></a>代码模块化</h3></li></ol><p>阿里巴巴 Java 开发手册中说到每个方法的代码不要超过 50 行（我没记错的话），手册：<a href="https://www.yoodb.com/deployment/handbook/alibaba-java-specification.html">https://www.yoodb.com/deployment/handbook/alibaba-java-specification.html</a></p><p>，在实际的开发中我们要善于拆分自己的接口或方法, 做到一个方法只处理一种逻辑, 说不定以后某个功能就用到了, 拿来即用。</p><ol start="4"><li><h3 id="抛异常而不是返回"><a href="#抛异常而不是返回" class="headerlink" title="抛异常而不是返回"></a>抛异常而不是返回</h3></li></ol><p>在写业务代码的时候，经常会根据不同的结果返回不同的信息，尽量减少返回，会显得代码比较乱。</p><p>反例</p><p>正例</p><ol start="5"><li><h3 id="减少不必要的db"><a href="#减少不必要的db" class="headerlink" title="减少不必要的db"></a>减少不必要的db</h3></li></ol><p>尽可能的减少对数据库的查询，面试推荐公众 号Java精选，回复java面试，获取面试资料，支持在线刷题。</p><p>举例子</p><p>删除一个服务（已下架或未上架的才能删除），之前有看别人写的代码，会先根据id查询该记录，然后做一些判断。</p><p>反例</p><p>正例</p><ol start="6"><li><h3 id="不要返回-null"><a href="#不要返回-null" class="headerlink" title="不要返回 null"></a>不要返回 null</h3></li></ol><p>反例</p><p>正例</p><p>别处调用方法时，避免不必要的空指针</p><ol start="7"><li><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3></li></ol><p>不要太多了if else if，可以试试策略模式代替</p><ol start="8"><li><h3 id="减少controller业务代码"><a href="#减少controller业务代码" class="headerlink" title="减少controller业务代码"></a>减少controller业务代码</h3></li></ol><p>业务代码尽量放到service层进行处理，后期维护起来也好操作而且美观。</p><p>反例</p><p>正例</p><ol start="9"><li><h3 id="利用好Idea"><a href="#利用好Idea" class="headerlink" title="利用好Idea"></a>利用好Idea</h3></li></ol><p>目前为止市面上的企业基本都用idea作为开发工具了吧。</p><p>举一个小例子</p><p>idea会对我们的代码进行判断，提出合理的建议</p><p>例如</p><p>它推荐我们用lanbda的形式代替，点击replace</p><ol start="10"><li><h3 id="阅读源码"><a href="#阅读源码" class="headerlink" title="阅读源码"></a>阅读源码</h3></li></ol><p>一定要养成阅读源码的好习惯包括优秀的开源项目GitHub上stars:&gt;1000, 会从中学好好多知识包括其对代码的设计思想以及高级API，面试加分（好多面试官习惯问源码相关的知识，推荐公众 号Java精选，回复java面试，获取面试资料，支持在线刷题）</p><ol start="11"><li><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3></li></ol><p>23种设计模式，要尝试代码中运用设计模式思想，写出的代码即规范又美观还高大上哈哈。</p><ol start="12"><li><h3 id="拥抱新知识"><a href="#拥抱新知识" class="headerlink" title="拥抱新知识"></a>拥抱新知识</h3></li></ol><p>像我们这种工作年限少的程序员，我觉得要多学习自己认知之外的知识，不能每天crud，有机会就多用用有点难度的知识，没有机会（项目较传统），可以自己下班多些相关demo练习</p><ol start="13"><li><h3 id="基础问题"><a href="#基础问题" class="headerlink" title="基础问题"></a>基础问题</h3></li></ol><p>map遍历</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"du"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 推荐</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>optional 判空</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取子目录列表</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CatalogueTreeNode</span><span class="token punctuation">></span></span> <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token class-name">String</span> pid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pid <span class="token operator">=</span> <span class="token class-name">BasicDic</span><span class="token punctuation">.</span>TEMPORARY_DIRECTORY_ROOT<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">CatalogueTreeNode</span> node <span class="token operator">=</span> treeNodeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">CatalogueTreeNode</span><span class="token operator">::</span><span class="token function">getChild</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归</p><blockquote><p>大数据量的递归时，避免在递归方法里new对象，可以试试把对象当作方法参数进行传递使用</p></blockquote><p>注释</p><blockquote><p>类 接口方法 注解 较复杂的方法 注释都要写而且要写清楚, 有时候写注释不是给别人看的 而是给自己看的</p></blockquote><ol start="14"><li><h3 id="判断元素是否存在"><a href="#判断元素是否存在" class="headerlink" title="判断元素是否存在"></a>判断元素是否存在</h3></li></ol><p>hashSet 而不是 list，list 判断一个元素是否存在的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断a是否在list中</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此可见其复杂度为On，而hashSet底层采用hashMap作为数据结构进行存储，元素都放到map的key（即链表中）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断a是否在set中</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">getNode</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由此可见其复杂度为O1。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java常见限流方案</title>
      <link href="/2022/11/29/java-chang-jian-xian-liu-fang-an/"/>
      <url>/2022/11/29/java-chang-jian-xian-liu-fang-an/</url>
      
        <content type="html"><![CDATA[<p>对一般的限流场景来说它具有两个维度的信息：</p><ul><li> 时间 限流基于某段时间范围或者某个时间点，也就是我们常说的“时间窗口”，比如对每分钟、每秒钟的时间窗口做限定</li><li> 资源 基于可用资源的限制，比如设定最大访问次数，或最高可用连接数</li></ul><p>上面两个维度结合起来看，限流就是在某个时间窗口对资源访问做限制，比如设定每秒最多100个访问请求。但在真正的场景里，我们不止设置一种限流规则，而是会设置多个限流规则共同作用，主要的几种限流规则如下：</p><h4 id="QPS和连接数控制"><a href="#QPS和连接数控制" class="headerlink" title="QPS和连接数控制"></a>QPS和连接数控制</h4><p>对于连接数和QPS)限流来说，我们可设定IP维度的限流，也可以设置基于单个服务器的限流。</p><p>在真实环境中通常会设置多个维度的限流规则，比如设定同一个IP每秒访问频率小于10，连接数小于5，再设定每台机器QPS最高1000，连接数最大保持200。更进一步，我们可以把某个服务器组或整个机房的服务器当做一个整体，设置更high-level的限流规则，这些所有限流规则都会共同作用于流量控制。</p><h4 id="传输速率"><a href="#传输速率" class="headerlink" title="传输速率"></a>传输速率</h4><p>对于“传输速率”大家都不会陌生，比如资源的下载速度。有的网站在这方面的限流逻辑做的更细致，比如普通注册用户下载速度为100k/s，购买会员后是10M/s，这背后就是基于用户组或者用户标签的限流逻辑。</p><h4 id="黑白名单"><a href="#黑白名单" class="headerlink" title="黑白名单"></a>黑白名单</h4><p>黑白名单是各个大型企业应用里很常见的限流和放行手段，而且黑白名单往往是动态变化的。举个例子，如果某个IP在一段时间的访问次数过于频繁，被系统识别为机器人用户或流量攻击，那么这个IP就会被加入到黑名单，从而限制其对系统资源的访问，这就是我们俗称的“封IP”。</p><p>我们平时见到的爬虫程序，比如说爬知乎上的美女图片，或者爬券商系统的股票分时信息，这类爬虫程序都必须实现更换IP的功能，以防被加入黑名单。</p><p>有时我们还会发现公司的网络无法访问12306这类大型公共网站，这也是因为某些公司的出网IP是同一个地址，因此在访问量过高的情况下，这个IP地址就被对方系统识别，进而被添加到了黑名单。使用家庭宽带的同学们应该知道，大部分网络运营商都会将用户分配到不同出网IP段，或者时不时动态更换用户的IP地址。</p><p>白名单就更好理解了，相当于御赐金牌在身，可以自由穿梭在各种限流规则里，畅行无阻。比如某些电商公司会将超大卖家的账号加入白名单，因为这类卖家往往有自己的一套运维系统，需要对接公司的IT系统做大量的商品发布、补货等等操作。</p><h4 id="分布式环境"><a href="#分布式环境" class="headerlink" title="分布式环境"></a>分布式环境</h4><p>分布式区别于单机限流的场景，它把整个分布式环境中所有服务器当做一个整体来考量。比如说针对IP的限流，我们限制了1个IP每秒最多10个访问，不管来自这个IP的请求落在了哪台机器上，只要是访问了集群中的服务节点，那么都会受到限流规则的制约。</p><p>我们最好将限流信息保存在一个“中心化”的组件上，这样它就可以获取到集群中所有机器的访问状态，目前有两个比较主流的限流方案：</p><ul><li> 网关层限流 将限流规则应用在所有流量的入口处</li><li> 中间件限流 将限流信息存储在分布式环境中某个中间件里（比如Redis缓存），每个组件都可以从这里获取到当前时刻的流量统计，从而决定是拒绝服务还是放行流量</li><li> sentinel，springcloud生态圈为微服务量身打造的一款用于分布式限流、熔断降级等组件</li></ul><h2 id="限流方案常用算法"><a href="#限流方案常用算法" class="headerlink" title="限流方案常用算法"></a>限流方案常用算法</h2><h4 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h4><p>Token Bucket令牌桶算法是目前应用最为广泛的限流算法，顾名思义，它有以下两个关键角色：</p><ul><li> 令牌 获取到令牌的Request才会被处理，其他Requests要么排队要么被直接丢弃</li><li> 桶 用来装令牌的地方，所有Request都从这个桶里面获取令牌 主要涉及到2个过程：</li><li> 令牌生成</li></ul><p>这个流程涉及到令牌生成器和令牌桶，前面我们提到过令牌桶是一个装令牌的地方，既然是个桶那么必然有一个容量，也就是说令牌桶所能容纳的令牌数量是一个固定的数值。</p><p>对于令牌生成器来说，它会根据一个预定的速率向桶中添加令牌，比如我们可以配置让它以每秒100个请求的速率发放令牌，或者每分钟50个。注意这里的发放速度是匀速，也就是说这50个令牌并非是在每个时间窗口刚开始的时候一次性发放，而是会在这个时间窗口内匀速发放。</p><p>在令牌发放器就是一个水龙头，假如在下面接水的桶子满了，那么自然这个水（令牌）就流到了外面。在令牌发放过程中也一样，令牌桶的容量是有限的，如果当前已经放满了额定容量的令牌，那么新来的令牌就会被丢弃掉。</p><ul><li> 令牌获取</li></ul><p>每个访问请求到来后，必须获取到一个令牌才能执行后面的逻辑。假如令牌的数量少，而访问请求较多的情况下，一部分请求自然无法获取到令牌，那么这个时候我们可以设置一个“缓冲队列”来暂存这些多余的令牌。</p><p>缓冲队列其实是一个可选的选项，并不是所有应用了令牌桶算法的程序都会实现队列。当有缓存队列存在的情况下，那些暂时没有获取到令牌的请求将被放到这个队列中排队，直到新的令牌产生后，再从队列头部拿出一个请求来匹配令牌。</p><p>当队列已满的情况下，这部分访问请求将被丢弃。在实际应用中我们还可以给这个队列加一系列的特效，比如设置队列中请求的存活时间，或者将队列改造为PriorityQueue，根据某种优先级排序，而不是先进先出。</p><h4 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h4><p>Leaky Bucket，又是个桶，限流算法是跟桶杠上了，那么漏桶和令牌桶有什么不同呢,</p><p>漏桶算法的前半段和令牌桶类似，但是操作的对象不同，令牌桶是将令牌放入桶里，而漏桶是将访问请求的数据包放到桶里。同样的是，如果桶满了，那么后面新来的数据包将被丢弃。</p><p>漏桶算法的后半程是有鲜明特色的，它永远只会以一个恒定的速率将数据包从桶内流出。打个比方，如果我设置了漏桶可以存放100个数据包，然后流出速度是1s一个，那么不管数据包以什么速率流入桶里，也不管桶里有多少数据包，漏桶能保证这些数据包永远以1s一个的恒定速度被处理。</p><ul><li> 漏桶 vs 令牌桶的区别</li></ul><p>根据它们各自的特点不难看出来，这两种算法都有一个“恒定”的速率和“不定”的速率。令牌桶是以恒定速率创建令牌，但是访问请求获取令牌的速率“不定”，反正有多少令牌发多少，令牌没了就干等。而漏桶是以“恒定”的速率处理请求，但是这些请求流入桶的速率是“不定”的。</p><p>从这两个特点来说，漏桶的天然特性决定了它不会发生突发流量，就算每秒1000个请求到来，那么它对后台服务输出的访问速率永远恒定。而令牌桶则不同，其特性可以“预存”一定量的令牌，因此在应对突发流量的时候可以在短时间消耗所有令牌，其突发流量处理效率会比漏桶高，但是导向后台系统的压力也会相应增多。</p><h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><p>比如说，我们在每一秒内有5个用户访问，第5秒内有10个用户访问，那么在0到5秒这个时间窗口内访问量就是15。如果我们的接口设置了时间窗口内访问上限是20，那么当时间到第六秒的时候，这个时间窗口内的计数总和就变成了10，因为1秒的格子已经退出了时间窗口，因此在第六秒内可以接收的访问量就是20-10=10个。</p><p>滑动窗口其实也是一种计算器算法，它有一个显著特点，当时间窗口的跨度越长时，限流效果就越平滑。打个比方，如果当前时间窗口只有两秒，而访问请求全部集中在第一秒的时候，当时间向后滑动一秒后，当前窗口的计数量将发生较大的变化，拉长时间窗口可以降低这种情况的发生概率</p><h2 id="常用的限流方案"><a href="#常用的限流方案" class="headerlink" title="常用的限流方案"></a>常用的限流方案</h2><h4 id="合法性验证限流"><a href="#合法性验证限流" class="headerlink" title="合法性验证限流"></a>合法性验证限流</h4><p>比如验证码、IP 黑名单等，这些手段可以有效的防止恶意攻击和爬虫采集；</p><h4 id="Guawa限流"><a href="#Guawa限流" class="headerlink" title="Guawa限流"></a>Guawa限流</h4><p>在限流领域中，Guava在其多线程模块下提供了以<code>RateLimiter</code>为首的几个限流支持类，但是作用范围仅限于“当前”这台服务器，也就是说Guawa的限流是单机的限流，跨了机器或者jvm进程就无能为力了 比如说，目前我有2台服务器[<code>Server 1</code>，<code>Server 2</code>]，这两台服务器都部署了一个登陆服务，假如我希望对这两台机器的流量进行控制，比如将两台机器的访问量总和控制在每秒20以内，如果用Guava来做，只能独立控制每台机器的访问量&lt;=10。</p><p>尽管Guava不是面对分布式系统的解决方案，但是其作为一个简单轻量级的客户端限流组件，非常适合来讲解限流算法</p><h4 id="网关层限流"><a href="#网关层限流" class="headerlink" title="网关层限流"></a>网关层限流</h4><p>服务网关，作为整个分布式链路中的第一道关卡，承接了所有用户来访请求，因此在网关层面进行限流是一个很好的切入点 上到下的路径依次是：</p><ol><li> 用户流量从网关层转发到后台服务</li><li> 后台服务承接流量，调用缓存获取数据</li><li> 缓存中无数据，则访问数据库</li></ol><p>流量自上而下是逐层递减的，在网关层聚集了最多最密集的用户访问请求，其次是后台服务。</p><p>然后经过后台服务的验证逻辑之后，刷掉了一部分错误请求，剩下的请求落在缓存上，如果缓存中没有数据才会请求漏斗最下方的数据库，因此数据库层面请求数量最小（相比较其他组件来说数据库往往是并发量能力最差的一环，阿里系的MySQL即便经过了大量改造，单机并发量也无法和Redis、Kafka之类的组件相比）</p><p>目前主流的网关层有以软件为代表的Nginx，还有Spring Cloud中的Gateway和Zuul这类网关层组件</p><p>Nginx限流</p><p>在系统架构中，Nginx的代理与路由转发是其作为网关层的一个很重要的功能，由于Nginx天生的轻量级和优秀的设计，让它成为众多公司的首选，Nginx从网关这一层面考虑，可以作为最前置的网关，抵挡大部分的网络流量，因此使用Nginx进行限流也是一个很好的选择，在Nginx中，也提供了常用的基于限流相关的策略配置.</p><p>Nginx 提供了两种限流方法：一种是控制速率，另一种是控制并发连接数。</p><p>控制速率</p><p>我们需要使用 <code>limit_req_zone</code> 用来限制单位时间内的请求数，即速率限制，</p><p>因为Nginx的限流统计是基于毫秒的，我们设置的速度是 2r/s，转换一下就是500毫秒内单个IP只允许通过1个请求，从501ms开始才允许通过第2个请求。</p><ul><li> 控制速率优化版</li></ul><p>上面的速率控制虽然很精准但是在生产环境未免太苛刻了，实际情况下我们应该控制一个IP单位总时间内的总访问次数，而不是像上面那样精确到毫秒，我们可以使用 burst 关键字开启此设置</p><p><code>burst=4</code>意思是每个IP最多允许4个突发请求</p><p>控制并发数</p><p>利用 <code>limit_conn_zone</code> 和 <code>limit_conn</code> 两个指令即可控制并发数</p><p>其中 <code>limit_conn perip 10</code> 表示限制单个 IP 同时最多能持有 10 个连接；<code>limit_conn perserver 100</code> 表示 server 同时能处理并发连接的总数为 100 个。</p><blockquote><p>注意：只有当 request header 被后端处理后，这个连接才进行计数。</p></blockquote><p>中间件限流</p><p>对于分布式环境来说，无非是需要一个类似中心节点的地方存储限流数据。打个比方，如果我希望控制接口的访问速率为每秒100个请求，那么我就需要将当前1s内已经接收到的请求的数量保存在某个地方，并且可以让集群环境中所有节点都能访问。那我们可以用什么技术来存储这个临时数据呢？</p><p>那么想必大家都能想到，必然是redis了，利用Redis过期时间特性，我们可以轻松设置限流的时间跨度（比如每秒10个请求，或者每10秒10个请求）。同时Redis还有一个特殊技能–脚本编程，我们可以将限流逻辑编写成一段脚本植入到Redis中，这样就将限流的重任从服务层完全剥离出来，同时Redis强大的并发量特性以及高可用集群架构也可以很好的支持庞大集群的限流访问。【reids + lua】</p><p>限流组件</p><p>除了上面介绍的几种方式以外，目前也有一些开源组件提供了类似的功能，比如Sentinel就是一个不错的选择。Sentinel是阿里出品的开源组件，并且包含在了Spring Cloud Alibaba组件库中，Sentinel提供了相当丰富的用于限流的API以及可视化管控台，可以很方便的帮助我们对限流进行治理</p><h2 id="从架构维度考虑限流设计"><a href="#从架构维度考虑限流设计" class="headerlink" title="从架构维度考虑限流设计"></a>从架构维度考虑限流设计</h2><p>在真实的项目里，不会只使用一种限流手段，往往是几种方式互相搭配使用，让限流策略有一种层次感，达到资源的最大使用率。在这个过程中，限流策略的设计也可以参考前面提到的漏斗模型，上宽下紧，漏斗不同部位的限流方案设计要尽量关注当前组件的高可用。</p><p>以我参与的实际项目为例，比如说我们研发了一个商品详情页的接口，通过手机淘宝导流，app端的访问请求首先会经过阿里的mtop网关，在网关层我们的限流会做的比较宽松，等到请求通过网关抵达后台的商品详情页服务之后，再利用一系列的中间件+限流组件，对服务进行更加细致的限流控制</p><h2 id="具体的实现限流的手段"><a href="#具体的实现限流的手段" class="headerlink" title="具体的实现限流的手段"></a>具体的实现限流的手段</h2><p>1）Tomcat 使用 maxThreads来实现限流。</p><p>2）Nginx的<code>limit_req_zone</code>和 burst来实现速率限流。</p><p>3）Nginx的<code>limit_conn_zone</code>和 <code>limit_conn</code>两个指令控制并发连接的总数。</p><p>4）时间窗口算法借助 Redis的有序集合可以实现。</p><p>5）漏桶算法可以使用Redis-Cell来实现。</p><p>6）令牌算法可以解决Google的guava包来实现。</p><blockquote><p>需要注意的是借助Redis实现的限流方案可用于分布式系统，而guava实现的限流只能应用于单机环境。如果你觉得服务器端限流麻烦，可以在不改任何代码的情况下直接使用容器限流（Nginx或Tomcat），但前提是能满足项目中的业务需求。</p></blockquote><h4 id="Tomcat限流"><a href="#Tomcat限流" class="headerlink" title="Tomcat限流"></a>Tomcat限流</h4><p>Tomcat 8.5 版本的最大线程数在 <code>conf/server.xml</code> 配置中，maxThreads 就是 Tomcat 的最大线程数，当请求的并发大于此值（maxThreads）时，请求就会排队执行，这样就完成了限流的目的。</p><p>注意：</p><blockquote><p>maxThreads 的值可以适当的调大一些，Tomcat默认为 150（Tomcat 版本 8.5），但这个值也不是越大越好，要看具体的服务器配置，需要注意的是每开启一个线程需要耗用 1MB 的 JVM 内存空间用于作为线程栈之用，并且线程越多 GC 的负担也越重。</p></blockquote><p>最后需要注意一下，操作系统对于进程中的线程数有一定的限制，Windows 每个进程中的线程数不允许超过 2000，Linux 每个进程中的线程数不允许超过 1000。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java限流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transactional注解控制事务</title>
      <link href="/2022/11/24/transactional-zhu-jie-kong-zhi-shi-wu/"/>
      <url>/2022/11/24/transactional-zhu-jie-kong-zhi-shi-wu/</url>
      
        <content type="html"><![CDATA[<p>在大部分涉及到数据库操作的项目里面，事务控制、事务处理都是一个无法回避的问题 。比如，需要对SQL执行过程进行事务的控制与处理的时候，其整体的处理流程会是如下的示意：</p><p><img src="/2022/11/24/transactional-zhu-jie-kong-zhi-shi-wu/image_999bed75.png" alt="image_999bed75.png"></p><p>首先是要开启事务、然后执行具体SQL，如果执行异常则回滚事务，否则提交事务，最后关闭事务，完成整个处理过程。按照这个流程的逻辑，写一下对应的实现代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJdbcTransactional</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取链接</span>        conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 禁用自动事务提交，改为手动控制</span>        conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置事务隔离级别</span>        conn<span class="token punctuation">.</span><span class="token function">setTransactionIsolation</span><span class="token punctuation">(</span>            <span class="token class-name">TransactionIoslationLevel</span><span class="token punctuation">.</span>READ_COMMITTED<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行SQL</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span>             conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"insert into user (id, name) values (?, ?)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行成功，手动提交事务</span>        conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 出现异常，手动回滚事务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// write log...</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 执行结束，最终不管成功还是失败，都要释放资源，断开连接</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>conn<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token comment">// write log...</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不难发现，上面大段的代码逻辑并不复杂，对于业务而言其实仅仅只是执行了一个insert操作而已。但是杂糅的事务控制代码，显然干扰了业务自身的代码处理逻辑的阅读与理解 。</p><p>常规项目的代码中，涉及到DB处理的场景很多，如果每个地方都有这么一段事务控制的逻辑，那么整体代码的可维护性将会比较差，想想都令人窒息。</p><p>好在，JAVA中很多项目现在都是基于Spring框架进行构建的。得益于 Spring框架的封装，业务代码中进行事务控制操作起来也很简单，直接加个 @Transactional注解即可，大大简化了对业务代码的侵入性 。那么对 @Transactional事务注解了解的够全面吗？知道有哪些场景可能会导致 @Transactional注解并不会如你预期的方式生效吗？知道应该怎么使用 @Transactional才能保证对性能的影响最小化吗？</p><p>下面我们一起探讨下这些问题。</p><h2 id="Spring声明式事务处理机制"><a href="#Spring声明式事务处理机制" class="headerlink" title="Spring声明式事务处理机制"></a>Spring声明式事务处理机制</h2><p>为了简化业务开发场景对事务的处理复杂度，让开发人员可以更关注于业务自身的处理逻辑，Spring 提供了声明式事务的能力支持。</p><p>Spring 数据库事务约定处理逻辑流程如下图所示，对比前面示例中基于<code>JDBC</code>的事务处理，Spring的事务的处理操作交给了Spring框架 处理，开发人员仅需要实现自己的业务逻辑即可，大大简化了事务方面的处理投入。</p><p><img src="/2022/11/24/transactional-zhu-jie-kong-zhi-shi-wu/image_a73a464f.png" alt="image_a73a464f.png"></p><p>基于Spring事务机制，实现上述DB操作事务控制的代码，我们的代码会变得非常的简洁：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    userDao<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>与JDBC事务实现代码相比，基于Spring的方式只需要添加一个 <code>@Transactional</code>注解即可，代码中只需要实现业务逻辑即可，实现了事务控制机制对业务代码的低侵入性 。</p><p>Spring支持的基于 <code>Spring AOP</code>实现的声明式事务 功能，所谓声明式事务，即使用@Transactional注解进行声明标注，告诉Spring框架在什么地方启用数据库事务控制能力。<code>@Transactional</code>注解，可以添加在类或者方法上。如果其添加在类上时，表明此类中所有的public非静态方法都将启用事务控制能力。</p><p>既然@Transactional注解承载了Spring框架对于事务处理的相关能力，那么接下来我们就一起看下该注解的一些可选配置以及具体使用场景。</p><h2 id="Transactional主要可选配置"><a href="#Transactional主要可选配置" class="headerlink" title="@Transactional主要可选配置"></a>@Transactional主要可选配置</h2><p>只读事务配置</p><p>通过<code>readonly</code>参数指定当前事务是否为一个只读事务。设置为true标识此事务是个只读事务，默认情况为false。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>readOnly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">DomResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CiCdItemDetail</span><span class="token punctuation">></span></span> <span class="token function">queryCicdItemDetail</span><span class="token punctuation">(</span><span class="token class-name">String</span> appCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里涉及一个概念，叫做只读事务 ，其含义描述如下：</p><blockquote><p>在多条查询语句一起执行的场景里面会涉及到的概念。表示在事务设置的那一刻开始，到整个事务执行结束的过程中，其他事务所提交的写操作数据，对该事务都不可见。</p></blockquote><p>举个例子：</p><blockquote><p>现在有一个复合查询操作，包含2条SQL查询操作：先获取用户表count数，再获取用户表中所有数据。 (1) 先执行完获取用户表count数，得到结果10 (2) 在还没开始执行后一条语句的时候，另一个进程操作了DB并往用户表中插入一条新数据 (3) 复合操作的第二条SQL语句，获取用户列表的操作被执行，返回了11条记录</p></blockquote><p>很明显，复合操作中的两条SQL语句获取的数据结果无法匹配上。原因就是非原子性操作导致，即2条查询操作执行的间隔内，有另一个写操作修改了目标读取的数据，导致了此问题的出现。</p><p><img src="/2022/11/24/transactional-zhu-jie-kong-zhi-shi-wu/image_db652b56.png" alt="image_db652b56.png"></p><p>为了避免此情况的发生，可以给复合查询操作添加上只读事务，这样事务控制范围内，事务外的写操作就不可见，这样就保证了事务内多条查询语句执行结果的一致性。</p><p>那为什么要设置为只读事务、而不是常规的事务呢？主要是从执行效率角度的考虑。因为这个里的操作都是一些只读操作，所以设置为只读事务，数据库会为只读事务提供一些优化手段，比如不启动回滚段、不记录回滚log之类的。</p><h4 id="回滚条件设定"><a href="#回滚条件设定" class="headerlink" title="回滚条件设定"></a>回滚条件设定</h4><p><code>@Transactional</code>有提供4个不同属性，可以支持传入不同的参数，设定需要回滚的条件：</p><table>  <thead>   <tr>    <th>参数</th>    <th>含义说明</th>   </tr>  </thead>  <tbody>   <tr>    <td>rollbackFor</td>    <td>用于指定需要回滚的特定异常类型，可以指定一个或者多个。当指定<code>rollbackFor</code>或者<code>rollbackForClassName</code>之后，方法执行逻辑中只有抛出指定的异常类型，才会触发事务回滚</td>   </tr>   <tr>    <td>rollbackForClassName</td>    <td>与<code>rollbackFor</code>相同，设置字符串格式的类名</td>   </tr>   <tr>    <td>noRollbackFor</td>    <td>用于指定不需要进行回滚的异常类型，当方法中抛出指定类型的异常时，不进行事务回滚。而其余的类型的异常将会触发事务回滚。</td>   </tr>   <tr>    <td>noRollbackForClassName</td>    <td>与<code>noRollbackFor</code>相同，设置字符串格式的类名</td>   </tr>  </tbody> </table><p>其中，rollbackFor支持指定单个或者多个异常类型，只要抛出指定类型的异常，事务都将被回滚掉：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 指定单个异常</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">DemoException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// do something here</span><span class="token punctuation">&#125;</span><span class="token comment">// 指定多个异常</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">DemoException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DemoException2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUser2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// do something here</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>rollbackFor</code>和<code>rollbackForClassName</code>作用相同，只是提供了2个不同的指定方法，允许执行Class类型或者ClassName字符串。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 指定异常名称</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackForClassName <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"DemoException"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// do something here</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理，<code>noRollbackFor</code>和<code>noRollbackForClassName</code>的使用与上面示意的相似，只是其含义功能点是相反的。</p><h4 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h4><p><code>propagation</code>用于指定此事务对应的传播类型。所谓的事务传播类型，即当前已经在一个事务的上下文中时，又需要开始一个事务，这个时候来处理这个将要开启的新事务的处理策略。</p><p>主要有7种类型的事务传播类型：</p><table>  <thead>   <tr>    <th>传播类型</th>    <th>含义描述</th>   </tr>  </thead>  <tbody>   <tr>    <td>REQUIRED</td>    <td>如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务</td>   </tr>   <tr>    <td>SUPPORTS</td>    <td>如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行</td>   </tr>   <tr>    <td>MANDATORY</td>    <td>如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常</td>   </tr>   <tr>    <td>REQUIRES_NEW</td>    <td>创建一个新的事务，如果当前存在事务，则把当前事务挂起</td>   </tr>   <tr>    <td>NOT_SUPPORTED</td>    <td>以非事务方式运行，如果当前存在事务，则把当前事务挂起</td>   </tr>   <tr>    <td>NEVER</td>    <td>以非事务方式运行，如果当前存在事务，则抛出异常</td>   </tr>   <tr>    <td>NESTED</td>    <td>如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于REQUIRED</td>   </tr>  </tbody> </table><p>事务的传播行为，将会影响到事务控制的结果，比如最终是在同一事务中，一旦遇到异常，所有操作都会被回滚掉，而如果是在多个事务中，则某一个事务的回滚，不影响已提交的其余事务的回滚。</p><p><img src="/2022/11/24/transactional-zhu-jie-kong-zhi-shi-wu/image_0dea2964.png" alt="image_0dea2964.png"></p><p>实际编码的时候，可以通过@Transactional注解中的 <code>propagation</code>参数来指定具体的传播类型，取值由 <code>org.springframework.transaction.annotation.Propagation</code>枚举类提供。如果不指定，则默认取值为 <code>Propagation.REQUIRED</code>，也即如果当前存在事务，则加入该事务，如果当前没有事务，则创建一个新的事务 。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * The transaction propagation type. * &lt;p>Defaults to &#123;@link Propagation#REQUIRED&#125;. * @see org.springframework.transaction.interceptor.TransactionAttribute#getPropagationBehavior() */</span><span class="token class-name">Propagation</span> <span class="token function">propagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事务超时设定"><a href="#事务超时设定" class="headerlink" title="事务超时设定"></a>事务超时设定</h4><p>可以使用<code>timeout</code>属性来设置事务的超时秒数，默认值为-1，表示永不超时。</p><h2 id="Transactional失效场景避坑"><a href="#Transactional失效场景避坑" class="headerlink" title="@Transactional失效场景避坑"></a>@Transactional失效场景避坑</h2><p>同一个类中方法间调用</p><p>Spring的事务实现原理是AOP，而AOP的原理是动态代理。</p><p><img src="/2022/11/24/transactional-zhu-jie-kong-zhi-shi-wu/image_949a27da.png" alt="image_949a27da.png"></p><p>在类内部方法之间相互调用的时候，本质上是类对象自身的调用，而不是使用代理对象去调用，也就不会触发AOP，这样其实Spring也就无法将事务控制的代码逻辑织入到调用代码流程中，所以这里的事务控制就无法生效。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">writeDataIntoDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeDataIntoDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以遇到同一个类中多个方法之间相互调用，且调用的方法需要做事务控制的时候需要特别注意下这个问题。解决方式，可以建2个不同的类，然后将方法放到两个类中，这样跨类调用，Spring事务机制就可以生效。</p><h4 id="添加在非public方法上"><a href="#添加在非public方法上" class="headerlink" title="添加在非public方法上"></a>添加在非public方法上</h4><p>如果将@Transactional注解添加在protected、private修饰的方法上，虽然代码不会有任何的报错，但是实际上注解是不会生效的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeDataIntoDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法内部Try-Catch吞掉相关异常"><a href="#方法内部Try-Catch吞掉相关异常" class="headerlink" title="方法内部Try Catch吞掉相关异常"></a>方法内部Try Catch吞掉相关异常</h4><p>这个其实很容易理解，业务代码中将所有的异常给catch并吞掉了，等同于业务代码认为被捕获的异常不需要去触发回滚。对框架而言，因为异常被捕获了，业务逻辑执行都在正常往下运行，所以也不会触发异常回滚机制。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// catch了可能的异常，导致DB操作失败的时候事务不会触发回滚</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserEntity</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setWorkId</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"王小二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"failed to create user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 直接吞掉了异常，这样不会触发事务回滚机制</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在业务处理逻辑中，如果确实需要知晓并捕获相关处理的异常进行一些额外的业务逻辑处理，如果要保证事务回滚机制生效，最后需要往外抛出 <code>RuntimeException</code>异常，或者是继承RuntimeException实现的业务自定义异常。如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// catch了可能的异常，对外抛出RuntimeException或者其子类,可触发事务回滚</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserEntity</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setWorkId</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"王小二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"failed to create user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// @Transactional没有指定rollbackFor，所以抛出RuntimeException或者其子类，可触发事务回滚机制</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，如果@Transactional注解指定了 <code>rollbackFor</code>为某个具体的异常类型，则最终需要保证异常时对外抛出相匹配的异常类型，才可以触发事务处理逻辑。如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// catch了指定异常，对外抛出对应类型的异常,可触发事务回滚</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">DemoException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserEntity</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setWorkId</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"王小二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"failed to create user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// @Transactional有指定rollbackFor，抛出异常要与rollbackFor指定异常类型一致</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DemoException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对应数据库引擎类型不支持事务"><a href="#对应数据库引擎类型不支持事务" class="headerlink" title="对应数据库引擎类型不支持事务"></a>对应数据库引擎类型不支持事务</h4><p>以MySQL 数据库而言，常见的数据库引擎有 <code>InnoDB</code>和 <code>Myisam</code>等类型，但是MYISAM引擎类型是不支持事务 的。所以如果建表时设置的引擎类型设置为 <code>MYISAM</code>的话，即使代码里面添加了@Transactional最终事务也不会生效的。</p><h2 id="Transactional使用策略"><a href="#Transactional使用策略" class="headerlink" title="@Transactional使用策略"></a>@Transactional使用策略</h2><p>因为事务处理对性能会有一定的影响，所以事务也不是说任何地方都可以随便添加的。对于一些性能敏感场景，需要注意几点：</p><ol><li> 仅在必要的场合添加事务控制</li></ol><blockquote><p>（1）不含有DB操作相关，无需添加事务控制 （2）单条查询语句，没必要添加事务控制 （3）仅有查询操作的多条SQL执行场景，可以添加只读事务控制 （4）单条 <code>insert/update/delete</code>语句，其实也不需要添加 <code>@Transactional</code>事务处理，因为单条语句执行其实数据库有隐性事务控制机制 ，如果执行失败，是属于 <code>SQL</code>报错，数据不会更新成功，自然也无需回滚。</p></blockquote><ol><li> 尽可能缩小事务控制的代码段处理范围</li></ol><blockquote><p>主要从性能层面考虑，事务机制，类似于并发场景的加锁处理，范围越大对性能影响越明显</p></blockquote><ol><li> 事务控制范围内的业务逻辑尽可能简单、避免非事务相关耗时处理逻辑</li></ol><blockquote><p>也是从性能层面考虑，尽量将耗时的逻辑放到事务控制之外执行，事务内仅保留与DB操作切实相关的逻辑</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> spring事务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring事务 </tag>
            
            <tag> 为什么事务不生效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot单元测试</title>
      <link href="/2022/11/19/springboot-dan-yuan-ce-shi/"/>
      <url>/2022/11/19/springboot-dan-yuan-ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="JUnit-简介"><a href="#JUnit-简介" class="headerlink" title="JUnit 简介"></a>JUnit 简介</h2><p>JUnit是一款Java语言的单元测试框架，目前大多数Java开发环境都已经支持它了。JUnit测试也就是所谓的白盒测试，在程序员知道程序内部逻辑的基础上进行的测试，使用JUnit能让我们快速地完成单元测试。Spring Boot Test将JUnit和其他测试框架结合起来，提供了便捷高效的测试手段，目前Spring Boot 2.7版本采用的是JUnit 5。</p><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><blockquote><p>在使用Spring Boot Test之前，我们先来了解下它常用的注解，这对使用它很有帮助，具体参考下表即可！</p></blockquote><table>  <thead>   <tr>    <th>注解</th>    <th>作用</th>   </tr>  </thead>  <tbody>   <tr>    <td>@SpringBootTest</td>    <td>用于指定测试类启用Spring Boot Test，默认会提供Mock环境</td>   </tr>   <tr>    <td>@ExtendWith</td>    <td>如果只想启用Spring环境进行简单测试，不想启用Spring Boot环境，可以配置扩展为：SpringExtension</td>   </tr>   <tr>    <td>@Test</td>    <td>指定方法为测试方法</td>   </tr>   <tr>    <td>@TestMethodOrder</td>    <td>用于配置测试类中方法的执行顺序策略，配置为OrderAnnotation时，按@Order顺序执行</td>   </tr>   <tr>    <td>@Order</td>    <td>用于配置方法的执行顺序，数字越低执行顺序越高</td>   </tr>   <tr>    <td>@DisplayName</td>    <td>用于指定测试类和测试方法的别名</td>   </tr>   <tr>    <td>@BeforeAll</td>    <td>在测试类的所有测试方法前执行一次，可用于全局初始化</td>   </tr>   <tr>    <td>@AfterAll</td>    <td>在测试类的所有测试方法后执行一次，可用于全局销毁资源</td>   </tr>   <tr>    <td>@BeforeEach</td>    <td>在测试类的每个测试方法前都执行一次</td>   </tr>   <tr>    <td>@AfterEach</td>    <td>在测试类的每个测试方法后都执行一次</td>   </tr>   <tr>    <td>@Disabled</td>    <td>禁用测试方法</td>   </tr>   <tr>    <td>@RepeatedTest</td>    <td>指定测试方法重复执行</td>   </tr>   <tr>    <td>@ParameterizedTest</td>    <td>指定参数化测试方法，类似重复执行，从@ValueSource中获取参数</td>   </tr>   <tr>    <td>@ValueSource</td>    <td>用于参数化测试指定参数</td>   </tr>   <tr>    <td>@AutoConfigureMockMvc</td>    <td>启用MockMvc的自动配置，可用于测试接口</td>   </tr>  </tbody> </table><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><blockquote><p>下面我们来聊聊这些注解的基本使用，通过它们可以实现一些基本的单元测试。</p></blockquote><h3 id="集成Spring-Boot-Test"><a href="#集成Spring-Boot-Test" class="headerlink" title="集成Spring Boot Test"></a>集成Spring Boot Test</h3><p>如果你想在项目中集成Spring Boot Test的话，需要先在<code>pom.xml</code>中添加如下依赖。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>scope<span class="token punctuation">></span></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最简单的测试"><a href="#最简单的测试" class="headerlink" title="最简单的测试"></a>最简单的测试</h3><ul><li> 我们先来一个最简单的单元测试，使用 <code>@SpringBootTest</code>注解启用单元测试，使用 <code>@Test</code>指定测试方法，使用 <code>Assertions</code>类的方法来断言结果是否符合预期，具体代码如下。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * JUnit基本测试 * Created by macro on 2022/10/11. */</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 然后点击测试方法左侧按钮即可进行测试。</li></ul><p><img src="/2022/11/19/springboot-dan-yuan-ce-shi/image_a6c1a6d0.png" alt="image_a6c1a6d0.png"></p><ul><li> 执行完成后我们在IDEA的执行窗口中就可以看到方法测试通过了，由于使用 <code>@SpringBootTest</code>启用了Spring Boot环境，日志中会输出Spring Boot的banner。</li></ul><p><img src="/2022/11/19/springboot-dan-yuan-ce-shi/image_9e077c9d.png" alt="image_9e077c9d.png"></p><h3 id="指定测试方法顺序"><a href="#指定测试方法顺序" class="headerlink" title="指定测试方法顺序"></a>指定测试方法顺序</h3><ul><li> 我们可以通过 <code>@TestMethodOrder</code>注解和 <code>@Order</code>注解来指定所有测试方法的执行顺序，具体代码如下。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * JUnit指定方法测试顺序 * Created by macro on 2022/10/10. */</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TestMethodOrder</span><span class="token punctuation">(</span><span class="token class-name">MethodOrderer<span class="token punctuation">.</span>OrderAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodOrderTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> LOGGER <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MethodOrderTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"order为1的方法"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">lowOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"lowOrder method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"order为10的方法"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">highOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"highOrder method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 点击类左侧测试按钮，可以直接运行该类中的所有测试方法。</li></ul><p><img src="/2022/11/19/springboot-dan-yuan-ce-shi/image_00758bcb.png" alt="image_00758bcb.png"></p><ul><li> 这里由于我们使用了 <code>@DisplayName</code>注解给测试方法取了个别名，而且我们使用了 <code>@ExtendWith</code>指定了运行环境为Spring而不是Spring Boot，所以日志中不会出现Spring Boot的banner，执行速度也更快。</li></ul><p><img src="/2022/11/19/springboot-dan-yuan-ce-shi/image_faa9f8ba.png" alt="image_faa9f8ba.png"></p><h3 id="生命周期测试"><a href="#生命周期测试" class="headerlink" title="生命周期测试"></a>生命周期测试</h3><ul><li> 我们还可以通过JUnit 5的生命周期注解来执行测试方法，比如在 <code>@BeforeAll</code>注解指定的方法中做全局初始化，在 <code>@AfterAll</code>注解指定的方法中做资源的销毁，具体代码如下。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * JUnit生命周期测试 * Created by macro on 2022/10/10. */</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LifecycleTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> LOGGER <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LifecycleTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@BeforeAll</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">allInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"allInit()：在所有方法前执行，只执行一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@BeforeEach</span>    <span class="token keyword">void</span> <span class="token function">eachInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"eachInit()：在测试方法前执行，每个测试方法前都执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">successTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"successTest()：方法执行成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@AfterEach</span>    <span class="token keyword">void</span> <span class="token function">eachDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"eachDown()：在测试方法后执行，每个测试方法后都执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@AfterAll</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">allDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"allDown()：在测试方法后执行，每个测试方法后都执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 测试完成后，控制台输出日志如下。</li></ul><p><img src="/2022/11/19/springboot-dan-yuan-ce-shi/image_e9aafc0d.png" alt="image_e9aafc0d.png"></p><h3 id="断言的使用"><a href="#断言的使用" class="headerlink" title="断言的使用"></a>断言的使用</h3><blockquote><p>我们可以通过<code>Assertions</code>类中提供的断言API来断言测试结果。</p></blockquote><ul><li> 例如我们可以使用 <code>fail</code>方法直接断言方法执行失败并输出提示信息。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * JUnit断言测试 * Created by macro on 2022/10/11. */</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AssertTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">failTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"failTest()：方法执行失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 测试方法执行后会直接抛出异常信息。</li></ul><p><img src="/2022/11/19/springboot-dan-yuan-ce-shi/image_30360d29.png" alt="image_30360d29.png"></p><ul><li> 还可以通过 <code>assertTrue</code>、 <code>assertNull</code>、 <code>assertEquals</code>这类方法来断言结果是否符合预期。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * JUnit断言测试 * Created by macro on 2022/10/11. */</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AssertTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">failTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"failTest()：方法执行失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">trueTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">trueFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">nullTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNull</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">notNullTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">equalsTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">notEqualsTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotEquals</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 也可以使用 <code>assertThrows</code>方法来断言方法中抛出的异常。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * JUnit断言测试 * Created by macro on 2022/10/11. */</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AssertTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> LOGGER <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LifecycleTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">throwsTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 还可通过 <code>assertTimeout</code>方法断言方法的执行时间。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * JUnit断言测试 * Created by macro on 2022/10/11. */</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AssertTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">timeoutTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTimeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> sleepTime <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>            <span class="token class-name">ThreadUtil</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>sleepTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"timeoutTest():休眠&#123;&#125;毫秒"</span><span class="token punctuation">,</span>sleepTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 或者通过 <code>assertAll</code>方法将几个断言结合起来使用， <code>Assertions</code>类中提供的工具方法很多，具体可以参考它的代码。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * JUnit断言测试 * Created by macro on 2022/10/11. */</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AssertTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">assertAllTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token function">trueTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token function">nullTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token function">equalsTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他测试"><a href="#其他测试" class="headerlink" title="其他测试"></a>其他测试</h3><ul><li> Spring Boot Test除了上述测试功能，还可以使用 <code>@Disabled</code>来禁用某个测试方法。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * JUnit其他测试 * Created by macro on 2022/10/10. */</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OtherTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@Disabled</span><span class="token punctuation">(</span><span class="token string">"用于测试@Disabled注解"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">disabledTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"disabledTest()：方法被执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 也可以使用 <code>@RepeatedTest</code>来实现循环测试。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * JUnit其他测试 * Created by macro on 2022/10/10. */</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OtherTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> LOGGER <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LifecycleTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RepeatedTest</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">repeatedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"repeatedTest()：重复执行第&#123;&#125;次"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 还可以通过 <code>@ParameterizedTest</code>来进行参数化测试。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * JUnit其他测试 * Created by macro on 2022/10/10. */</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OtherTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> LOGGER <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LifecycleTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@ParameterizedTest</span>    <span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>ints <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parameterizedTest</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"parameterizedTest()：a=&#123;&#125;"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 运行以上测试方法后，具体测试结果如下。</li></ul><p><img src="/2022/11/19/springboot-dan-yuan-ce-shi/image_2bf8a627.png" alt="image_2bf8a627.png"></p><h2 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h2><blockquote><p>上面介绍了Spring Boot Test的基本使用，下面我们结合项目来使用下它。</p></blockquote><h3 id="Dao层测试"><a href="#Dao层测试" class="headerlink" title="Dao层测试"></a>Dao层测试</h3><p>如果我们的项目需要对数据访问层Dao中的方法进行测试的话，直接注入Mapper接口，在测试方法中直接调用即可，这里对根据ID查询品牌的Mapper方法进行测试。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Dao层方法测试 * Created by macro on 2022/10/11. */</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> LOGGER <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MapperTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">PmsBrandMapper</span> brandMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testGetById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> id <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token class-name">PmsBrand</span> pmsBrand <span class="token operator">=</span> brandMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"brand name:&#123;&#125;"</span><span class="token punctuation">,</span>pmsBrand<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"小米"</span><span class="token punctuation">,</span>pmsBrand<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Service层测试"><a href="#Service层测试" class="headerlink" title="Service层测试"></a>Service层测试</h2><p>对业务层Service中的方法测试也是一样的，直接注入Service接口，在测试方法中直接调用即可，这里对根据ID查询品牌的Service方法进行测试。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Service层方法测试 * Created by macro on 2022/10/11. */</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> LOGGER <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ServiceTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">PmsBrandService</span> brandService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testGetById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> id <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token class-name">PmsBrand</span> pmsBrand <span class="token operator">=</span> brandService<span class="token punctuation">.</span><span class="token function">getBrand</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"brand name:&#123;&#125;"</span><span class="token punctuation">,</span>pmsBrand<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"小米"</span><span class="token punctuation">,</span>pmsBrand<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Controller层测试"><a href="#Controller层测试" class="headerlink" title="Controller层测试"></a>Controller层测试</h2><p>对于Controller层方法进行测试，有时我们需要模拟请求，使用MockMvc即可，这里模拟测试下分页查询品牌列表的接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Controller层方法测试 * Created by macro on 2022/10/11. */</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@AutoConfigureMockMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">mvcTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">//模拟发送一个请求访问分页查询品牌列表的接口</span>        mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/brand/list"</span><span class="token punctuation">)</span> <span class="token comment">//设置请求地址</span>                <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">"pageNum"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token comment">//设置请求参数</span>                <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">"pageSize"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//断言返回状态码为200</span>                <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultHandlers</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//在控制台打印日志</span>                <span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回请求结果</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于我们选择了在控制台输出日志，控制台将输出如下信息。</p><p><img src="/2022/11/19/springboot-dan-yuan-ce-shi/image_3e75da01.png" alt="image_3e75da01.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天带大家体验了一把Spring Boot Test，作为Spring Boot官方测试框架，确实功能很强大。由于其主要基于JUnit 5，和JUnit 5的用法基本一致。使用它进行单元测试，无需启动整个项目，更快更好用！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>JUnit 5官方文档：<a href="https://junit.org/junit5/docs/current/user-guide/">https://junit.org/junit5/docs/current/user-guide/</a></p>]]></content>
      
      
      <categories>
          
          <category> junit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单元测试 </tag>
            
            <tag> junit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精通Mysql索引</title>
      <link href="/2022/11/14/jing-tong-mysql-suo-yin/"/>
      <url>/2022/11/14/jing-tong-mysql-suo-yin/</url>
      
        <content type="html"><![CDATA[<h2 id="索引概念"><a href="#索引概念" class="headerlink" title="索引概念"></a>索引概念</h2><p>概念：索引是提高mysql查询效率的数据结构。总的一句话概括就是索引是一种提高查询效率的数据结构。</p><p>数据库查询是数据库的最主要功能之一。设计者们都希望查询数据的速度能尽可能的快，因此数据库系统的设计者会从查询算法的角度进行优化。</p><p>最基本的查询算法当然是顺序查找（linear search），这种复杂度为O(n)的算法在数据量很大时显然是糟糕的，好在计算机科学的发展提供了很多更优秀的查找算法，例如：有顺序查找、折半查找、快速查找等。</p><p>但是，每种查找算法都只能应用于特定的数据结构之上，例如顺序查找依赖于顺序结构，折半查找通过二叉查找树或红黑树实现二分搜索。</p><p>因此，在数据之外，数据库系统还维护着满足特定查找算法的数据结构。这种数据结构，就是索引。</p><h2 id="索引性能分析"><a href="#索引性能分析" class="headerlink" title="索引性能分析"></a>索引性能分析</h2><p>目前，大多数数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。B+ 树索引是 B+ 树在数据库中的一种实现，是最常见也是数据库中使用最为频繁的一种索引。</p><p>从最早的平衡二叉树演化而来的。B+ 树是由二叉查找树、平衡二叉树（AVLTree）和平衡多路查找树（B-Tree）逐步优化而来。</p><p>那么为什么mysql的索引选择B+数呢？</p><p>有序数组、Hash索引、红黑树、二叉查找树、AVL树也可以作为数据结构也可以用来实现索引，但是文件系统以及数据库系统普遍采用B树或者B+树，这里结合各个索引的特点以及计算的组成原理来深入的分析。</p><p>但是，对于Mysql来说适合它的才是最好的查询，一方面要实现高效的查询，除了简单的条件查询，还要支持有序的高效索引的范围查询、分组。</p><p>有序数组在等值查询和范围查询性能都是非常好的，那为什么又不用有序数组作为索引呢？因为对于数组而言作为索引更新的成本太高，新增数据要把后面的数据都往后移一位，所以也不采用有序数组作为索引的底层实现。</p><p>hash是以key-value的形式进行存储，适合于等值查询的场景，查询的时间复杂度为O(1)，因为hash储存并不是有序的，所以对于范围查询就可能要遍历所有数据进行查询，而且不同值的计算还会出现hash冲突，所以hash并不适合于做Mysql的索引。</p><p>另一方面就是除了查询的效率要高，还要有高效的读取数据效率（io），我们都知道计算机的随机磁盘io效率是非常低下的。</p><p>那么为什么硬盘的存取会如此的慢呢？</p><p>这个就要讲硬盘的读写原理，硬盘有很多种，但是都是由盘片、磁头、盘片主轴、控制电机、磁头控制器、数据转换器、接口、缓存等几个部分组成。</p><p>所有的盘片都固定在一条轴上，那条轴叫做盘片主轴，所有的盘片都是绝对平行的，也形成一个柱体，每个盘片上都有一个磁头，每个磁头都在同一轴线上，就是从上方往下看，磁头是绝对重叠的。</p><p>所有的磁头连在一个磁头控制器上，由磁头控制器负责各个磁头的运动，磁头可沿盘片的半径方向移动，实际上是斜切运动，每个磁头同一时刻必须是同轴的盘片以每分钟数千转到上万转的速度在高速运转，这样磁头就能对盘片上的指定位置进行数据的读写操作：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_2c3f6cae.png" alt="image_2c3f6cae.png"></p><p>磁盘数据的读写原理</p><p>盘片被划分成一系列同心环，圆心是盘片中心，每个同心环叫做一个磁道，所有半径相同的磁道组成一个柱面。</p><p>磁道被沿半径线划分成一个个小的段，每个段叫做一个扇区，每个扇区是磁盘的最小存储单元。为了简单起见，我们下面假设磁盘只有一个盘片和一个磁头。</p><p>当磁盘读取数据时，系统会将数据逻辑地址传给磁盘，磁盘的控制电路按照寻址逻辑将逻辑地址翻译成物理地址，即确定要读的数据在哪个磁道，哪个扇区。</p><p>为了读取这个扇区的数据，需要将磁头放到这个扇区上方，为了实现这一点，磁头需要移动对准相应磁道，这个过程叫做寻道，所耗费时间叫做寻道时间，然后磁盘旋转将目标扇区旋转到磁头下，这个过程耗费的时间叫做旋转时间。</p><p>即一次磁盘的读写操作完成过程由三个动作组成：</p><ul><li> 寻道（时间）：磁头移动定位到指定磁道。</li><li> 旋转延迟（时间）：等待指定扇区从磁头下旋转经过。</li><li> 数据传输（时间）：数据在磁盘与内存之间的实际传输</li></ul><blockquote><p>额外知识：</p><ul><li> 盘面：硬盘的每一个盘片都有上下两个盘面，一般每个盘面都会得到利用，都可以存储数据，盘面号又叫磁头号，因为每一个有效盘面都有一个对应的读写磁头。</li><li> 磁道：磁盘在格式化时被划分成许多同心圆，这些同心圆轨迹叫做磁道，磁道从外向内从 0 开始顺序编号，信息以脉冲串的形式记录在这些轨迹中，这些同心圆不是连续记录数据，而是被划分成一段段的圆弧。</li><li> 所有盘面上的同一磁道构成一个圆柱，通常称作柱面。所有盘面上的同一磁道构成一个圆柱，通常称作柱面。数据的读 / 写按柱面进行，而不按盘面进行，当一个磁道写满数据后，就在同一柱面的下一个盘面来写，一个柱面写满后，才移到下一个扇区开始写数据，读数据也按照这种方式进行，这样就提高了硬盘的读 / 写效率。</li></ul></blockquote><p>提高磁盘数据读写原理</p><p>局部性原理与磁盘预读。由于存储介质的特性，磁盘本身存取就比主存慢很多，再加上机械运动耗费，磁盘的存取速度往往是主存的几百分分之一，因此为了提高效率，要尽量减少磁盘I/O。</p><p>为了达到这个目的，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存。</p><p>这样做的理论依据是计算机科学中著名的局部性原理：当一个数据被用到时，其附近的数据也通常会马上被使用。</p><p>所以，程序运行期间所需要的数据通常应当比较集中。由于磁盘顺序读取的效率很高（不需要寻道时间，只需很少的旋转时间），因此对于具有局部性的程序来说，预读可以提高I/O效率。</p><p>预读的长度一般为页（page）4k的整倍数。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（在许多操作系统中，页的大小通常为4k），主存和磁盘以页为单位交换数据。</p><p>当程序要读取的数据不在主存中时，会触发一个缺页异常，此时系统会向磁盘发出读盘信号，磁盘会找到数据的起始位置并向后连续读取一页或几页载入内存中，然后异常返回，程序继续运行。</p><blockquote><p>所以，硬盘中由于涉及到机械运动，所以一次的磁盘IO消耗的时间是非常大的，于内存的读取速度相比，就好比光速与声速的比较。</p></blockquote><p>因此，假如内存条件允许的话，Mysql巴不得把所有的数据一次性加载到内存中进行读写。一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。</p><p>服务器的内存的大小也是限制的，一个服务器中可能不止跑着Mysql一个进行，多多少少都有可能二三十个进行，每个进行都需要操作系统分配内存。</p><p>这样的话，索引查找过程中就要产生磁盘I/O消耗，相对于内存存取，硬盘I/O存取的消耗要高几个数量级，查找过程中磁盘I/O的存取次数。</p><p>Mysql中的一些大的数据表，一个表就有可能几个G，索引结构也很大，那服务器内存不得撑爆了。</p><p>所以，必须做一个取舍，在内存与磁盘中进行衡量，数据尽量放在内存中，而在少量的数据在磁盘中，读取磁盘的次数控制到最少，也就是对于Mysql的性能影响到最小，加上磁盘数据读写原理来提高数据的读取效率。</p><p>那么在众多树的条件下，B+树又是以怎么样的又是脱颖而出呢？下面我们来聊一聊B树、B-树、B+树、红黑树性能。</p><p>二叉树、红黑树、AVL树、B树、B+树性能分析</p><p>B树性能分析：B树是二叉查找平衡树，但是B树一个节点只存一个关键字，在大量数据的时候，B树树高非常大，性能低下：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_f327aac4.png" alt="image_f327aac4.png"></p><p>甚至在极端的情况下，因为二叉搜索树不存在平衡算法，所以在某些特殊的情况下，二叉搜索树等同于线性，出现蹩脚的情况，设计者们发现降低树的高度自然就可以提高查找效率：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_c1987417.png" alt="image_c1987417.png"></p><p>红黑树和AVL树是在二叉树的基础上机上加上平衡算法，红黑树确保没有一条路径会比其它路径长出两倍，它是弱平衡树而AVL是严格的平衡，所以相对于二叉树的蹩脚情况做了很大的改进，加入了平衡算法：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_700a6b0b.png" alt="image_700a6b0b.png"></p><p>但是，同样还是存在数据量大导致树非常高的问题，所以现在的目标就是压缩树的高度。</p><p>B树基于减少树的高度上，B树是一种多路搜索树，每个节点都可以有多于两个子节点，并不是二叉的：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_4d67662e.png" alt="image_4d67662e.png"></p><p>B树与B+树最大的区别就是B的非叶子节点可以存储数据，而B+树只有叶子结点才可以存储数据，B树是多路搜索树，一个节点可以存储很多数据，所以B树的高度大大减小。</p><p>但是B树相对于B+树来说，在查找数据的时候，由于每一个节点都有可能包含目标数据，所以查找总是从根节点进行向下搜索，这个特点会带来大量的随机io。</p><p>而在B+树种，因为叶子结点才会存储数据（InnoDB），这样子相比B树一个页大小存储的索引数据就更多了（16K），并且叶子结点通过双向指针指向相邻的节点，依次连接。</p><p>并且相邻结点是有序的，所以对于范围查找是非常方便的，获取到第一个符合条件的，然后通过指针，往后获取数据，直到最后一个不满足条件为止。</p><p>所以总结来说：B+树是多叉树，一个数据页的大小是16kb，在1-3的树高就能存储10亿级以上的数据，也就是只要访问磁盘1-3次就足够了，并且B+树的叶子结点上一个叶子结点有指针指向下一个叶子结点，便于范围查询：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_275a1cfe.png" alt="image_275a1cfe.png"></p><p>下面我们来详细的聊一聊Mysql索引B+树查询原理。</p><h2 id="B-树索引原理"><a href="#B-树索引原理" class="headerlink" title="B+树索引原理"></a>B+树索引原理</h2><p>上面也大概说了一下B+树的介绍，在 B+Tree 中，所有数据记录节点都是按照键值大小顺序存放在同一层的叶子节点上，而非叶子节点上只存储 key 值信息，这样可以大大加大每个节点存储的 key 值数量，降低 B+Tree 的高度。</p><p>在B+树的结构中，只在叶子节点存储数据，在非叶子节点中只存储的索引，在非叶子节点中可以有更大的空间储存更多的索引，这样B+树的出度d就可以大大的增加，从而降低的B+树的高度h，B树中一个节点的大小为一个page的大小，也就是一次IO的读取，h越小IO的次数就可以减少：</p><p>dmax=floor(pagesize/(keysize+datasize+pointsize))</p><p>floor表示向下取整。由于B+Tree内节点去掉了data域，因此可以拥有更大的出度，拥有更好的性能。</p><p>我们来看看B+树的搜索过程，Mysql的InnoDB的索引的结构如下图所示，假设我们要搜索id为15的数据：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_5bee3c9f.png" alt="image_5bee3c9f.png"></p><ol><li> 根据根节点找到磁盘块 1，读入内存，一般根节点也会常驻内存，甚至可以省略一次磁盘IO操作。【磁盘 I/O 操作第 1 次】</li><li> 比较id 15在区间28的左边，于是根据p1找到磁盘2。</li><li> 将磁盘2读入内存，查找结果15在（10,17）之间。【磁盘 I/O 操作第 2 次】</li><li> 然后根据磁盘2的指针p2找到磁盘块5，读入内存。【磁盘 I/O 操作第 3 次】</li><li> 最后根据id=15找到对应的数据，返回结果。</li></ol><p>所以根据上面的查找只需要至多三次的磁盘IO就可以找到对应的数据。从上面的B+树的原理图中非叶子节点构成了类似于一个一个目录一样，也可以叫做索引页，最后找到叶子结点的数据。</p><p>在MySQL中，不同存储引擎对索引的实现方式是不同的，Mysql有MyISAM和InnoDB两个存储引擎的索引实现方式，下面就来分别介绍这两种存储引擎。</p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>在MyISAM储存引擎中，数据和索引文件是分开储存的，Myisam 的存储文件有三个，后缀名分别是 .frm、.MYD、MYI，其中 .frm 是表的定义文件，.MYD 是数据文件，.MYI 是索引文件。</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_e6679248.png" alt="image_e6679248.png"></p><p>Myisam 只支持表锁，且不支持事务。Myisam 由于有单独的索引文件，在读取数据方面的性能很高 。</p><p>Myisam 也是B+树结构，但是MyISAM索引的叶子节点的数据保存的是行数据的地址。因此，MyISAM中索引检索的算法首先在索引树中找到行数据的地址，然后根据地址找到对应的行数据。</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_f50b3c32.png" alt="image_f50b3c32.png"></p><p>可以看出MyISAM的索引文件仅仅保存数据记录的地址。主键索引和辅助索引，只是主索引要求key是唯一的，而辅助索引的key可以重复。如果我们在Col2上建立一个辅助索引，则此索引的如下图：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_3e3d131e.png" alt="image_3e3d131e.png"></p><p>MyISAM的索引方式也叫做“非聚集”的，之所以这么称呼是为了与InnoDB的聚集索引区分。</p><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>在InnoDB中，数据和索引文件是合起来储存的，如图所示，InnoDB 的存储文件有两个，后缀名分别是 .frm 和 .idb，其中 .frm 是表的定义文件，而 idb 是数据文件。</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_5eb3208c.png" alt="image_5eb3208c.png"></p><p>在InnoDB虽然底层也是B+树实现的方式，当时与MyISAM却有明显的区别，在InnoDB实现的索引结构中，索引文件和数据文件是一起的，InnoDB中索引文件中的key就是数据表中的主键索引，因此InnoDB的索引文件也是主索引文件。如下图所示：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_33b5701e.png" alt="image_33b5701e.png"></p><p>如果给另一个字段指定为普通索引，则普通索引树的结构如下图所示：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_cee886ce.png" alt="image_cee886ce.png"></p><p>所以，当查询不是按照主键查询时候就会先在辅助索引树上先找到主键的值，然后再到主索引树找到对应的行数据的值，这叫做回表，回表降低了表的查询效率。</p><h2 id="Mysql索引种类"><a href="#Mysql索引种类" class="headerlink" title="Mysql索引种类"></a>Mysql索引种类</h2><p>Mysql中索引的种类也不是很多，不同类型的索引有不同的作用，索引的作用相互之间也存在交叉关系，Mysql中索引主要分为以下几类：</p><ol><li> 「主键索引」（PRIMARY KEY）：主键索引一般都是在创建表的时候指定，「一个表只有一个主键索引」，特点是「唯一、非空」。</li><li> 「唯一索引」（UNIQUE）：唯一索引具有的特点就是唯一性，可以在创建表的时候指定，也可以在创建表后创建。</li><li> 「普通索引」（INDEX）：普通索引唯一的作用就是加快查询。</li><li> 「组合索引」（ INDEX）：组合索引是创建一个「多个字段的索引」，这个概念是相对于上上面的单列索引而言，组合索引查询遵循「最左前缀原则」。</li><li> 「全文索引」（FULLTEXT）：全文索引是针对一些大的「文本字段」创建的索引，也称为「全文检索」。</li><li> 「聚簇索引」和「非聚簇索引」：聚簇索引和非聚簇索引的概念比上面的概念要大，属于包含和被包含的关系。例如：InnoDB中主键索引使用的就是聚簇索引。</li></ol><p>若是你想查看一个表的所有索引，可以执行下面的sql来查看：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">show index from 表名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，查看我自己的测试表里面的索引，如下图所示，Key_name表示索引的名字，Column_name表示索引的字段：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_4030cc20.png" alt="image_4030cc20.png"></p><h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><p>主键索引在InnoDB存储引擎中是最常见的索引类型，一个表都会有一个主键索引，它索引的字段不允许为空值，并且唯一。</p><p>一般是在创建表的时候，可以通过RIMARY KEY指定主键索引，在InnoDB存储引擎中，若是创建表的时候没有主观创建主键索引，Mysql就会看表中是否有唯一索引，有，就会指定「非空的唯一索引」为主键索引</p><p>若是没有唯一索引，就会默认生成一个6byte空间的自动增长主键作为主键索引，可以通过select _rowid from 表名查询的是对应的主键值.。</p><p>MyISAM储存引擎是可以不存在主键索引，MyISAM和InnoDB储存数据的结构方式还是有明显的区别，这个后面篇章会详细讲解。</p><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>唯一索引与主键索引的区别就是，唯一索引允许为空，若是在组合索引中，只要创建的列值是唯一的</p><p>唯一索引在实际中更多的是用来保证数据的唯一性，假如你仅仅要数据能够快速查询，你也可以使用普通索引，所以唯一索引重在体现它的唯一性。</p><p>实际的业务场景，有些库表字段要求唯一，就可以使用唯一索引，创建唯一索引的方式有三种。</p><p>（1）一个是在创建表的时候指定，如下sql：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">CREATE <span class="token class-name">TABLE</span> <span class="token function">user</span><span class="token punctuation">(</span>  id INT PRIMARY KEY <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>  name <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>  <span class="token class-name">UNIQUE</span> unique_name <span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）也可以在表创建后创建，如下sql：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">CREATE UNIQUE INDEX unique_name <span class="token class-name">ON</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）通过修改表结构创建，如下sql：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">ALTER user ADD UNIQUE unique_name ON <span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里有一个细节要注意的是创建的name字段，指定的长度是16字符，而创建的索引的长度制定的是10字符，因为也没有人的名字长度会超过10个字符，所以减少索引长度，能够减少索引所占的空间的大小。</p><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><p>普通索引的唯一作用就是加快数据的查询，一般对查询语句WHERE和ORDER BY后面的字段创建普通索引。</p><p>创建普通索引的方式也有三种，基本和创建唯一索引的方式一样，只是把关键字UNIQUE换成INDEX，如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建表的时候创建</span>CREATE <span class="token class-name">TABLE</span> <span class="token function">user</span><span class="token punctuation">(</span>  id INT PRIMARY KEY <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>  name <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>  <span class="token class-name">INDEX</span> index_name <span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建表后创建</span>CREATE INDEX INDEX index_name <span class="token class-name">ON</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>；<span class="token comment">// 修改表结构创建</span>ALTER user ADD INDEX index_name ON <span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若是想删除索引，可以通过执行下面的sql进行删除索引：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">DROP INDEX index_name <span class="token class-name">ON</span> user<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h3><p>组合索引即用多个字段创建一个索引，组合索引能够避免「回表查询」，相对于多字段的单列索引，组合索引的查询效率更高。</p><p>创建组合索引(联合索引)的方式和上面创建普通索引的方式一样，只不过字段的数目多了，如下sql创建：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 其它方式和上面的一样，这里就只列举修改表结构的方式创建</span>ALTER TABLE employee ADD <span class="token class-name">INDEX</span> name_age_sex <span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="回表查询"><a href="#回表查询" class="headerlink" title="回表查询"></a>回表查询</h4><p>什么是回表查询呢？回表查询简单来说「通过二级索引查询数据，得不到完整的数据行，需要再次查询主键索引来获得数据行」。</p><p>InnoDB存储引擎中，索引分为 「聚簇索引」和「二级索引」，主键索引就是聚簇索引，其它的索引为二级索引。</p><p>聚簇索引中的叶子节点保存着完整的数据行，而二级索引的叶子节点并不是保存完整的数据行。</p><p>上面提到InnoDB表是一定要有主键索引的，虽然索引占据空间，但是索引符合二分查找的算法，查找数据非常的快。</p><p>假设还是上面的employee表，里面有主键索引id，和普通的索引name，那么在InnoDB中就会存在两棵B+Tree，一棵是主键索引树：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_ea5a8c1e.png" alt="image_ea5a8c1e.png"></p><p>在主键索引树中的叶子节点存储的是完整的数据行，另外一棵是name字段的二级索引树，如下图所示：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_73608ecd.png" alt="image_73608ecd.png"></p><p>倘若你执行这条sql：select name, age, sex from employee where name =’as’;就会先执行二级索引的查询，当查询name=’as’时，得到主键为50，再根据主键查询主键索引树，得到完整的数据行，具体的执行流程如下：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_6bcc4698.png" alt="image_6bcc4698.png"></p><p>这个就是回表查询，回表查询会查询两次，这样就会降低查询的效率，为了避免回表查询，只查询一次就能得到完整的数据呢？</p><h4 id="索引覆盖"><a href="#索引覆盖" class="headerlink" title="索引覆盖"></a>索引覆盖</h4><p>常见的方式就是「建立组合索引（联合索引）「进行」索引覆盖」，什么是索引覆盖呢？索引覆盖就是「索引的叶子节点已经包含了查询的数据，没必要再回表进行查询。」</p><p>假如我还是执行如下sql：select name, age, sex from employee where name =’as’;因为普通索引只有name字段才建立了索引，这必然会导致回表查询。</p><p>为了提高查询效率，就(name)「单列索引升级为联合索引」(name, age, sex)就不同了。</p><p>因为建立的联合索引，在二级节点的叶子阶段就会同时存在name, age, sex三个的值，一次性就会获得所需要的数据，这样就避免了回表，但是所有的方案都不是完美的。</p><p>若是这个联合索引哪一天某一个数据行的name值改变了或者age改变了，我就需要同时维护主键索引和联合索引两棵树，这样的维护成本就高了，性能开销也大了。</p><p>相比之前数据的改变，我只需要维护主键索引即可，联合索引的创建就导致了需要同时维护两棵树，这样就会影响插入、更新数据的操作，所以并没有哪种方案是完美的。</p><h4 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h4><p>我们知道单列索引是按照索引列有序性的进行组织B+Tree结构的，联合索引又是怎么组织B+Tree呢？</p><p>联合索引其实也是按照创建索引的时候，最左边的进行最开始的排序，也就是「最左前缀原则」，比如一个表中有如下数据：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_d3894bcc.png" alt="image_d3894bcc.png"></p><p>如上图所示，对于联合索引中name字段是放在最前面的，所以name是完全有序的，但是age字段就不是有序的，只有当name相同，例如：name=’bc’此时age字段的索引排序才是完全有序的。</p><p>所以你会发现，在联合索引中你只有使用以下的规则的方式查询才会使用到索引：</p><ul><li> name,age,sex</li><li> name,age</li><li> name</li></ul><p>因为Mysql的底层有查询优化器，会判断sql执行的时候若是使用全表扫描的效率比使用索引的效率更高，就会使用全表扫描。</p><p>假如，我查询的时候使用age&gt;=23,sex=’男’;两个字段作为查询条件，但是没有使用name字段，因为在name不知情的条件下，对于age是无序的。</p><p>对于age&gt;=23条件可能在很多的name不同中都有符合条件的出现，所以就没有办法使用索引，这也是索引实现的原因，一定要遵循「查找有序，充分的利用索引的有序性」。</p><p>假如你是分别在name，age，sex三个字段中分别建立三个单列索引，就相当于建立三颗索引树，那么它的查询效率，比我们使用一棵索引树查询效率就可想而知了。</p><p>有一种情况即使使用到了最左边的name字段也不会使用索引，例如：WHERE name like ‘%d%’；这种like条件的模糊查询是会使索引失效。</p><p>我们可以这样理解，「查询字符串也是遵循最左前缀原则的」，字符串的查询是对字符串里面的字符一个一个的匹配，「若是字符串最左边为%表示一个不确定的字符串，那么是没办法利用到索引的有序性」。</p><p>但是若是修改为 ：WHERE name like ‘d%’；就可以使用索引，因为最左边的字符串是确定的，这种称为「匹配列前缀」。</p><p>实际业务场景中联合索引的创建，「我们应该把识别度比较高的字段放在前面，提高索引的命中率，充分的利用索引」。</p><h4 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h4><p>Mysql5.6版本提出了索引下推的原则，「用于查询优化，主要是用于like关键字的查询的优化」，什么是索引下推呢？</p><p>下面通过演示来说明一下他的概念，还是利用原来的employee测试表，假如我要执行下面的sql进行查询：SELECT * from user where name like ‘张%’ and age=40；</p><p>假如没有索引下推，执行的过程如下图所示：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_f9e7e1af.png" alt="image_f9e7e1af.png"></p><p>查询会直接忽略age字段，将name查询的张开头的id=5、id=7的结果返回给Mysql服务器，再执行两次的回表查询。</p><p>若是上面的查询操作使用了索引下推，执行的过程如下：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_e986da4f.png" alt="image_e986da4f.png"></p><p>Mysql会将查询条件age=40的查询条件传递给存储引擎，再次过滤掉age=50的数据行，这样回表的次数就变为了一次，提高了查询效率。</p><p>总结起来索引下推就是在执行sql查询的时候，会将一部分的索引列的判断条件传递给存储引擎，由存储引擎通过判断是否符合条件，只有符合条件的数据才会返回给Mysql服务器。</p><h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><p>全文索引也称为全文检索，可以通过以下sql建立全文索引：ALTER TABLE employee ADD FULLTEXT fulltext_name(name);或者CREATE INDEX的方式创建。</p><p>全文索引主要是针对CHAR、VARCHAR或TEXT这种文本类的字段有效，有人说不也可以使用like关键字来查询文本吗。</p><p>普通索引（单列索引）的查询只能加快字段内容中最前面的字符串的检索，若是对于多个单词组成文本的查询普通索引就无能为力了。</p><p>索引一经创建就没有办法修改，若是想要修改索引，必须重建，可以使用以下sql来删除索引：DROP INDEX fulltext_name ON employee;</p><h3 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h3><p>聚簇索引和非聚簇索引是相对于存储引擎的概念，范围比较大，包含上面所提到的索引类型。</p><p>「聚簇索引就是叶子节点中存储的就是完整的行数据，索引和数据存储在一起；而非聚簇索引的索引文件和数据文件是分开的，所以查询数据会多一次查询」。</p><p>因此聚簇索引的查询速度会快于非聚簇索引的查询速度，在Mysql的存储引擎中，「InnoDB支持聚簇索引，MyISAM不支持聚簇索引，MyISAM支持非聚簇索引」。</p><h4 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h4><p>下面我们来看看InnoDB中的聚簇索引，前面说到InnoDB都会有一个主键，该主键就是用于支持聚簇索引，聚簇索引结构图，大致如下图所示：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_5661add7.png" alt="image_5661add7.png"></p><p>InnoDB中适用于最好的主键选择就是给出一个AUTO_INCREMENT的列作为自增的主键，有的人可能会使用UUID作为随机主键。</p><p>因为索引要维持有序性，若是使用随机的主键，主键的插入需要寻找合适的位置进行放置，这样维护主键索引树的成本就会变得更高。</p><p>相反的，自增主键，主键都是自增变大，在维护主键索引树的成本就会变得更小，随意应该尽量避免随机主键。</p><h4 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h4><p>MyISAM使用的是非聚簇索引，新插入数据的时候，会按顺序的写入的磁盘中，并且给每一行数据标记一个行号，从小逐渐增大。</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_36b4ad4c.png" alt="image_36b4ad4c.png"></p><p>当MyISAM创建主键索引的时候，形成的主键索引树的结构图如下图所示：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_1f0bbe29.png" alt="image_1f0bbe29.png"></p><p>在主键索引中，数据也是非空且唯一，主键索引树中存储的是数据行的行号，当查询数据的时候使用主键索引查询需要查询到行号，然后通过行号获取数据。</p><p>非主键索引和主键索引一样叶子节点也是存储着行号，唯一的区别就是非主键索引不要求非空、唯一。</p><p>我们可以通对比图来对比一下「InnoDB(聚簇索引)」 和 「MyISAM(非聚簇索引)」 的索引数据布局，如下图所示：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_fb64a8df.png" alt="image_fb64a8df.png"></p><p>说到这里相信应该大家对于**「InnoDB(聚簇索引)」** 和 「MyISAM(非聚簇索引)」 有了非常清晰的认识和理解，下面是来说一说索引的优化，这个也是和我们日常开发最密切相关的。</p><h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><p>以个人多年（实际就两年）优化经验来看，Mysql索引优化无非就是以下三点：</p><ol><li> 最好的利用索引来进行查询</li><li> 避免全表扫描</li><li> 复杂查询，避免扫描无效的数据</li></ol><h3 id="优化前提"><a href="#优化前提" class="headerlink" title="优化前提"></a>优化前提</h3><p>Explain关键字是Mysql中sql优化的常用「关键字」，通常都会使用Explain来「查看sql的执行计划，而不用执行sql」，从而快速的找出sql的问题所在。</p><p>在讲解Explain之前首先创建需要的「用户表user、角色表role、以及用户角色关系表role_user」作为测试用的表：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 用户表</span>DROP TABLE IF EXISTS `user`<span class="token punctuation">;</span>CREATE TABLE `user` <span class="token punctuation">(</span>  `id` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>  `name` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token class-name">DEFAULT</span> NULL<span class="token punctuation">,</span>  `age` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>  NOT NULL <span class="token class-name">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>  `update_time` datetime <span class="token class-name">DEFAULT</span> NULL<span class="token punctuation">,</span>  <span class="token class-name">PRIMARY</span> KEY <span class="token punctuation">(</span>`id`<span class="token punctuation">)</span><span class="token punctuation">)</span> ENGINE<span class="token operator">=</span><span class="token class-name">InnoDB</span> <span class="token class-name">DEFAULT</span> CHARSET<span class="token operator">=</span>utf8<span class="token punctuation">;</span>INSERT INTO `user` <span class="token punctuation">(</span>`id`<span class="token punctuation">,</span> `name`<span class="token punctuation">,</span> `age`<span class="token punctuation">,</span>`update_time`<span class="token punctuation">)</span> VALUES <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'2020-12-22 15:27:18'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token string">'2020-06-21 15:27:18'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token string">'2020-07-20 15:27:18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DROP TABLE IF EXISTS `role`<span class="token punctuation">;</span>CREATE TABLE `role` <span class="token punctuation">(</span>  `id` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> NOT <span class="token class-name">NULL</span> AUTO_INCREMENT<span class="token punctuation">,</span>  `name` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token class-name">DEFAULT</span> NULL<span class="token punctuation">,</span>  <span class="token class-name">PRIMARY</span> KEY <span class="token punctuation">(</span>`id`<span class="token punctuation">)</span><span class="token punctuation">,</span>  KEY `index_name` <span class="token punctuation">(</span>`name`<span class="token punctuation">)</span><span class="token punctuation">)</span> ENGINE<span class="token operator">=</span><span class="token class-name">InnoDB</span> <span class="token class-name">DEFAULT</span> CHARSET<span class="token operator">=</span>utf8<span class="token punctuation">;</span>INSERT INTO `role` <span class="token punctuation">(</span>`id`<span class="token punctuation">,</span> `name`<span class="token punctuation">)</span> VALUES <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'产品经理'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'技术经理'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'项目总监'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DROP TABLE IF EXISTS `role_user`<span class="token punctuation">;</span>CREATE TABLE `role_user` <span class="token punctuation">(</span>  `id` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>  `role_id` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>  `user_id` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>  <span class="token class-name">PRIMARY</span> KEY <span class="token punctuation">(</span>`id`<span class="token punctuation">)</span><span class="token punctuation">,</span>  KEY `index_role_user_id` <span class="token punctuation">(</span>`role_id`<span class="token punctuation">,</span>`user_id`<span class="token punctuation">)</span><span class="token punctuation">)</span> ENGINE<span class="token operator">=</span><span class="token class-name">InnoDB</span> <span class="token class-name">DEFAULT</span> CHARSET<span class="token operator">=</span>utf8<span class="token punctuation">;</span>INSERT INTO `role_user` <span class="token punctuation">(</span>`id`<span class="token punctuation">,</span> `role_id`<span class="token punctuation">,</span> `user_id`<span class="token punctuation">)</span> VALUES <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们首先执行一条sql：explain select * from user where id =2;，执行后可以看到执行的结果如下：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_6c304aa6.png" alt="image_6c304aa6.png">可以看到这里有12个字段那个且都有对应的值，这就是explain的执行计划，能看懂这个执行计划，你离精通sql优化就不远了，下面就来详细的介绍这12个字段分别表示什么意思。</p><h4 id="id字段"><a href="#id字段" class="headerlink" title="id字段"></a>id字段</h4><p>id表示执行select查询语句的序号，它是sql执行的顺序的标识，sql按照id从大到小执行，id相同的为一组，从上到下执行。</p><p>什么意思呢？例如执行这条sql：explain select * from user where id in (select user_id from role_user);</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> table     <span class="token operator">|</span> partitions <span class="token operator">|</span> type  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> key                <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> rows <span class="token operator">|</span> filtered <span class="token operator">|</span> <span class="token class-name">Extra</span>                                                                             <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> SIMPLE      <span class="token operator">|</span> user      <span class="token operator">|</span> NULL       <span class="token operator">|</span> ALL   <span class="token operator">|</span> PRIMARY       <span class="token operator">|</span> NULL               <span class="token operator">|</span> NULL    <span class="token operator">|</span> NULL <span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> NULL                                                                              <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> SIMPLE      <span class="token operator">|</span> role_user <span class="token operator">|</span> NULL       <span class="token operator">|</span> index <span class="token operator">|</span> NULL          <span class="token operator">|</span> index_role_user_id <span class="token operator">|</span> <span class="token number">8</span>       <span class="token operator">|</span> NULL <span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span>    <span class="token number">33.33</span> <span class="token operator">|</span> <span class="token class-name">Using</span> where<span class="token punctuation">;</span> <span class="token class-name">Using</span> index<span class="token punctuation">;</span> <span class="token class-name">FirstMatch</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Using</span> join buffer <span class="token punctuation">(</span><span class="token class-name">Block</span> <span class="token class-name">Nested</span> <span class="token class-name">Loop</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示出的两者的id都相同，便表示sql的执行从上往下执行，第一条记录对应的是user表，然后第二条记录对应的是role_user表，这种是id相同的情况。</p><p>若是id不同，例如执行下面的sql：explain select (select 1 from user limit 1) from role;：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> table <span class="token operator">|</span> partitions <span class="token operator">|</span> type  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> key        <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> rows <span class="token operator">|</span> filtered <span class="token operator">|</span> <span class="token class-name">Extra</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> PRIMARY     <span class="token operator">|</span> role  <span class="token operator">|</span> NULL       <span class="token operator">|</span> index <span class="token operator">|</span> NULL          <span class="token operator">|</span> index_name <span class="token operator">|</span> <span class="token number">33</span>      <span class="token operator">|</span> NULL <span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token class-name">Using</span> index <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> SUBQUERY    <span class="token operator">|</span> user  <span class="token operator">|</span> NULL       <span class="token operator">|</span> index <span class="token operator">|</span> NULL          <span class="token operator">|</span> PRIMARY    <span class="token operator">|</span> <span class="token number">4</span>       <span class="token operator">|</span> NULL <span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token class-name">Using</span> index <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就会看到有两条记录，并且两条记录的id会不一样，id越大的就越先执行，可以看到id=2的执行的是user表，也就是子查询部分，最后执行最外层的部分。</p><p>「结论：」 这个就是id标识sql的执行顺序，一般在复杂查询中会有多条记录，简单查询只有一条记录，复杂查询中id相同的为一组，执行的顺序是从上往下，而id越大的越先执行；Mysql 8中会存在对子查询进行优化，所以有时候即使是复杂查询，也只有一条记录。</p><h4 id="select-type字段"><a href="#select-type字段" class="headerlink" title="select_type字段"></a>select_type字段</h4><p>select_type表示查询的类型，也就是对应的是简单查询还是复杂查询，若是复杂查询又包含：「简单的子查询、from子句的子查询、union查询」。下面就分别来看看select_type中的所有查询类型。</p><ul><li> simplesimple表示简单查询，不含有任何的复杂查询。<img src="/2022/11/14/jing-tong-mysql-suo-yin/image_354ee4ca.png" alt="image_354ee4ca.png"></li><li> PRIMARY复杂查询中「最外层的select语句的查询类型就是PRIMARY」，例如执行下面的sql：explain select * from role where id = (select id from role_user where role_id = (select id from user where id = 2));<img src="/2022/11/14/jing-tong-mysql-suo-yin/image_33774441.png" alt="image_33774441.png">最外层的select，也就是select * from role where id =？会被标记为PRIMARY类型。</li><li> SUBQUERY在「select或者where中包含的子查询」会被表示为SUBQUERY类型，例如上一句执行的sql中就有两次的子查询为SUBQUERY。<img src="/2022/11/14/jing-tong-mysql-suo-yin/image_506be7f7.png" alt="image_506be7f7.png"></li><li> DERIVED「DERIVED表示的是派生表或者衍生表的意思，在from包含的子查询中会被表示为DERIVED类型」，Mysql会递归执行这些子查询，并且把结果放在临时表中。执行sql：explain select * from (select name from user union select name from role) a where a.name = ‘张三’;<img src="/2022/11/14/jing-tong-mysql-suo-yin/image_5f5f8f2e.png" alt="image_5f5f8f2e.png">在Mysql 5.7以上的版本中对其做了优化，新增了derived_merge(派生合并)，可以加快查询效率。</li><li> UNION在出现「UNION查询语句中，第二个select的查询语句就会被表示为UNION」：<img src="/2022/11/14/jing-tong-mysql-suo-yin/image_41ed6d48.png" alt="image_41ed6d48.png"></li><li> UNION RESULT「UNION查询语句的结果被标记为UNION RESULT」，如上面执行的sql：explain select * from (select name from user union select name from role) a where a.name = ‘张三’;<img src="/2022/11/14/jing-tong-mysql-suo-yin/image_6b8b2a8d.png" alt="image_6b8b2a8d.png">第四行记录中从table字段中可以看出，第四行的记录来源于第二行和第三行&lt;union2,3&gt;，因此一个UNION查询语句的结果就会被标记为UNION RESULT</li><li> DEPENDENT UNION：也表示UNION查询语句中第二个或者后面的语句，但是取决于外面的查询。</li><li> DEPENDENT SUBQUERY：子查询中的第一个select语句，也是依赖于外部的查询。</li><li> UNCACHEABLE SUBQUERY：子查询的结果不能被缓存，必须重新评估外连接的第一行。</li></ul><h4 id="table字段"><a href="#table字段" class="headerlink" title="table字段"></a>table字段</h4><p>这个很容易看出「table字段表示的是查询的是哪个表」，一个是已经存在的表，比如上面的user、role都是我们自己创建的表，也可以表示衍生表。</p><p>比如：UNION RESULT的table字段表示为&lt;union2,3&gt;，也就是查询的是第二行和第三行的结果记录。</p><h4 id="type字段"><a href="#type字段" class="headerlink" title="type字段"></a>type字段</h4><p>「type字段表示的sql关联的类型或者说是访问的类型」。从这个字段中我们可以确定这条sql查找数据库表的时候，查找记录的大概范围是怎么样的，直接就能体现sql的效率问题。</p><p>type字段的类型也是有比较多，主要常见掌握的有以下几个：system、const 、eq_ref 、ref 、range 、index 、ALL。它的性能体现是从高到低，即system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL，下面就来详细的说一说这属性。</p><h5 id="system"><a href="#system" class="headerlink" title="system"></a>system</h5><p>system是const的特例，「表示表中只有一行记录」，这个几乎不会出现，也作为了解。</p><h5 id="const"><a href="#const" class="headerlink" title="const"></a>const</h5><p>const表示通过索引一次就查找到了数据，一般const出现在「唯一索引或者主键索引中使用等值查询」，因为表中只有一条数据匹配，所以查找的速度很快。例子：explain select * from user where id =2;</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_0c7be26a.png" alt="image_0c7be26a.png"></p><h5 id="eq-ref"><a href="#eq-ref" class="headerlink" title="eq_ref"></a>eq_ref</h5><p>eq_ref表示使用唯一索引或者主键索引扫描作为表链接匹配条件，对于每一个索引键，表中只有一条记录与之匹配。例如：explain select * from user left join role_user on user.id = role_user.user_id left join role on role_user.role_id=role.id;</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_19f2ed1c.png" alt="image_19f2ed1c.png"></p><h5 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h5><p>ref性能比eq_ref差，也表示表的链接匹配条件，也就是使用哪些表字段作为查询索引列上的值，ref与eq_ref的区别就是eq_ref使用的是唯一索引或者主键索引。</p><p>ref扫描后的结果可能会找到多条符合条件的行数据，本质上是一种索引访问，返回匹配的行。例如：explain select * from user where name = ‘张三’;</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_471404dc.png" alt="image_471404dc.png"></p><h5 id="range"><a href="#range" class="headerlink" title="range"></a>range</h5><p>「range使用索引来检索给定范围的行数据，一般是在where后面使用between、&lt;&gt;、in等查询语句就会出现range」：explain select * from user where id &gt; 2;</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_00bb0428.png" alt="image_00bb0428.png"></p><h5 id="index"><a href="#index" class="headerlink" title="index"></a>index</h5><p>index表示会遍历索引树，index回避ALL速度快一些，但是出现index说明需要检查自己的索引是否使用正确：explain select id from user;</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_a669396a.png" alt="image_a669396a.png"></p><h5 id="ALL"><a href="#ALL" class="headerlink" title="ALL"></a>ALL</h5><p>「ALL与index的区别就是ALL是从硬盘中读取，而index是从索引文件中读取」，ALL全表扫描意味着Mysql会从表的头到尾进行扫描，这时候表示通常需要增加索引来进行优化了，或者说是查询中并没有使用索引作为条件进行查询：explain select * from user;</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_8d791fe4.png" alt="image_8d791fe4.png"></p><h4 id="possible-keys字段"><a href="#possible-keys字段" class="headerlink" title="possible_keys字段"></a>possible_keys字段</h4><p>possible_keys表示这一列查询语句可能使用到的索引，仅仅只是可能，列出来的索引并不一定真正的使用到。</p><p>当没有使用索引为NULL时，说明需要增加索引来优化查询了，若是表的数据比较少的话，数据库觉得全表扫描更快，也可能为NULL。</p><h4 id="key字段"><a href="#key字段" class="headerlink" title="key字段"></a>key字段</h4><p>key字段与possible_keys的区别就是，表示的真正使用到的索引，即possible_keys中包含key的值。</p><p>若是想Mysql使用或者忽视possible_keys中的索引，可以使用FORCE INDEX、USE INDEX或者IGNORE INDEX。</p><h4 id="key-len字段"><a href="#key-len字段" class="headerlink" title="key_len字段"></a>key_len字段</h4><p>表示sql查询语句中索引使用到的字节数，这个字节数并不是实际的长度，而是通过计算查询中使用到的索引中的长度得出来的，显示的是索引字段最大的可能长度。</p><p>一般来说在不损失精度的前提下，key_len是越小越好，比如上面的测试表的id为int类型，int类型由4个字节组成：explain select * from user where id =2;</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_66710eac.png" alt="image_66710eac.png"></p><p>key_len对于不同的类型有自己的计算规则，具体的计算规则如下所示：</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_248c75e6.png" alt="image_248c75e6.png">若是索引为字符串类型的时候，实际存储的字符串非常长，已经超出了字符串类型的存储最大长度（768字节），mysql，就会使用类似左前缀索引来处理。</p><h4 id="ref字段"><a href="#ref字段" class="headerlink" title="ref字段"></a>ref字段</h4><p>ref表示列与索引的比较，表连接的匹配条件，表示哪些列或者常量被用于查询索引列上的值。</p><h4 id="rows字段"><a href="#rows字段" class="headerlink" title="rows字段"></a>rows字段</h4><p>rows表示估算的要扫描的行数，一般Mysql会根据统计表信息和索引的选用情况，估算出 查找记录所要扫描的行数，注意这个并不是实际结果集的行数。</p><h4 id="partitions、filtered字段"><a href="#partitions、filtered字段" class="headerlink" title="partitions、filtered字段"></a>partitions、filtered字段</h4><p>partitions表示所匹配的分区；filtered表示的是查询表行所占表的百分比。</p><h4 id="Extra字段"><a href="#Extra字段" class="headerlink" title="Extra字段"></a>Extra字段</h4><p>该字段显示的是sql查询的额外信息，主要有以下几种情况：</p><h5 id="Using-index"><a href="#Using-index" class="headerlink" title="Using index"></a>Using index</h5><p>表示查询的列被索引覆盖，这个是查询性能比较高的体现，即所要查询的信息搜在索引里面可以得到，不用回表，索引被正确的使用：explain select id from user where id =2;</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_af5b5697.png" alt="image_af5b5697.png"></p><p>假如同时出现了using where，表示索引用于执行索引键值的查找；若是没有出现using where，则表示索引用于读取数据，而非执行查询的动作。</p><h5 id="Using-where"><a href="#Using-where" class="headerlink" title="Using where"></a>Using where</h5><p>该属性与Using index相反，查询的列并没有被索引覆盖，where条件后面使用的是非索引的前导列，它仅仅是使用了where条件而已：explain select user.* from user,role,role_user where user.id = role_user.user_id and role.id=role_user.role_id;</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_4925de1e.png" alt="image_4925de1e.png"></p><h5 id="Using-temporary"><a href="#Using-temporary" class="headerlink" title="Using temporary"></a>Using temporary</h5><p>「Using temporary表示使用了临时表存储中间的结果，一般在对结果排序的时候会使用临时表」，例如：排序order by 和分组查询group by。例子：explain select * from (select name from user union select name from role) a where a.name = ‘张三’;</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_ccf98553.png" alt="image_ccf98553.png"></p><h5 id="Using-filesort"><a href="#Using-filesort" class="headerlink" title="Using filesort"></a>Using filesort</h5><p>Using filesort表示文件排序，说明Mysql对数据使用了外部的索引进行排序，并没有使用表中的索引进行排序：explain select * from user order by name;</p><h5 id="Using-join-buffer"><a href="#Using-join-buffer" class="headerlink" title="Using join buffer"></a>Using join buffer</h5><p>Using join buffer表示使用连接缓存：explain select user.* from user,role,role_user where user.id = role_user.user_id and role.id=role_user.role_id;</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_f552bbb6.png" alt="image_f552bbb6.png"></p><p>它强调在获取连接条件时，并没有使用索引，而是使用连接缓冲区来存储中间结果，若是出现该值，一般说明需要添加索引来进行优化了。</p><h5 id="Impossible-where"><a href="#Impossible-where" class="headerlink" title="Impossible where"></a>Impossible where</h5><p>Impossible where会出现在where后的条件一直为false的情况下，这种可以忽视，比较少出现：explain select * from user where name = ‘hah’ and name = ‘sfsd’;</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_3c03677f.png" alt="image_3c03677f.png"></p><h5 id="Select-tables-optimized-away"><a href="#Select-tables-optimized-away" class="headerlink" title="Select tables optimized away"></a>Select tables optimized away</h5><p>表示select语句没有遍历表或者索引就返回数据了，比如：explain select min(id) from user;</p><p><img src="/2022/11/14/jing-tong-mysql-suo-yin/image_417b1a31.png" alt="image_417b1a31.png"></p><p>在Extra字段中还有其它的属性，但是几乎都没见过的，不出现，所以哪些就讲解，有兴趣的可以自己去了解，这里只列出这些常见的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>下面我来总结一下要正确的使用索引的一些规则。要正确的创建索引，用索引正确的查询，不要使索引失效，因此索引的设计和优化的原则应该遵循下面的几个原则：</p><ol><li> 索引列不要在表达式中出现，这样会导致索引失效。如：「SELECT …… WHERE id+1=5」;</li><li> 索引列不要作为函数的参数使用。</li><li> 索引列尽量不要使用like关键字。如：「SELECT …… WHERE name like ‘%d%’」。可以使用Mysql内置的函数INSTR(str,substr) 来匹配，查询字符串出现的下表的位置；也可以是使用FullText全文索引，用match against 检索;假如数据量非常大的话建议使用es或者solr来替代。</li><li> 数字型的索引列不要当作字符串类型进行条件查询。如：「SELECT …… WHERE id = ‘35’」;</li><li> 尽量不要在条件not in、&lt;&gt;、!= 、or 中使用索引，其中in关键字也要慎重使用，在控制in条件的数量在1000以内，如果in后面的条件太多，会导致全表扫描，这个在阿里巴巴的开发手册也有说明；建议使用between来替代in或者使用子查询exists代替；or关键字建议使用union来替代优化。</li><li> 建表规范不建议在表中默认值是null的情况，一般建表都会一个默认值，比如0或者空字符串，防止出现一些空指针的现象。</li><li> 在索引列的字段中不要出现NULL值，NULL值会使索引失效，可以用特殊的字符比如空字符串’ ‘或者0来代替NULL值。</li><li> 联合索引的查询应该遵循最左前缀原则。</li><li> 一般对于区别性比较大的字段建立索引，在联合索引中区别性比较大（识别度比较高）放在最前面，提高索引的命中率，在mybatis的xml文件中多条件where查询时，命中索引的条件放在前面，能使用联合索引就不要使用单列索引。</li><li> where、order by 、 group by后面的条件尽量使用索引进行优化 ，可以使用exlpain对查询进行优化。</li><li> 复杂查询中建议使用inner on来做关联，因为在mysql优化器中inner on会有限使用小表关联大表，on后面的条件要建立索引，左关联和右关联应该遵循小表带大表的规则。</li><li> 微服务分布式系统下的库表设计原则不要进行跨库的join操作，一个库的数据量若是比较大，应该减少或者尽量不要join操作，要进行join操作应该避免join的无效的数据，保持接口的单一原则，减少join操作的方法可以字段冗余，对于一些很久都不会改变的字段，可以考虑冗余，从而减少join操作，阿里巴巴的手册中也有提到，不允许超过三个join，宁愿分多次查询。</li><li> 业务优化考虑原则：读多写少场景或者读少写多场景，一般互联网的都是读多写少场景，对于一些需要进行统计的字段，比如一些首页报表、数据面板，需要大量统计的接口，尽量减少Mysql来进行统计，避免慢sql，优化的方法，可以牺牲部分写的性能来提升读的新能，提前在写入的时候通过异步的方式进行统计（比如统计当前月的积分，一年的绩效等数据），有些数据量涉及的数据本身比较大，如果用Mysql的进行查询的时候统计，那必然导致慢sql。</li><li> 查询优化对于多次同步调用服务的接口可以通过异步的的方式进行调用，减少接口的响应时间。</li><li> 索引的大小要适度，不易过大，避免索引的冗余。</li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java面试 </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql中join的那些事</title>
      <link href="/2022/11/14/mysql-zhong-join-de-na-xie-shi/"/>
      <url>/2022/11/14/mysql-zhong-join-de-na-xie-shi/</url>
      
        <content type="html"><![CDATA[<p>Mysql中的join原理。</p><p>join用法基本工作过的都会用，不管是left join、right join、inner join语法都是比较简单的。</p><p>但是，join的原理确实博大精深，对于一些传统it企业，几乎是一句sql走天下，join了五六个表，当数据量上来的时候，就会变得非常慢，索引对于掌握join的优化还是非常有必要的。</p><p>阿里的开发手册中规定join不能查过三个，有些互联网是明确规定不能使用join的的明文规定，那么在实际的场景中，我们真的不能使用join吗？我们就来详细的聊一聊。</p><p>Mysql的join主要涉及到三种算法，分别是Simple Nested-Loop Join、Block Nested-Loop Join、Index Nested-Loop Join，下面我们就来深入的了解这三种算法的原理、区别、效率。</p><p>首先，为了测试先准备两个表作为测试表，并且使用存储过程初始化一些测试数据，初始化的表结构sql如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">CREATE TABLE `testa` <span class="token punctuation">(</span>  `id` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL AUTO_INCREMENT COMMENT <span class="token string">'活动主键'</span><span class="token punctuation">,</span>  `col1` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">'0'</span> COMMENT <span class="token string">'测试字段1'</span><span class="token punctuation">,</span>  `col2` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">'0'</span> COMMENT <span class="token string">'测试字段2'</span><span class="token punctuation">,</span>  <span class="token class-name">PRIMARY</span> KEY <span class="token punctuation">(</span>`id`<span class="token punctuation">)</span><span class="token punctuation">,</span>  KEY `col1` <span class="token punctuation">(</span>`idx_col1`<span class="token punctuation">)</span><span class="token punctuation">)</span>ENGINE<span class="token operator">=</span><span class="token class-name">InnoDB</span> AUTO_INCREMENT<span class="token operator">=</span><span class="token number">782</span> <span class="token class-name">DEFAULT</span> CHARSET<span class="token operator">=</span>utf8mb4 COMMENT<span class="token operator">=</span><span class="token string">'测试表1'</span><span class="token punctuation">;</span>CREATE TABLE `testb` <span class="token punctuation">(</span>  `id` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL AUTO_INCREMENT COMMENT <span class="token string">'活动主键'</span><span class="token punctuation">,</span>  `col1` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">'0'</span> COMMENT <span class="token string">'测试字段1'</span><span class="token punctuation">,</span>  `col2` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">'0'</span> COMMENT <span class="token string">'测试字段2'</span><span class="token punctuation">,</span>  <span class="token class-name">PRIMARY</span> KEY <span class="token punctuation">(</span>`id`<span class="token punctuation">)</span><span class="token punctuation">,</span>  KEY `col1` <span class="token punctuation">(</span>`idx_col1`<span class="token punctuation">)</span><span class="token punctuation">)</span> ENGINE<span class="token operator">=</span><span class="token class-name">InnoDB</span> AUTO_INCREMENT<span class="token operator">=</span><span class="token number">782</span> <span class="token class-name">DEFAULT</span> CHARSET<span class="token operator">=</span>utf8mb4 COMMENT<span class="token operator">=</span><span class="token string">'测试表2'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化数据：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CREATE</span> DEFINER <span class="token operator">=</span> `root` @`localhost` PROCEDURE `init_data` <span class="token punctuation">(</span><span class="token punctuation">)</span> BEGIN DECLARE i INT<span class="token punctuation">;</span>  <span class="token class-name">SET</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> WHILE <span class="token punctuation">(</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token punctuation">)</span> DO   INSERT INTO testa VALUES <span class="token punctuation">(</span> i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">SET</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token class-name">END</span> WHILE<span class="token punctuation">;</span>  <span class="token class-name">SET</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> WHILE <span class="token punctuation">(</span> i <span class="token operator">&lt;=</span> <span class="token number">2000</span><span class="token punctuation">)</span> DO   INSERT INTO test2 VALUES <span class="token punctuation">(</span> i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">SET</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token class-name">END</span> WHILE<span class="token punctuation">;</span>END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分别初始化testa表为100条数据，testb为2000条数据</p><h2 id="Simple-Nested-Loop-Join"><a href="#Simple-Nested-Loop-Join" class="headerlink" title="Simple Nested-Loop Join"></a>Simple Nested-Loop Join</h2><p>首先，我们执行如下sql：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">select <span class="token operator">*</span> from testa ta left join testb tb on <span class="token punctuation">(</span>ta<span class="token punctuation">.</span>col1<span class="token operator">=</span>tb<span class="token punctuation">.</span>col2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Simple Nested-Loop Join是最简单也是最粗暴的join方法，上面的sql在testb 的col2字段是没有加索引的，所以当testa为驱动表，testb为被驱动表时，就会拿着testa的每一行，然后去testb的全表扫描，执行流程如下：</p><ol><li> 从表testa中取出一行数据，记为ta。</li><li> 从ta中取出col1字段去testb中全表扫描查询。</li><li> 找到testb中满足情况的数据与ta组成结果集返回。</li><li> 重复执行1-3步骤，直到把testa表的所有数据都取完。</li></ol><p>因此扫描的时间复杂度就是100*2000=20W的行数，所以在被驱动表关联字段没有添加索引的时候效率就非常的低下。</p><p>假如testb是百万数据以上，那么扫描的时间复杂度就更恐怖了，但是在Mysql中没有使用这个算法，而是使用了另一种算法Block Nested-Loop Join，目的就是为了优化驱动表没有索引时的查询。</p><h2 id="Block-Nested-Loop-Join"><a href="#Block-Nested-Loop-Join" class="headerlink" title="Block Nested-Loop Join"></a>Block Nested-Loop Join</h2><p>还是上面的sql，不过通过加explain关键字来查看这条sql的执行计划：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">explain select <span class="token operator">*</span> from testa ta left join testb tb on <span class="token punctuation">(</span>ta<span class="token punctuation">.</span>col1<span class="token operator">=</span>tb<span class="token punctuation">.</span>col2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/11/14/mysql-zhong-join-de-na-xie-shi/image_58fd8737.png" alt="image_58fd8737.png"></p><p>可以看到testb依旧是全表扫描，并且在Extra字段中可以看到testb的Using join buffer（hash join）的字样，在rows中可以看到总扫描的行数是驱动表行数+被驱动表行数，那么这个算法与Simple Nested-Loop Join有什么区别呢？</p><p>Block Nested-Loop Join算法中引入了join buffer区域，而join buffer是一块内存区域，它的大小由join_buffer_size参数大小控制，默认大小是256k：</p><p><img src="/2022/11/14/mysql-zhong-join-de-na-xie-shi/image_9f6ce7ed.png" alt="image_9f6ce7ed.png"></p><p>在执行上面的sql的时候，它会把testa表的数据全部加载到join buffer区域，因为join buffer是内存操作，因此相对于比上面的simple算法要高效，具体的执行流程如下：</p><ol><li> 首先把testa表的所有数据都加在到join buffer里面，这里的所有数据是select后面的testa的字段，因为这里是select *，所以就是加载所有的testa字段。</li><li> 然后遍历的取testb表中的每一行数据，并且与join buffer里面的数据济宁对比，符合条件的，就作为结果集返回。</li></ol><p>具体的流程图如下所示：</p><p><img src="/2022/11/14/mysql-zhong-join-de-na-xie-shi/image_65df1467.png" alt="image_65df1467.png"></p><p>所以，从上面的执行的步骤来看（假设驱动表的行数为N，被驱动表的行数据为M），Block Nested-Loop Join的扫描的行数还是驱动表+被驱动表行数（N+M），在内存中总的比较次数还是驱动表*被驱动表行数（N*M）</p><p>上面我们提到join buffer是一块内存区域，并且有自己的大小，要是join buffer的大小不足够容纳驱动表的数量级怎么办呢？</p><p>答案就是分段，你要是join buffer没办法容纳驱动表的所有数据，那么就不把所有的数据加载到join buffer里面，先加载一部分，后面再加载另一部分，比如：先加载testa中的80条数据，与testb比较完数据后，清空再加载testa后20条数据，再与testb进行比较。具体执行流程如下：</p><ol><li> 先加载testa中的80条数据到join buffer</li><li> 然后一次遍历testb的所有数据，与join buffer里面的数据进行比较，符合条件的组成结果集。</li><li> 清空join buffer，再加载testa后面的20条数据。</li><li> 然后一次遍历testb的所有数据，与join buffer里面的数据进行比较，符合条件的组成结果集并返回。</li></ol><p>执行流程图如下所示：</p><p><img src="/2022/11/14/mysql-zhong-join-de-na-xie-shi/image_ec6b3fe7.png" alt="image_ec6b3fe7.png"></p><p>从上面的结果来看相对于比内存足够的join buffer来说，分段的join buffer多了一遍全表全表遍历testb，并且分的段数越多，多扫描驱动表的次数就越多。，性能就越差，所以在某一些场景下，适当的增大join buffer的值，是能够提高join的效率。</p><p>假如驱动表的行数是N，分段参数为K，被驱动表的行数是M，那么总的扫描行数还是N+K*M，而内存比较的次数还是N*M，没有变。</p><p>其中K段数与N的数据量有关，若是N的数据量越大，那么可能K被分成段数就越多，这样多次重复扫描的被驱动表的次数就越多。</p><p>所以在join buffer不够的情况小，驱动表是越小越好，能够减少K值，减少重复扫描被驱动表的次数。这也就是为什么提倡小表要作为驱动表的原因。</p><p>那么这里提到小表的概念，是不是就是数据量少的就是认为是小表呢？其实不然，小表的真正的还是是实际参与join的数据量，比如以下的两条sql：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">select <span class="token operator">*</span> from testa ta left join testb tb on <span class="token punctuation">(</span>ta<span class="token punctuation">.</span>col1<span class="token operator">=</span>tb<span class="token punctuation">.</span>col2<span class="token punctuation">)</span> where tb<span class="token punctuation">.</span>id<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">;</span>select <span class="token operator">*</span> from testb tb left join testa ta on <span class="token punctuation">(</span>ta<span class="token punctuation">.</span>col1<span class="token operator">=</span>tb<span class="token punctuation">.</span>col2<span class="token punctuation">)</span> where tb<span class="token punctuation">.</span>id<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在第二条sql中，虽然testb驱动表数据量比较大，但是在where条件中实际参与join的行数也就是id小于等于20的数据，完全小于testa的数据量，所以这里选择以testb作为驱动表是更加的合适。</p><p>在实际的开发中Block Nested-Loop Join也是严禁被禁止出现的，严格要求关联条件建索引，所以性能最好的就是Index Nested-Loop Join算法。</p><h2 id="Index-Nested-Loop-Join"><a href="#Index-Nested-Loop-Join" class="headerlink" title="Index Nested-Loop Join"></a>Index Nested-Loop Join</h2><p>当我们执行如下sql时：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">select <span class="token operator">*</span> from testa ta left join testb tb on <span class="token punctuation">(</span>ta<span class="token punctuation">.</span>col1<span class="token operator">=</span>tb<span class="token punctuation">.</span>col1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/11/14/mysql-zhong-join-de-na-xie-shi/image_942c82dc.png" alt="image_942c82dc.png"></p><p>它的执行流程如下：</p><ol><li> 首先取testa表的一行数据。</li><li> 使用上面的行数据的col1字段去testb表进行查询。</li><li> 在testb找到符合条件的数据行，并与testa的数据行组合作为结果集。</li><li> 重复执行1-3步骤，直到取完testa表的所有数据。</li></ol><p>因为testb的col1字段是建立了索引，所以，当使用testa表的字段col1去testb查找的时候，testb走的是col1索引的b+树的搜索，时间复杂度近似log2M，并且因为是select*，也就是要查找testb的所有字段，所以这里也涉及到回表查询，因此就变成了2*log2M.</p><p>在这个过程中，testa表的扫描行数是全部，所以需要扫描100行，然后testa的每一行都与testb也是一一对应的，所以col1索引查询扫描的行数也是100行，所以总的扫描行数就是200行。</p><p>我们假设驱动表的数据行位N，被驱动表的数据行为M，那么近似的复杂度为：N+N*2*log M，因为驱动表的扫描行数就是N，然后被驱动表因为每一次都对应驱动表的一次，并且一次的时间复杂度就是近似2*log M，所以被驱动表就是N*2*log M。</p><p>明显N的值对于N+N*2*log M的结果值影响更大，所以N越小越好，所以选择小表作为驱动表是最优选择。</p><p>在一些情况下的优化，假如join的驱动表所需要的字段很少（两个），可以建立联合索引来优化join查询，并且如果业务允许的话，可以通过冗余字段，减少join的个数提高查询的效率。 </p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> join </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目瞪口呆的Java代码技巧</title>
      <link href="/2022/11/09/mu-deng-kou-ai-de-java-dai-ma-ji-qiao/"/>
      <url>/2022/11/09/mu-deng-kou-ai-de-java-dai-ma-ji-qiao/</url>
      
        <content type="html"><![CDATA[<p>开发工具</p><p>不知道有多少“老”程序员还在使用 Eclipse，这些程序员们要不就是因循守旧，要不就是根本就不知道其他好的开发工具的存在，Eclipse 吃内存卡顿的现象以及各种偶然莫名异常的出现，都告知我们是时候寻找新的开发工具了。</p><h4 id="更换-IDE"><a href="#更换-IDE" class="headerlink" title="| 更换 IDE"></a>| 更换 IDE</h4><p>根本就不想多解释要换什么样的 IDE，如果你想成为一个优秀的 Java 程序员，请更换 IntelliJ IDEA。使用 IDEA 的好处，请搜索谷歌。</p><h4 id="别告诉我快捷键不好用"><a href="#别告诉我快捷键不好用" class="headerlink" title="| 别告诉我快捷键不好用"></a>| 别告诉我快捷键不好用</h4><p>更换 IDE 不在我本文的重点内容中，所以不想用太多的篇幅去写为什么更换IDE。在这里，我只能告诉你，更换 IDE 只为了更好、更快的写好 Java 代码。原因略。</p><p>别告诉我快捷键不好用，请尝试新事物。</p><h4 id="bean"><a href="#bean" class="headerlink" title="| bean"></a>| bean</h4><p>bean 使我们使用最多的模型之一，我将以大篇幅去讲解 bean，希望读者好好体会。</p><h4 id="domain-包名"><a href="#domain-包名" class="headerlink" title="| domain 包名"></a>| domain 包名</h4><p>根据很多 Java 程序员的“经验”来看，一个数据库表则对应着一个 domain 对象，所以很多程序员在写代码时，包名则使用：com.xxx.domain ，这样写好像已经成为了行业的一种约束，数据库映射对象就应该是 domain。</p><p>但是你错了，domain 是一个领域对象，往往我们再做传统 Java 软件 Web 开发中，这些 domain 都是贫血模型，是没有行为的，或是没有足够的领域模型的行为的。</p><p>所以，以这个理论来讲，这些 domain 都应该是一个普通的 entity 对象，并非领域对象，所以请把包名改为：com.xxx.entity。</p><p>如果你还不理解我说的话，请看一下 Vaughn Vernon 出的一本叫做《IMPLEMENTING DOMAIN-DRIVEN DESIGN》（实现领域驱动设计）这本书，书中讲解了贫血模型与领域模型的区别，相信你会受益匪浅。</p><h4 id="DTO"><a href="#DTO" class="headerlink" title="| DTO"></a>| DTO</h4><p>数据传输我们应该使用 DTO 对象作为传输对象，这是我们所约定的，因为很长时间我一直都在做移动端 API 设计的工作，有很多人告诉我，他们认为只有给手机端传输数据的时候（input or output），这些对象成为 DTO 对象。</p><p>请注意！这种理解是错误的，只要是用于网络传输的对象，我们都认为他们可以当做是 DTO 对象，比如电商平台中，用户进行下单，下单后的数据，订单会发到 OMS 或者 ERP 系统，这些对接的返回值以及入参也叫 DTO 对象。</p><p>我们约定某对象如果是 DTO 对象，就将名称改为 XXDTO，比如订单下发 OMS：OMSOrderInputDTO。</p><h4 id="DTO-转化"><a href="#DTO-转化" class="headerlink" title="| DTO 转化"></a>| DTO 转化</h4><p>正如我们所知，DTO 为系统与外界交互的模型对象，那么肯定会有一个步骤是将 DTO 对象转化为 BO 对象或者是普通的 entity 对象，让 service 层去处理。</p><h4 id="场景"><a href="#场景" class="headerlink" title="| 场景"></a>| 场景</h4><p>比如添加会员操作，由于用于演示，我只考虑用户的一些简单数据，当后台管理员点击添加用户时，只需要传过来用户的姓名和年龄就可以了，后端接受到数据后，将添加创建时间和更新时间和默认密码三个字段，然后保存数据库。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/api/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserApi</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">UserInputDTO</span> userInputDTO<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>userInputDTO<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>userInputDTO<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们只关注一下上述代码中的转化代码，其他内容请忽略：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>userInputDTO<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>userInputDTO<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="请使用工具"><a href="#请使用工具" class="headerlink" title="| 请使用工具"></a>| 请使用工具</h4><p>上边的代码，从逻辑上讲，是没有问题的，只是这种写法让我很厌烦，例子中只有两个字段，如果有 20 个字段，我们要如何做呢？一个一个进行 set 数据吗？</p><p>当然，如果你这么做了，肯定不会有什么问题，但是，这肯定不是一个最优的做法。网上有很多工具，支持浅拷贝或深拷贝的 Utils。</p><p>举个例子，我们可以使用 org.springframework.beans.BeanUtils#copyProperties 对代码进行重构和优化：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">UserInputDTO</span> userInputDTO<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>userInputDTO<span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BeanUtils.copyProperties 是一个浅拷贝方法，复制属性时，我们只需要把 DTO 对象和要转化的对象两个的属性值设置为一样的名称，并且保证一样的类型就可以了。</p><p>如果你在做 DTO 转化的时候一直使用 set 进行属性赋值，那么请尝试这种方式简化代码，让代码更加清晰！</p><h4 id="转化的语义"><a href="#转化的语义" class="headerlink" title="| 转化的语义"></a>| 转化的语义</h4><p>上边的转化过程，读者看后肯定觉得优雅很多，但是我们再写 Java 代码时，更多的需要考虑语义的操作，再看上边的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>userInputDTO<span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>虽然这段代码很好的简化和优化了代码，但是他的语义是有问题的，我们需要提现一个转化过程才好，所以代码改成如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span> <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">UserInputDTO</span> userInputDTO<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token function">convertFor</span><span class="token punctuation">(</span>userInputDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">private</span> <span class="token class-name">User</span> <span class="token function">convertFor</span><span class="token punctuation">(</span><span class="token class-name">UserInputDTO</span> userInputDTO<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>userInputDTO<span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> user<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个更好的语义写法，虽然他麻烦了些，但是可读性大大增加了，在写代码时，我们应该尽量把语义层次差不多的放到一个方法中，比如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token function">convertFor</span><span class="token punctuation">(</span>userInputDTO<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两段代码都没有暴露实现，都是在讲如何在同一个方法中，做一组相同层次的语义操作，而不是暴露具体的实现。</p><p>如上所述，是一种重构方式，读者可以参考 Martin Fowler 的《Refactoring Imporving the Design of Existing Code》（重构改善既有代码的设计）这本书中的 Extract Method 重构方式。</p><h4 id="抽象接口定义"><a href="#抽象接口定义" class="headerlink" title="| 抽象接口定义"></a>| 抽象接口定义</h4><p>当实际工作中，完成了几个 API 的 DTO 转化时，我们会发现，这样的操作有很多很多，那么应该定义好一个接口，让所有这样的操作都有规则的进行。</p><p>如果接口被定义以后，那么 convertFor 这个方法的语义将产生变化，它将是一个实现类。</p><p>看一下抽象后的接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DTOConvert</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">T</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">S</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>虽然这个接口很简单，但是这里告诉我们一个事情，要去使用泛型，如果你是一个优秀的 Java 程序员，请为你想做的抽象接口，做好泛型吧。</p><p>我们再来看接口实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInputDTOConvert</span> <span class="token keyword">implements</span> <span class="token class-name">DTOConvert</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">UserInputDTO</span> userInputDTO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>userInputDTO<span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们这样重构后，我们发现现在的代码是如此的简洁，并且那么的规范：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/api/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserApi</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">UserInputDTO</span> userInputDTO<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInputDTOConvert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>userInputDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="review-code"><a href="#review-code" class="headerlink" title="| review code"></a>| review code</h4><p>如果你是一个优秀的 Java 程序员，我相信你应该和我一样，已经数次重复 review 过自己的代码很多次了。</p><p>我们再看这个保存用户的例子，你将发现，API 中返回值是有些问题的，问题就在于不应该直接返回 User 实体，因为如果这样的话，就暴露了太多实体相关的信息，这样的返回值是不安全的。</p><p>所以我们更应该返回一个 DTO 对象，我们可称它为 UserOutputDTO：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token keyword">public</span> <span class="token class-name">UserOutputDTO</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">UserInputDTO</span> userInputDTO<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInputDTOConvert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>userInputDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> saveUserResult <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserOutputDTO</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserOutDTOConvert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertToUser</span><span class="token punctuation">(</span>saveUserResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样你的 API 才更健全。</p><p>不知道在看完这段代码之后，读者有是否发现还有其他问题的存在，作为一个优秀的 Java 程序员，请看一下这段我们刚刚抽象完的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInputDTOConvert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>userInputDTO<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你会发现，new 这样一个 DTO 转化对象是没有必要的，而且每一个转化对象都是由在遇到 DTO 转化的时候才会出现，那我们应该考虑一下，是否可以将这个类和 DTO 进行聚合呢？</p><p>看一下我的聚合结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInputDTO</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">convertToUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">UserInputDTOConvert</span> userInputDTOConvert <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInputDTOConvert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> convert <span class="token operator">=</span> userInputDTOConvert<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> convert<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UserInputDTOConvert</span> <span class="token keyword">implements</span> <span class="token class-name">DTOConvert</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInputDTO</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">UserInputDTO</span> userInputDTO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>userInputDTO<span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> user<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后 API 中的转化则由：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInputDTOConvert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>userInputDTO<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> saveUserResult <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>变成了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user <span class="token operator">=</span> userInputDTO<span class="token punctuation">.</span><span class="token function">convertToUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> saveUserResult <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们再 DTO 对象中添加了转化的行为，我相信这样的操作可以让代码的可读性变得更强，并且是符合语义的。</p><h4 id="再查工具类"><a href="#再查工具类" class="headerlink" title="| 再查工具类"></a>| 再查工具类</h4><p>再来看 DTO 内部转化的代码，它实现了我们自己定义的 DTOConvert 接口，但是这样真的就没有问题，不需要再思考了吗？</p><p>我觉得并不是，对于 Convert 这种转化语义来讲，很多工具类中都有这样的定义，这中 Convert 并不是业务级别上的接口定义，它只是用于普通 bean 之间转化属性值的普通意义上的接口定义，所以我们应该更多的去读其他含有 Convert 转化语义的代码。</p><p>我仔细阅读了一下 GUAVA 的源码，发现了 com.google.common.base.Convert 这样的定义：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">B</span> <span class="token function">doForward</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">A</span> <span class="token function">doBackward</span><span class="token punctuation">(</span><span class="token class-name">B</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//其他略</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从源码可以了解到，GUAVA 中的 Convert 可以完成正向转化和逆向转化，继续修改我们 DTO 中转化的这段代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UserInputDTOConvert</span> <span class="token keyword">implements</span> <span class="token class-name">DTOConvert</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInputDTO</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">UserInputDTO</span> userInputDTO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>userInputDTO<span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> user<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UserInputDTOConvert</span> <span class="token keyword">extends</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInputDTO</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">protected</span> <span class="token class-name">User</span> <span class="token function">doForward</span><span class="token punctuation">(</span><span class="token class-name">UserInputDTO</span> userInputDTO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>userInputDTO<span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> user<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">protected</span> <span class="token class-name">UserInputDTO</span> <span class="token function">doBackward</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token class-name">UserInputDTO</span> userInputDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInputDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>userInputDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> userInputDTO<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看了这部分代码以后，你可能会问，那逆向转化会有什么用呢？其实我们有很多小的业务需求中，入参和出参是一样的，那么我们变可以轻松的进行转化，我将上边所提到的 UserInputDTO 和 UserOutputDTO 都转成 UserDTO 展示给大家。</p><p>DTO：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDTO</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">convertToUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">UserDTOConvert</span> userDTOConvert <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDTOConvert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">User</span> convert <span class="token operator">=</span> userDTOConvert<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> convert<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">UserDTO</span> <span class="token function">convertFor</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">UserDTOConvert</span> userDTOConvert <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDTOConvert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">UserDTO</span> convert <span class="token operator">=</span> userDTOConvert<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> convert<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UserDTOConvert</span> <span class="token keyword">extends</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token class-name">User</span> <span class="token function">doForward</span><span class="token punctuation">(</span><span class="token class-name">UserDTO</span> userDTO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>userDTO<span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> user<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token class-name">UserDTO</span> <span class="token function">doBackward</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">UserDTO</span> userDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>userDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> userDTO<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>API：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span> <span class="token keyword">public</span> <span class="token class-name">UserDTO</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">UserDTO</span> userDTO<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token class-name">User</span> user <span class="token operator">=</span>  userDTO<span class="token punctuation">.</span><span class="token function">convertToUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">User</span> saveResultUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">UserDTO</span> result <span class="token operator">=</span> userDTO<span class="token punctuation">.</span><span class="token function">convertFor</span><span class="token punctuation">(</span>saveResultUser<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，上述只是表明了转化方向的正向或逆向，很多业务需求的出参和入参的 DTO 对象是不同的，那么你需要更明显的告诉程序：逆向是无法调用的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UserDTOConvert</span> <span class="token keyword">extends</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">protected</span> <span class="token class-name">User</span> <span class="token function">doForward</span><span class="token punctuation">(</span><span class="token class-name">UserDTO</span> userDTO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>userDTO<span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> user<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">protected</span> <span class="token class-name">UserDTO</span> <span class="token function">doBackward</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token string">"不支持逆向转化方法!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看一下 doBackward 方法，直接抛出了一个断言异常，而不是业务异常，这段代码告诉代码的调用者，这个方法不是准你调用的，如果你调用，我就“断言”你调用错误了。</p><p>关于异常处理的更详细介绍，可以参考这篇文章：如何优雅的设计 Java 异常 ，应该可以帮你更好的理解异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>lrwinx<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token operator">/</span><span class="token number">2016</span><span class="token operator">/</span><span class="token number">04</span><span class="token operator">/</span><span class="token number">28</span><span class="token operator">/</span><span class="token operator">%</span>E5<span class="token operator">%</span>A6<span class="token operator">%</span><span class="token number">82</span><span class="token operator">%</span>E4<span class="token operator">%</span>BD<span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span>E4<span class="token operator">%</span>BC<span class="token operator">%</span><span class="token number">98</span><span class="token operator">%</span>E9<span class="token operator">%</span><span class="token number">9</span>B<span class="token operator">%</span><span class="token number">85</span><span class="token operator">%</span>E7<span class="token operator">%</span><span class="token number">9</span>A<span class="token operator">%</span><span class="token number">84</span><span class="token operator">%</span>E8<span class="token operator">%</span>AE<span class="token operator">%</span>BE<span class="token operator">%</span>E8<span class="token operator">%</span>AE<span class="token operator">%</span><span class="token class-name">A1java</span><span class="token operator">%</span>E5<span class="token operator">%</span>BC<span class="token operator">%</span><span class="token number">82</span><span class="token operator">%</span>E5<span class="token operator">%</span>B8<span class="token operator">%</span>B8<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="bean-的验证"><a href="#bean-的验证" class="headerlink" title="| bean 的验证"></a>| bean 的验证</h4><p>如果你认为我上边写的那个添加用户 API 写的已经非常完美了，那只能说明你还不是一个优秀的程序员。我们应该保证任何数据的入参到方法体内都是合法的。</p><h4 id="为什么要验证"><a href="#为什么要验证" class="headerlink" title="| 为什么要验证"></a>| 为什么要验证</h4><p>很多人会告诉我，如果这些 API 是提供给前端进行调用的，前端都会进行验证啊，你为什还要验证？</p><p>其实答案是这样的，我从不相信任何调用我 API 或者方法的人，比如前端验证失败了，或者某些人通过一些特殊的渠道(比如 Charles 进行抓包)，直接将数据传入到我的 API，那我仍然进行正常的业务逻辑处理，那么就有可能产生脏数据！</p><p>“对于脏数据的产生一定是致命”，这句话希望大家牢记在心，再小的脏数据也有可能让你找几个通宵！</p><h4 id="jsr-303-验证"><a href="#jsr-303-验证" class="headerlink" title="| jsr 303 验证"></a>| jsr 303 验证</h4><p>hibernate 提供的 jsr 303 实现，我觉得目前仍然是很优秀的，具体如何使用，我不想讲，因为谷歌上你可以搜索出很多答案！</p><p>再以上班的 API 实例进行说明，我们现在对 DTO 数据进行检查：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDTO</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@NotNull</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotNull</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token comment">//其他代码略</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>API 验证：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token class-name">UserDTO</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token class-name">UserDTO</span> userDTO<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">User</span> user <span class="token operator">=</span>  userDTO<span class="token punctuation">.</span><span class="token function">convertToUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">User</span> saveResultUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">UserDTO</span> result <span class="token operator">=</span> userDTO<span class="token punctuation">.</span><span class="token function">convertFor</span><span class="token punctuation">(</span>saveResultUser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们需要将验证结果传给前端，这种异常应该转化为一个 api 异常（带有错误码的异常）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token keyword">public</span> <span class="token class-name">UserDTO</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token class-name">UserDTO</span> userDTO<span class="token punctuation">,</span> <span class="token class-name">BindingResult</span> bindingResult<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token function">checkDTOParams</span><span class="token punctuation">(</span>bindingResult<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">User</span> user <span class="token operator">=</span>  userDTO<span class="token punctuation">.</span><span class="token function">convertToUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">User</span> saveResultUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">UserDTO</span> result <span class="token operator">=</span> userDTO<span class="token punctuation">.</span><span class="token function">convertFor</span><span class="token punctuation">(</span>saveResultUser<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkDTOParams</span><span class="token punctuation">(</span><span class="token class-name">BindingResult</span> bindingResult<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>bindingResult<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token comment">//throw new 带验证码的验证错误异常</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BindingResult 是 Spring MVC 验证 DTO 后的一个结果集，可以参考 spring 官方文档：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>spring<span class="token punctuation">.</span>io<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查参数后，可以抛出一个“带验证码的验证错误异常”。</p><p>拥抱 lombok</p><p>上边的 DTO 代码，已经让我看的很累了，我相信读者也是一样，看到那么多的 Getter 和 Setter 方法，太烦躁了，那时候有什么方法可以简化这些呢。</p><p>请拥抱 lombok，它会帮助我们解决一些让我们很烦躁的问题。</p><p>去掉 Setter 和 Getter</p><p>其实这个标题，我不太想说，因为网上太多，但是因为很多人告诉我，他们根本就不知道 lombok 的存在，所以为了让读者更好的学习，我愿意写这样一个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDTO</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@NotNull</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotNull</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">convertToUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">UserDTOConvert</span> userDTOConvert <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDTOConvert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> convert <span class="token operator">=</span> userDTOConvert<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> convert<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">UserDTO</span> <span class="token function">convertFor</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">UserDTOConvert</span> userDTOConvert <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDTOConvert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserDTO</span> convert <span class="token operator">=</span> userDTOConvert<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> convert<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UserDTOConvert</span> <span class="token keyword">extends</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token class-name">User</span> <span class="token function">doForward</span><span class="token punctuation">(</span><span class="token class-name">UserDTO</span> userDTO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>userDTO<span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> user<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token class-name">UserDTO</span> <span class="token function">doBackward</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token string">"不支持逆向转化方法!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到了吧，烦人的 Getter 和 Setter 方法已经去掉了。</p><p>但是上边的例子根本不足以体现 lombok 的强大。我希望写一些网上很难查到，或者很少人进行说明的 lombok 的使用以及在使用时程序语义上的说明。</p><p>比如：@Data，@AllArgsConstructor，@NoArgsConstructor..这些我就不进行一一说明了，请大家自行查询资料。</p><p>bean 中的链式风格</p><p>什么是链式风格？我来举个例子，看下面这个 Student 的 bean：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>仔细看一下 set 方法，这样的设置便是 chain 的 style，调用的时候，可以这样使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>相信合理使用这样的链式代码，会更多的程序带来很好的可读性，那看一下如果使用 lombok 进行改善呢，请使用 @Accessors(chain = true)，看如下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就完成了一个对于 bean 来讲很友好的链式操作。</p><h4 id="静态构造方法"><a href="#静态构造方法" class="headerlink" title="| 静态构造方法"></a>| 静态构造方法</h4><p>静态构造方法的语义和简化程度真的高于直接去 new 一个对象。比如 new 一个 List 对象，过去的使用是这样的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看一下 guava 中的创建方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Lists 命名是一种约定（俗话说：约定优于配置），它是指 Lists 是 List 这个类的一个工具类，那么使用 List 的工具类去产生 List，这样的语义是不是要比直接 new 一个子类来的更直接一些呢，答案是肯定的。</p><p>再比如如果有一个工具类叫做 Maps，那你是否想到了创建 Map 的方法呢：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> objectObjectHashMap <span class="token operator">=</span> <span class="token class-name">Maps</span><span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>好了，如果你理解了我说的语义，那么，你已经向成为 Java 程序员更近了一步了。</p><p>再回过头来看刚刚的 Student，很多时候，我们去写 Student 这个 bean 的时候，他会有一些必输字段。</p><p>比如 Student 中的 name 字段，一般处理的方式是将 name 字段包装成一个构造方法，只有传入 name 这样的构造方法，才能创建一个 Student 对象。</p><p>接上上边的静态构造方法和必传参数的构造方法，使用 lombok 将更改成如下写法（@RequiredArgsConstructor 和 @NonNull）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token punctuation">(</span>staticName <span class="token operator">=</span> <span class="token string">"ofName"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@NonNull</span> <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token function">ofName</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样构建出的 bean 语义是否要比直接 new 一个含参的构造方法（包含 name 的构造方法）要好很多。</p><p>当然，看过很多源码以后，我想相信将静态构造方法 ofName 换成 of 会先的更加简洁：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token punctuation">(</span>staticName <span class="token operator">=</span> <span class="token string">"of"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@NonNull</span> <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然他仍然是支持链式调用的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样来写代码，真的很简洁，并且可读性很强。</p><h4 id="使用-builder"><a href="#使用-builder" class="headerlink" title="| 使用 builder"></a>| 使用 builder</h4><p>Builder 模式我不想再多解释了，读者可以看一下《Head First》(设计模式) 的建造者模式。</p><p>今天其实要说的是一种变种的 builder 模式，那就是构建 bean 的 builder 模式，其实主要的思想是带着大家一起看一下 lombok 给我们带来了什么。</p><p>看一下 Student 这个类的原始 builder 状态：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Builder</span> <span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span><span class="token punctuation">&#123;</span>            <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>                    student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> student<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样的 builder 代码，让我是在恶心难受，于是我打算用 lombok 重构这段代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Builder</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代理模式</p><p>正如我们所知的，在程序中调用 rest 接口是一个常见的行为动作，如果你和我一样使用过 spring 的 RestTemplate，我相信你会我和一样，对他抛出的非 http 状态码异常深恶痛绝。</p><p>所以我们考虑将 RestTemplate 最为底层包装器进行包装器模式的设计：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">FilterRestTemplate</span> <span class="token keyword">implements</span> <span class="token class-name">RestOperations</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token class-name">FilterRestTemplate</span><span class="token punctuation">(</span><span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate <span class="token operator">=</span> restTemplate<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//实现RestOperations所有的接口</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再由扩展类对 FilterRestTemplate 进行包装扩展：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtractRestTemplate</span> <span class="token keyword">extends</span> <span class="token class-name">FilterRestTemplate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ExtractRestTemplate</span><span class="token punctuation">(</span><span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>restTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate <span class="token operator">=</span> restTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">RestResponseDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">postForEntityWithNoException</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Object</span> request<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> uriVariables<span class="token punctuation">)</span>                    <span class="token keyword">throws</span> <span class="token class-name">RestClientException</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">RestResponseDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> restResponseDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestResponseDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> tResponseEntity<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    tResponseEntity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForEntity</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> request<span class="token punctuation">,</span> responseType<span class="token punctuation">,</span> uriVariables<span class="token punctuation">)</span><span class="token punctuation">;</span>                    restResponseDTO<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>tResponseEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    restResponseDTO<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>tResponseEntity<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    restResponseDTO<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span>tResponseEntity<span class="token punctuation">.</span><span class="token function">getStatusCodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    restResponseDTO<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">RestResponseDTO</span><span class="token punctuation">.</span>UNKNOWN_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    restResponseDTO<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    restResponseDTO<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> restResponseDTO<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>包装器 ExtractRestTemplate 很完美的更改了异常抛出的行为，让程序更具有容错性。</p><p>在这里我们不考虑 ExtractRestTemplate 完成的功能，让我们把焦点放在 FilterRestTemplate 上，“实现 RestOperations 所有的接口”。</p><p>这个操作绝对不是一时半会可以写完的，当时在重构之前我几乎写了半个小时，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">FilterRestTemplate</span> <span class="token keyword">implements</span> <span class="token class-name">RestOperations</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">FilterRestTemplate</span><span class="token punctuation">(</span><span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate <span class="token operator">=</span> restTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> uriVariables<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RestClientException</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>responseType<span class="token punctuation">,</span>uriVariables<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> uriVariables<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RestClientException</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>responseType<span class="token punctuation">,</span>uriVariables<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token class-name">URI</span> url<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RestClientException</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>responseType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getForEntity</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> uriVariables<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RestClientException</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>responseType<span class="token punctuation">,</span>uriVariables<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//其他实现代码略。。。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我相信你看了以上代码，你会和我一样觉得恶心反胃，后来我用 lombok 提供的代理注解优化了我的代码（@Delegate）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">FilterRestTemplate</span> <span class="token keyword">implements</span> <span class="token class-name">RestOperations</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Delegate</span>    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这几行代码完全替代上述那些冗长的代码。是不是很简洁，做一个拥抱 lombok 的程序员吧。</p><p>重构</p><p>需求案例</p><h4 id="项目需求"><a href="#项目需求" class="headerlink" title="| 项目需求"></a>| 项目需求</h4><p>项目开发阶段，有一个关于下单发货的需求：如果今天下午 3 点前进行下单，那么发货时间是明天，如果今天下午 3 点后进行下单，那么发货时间是后天，如果被确定的时间是周日，那么在此时间上再加 1 天为发货时间。</p><h4 id="思考与重构"><a href="#思考与重构" class="headerlink" title="| 思考与重构"></a>| 思考与重构</h4><p>我相信这个需求看似很简单，无论怎么写都可以完成。</p><p>很多人可能看到这个需求，就动手开始写 Calendar 或 Date 进行计算，从而完成需求。</p><p>而我给的建议是，仔细考虑如何写代码，然后再去写，不是说所有的时间操作都用 Calendar 或 Date 去解决，一定要看场景。</p><p>对于时间的计算我们要考虑 joda-time 这种类似的成熟时间计算框架来写代码，它会让代码更加简洁和易读。</p><p>请读者先考虑这个需求如何用 Java 代码完成，或先写一个你觉得完成这个代码的思路，再来看我下边的代码，这样，你的收获会更多一些：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">DateTime</span> DISTRIBUTION_TIME_SPLIT_TIME <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withTime</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Date</span> <span class="token function">calculateDistributionTimeByOrderCreateTime</span><span class="token punctuation">(</span><span class="token class-name">Date</span> orderCreateTime<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">DateTime</span> orderCreateDateTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span>orderCreateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Date</span> tomorrow <span class="token operator">=</span> orderCreateDateTime<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Date</span> theDayAfterTomorrow <span class="token operator">=</span> orderCreateDateTime<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> orderCreateDateTime<span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span>DISTRIBUTION_TIME_SPLIT_TIME<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">wrapDistributionTime</span><span class="token punctuation">(</span>theDayAfterTomorrow<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">wrapDistributionTime</span><span class="token punctuation">(</span>tomorrow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Date</span> <span class="token function">wrapDistributionTime</span><span class="token punctuation">(</span><span class="token class-name">Date</span> distributionTime<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">DateTime</span> currentDistributionDateTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span>distributionTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DateTime</span> plusOneDay <span class="token operator">=</span> currentDistributionDateTime<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isSunday <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DateTimeConstants</span><span class="token punctuation">.</span>SUNDAY <span class="token operator">==</span> currentDistributionDateTime<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> isSunday <span class="token operator">?</span> plusOneDay<span class="token punctuation">.</span><span class="token function">toDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> currentDistributionDateTime<span class="token punctuation">.</span><span class="token function">toDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>读这段代码的时候，你会发现，我将判断和有可能出现的不同结果都当做一个变量，最终做一个三目运算符的方式进行返回。</p><p>这样的优雅和可读性显而易见，当然这样的代码不是一蹴而就的，我优化了 3 遍产生的以上代码。读者可根据自己的代码和我写的代码进行对比。</p><h4 id="提高方法"><a href="#提高方法" class="headerlink" title="| 提高方法"></a>| 提高方法</h4><p>如果你做了 3 年+的程序员，我相信像如上这样的需求，你很轻松就能完成，但是如果你想做一个会写 Java 的程序员，就好好的思考和重构代码吧。</p><p>写代码就如同写字一样，同样的字，大家都会写，但是写出来是否好看就不一定了。如果想把程序写好，就要不断的思考和重构，敢于尝试，敢于创新，不要因循守旧，一定要做一个优秀的 Java 程序员。</p><p>提高代码水平最好的方法就是有条理的重构！（注意：是有条理的重构）</p><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="| 设计模式"></a>| 设计模式</h4><p>设计模式就是工具，而不是提现你是否是高水平程序员的一个指标。</p><p>我经常会看到某一个程序员兴奋的大喊，哪个程序哪个点我用到了设计模式，写的多么多么优秀，多么多么好。我仔细去翻阅的时候，却发现有很多是过度设计的。</p><h4 id="业务驱动技术-or-技术驱动业务"><a href="#业务驱动技术-or-技术驱动业务" class="headerlink" title="| 业务驱动技术 or 技术驱动业务"></a>| 业务驱动技术 or 技术驱动业务</h4><p>业务驱动技术 or 技术驱动业务 ？其实这是一个一直在争论的话题，但是很多人不这么认为，我觉得就是大家不愿意承认罢了。我来和大家大概分析一下作为一个 Java 程序员，我们应该如何判断自己所处于的位置。</p><p>业务驱动技术：如果你所在的项目是一个收益很小或者甚至没有收益的项目，请不要搞其他创新的东西，不要驱动业务要如何如何做，而是要熟知业务现在的痛点是什么？如何才能帮助业务盈利或者让项目更好，更顺利的进行。</p><p>技术驱动业务：如果你所在的项目是一个很牛的项目，比如淘宝这类的项目，我可以在满足业务需求的情况下，和业务沟通，使用什么样的技术能更好的帮助业务创造收益。</p><p>比如说下单的时候要进队列，可能几分钟之后订单状态才能处理完成，但是会让用户有更流畅的体验，赚取更多的访问流量，那么我相信业务愿意被技术驱动，会同意订单的延迟问题，这样便是技术驱动业务。</p><p>我相信大部分人还都处于业务驱动技术的方向吧。所以你既然不能驱动业务，那就请拥抱业务变化吧。</p><h4 id="代码设计"><a href="#代码设计" class="headerlink" title="| 代码设计"></a>| 代码设计</h4><p>一直在做 Java 后端的项目，经常会有一些变动，我相信大家也都遇到过。</p><p>比如当我们写一段代码的时候，我们考虑将需求映射成代码的状态模式，突然有一天，状态模式里边又添加了很多行为变化的东西，这时候你就挠头了，你硬生生的将状态模式中添加过多行为和变化。</p><p>慢慢的你会发现这些状态模式，其实更像是一簇算法，应该使用策略模式，这时你应该已经晕头转向了。</p><p>说了这么多，我的意思是，只要你觉得合理，就请将状态模式改为策略模式吧，所有的模式并不是凭空想象出来的，都是基于重构。</p><p>Java 编程中没有银弹，请拥抱业务变化，一直思考重构，你就有一个更好的代码设计！</p><h4 id="你真的优秀吗？"><a href="#你真的优秀吗？" class="headerlink" title="| 你真的优秀吗？"></a>| 你真的优秀吗？</h4><p>真不好意思，我取了一个这么无聊的标题。</p><p>国外流行一种编程方式，叫做结对编程，我相信国内很多公司都没有这么做，我就不在讲述结对编程带来的好处了，其实就是一边 code review，一边互相提高的一个过程。既然做不到这个，那如何让自己活在自己的世界中不断提高呢？</p><p>“平时开发的时候，做出的代码总认为是正确的，而且写法是完美的。”，我相信这是大部分人的心声，还回到刚刚的问题，如何在自己的世界中不断提高呢？</p><h3 id="答案就是："><a href="#答案就是：" class="headerlink" title="答案就是："></a>答案就是：</h3><ul><li> 多看成熟框架的源码</li><li> 多回头看自己的代码</li><li>勤于重构</li></ul><p>你真的优秀吗？如果你每周都完成了学习源码，回头看自己代码，然后勤于重构，我认为你就真的很优秀了。</p><p>即使也许你只是刚刚入门，但是一直坚持，你就是一个真的会写 Java 代码的程序员了。</p><p>技能</p><h4 id="UML"><a href="#UML" class="headerlink" title="| UML"></a>| UML</h4><p>不想多讨论 UML 相关的知识，但是我觉得你如果真的会写 Java，请先学会表达自己，UML 就是你说话的语言。</p><p>做一名优秀的 Java 程序员，请至少学会这两种 UML 图：</p><ul><li> 类图</li><li>时序图</li></ul><h4 id="clean-code"><a href="#clean-code" class="headerlink" title="| clean code"></a>| clean code</h4><p>我认为保持代码的简洁和可读性是代码的最基本保证，如果有一天为了程序的效率而降低了这两点，我认为是可以谅解的，除此之外，没有任何理由可以让你任意挥霍你的代码。</p><p>无论如何，请保持你的代码的整洁。</p><h4 id="Linux-基础命令"><a href="#Linux-基础命令" class="headerlink" title="| Linux 基础命令"></a>| Linux 基础命令</h4><p>这点其实和会写 Java 没有关系，但是 Linux 很多时候确实承载运行 Java 的容器，请学好 Linux 的基础命令。</p><p>总结</p><p>Java 是一个大体系，今天讨论并未涉及框架和架构相关知识，只是讨论如何写好代码。</p><p>本文从写 Java 程序的小方面一直写到大方面，来阐述了如何才能写好 Java 程序，并告诉读者们如何才能提高自身的编码水平。</p><p>我希望看到这篇文章的各位都能做一个优秀的 Java 程序员</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> 重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐17个提升开发效率轮子</title>
      <link href="/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/"/>
      <url>/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Collections"><a href="#1-Collections" class="headerlink" title="1. Collections"></a>1. Collections</h2><p>首先出场的是<code>java.util</code>包下的<code>Collections</code>类，该类主要用于操作集合或者返回集合，我个人非常喜欢用它。</p><h3 id="1-1-排序"><a href="#1-1-排序" class="headerlink" title="1.1 排序"></a>1.1 排序</h3><p>在工作中经常有对集合排序的需求。</p><p>看看使用<code>Collections</code>工具是如何实现升序和降序的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//升序</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//降序</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-获取最大或最小值"><a href="#1-2-获取最大或最小值" class="headerlink" title="1.2 获取最大或最小值"></a>1.2 获取最大或最小值</h3><p>有时候需要找出集合中的<code>最大值</code>或者<code>最小值</code>，这时可以使用Collections的<code>max</code>和<code>min</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> max <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取最大值</span><span class="token class-name">Integer</span> min <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取最小值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">3</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-3-转换线程安全集合"><a href="#1-3-转换线程安全集合" class="headerlink" title="1.3 转换线程安全集合"></a>1.3 转换线程安全集合</h3><p>我们都知道，java中的很多集合，比如：ArrayList、LinkedList、HashMap、HashSet等，都是线程不安全的。</p><p>换句话说，这些集合在多线程的环境中，添加数据会出现异常。</p><p>这时，可以用Collections的<code>synchronizedxxx</code>方法，将这些线程不安全的集合，直接转换成线程安全集合。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将ArrayList转换成线程安全集合</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integers<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它的底层会创建<code>SynchronizedRandomAccessList</code>或者<code>SynchronizedList</code>类，这两个类的很多方法都会用<code>synchronized</code>加锁。</p><h3 id="1-4-返回空集合"><a href="#1-4-返回空集合" class="headerlink" title="1.4 返回空集合"></a>1.4 返回空集合</h3><p>有时，我们在判空之后，需要返回空集合，就可以使用<code>emptyList</code>方法，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//业务处理</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-二分查找"><a href="#1-5-二分查找" class="headerlink" title="1.5 二分查找"></a>1.5 二分查找</h3><p><code>binarySearch</code>方法提供了一个非常好用的<code>二分查找</code>功能，只用传入指定集合和需要找到的key即可。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//二分查找</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-6-转换成不可修改集合"><a href="#1-6-转换成不可修改集合" class="headerlink" title="1.6 转换成不可修改集合"></a>1.6 转换成不可修改集合</h3><p>为了防止后续的程序把某个集合的结果修改了，有时候我们需要把某个集合定义成不可修改的，使用Collections的<code>unmodifiablexxx</code>方法就能轻松实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integers<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>UnsupportedOperationException</span> at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Collections</span>$<span class="token class-name">UnmodifiableCollection</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1055</span><span class="token punctuation">)</span> at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sue<span class="token punctuation">.</span>jump<span class="token punctuation">.</span>service<span class="token punctuation">.</span>test1<span class="token punctuation">.</span></span>UtilTest</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">UtilTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然Collections工具类中还有很多常用的方法，在这里就不一一介绍了，需要你自己去探索。</p><p><img src="/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/image_22c2f25a.png" alt="image_22c2f25a.png"> <img src="/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/image_71d4889f.png" alt="image_71d4889f.png"></p><h2 id="2-CollectionUtils"><a href="#2-CollectionUtils" class="headerlink" title="2. CollectionUtils"></a>2. CollectionUtils</h2><p>对集合操作，除了前面说的<code>Collections</code>工具类之后，<code>CollectionUtils</code>工具类也非常常用。</p><p>目前比较主流的是<code>spring</code>的<code>org.springframework.util</code>包下的CollectionUtils工具类。<img src="/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/image_f8deb8c1.png" alt="image_f8deb8c1.png"></p><p>和<code>apache</code>的<code>org.apache.commons.collections</code>包下的CollectionUtils工具类。</p><p><img src="/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/image_5cf672b2.png" alt="image_5cf672b2.png"></p><p><img src="/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/image_98de130d.png" alt="image_98de130d.png"></p><blockquote><p>我个人更推荐使用apache的包下的CollectionUtils工具类，因为它的工具更多更全面。</p></blockquote><p>举个简单的例子，<code>spring</code>的CollectionUtils工具类没有判断集合不为空的方法。而<code>apache</code>的CollectionUtils工具类却有。</p><p>下面我们以<code>apache</code>的CollectionUtils工具类为例，介绍一下常用方法。</p><h3 id="2-1-集合判空"><a href="#2-1-集合判空" class="headerlink" title="2.1 集合判空"></a>2.1 集合判空</h3><p>通过CollectionUtils工具类的<code>isEmpty</code>方法可以轻松判断集合是否为空，<code>isNotEmpty</code>方法判断集合不为空。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合不为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-对两个集合进行操作"><a href="#2-2-对两个集合进行操作" class="headerlink" title="2.2 对两个集合进行操作"></a>2.2 对两个集合进行操作</h3><p>有时候我们需要对已有的两个集合进行操作，比如取交集或者并集等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取并集</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> unionList <span class="token operator">=</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>unionList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取交集</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> intersectionList <span class="token operator">=</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">intersection</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>intersectionList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取交集的补集</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> disjunctionList <span class="token operator">=</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">disjunction</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>disjunctionList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取差集</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> subtractList <span class="token operator">=</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subtractList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>说句实话，对两个集合的操作，在实际工作中用得挺多的，特别是很多批量的场景中。以前我们需要写一堆代码，但没想到有现成的轮子。</p><h2 id="3-Lists"><a href="#3-Lists" class="headerlink" title="3. Lists"></a>3. Lists</h2><p>如果你引入<code>com.google.guava</code>的pom文件，会获得很多好用的小工具。这里推荐一款<code>com.google.common.collect</code>包下的集合工具：<code>Lists</code>。</p><p>它是在太好用了，让我爱不释手。</p><h3 id="3-1-创建空集合"><a href="#3-1-创建空集合" class="headerlink" title="3.1 创建空集合"></a>3.1 创建空集合</h3><p>有时候，我们想创建一个空集合。这时可以用Lists的<code>newArrayList</code>方法，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-快速初始化集合"><a href="#3-2-快速初始化集合" class="headerlink" title="3.2 快速初始化集合"></a>3.2 快速初始化集合</h3><p>有时候，我们想给一个集合中初始化一些元素。这时可以用Lists的newArrayList方法，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-笛卡尔积"><a href="#3-3-笛卡尔积" class="headerlink" title="3.3 笛卡尔积"></a>3.3 笛卡尔积</h3><p>如果你想将两个集合做<code>笛卡尔积</code>，Lists的<code>cartesianProduct</code>方法可以帮你实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> productList <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">cartesianProduct</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>productList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-4-分页"><a href="#3-4-分页" class="headerlink" title="3.4 分页"></a>3.4 分页</h3><p>如果你想将一个<code>大集合</code>分成若干个<code>小集合</code>，可以使用Lists的<code>partition</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> partitionList <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>partitionList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个例子中，list有5条数据，我将list集合按大小为2，分成了3页，即变成3个小集合。</p><p>这个是我最喜欢的方法之一，经常在项目中使用。</p><p>比如有个需求：现在有5000个id，需要调用批量用户查询接口，查出用户数据。但如果你直接查5000个用户，单次接口响应时间可能会非常慢。如果改成分页处理，每次只查500个用户，异步调用10次接口，就不会有单次接口响应慢的问题。</p><h3 id="3-5-流处理"><a href="#3-5-流处理" class="headerlink" title="3.5 流处理"></a>3.5 流处理</h3><p>如果我们想把某个集合转换成另外一个接口，可以使用Lists的<code>transform</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> transformList <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> x <span class="token operator">-></span> x<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>transformList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将小写字母转换成了大写字母。</p><h3 id="3-6-颠倒顺序"><a href="#3-6-颠倒顺序" class="headerlink" title="3.6 颠倒顺序"></a>3.6 颠倒顺序</h3><p>Lists的有颠倒顺序的方法<code>reverse</code>。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> reverseList <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reverseList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>list的原始顺序是312，使用<code>reverse</code>方法颠倒顺序之后，变成了213。</p><p>Lists还有其他的好用的工具，我在这里只是抛砖引玉，有兴趣的朋友，可以仔细研究一下。<img src="/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/image_040afd70.png" alt="image_040afd70.png"></p><h2 id="4-Objects"><a href="#4-Objects" class="headerlink" title="4. Objects"></a>4. Objects</h2><p>在<code>jdk7</code>之后，提供了<code>Objects</code>工具类，我们可以通过它操作对象。</p><h3 id="4-1-对象判空"><a href="#4-1-对象判空" class="headerlink" title="4.1 对象判空"></a>4.1 对象判空</h3><p>在java中万事万物皆对象，对象的判空可以说无处不在。Objects的<code>isNull</code>方法判断对象是否为空，而<code>nonNull</code>方法判断对象是否不为空。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> integer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象不为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-对象为空抛异常"><a href="#4-2-对象为空抛异常" class="headerlink" title="4.2 对象为空抛异常"></a>4.2 对象为空抛异常</h3><p>如果我们想在对象为空时，抛出空指针异常，可以使用Objects的<code>requireNonNull</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> integer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>integer1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>integer1<span class="token punctuation">,</span> <span class="token string">"参数不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>integer1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token string">"参数不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-判断两个对象是否相等"><a href="#4-3-判断两个对象是否相等" class="headerlink" title="4.3 判断两个对象是否相等"></a>4.3 判断两个对象是否相等</h3><p>我们经常需要判断两个对象是否相等，Objects给我们提供了<code>equals</code>方法，能非常方便的实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> integer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> integer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>integer1<span class="token punctuation">,</span> integer2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但使用这个方法有坑，比如例子改成：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> integer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Long</span> integer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>integer1<span class="token punctuation">,</span> integer2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体原因不细说了，有兴趣的小伙们可以看看我的另一篇文章《[Objects.equals有坑][Objects.equals]》，里面有非常详细的讲解。</p><h3 id="4-4-获取对象的hashCode"><a href="#4-4-获取对象的hashCode" class="headerlink" title="4.4 获取对象的hashCode"></a>4.4 获取对象的hashCode</h3><p>如果你想获取某个对象的hashCode，可以使用Objects的<code>hashCode</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">96354</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Objects的内容先介绍到这里，有兴趣的小伙们，可以看看下面更多的方法：<img src="/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/image_d64a89cc.png" alt="image_d64a89cc.png"></p><h2 id="5-BooleanUtils"><a href="#5-BooleanUtils" class="headerlink" title="5. BooleanUtils"></a>5. BooleanUtils</h2><p>在java中布尔值，随处可见。</p><p>如果你使用了布尔的包装类：<code>Boolean</code>，总感觉有点麻烦，因为它有三种值：<code>null</code>、<code>true</code>、<code>false</code>。我们在处理Boolean对象时，需要经常判空。</p><p>头疼！！！</p><p>但如果使用<code>BooleanUtils</code>类处理布尔值，心情一下子就愉悦起来了。</p><h3 id="5-1-判断true或false"><a href="#5-1-判断true或false" class="headerlink" title="5.1 判断true或false"></a>5.1 判断true或false</h3><p>如果你想判断某个参数的值是true或false，可以直接使用<code>isTrue</code>或<code>isFalse</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Boolean</span> aBoolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">BooleanUtils</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>aBoolean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">BooleanUtils</span><span class="token punctuation">.</span><span class="token function">isFalse</span><span class="token punctuation">(</span>aBoolean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-2-判断不为true或不为false"><a href="#5-2-判断不为true或不为false" class="headerlink" title="5.2 判断不为true或不为false"></a>5.2 判断不为true或不为false</h3><p>有时候，需要判断某个参数不为true，即是null或者false。或者判断不为false，即是null或者true。</p><p>可以使用<code>isNotTrue</code>或<code>isNotFalse</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Boolean</span> aBoolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Boolean</span> aBoolean1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">BooleanUtils</span><span class="token punctuation">.</span><span class="token function">isNotTrue</span><span class="token punctuation">(</span>aBoolean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">BooleanUtils</span><span class="token punctuation">.</span><span class="token function">isNotTrue</span><span class="token punctuation">(</span>aBoolean1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">BooleanUtils</span><span class="token punctuation">.</span><span class="token function">isNotFalse</span><span class="token punctuation">(</span>aBoolean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">BooleanUtils</span><span class="token punctuation">.</span><span class="token function">isNotFalse</span><span class="token punctuation">(</span>aBoolean1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token boolean">false</span><span class="token boolean">true</span><span class="token boolean">true</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-转换成数字"><a href="#5-3-转换成数字" class="headerlink" title="5.3 转换成数字"></a>5.3 转换成数字</h3><p>如果你想将true转换成数字1，false转换成数字0，可以使用<code>toInteger</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Boolean</span> aBoolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Boolean</span> aBoolean1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">BooleanUtils</span><span class="token punctuation">.</span><span class="token function">toInteger</span><span class="token punctuation">(</span>aBoolean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">BooleanUtils</span><span class="token punctuation">.</span><span class="token function">toInteger</span><span class="token punctuation">(</span>aBoolean1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-4-Boolean转换成布尔值"><a href="#5-4-Boolean转换成布尔值" class="headerlink" title="5.4 Boolean转换成布尔值"></a>5.4 Boolean转换成布尔值</h3><p>我们有时候需要将包装类<code>Boolean</code>对象，转换成原始的<code>boolean</code>对象，可以使用<code>toBoolean</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Boolean</span> aBoolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Boolean</span> aBoolean1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">BooleanUtils</span><span class="token punctuation">.</span><span class="token function">toBoolean</span><span class="token punctuation">(</span>aBoolean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">BooleanUtils</span><span class="token punctuation">.</span><span class="token function">toBoolean</span><span class="token punctuation">(</span>aBoolean1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">BooleanUtils</span><span class="token punctuation">.</span><span class="token function">toBooleanDefaultIfNull</span><span class="token punctuation">(</span>aBoolean1<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们无需额外的判空了，而且还可以设置Boolean对象为空时返回的默认值。</p><p>BooleanUtils类的方法还有很多，有兴趣的小伙伴可以看看下面的内容：<img src="/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/image_56af129c.png" alt="image_56af129c.png"></p><h2 id="6-StringUtils"><a href="#6-StringUtils" class="headerlink" title="6. StringUtils"></a>6. StringUtils</h2><p><code>字符串</code>（String）在我们的日常工作中，用得非常非常非常多。</p><p>在我们的代码中经常需要对字符串判空，截取字符串、转换大小写、分隔字符串、比较字符串、去掉多余空格、拼接字符串、使用正则表达式等等。</p><p>如果只用String类提供的那些方法，我们需要手写大量的额外代码，不然容易出现各种异常。</p><p>现在有个好消息是：<code>org.apache.commons.lang3</code>包下的<code>StringUtils</code>工具类，给我们提供了非常丰富的选择。</p><h3 id="6-1-字符串判空"><a href="#6-1-字符串判空" class="headerlink" title="6.1 字符串判空"></a>6.1 字符串判空</h3><p>其实空字符串，不只是null一种，还有””，” “，”null”等等，多种情况。</p><p>StringUtils给我们提供了多个判空的静态方法，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token boolean">true</span><span class="token boolean">true</span><span class="token boolean">false</span><span class="token boolean">false</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token boolean">false</span><span class="token boolean">true</span><span class="token boolean">true</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token boolean">true</span><span class="token boolean">true</span><span class="token boolean">false</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token boolean">false</span><span class="token boolean">false</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例中的：<code>isEmpty</code>、<code>isNotEmpty</code>、<code>isBlank</code>和<code>isNotBlank</code>，这4个判空方法你们可以根据实际情况使用。</p><blockquote><p>优先推荐使用<code>isBlank</code>和<code>isNotBlank</code>方法，因为它会把<code>&quot; &quot;</code>也考虑进去。</p></blockquote><h3 id="6-2-分隔字符串"><a href="#6-2-分隔字符串" class="headerlink" title="6.2 分隔字符串"></a>6.2 分隔字符串</h3><p>分隔字符串是常见需求，如果直接使用String类的split方法，就可能会出现空指针异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">null</span><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>NullPointerException</span> at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sue<span class="token punctuation">.</span>jump<span class="token punctuation">.</span>service<span class="token punctuation">.</span>test1<span class="token punctuation">.</span></span>UtilTest</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">UtilTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用StringUtils的split方法会返回null，而使用String的split方法会报指针异常。</p><h3 id="6-3-判断是否纯数字"><a href="#6-3-判断是否纯数字" class="headerlink" title="6.3 判断是否纯数字"></a>6.3 判断是否纯数字</h3><p>给定一个字符串，判断它是否为纯数字，可以使用<code>isNumeric</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"123q"</span><span class="token punctuation">;</span><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">"0.33"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNumeric</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNumeric</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNumeric</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token boolean">true</span><span class="token boolean">false</span><span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-4-将集合拼接成字符串"><a href="#6-4-将集合拼接成字符串" class="headerlink" title="6.4 将集合拼接成字符串"></a>6.4 将集合拼接成字符串</h3><p>有时候，我们需要将某个集合的内容，拼接成一个字符串，然后输出，这时可以使用<code>join</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>list2<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然还有很多实用的方法，我在这里就不一一介绍了。<img src="/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/image_48270fb5.png" alt="image_48270fb5.png"></p><p><img src="/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/image_77defa60.png" alt="image_77defa60.png"></p><h2 id="7-Assert"><a href="#7-Assert" class="headerlink" title="7. Assert"></a>7. Assert</h2><p>很多时候，我们需要在代码中做判断：如果不满足条件，则抛异常。</p><p>有没有统一的封装呢?</p><p>其实<code>spring</code>给我们提供了<code>Assert</code>类，它表示<code>断言</code>。</p><h3 id="7-1-断言参数是否为空"><a href="#7-1-断言参数是否为空" class="headerlink" title="7.1 断言参数是否为空"></a>7.1 断言参数是否为空</h3><p>断言<code>参数</code>是否空，如果不满足条件，则直接抛异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"str必须为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token string">"str必须为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"str不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果不满足条件就会抛出<code>IllegalArgumentException</code>异常。</p><h3 id="7-2-断言集合是否为空"><a href="#7-2-断言集合是否为空" class="headerlink" title="7.2 断言集合是否为空"></a>7.2 断言集合是否为空</h3><p>断言<code>集合</code>是否空，如果不满足条件，则直接抛异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"list不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token string">"list不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token string">"map不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不满足条件就会抛出<code>IllegalArgumentException</code>异常。</p><h3 id="7-3-断言条件是否为空"><a href="#7-3-断言条件是否为空" class="headerlink" title="7.3 断言条件是否为空"></a>7.3 断言条件是否为空</h3><p>断言是否满足某个<code>条件</code>，如果不满足条件，则直接抛异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"list不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token string">"list不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然Assert类还有一些其他的功能，这里就不多介绍了。<img src="/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/image_b1853624.png" alt="image_b1853624.png"></p><h2 id="8-IOUtils"><a href="#8-IOUtils" class="headerlink" title="8. IOUtils"></a>8. IOUtils</h2><p><code>IO</code>流在我们日常工作中也用得比较多，尽管java已经给我们提供了丰富的API。</p><p>但我们不得不每次读取文件，或者写入文件之后，写一些重复的的代码。手动在<code>finally</code>代码块中关闭流，不然可能会造成<code>内存溢出</code>。</p><p>有个好消息是：如果你使用<code>org.apache.commons.io</code>包下的<code>IOUtils</code>类，会节省大量的时间。</p><h3 id="8-1-读取文件"><a href="#8-1-读取文件" class="headerlink" title="8.1 读取文件"></a>8.1 读取文件</h3><p>如果你想将某个txt文件中的数据，读取到字符串当中，可以使用IOUtils类的<code>toString</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/temp/a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-2-写入文件"><a href="#8-2-写入文件" class="headerlink" title="8.2 写入文件"></a>8.2 写入文件</h3><p>如果你想将某个字符串的内容，写入到指定文件当中，可以使用IOUtils类的<code>write</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"abcde"</span><span class="token punctuation">;</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"/temp/b.tx"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-3-文件拷贝"><a href="#8-3-文件拷贝" class="headerlink" title="8.3 文件拷贝"></a>8.3 文件拷贝</h3><p>如果你想将某个文件中的所有内容，都拷贝到另一个文件当中，可以使用IOUtils类的<code>copy</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/temp/a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"/temp/b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-4-读取文件内容到字节数组"><a href="#8-4-读取文件内容到字节数组" class="headerlink" title="8.4 读取文件内容到字节数组"></a>8.4 读取文件内容到字节数组</h3><p>如果你想将某个文件中的内容，读取字节数组中，可以使用IOUtils类的<code>toByteArray</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/temp/a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>IOUtils类非常实用，感兴趣的小伙们，可以看看下面内容。<img src="/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/image_fadda8b7.png" alt="image_fadda8b7.png"></p><h2 id="9-MDC"><a href="#9-MDC" class="headerlink" title="9. MDC"></a>9. MDC</h2><p><code>MDC</code>是<code>org.slf4j</code>包下的一个类，它的全称是Mapped Diagnostic Context，我们可以认为它是一个线程安全的存放诊断日志的容器。</p><p>MDC的底层是用了<code>ThreadLocal</code>来保存数据的。</p><p>我们可以用它传递参数。</p><p>例如现在有这样一种场景：我们使用<code>RestTemplate</code>调用远程接口时，有时需要在<code>header</code>中传递信息，比如：traceId，source等，便于在查询日志时能够串联一次完整的请求链路，快速定位问题。</p><p>这种业务场景就能通过<code>ClientHttpRequestInterceptor</code>接口实现，具体做法如下：</p><p>第一步，定义一个LogFilter拦截所有接口请求，在MDC中设置traceId：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MdcUtil</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"记录请求日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"记录响应日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步，实现<code>ClientHttpRequestInterceptor</code>接口，MDC中获取当前请求的traceId，然后设置到header中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestTemplateInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">ClientHttpRequestInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ClientHttpResponse</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest</span> request<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">,</span> <span class="token class-name">ClientHttpRequestExecution</span> execution<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"traceId"</span><span class="token punctuation">,</span> <span class="token class-name">MdcUtil</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> execution<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步，定义配置类，配置上面定义的<code>RestTemplateInterceptor</code>类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestTemplateConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        restTemplate<span class="token punctuation">.</span><span class="token function">setInterceptors</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token function">restTemplateInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplateInterceptor</span> <span class="token function">restTemplateInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplateInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中MdcUtil其实是利用MDC工具在ThreadLocal中存储和获取traceId</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MdcUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TRACE_ID <span class="token operator">=</span> <span class="token string">"TRACE_ID"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> MDC<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>TRACE_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        MDC<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>TRACE_ID<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，这个例子中没有演示MdcUtil类的add方法具体调的地方，我们可以在filter中执行接口方法之前，生成traceId，调用MdcUtil类的add方法添加到MDC中，然后在同一个请求的其他地方就能通过MdcUtil类的get方法获取到该traceId。</p><p>能使用MDC保存traceId等参数的根本原因是，用户请求到应用服务器，Tomcat会从线程池中分配一个线程去处理该请求。</p><p>那么该请求的整个过程中，保存到MDC的ThreadLocal中的参数，也是该线程独享的，所以不会有线程安全问题。</p><h2 id="10-ClassUtils"><a href="#10-ClassUtils" class="headerlink" title="10. ClassUtils"></a>10. ClassUtils</h2><p>spring的<code>org.springframework.util</code>包下的<code>ClassUtils</code>类，它里面有很多让我们惊喜的功能。</p><p>它里面包含了类和对象相关的很多非常实用的方法。</p><h3 id="10-1-获取对象的所有接口"><a href="#10-1-获取对象的所有接口" class="headerlink" title="10.1 获取对象的所有接口"></a>10.1 获取对象的所有接口</h3><p>如果你想获取某个对象的所有接口，可以使用ClassUtils的<code>getAllInterfaces</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> allInterfaces <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getAllInterfaces</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-2-获取某个类的包名"><a href="#10-2-获取某个类的包名" class="headerlink" title="10.2 获取某个类的包名"></a>10.2 获取某个类的包名</h3><p>如果你想获取某个类的包名，可以使用ClassUtils的<code>getPackageName</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> packageName <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="10-3-判断某个类是否内部类"><a href="#10-3-判断某个类是否内部类" class="headerlink" title="10.3 判断某个类是否内部类"></a>10.3 判断某个类是否内部类</h3><p>如果你想判断某个类是否内部类，可以使用ClassUtils的<code>isInnerClass</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isInnerClass</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-4-判断对象是否代理对象"><a href="#10-4-判断对象是否代理对象" class="headerlink" title="10.4 判断对象是否代理对象"></a>10.4 判断对象是否代理对象</h3><p>如果你想判断对象是否代理对象，可以使用ClassUtils的<code>isCglibProxy</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isCglibProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ClassUtils还有很多有用的方法，等待着你去发掘。感兴趣的朋友，可以看看下面内容：<img src="/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/image_dec3e504.png" alt="image_dec3e504.png"></p><h2 id="11-BeanUtils"><a href="#11-BeanUtils" class="headerlink" title="11. BeanUtils"></a>11. BeanUtils</h2><p>spring给我们提供了一个<code>JavaBean</code>的工具类，它在<code>org.springframework.beans</code>包下面，它的名字叫做：<code>BeanUtils</code>。</p><p>让我们一起看看这个工具可以带给我们哪些惊喜。</p><h3 id="11-1-拷贝对象的属性"><a href="#11-1-拷贝对象的属性" class="headerlink" title="11.1 拷贝对象的属性"></a>11.1 拷贝对象的属性</h3><p>曾几何时，你有没有这样的需求：把某个对象中的所有属性，都拷贝到另外一个对象中。这时就能使用BeanUtils的<code>copyProperties</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"苏三说技术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user1<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"成都"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-2-实例化某个类"><a href="#11-2-实例化某个类" class="headerlink" title="11.2 实例化某个类"></a>11.2 实例化某个类</h3><p>如果你想通过反射实例化一个类的对象，可以使用BeanUtils的<code>instantiateClass</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="11-3-获取指定类的指定方法"><a href="#11-3-获取指定类的指定方法" class="headerlink" title="11.3 获取指定类的指定方法"></a>11.3 获取指定类的指定方法</h3><p>如果你想获取某个类的指定方法，可以使用BeanUtils的<code>findDeclaredMethod</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Method</span> declaredMethod <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">findDeclaredMethod</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"getId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="11-4-获取指定方法的参数"><a href="#11-4-获取指定方法的参数" class="headerlink" title="11.4 获取指定方法的参数"></a>11.4 获取指定方法的参数</h3><p>如果你想获取某个方法的参数，可以使用BeanUtils的<code>findPropertyForMethod</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Method</span> declaredMethod <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">findDeclaredMethod</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"getId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PropertyDescriptor</span> propertyForMethod <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">findPropertyForMethod</span><span class="token punctuation">(</span>declaredMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>propertyForMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果你对BeanUtils比较感兴趣，可以看看下面内容：<img src="/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/image_7eeac46e.png" alt="image_7eeac46e.png"></p><h2 id="12-ReflectionUtils"><a href="#12-ReflectionUtils" class="headerlink" title="12. ReflectionUtils"></a>12. ReflectionUtils</h2><p>有时候，我们需要在项目中使用<code>反射</code>功能，如果使用最原始的方法来开发，代码量会非常多，而且很麻烦，它需要处理一大堆异常以及访问权限等问题。</p><p>好消息是spring给我们提供了一个<code>ReflectionUtils</code>工具，它在<code>org.springframework.util</code>包下面。</p><h3 id="12-1-获取方法"><a href="#12-1-获取方法" class="headerlink" title="12.1 获取方法"></a>12.1 获取方法</h3><p>如果你想获取某个类的某个方法，可以使用ReflectionUtils类的<code>findMethod</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">findMethod</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"getId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-2-获取字段"><a href="#12-2-获取字段" class="headerlink" title="12.2 获取字段"></a>12.2 获取字段</h3><p>如果你想获取某个类的某个字段，可以使用ReflectionUtils类的<code>findField</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">findField</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-3-执行方法"><a href="#12-3-执行方法" class="headerlink" title="12.3 执行方法"></a>12.3 执行方法</h3><p>如果你想通过反射调用某个方法，传递参数，可以使用ReflectionUtils类的<code>invokeMethod</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">invokeMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> springContextsUtil<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-4-判断字段是否常量"><a href="#12-4-判断字段是否常量" class="headerlink" title="12.4 判断字段是否常量"></a>12.4 判断字段是否常量</h3><p>如果你想判断某个字段是否常量，可以使用ReflectionUtils类的<code>isPublicStaticFinal</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">findField</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">isPublicStaticFinal</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="12-5-判断是否equals方法"><a href="#12-5-判断是否equals方法" class="headerlink" title="12.5 判断是否equals方法"></a>12.5 判断是否equals方法</h3><p>如果你想判断某个方法是否equals方法，可以使用ReflectionUtils类的<code>isEqualsMethod</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">findMethod</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"getId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">isEqualsMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然这个类还有不少有趣的方法，感兴趣的朋友，可以看看下面内容：<img src="/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/image_ea531c2a.png" alt="image_ea531c2a.png"></p><h2 id="13-Base64Utils"><a href="#13-Base64Utils" class="headerlink" title="13. Base64Utils"></a>13. Base64Utils</h2><p>有时候，为了安全考虑，需要将参数只用<code>base64</code>编码。</p><p>这时就能直接使用<code>org.springframework.util</code>包下的<code>Base64Utils</code>工具类。</p><p>它里面包含：<code>encode</code>和<code>decode</code>方法，用于对数据进行加密和解密。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token class-name">String</span> encode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64Utils</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加密后："</span> <span class="token operator">+</span> encode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> decode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64Utils</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encode<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密后："</span> <span class="token operator">+</span> decode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">加密后：<span class="token class-name">YWJj</span>解密后：abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="14-StandardCharsets"><a href="#14-StandardCharsets" class="headerlink" title="14. StandardCharsets"></a>14. StandardCharsets</h2><p>我们在做字符转换的时候，经常需要指定字符编码，比如：UTF-8、ISO-8859-1等等。</p><p>这时就可以直接使用<code>java.nio.charset</code>包下的<code>StandardCharsets</code>类中静态变量。</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token class-name">String</span> encode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64Utils</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加密后："</span> <span class="token operator">+</span> encode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> decode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64Utils</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encode<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密后："</span> <span class="token operator">+</span> decode<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-DigestUtils"><a href="#15-DigestUtils" class="headerlink" title="15. DigestUtils"></a>15. DigestUtils</h2><p>有时候，我们需要对数据进行加密处理，比如：md5或sha256。</p><p>可以使用apache的<code>org.apache.commons.codec.digest</code>包下的<code>DigestUtils</code>类。</p><h3 id="15-1-md5加密"><a href="#15-1-md5加密" class="headerlink" title="15.1 md5加密"></a>15.1 md5加密</h3><p>如果你想对数据进行md5加密，可以使用DigestUtils的<code>md5Hex</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> md5Hex <span class="token operator">=</span> <span class="token class-name">DigestUtils</span><span class="token punctuation">.</span><span class="token function">md5Hex</span><span class="token punctuation">(</span><span class="token string">"苏三说技术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>md5Hex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="15-2-sha256加密"><a href="#15-2-sha256加密" class="headerlink" title="15.2 sha256加密"></a>15.2 sha256加密</h3><p>如果你想对数据进行sha256加密，可以使用DigestUtils的<code>sha256Hex</code>方法。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> md5Hex <span class="token operator">=</span> <span class="token class-name">DigestUtils</span><span class="token punctuation">.</span><span class="token function">sha256Hex</span><span class="token punctuation">(</span><span class="token string">"苏三说技术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>md5Hex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然这个工具还有很多其他的加密方法：<img src="/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/image_fec0346f.png" alt="image_fec0346f.png"></p><h2 id="16-SerializationUtils"><a href="#16-SerializationUtils" class="headerlink" title="16. SerializationUtils"></a>16. SerializationUtils</h2><p>有时候，我们需要把数据进行<code>序列化</code>和<code>反序列化</code>处理。</p><p>传统的做法是某个类实现<code>Serializable</code>接口，然后重新它的<code>writeObject</code>和<code>readObject</code>方法。</p><p>但如果使用<code>org.springframework.util</code>包下的<code>SerializationUtils</code>工具类，能更轻松实现序列化和反序列化功能。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token class-name">Maps</span><span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialize <span class="token operator">=</span> <span class="token class-name">SerializationUtils</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> deserialize <span class="token operator">=</span> <span class="token class-name">SerializationUtils</span><span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>serialize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deserialize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-HttpStatus"><a href="#17-HttpStatus" class="headerlink" title="17. HttpStatus"></a>17. HttpStatus</h2><p>很多时候，我们会在代码中定义http的返回码，比如：接口正常返回200，异常返回500，接口找不到返回404，接口不可用返回502等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> SUCCESS_CODE <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> ERROR_CODE <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> NOT_FOUND_CODE <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其实<code>org.springframework.http</code>包下的HttpStatus枚举，或者<code>org.apache.http</code>包下的<code>HttpStatus</code>接口，已经把常用的http返回码给我们定义好了，直接拿来用就可以了，真的不用再重复定义了。</p><p><img src="/2022/11/09/tui-jian-17-ge-ti-sheng-kai-fa-xiao-lu-lun-zi/image_d1a5a95c.png" alt="image_d1a5a95c.png"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轮子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁的多种实现</title>
      <link href="/2022/11/09/fen-bu-shi-suo-de-duo-chong-shi-xian/"/>
      <url>/2022/11/09/fen-bu-shi-suo-de-duo-chong-shi-xian/</url>
      
        <content type="html"><![CDATA[<ul><li> 分布式锁概述</li><li> 数据库分布式锁</li><li> Redis分布式锁</li><li> Zookeeper分布式锁</li><li> 三种分布式锁对比</li></ul><h2 id="1-分布式锁概述"><a href="#1-分布式锁概述" class="headerlink" title="1. 分布式锁概述"></a>1. 分布式锁概述</h2><p>我们的系统都是分布式部署的，日常开发中，秒杀下单、抢购商品 等等业务场景，为了防⽌库存超卖，都需要用到分布式锁 。</p><blockquote><p>分布式锁其实就是，控制分布式系统不同进程共同访问共享资源的一种锁的实现。如果不同的系统或同一个系统的不同主机之间共享了某个临界资源，往往需要互斥来防止彼此干扰，以保证一致性。</p></blockquote><p>业界流行的分布式锁实现，一般有这3种方式：</p><ul><li> 基于数据库实现的分布式锁</li><li> 基于Redis实现的分布式锁</li><li> 基于Zookeeper实现的分布式锁</li></ul><h2 id="2-基于数据库的分布式锁"><a href="#2-基于数据库的分布式锁" class="headerlink" title="2. 基于数据库的分布式锁"></a>2. 基于数据库的分布式锁</h2><h3 id="2-1-数据库悲观锁实现的分布式锁"><a href="#2-1-数据库悲观锁实现的分布式锁" class="headerlink" title="2.1 数据库悲观锁实现的分布式锁"></a>2.1 数据库悲观锁实现的分布式锁</h3><p>可以使用<code>select ... for update</code>来实现分布式锁。我们自己的项目，分布式定时任务 ，就使用类似的实现方案，我给大家来展示个简单版的哈</p><p>表结构如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">CREATE TABLE `t_resource_lock` <span class="token punctuation">(</span>  `key_resource` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> COLLATE utf8_bin NOT NULL DEFAULT <span class="token string">'资源主键'</span><span class="token punctuation">,</span>  `status` <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> COLLATE utf8_bin NOT NULL DEFAULT <span class="token string">''</span> COMMENT <span class="token string">'S,F,P'</span><span class="token punctuation">,</span>  `lock_flag` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> unsigned NOT NULL DEFAULT <span class="token string">'0'</span> COMMENT <span class="token string">'1是已经锁 0是未锁'</span><span class="token punctuation">,</span>  `begin_time` datetime DEFAULT NULL COMMENT <span class="token string">'开始时间'</span><span class="token punctuation">,</span>  `end_time` datetime DEFAULT NULL COMMENT <span class="token string">'结束时间'</span><span class="token punctuation">,</span>  `client_ip` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> COLLATE utf8_bin NOT NULL DEFAULT <span class="token string">'抢到锁的IP'</span><span class="token punctuation">,</span>  `time` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> unsigned NOT NULL DEFAULT <span class="token string">'60'</span> COMMENT <span class="token string">'方法生命周期内只允许一个结点获取一次锁，单位：分钟'</span><span class="token punctuation">,</span>  <span class="token class-name">PRIMARY</span> KEY <span class="token punctuation">(</span>`key_resource`<span class="token punctuation">)</span> <span class="token class-name">USING</span> BTREE<span class="token punctuation">)</span> ENGINE<span class="token operator">=</span><span class="token class-name">InnoDB</span> <span class="token class-name">DEFAULT</span> CHARSET<span class="token operator">=</span>utf8 COLLATE<span class="token operator">=</span>utf8_bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加锁<code>lock</code>方法的伪代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transcational</span> <span class="token comment">//一定要加事务</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyResource，<span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   resourceLock <span class="token operator">=</span> <span class="token string">'select * from t_resource_lock where key_resource ='</span>#<span class="token punctuation">&#123;</span>keySource<span class="token punctuation">&#125;</span><span class="token string">' for update'</span><span class="token punctuation">;</span>      <span class="token keyword">try</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>resourceLock<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//插入锁的数据</span>      resourceLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      resourceLock<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>      resourceLock<span class="token punctuation">.</span><span class="token function">setLockFlag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//上锁</span>      resourceLock<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">P</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//处理中</span>      resourceLock<span class="token punctuation">.</span><span class="token function">setBeginTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token string">"insert into resourceLock"</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token comment">//获取锁成功</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>      <span class="token comment">//没上锁并且锁已经超时，即可以获取锁成功</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>resourceLock<span class="token punctuation">.</span>getLockFlag<span class="token operator">==</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span><span class="token string">'S'</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>resourceLock<span class="token punctuation">.</span>getstatus<span class="token punctuation">)</span>    <span class="token operator">&amp;&amp;</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span>resourceLock<span class="token punctuation">.</span><span class="token function">addDateTime</span><span class="token punctuation">(</span>resourceLock<span class="token punctuation">.</span><span class="token function">getBeginTime</span><span class="token punctuation">(</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      resourceLock<span class="token punctuation">.</span><span class="token function">setLockFlag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//上锁</span>      resourceLock<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">P</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//处理中</span>      resourceLock<span class="token punctuation">.</span><span class="token function">setBeginTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//update resourceLock;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span>resourceLock<span class="token punctuation">.</span><span class="token function">addDateTime</span><span class="token punctuation">(</span>resourceLock<span class="token punctuation">.</span><span class="token function">getBeginTime</span><span class="token punctuation">(</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//超时未正常执行结束,获取锁失败</span>     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解锁<code>unlock</code>方法的伪代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">String</span> v，status<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      resourceLock<span class="token punctuation">.</span><span class="token function">setLockFlag</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解锁</span>      resourceLock<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">S</span><span class="token operator">:</span>表示成功，<span class="token class-name">F</span>表示失败      <span class="token comment">//update resourceLock;</span>      <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整体流程：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">lock</span><span class="token punctuation">(</span>keyResource<span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//加锁</span>   status <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//你的业务逻辑处理。</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span><span class="token punctuation">&#123;</span>    <span class="token function">unlock</span><span class="token punctuation">(</span>keyResource<span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//释放锁</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实这个悲观锁实现的分布式锁，整体的流程还是比较清晰的。就是先<code>select ... for update</code>锁住主键<code>key_resource</code>那个记录，如果为空，则可以插入一条记录，如果已有记录判断下状态和时间 ，是否已经超时 。这里需要注意一下哈，必须要加事务 哈。</p><h3 id="2-2-数据库乐观锁实现的分布式锁"><a href="#2-2-数据库乐观锁实现的分布式锁" class="headerlink" title="2.2 数据库乐观锁实现的分布式锁"></a>2.2 数据库乐观锁实现的分布式锁</h3><p>除了悲观锁，还可以用乐观锁实现分布式锁 。乐观锁，顾名思义，就是很乐观，每次更新操作，都觉得不会存在并发冲突，只有更新失败后，才重试。它是基于CAS思想实现的。我以前的公司，扣减余额 就是用这种方案。</p><blockquote><p>搞个version字段，每次更新修改，都会自增加一，然后去更新余额时，把查出来的那个版本号，带上条件去更新，如果是上次那个版本号，就更新，如果不是，表示别人并发修改过了，就继续重试。</p></blockquote><p>大概流程如下：</p><ol><li> 查询版本号和余额</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">select version<span class="token punctuation">,</span>balance from account where user_id <span class="token operator">=</span><span class="token string">'666'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设查到版本号是oldVersion=1.</p><ol><li> 逻辑处理，判断余额</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>balance<span class="token operator">&lt;</span>扣减金额<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span>；<span class="token punctuation">&#125;</span>left_balance <span class="token operator">=</span> balance <span class="token operator">-</span> 扣减金额<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li> 进行扣减余额</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">update account set balance <span class="token operator">=</span> #<span class="token punctuation">&#123;</span>left_balance<span class="token punctuation">&#125;</span> <span class="token punctuation">,</span>version <span class="token operator">=</span> version<span class="token operator">+</span><span class="token number">1</span> where version <span class="token operator">=</span> #<span class="token punctuation">&#123;</span>oldVersion<span class="token punctuation">&#125;</span> and balance<span class="token operator">>=</span> #<span class="token punctuation">&#123;</span>left_balance<span class="token punctuation">&#125;</span> and user_id <span class="token operator">=</span><span class="token string">'666'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>大家可以看下这个流程图哈：</p><p> <img src="http://markdown.liangtengyu.com:9999/images//image_92a9dd04.png" alt="image_92a9dd04.png"> </p><p>这种方式适合并发不高 的场景，一般需要设置一下重试的次数</p><h2 id="3-基于Redis实现的分布式锁"><a href="#3-基于Redis实现的分布式锁" class="headerlink" title="3.基于Redis实现的分布式锁"></a>3.基于Redis实现的分布式锁</h2><p>Redis分布式锁一般有以下这几种实现方式：</p><ul><li> setnx + expire</li><li> setnx + value值是过期时间</li><li> set的扩展命令（set ex px nx）</li><li> set ex px nx + 校验唯一随机值,再删除</li><li> Redisson</li><li> Redisson + RedLock</li></ul><h3 id="3-1-setnx-expire"><a href="#3-1-setnx-expire" class="headerlink" title="3.1 setnx + expire"></a>3.1 setnx + expire</h3><p>聊到Redis分布式锁，很多小伙伴反手就是<code>setnx + expire</code>，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span>（jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>lock_value<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>）<span class="token punctuation">&#123;</span> <span class="token comment">//setnx加锁</span>    expire（key，<span class="token number">100</span>）<span class="token punctuation">;</span> <span class="token comment">//设置过期时间</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">do</span> something  <span class="token comment">//业务处理</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>       jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//释放锁</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码是可以加锁成功，但是你有没有发现问题，加锁操作和设置超时时间是分开的 。假设在执行完<code>setnx</code>加锁后，正要执行<code>expire</code>设置过期时间时，进程<code>crash</code>掉或者要重启维护了，那这个锁就长生不老 了，别的线程永远获取不到锁啦，所以分布式锁不能这么实现 ！</p><h3 id="3-2-setnx-value值是过期时间"><a href="#3-2-setnx-value值是过期时间" class="headerlink" title="3.2 setnx + value值是过期时间"></a>3.2 setnx + value值是过期时间</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> expires <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expireTime<span class="token punctuation">;</span> <span class="token comment">//系统时间+设置的过期时间</span><span class="token class-name">String</span> expiresStr <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>expires<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果当前锁不存在，返回加锁成功</span><span class="token keyword">if</span> <span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> expiresStr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 如果锁已经存在，获取锁的过期时间</span><span class="token class-name">String</span> currentValueStr <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果获取到的过期时间，小于系统当前时间，表示已经过期</span><span class="token keyword">if</span> <span class="token punctuation">(</span>currentValueStr <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>currentValueStr<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 锁已过期，获取上一个锁的过期时间，并设置现在锁的过期时间（不了解redis的getSet命令的小伙伴，可以去官网看下哈）</span>    <span class="token class-name">String</span> oldValueStr <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">getSet</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> expiresStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValueStr <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> oldValueStr<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>currentValueStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 考虑多线程并发的情况，只有一个线程的设置值和当前值相同，它才可以加锁</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//其他情况，均返回加锁失败</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>日常开发中，有些小伙伴就是这么实现分布式锁的，但是会有这些缺点 ：</p><ul><li> 过期时间是客户端自己生成的，分布式环境下， 每个客户端的时间必须同步。</li><li> 没有保存持有者的唯一标识， 可能被别的客户端释放/解锁 。</li><li> 锁过期的时候，并发多个客户端同时请求过来，都执行了 <code>jedis.getSet()</code>，最终只能有一个客户端加锁成功，但是该客户端锁的过期时间， 可能被别的客户端覆盖。</li></ul><h3 id="3-3-set的扩展命令-set-ex-px-nx"><a href="#3-3-set的扩展命令-set-ex-px-nx" class="headerlink" title="3.3 set的扩展命令(set ex px nx)"></a>3.3 set的扩展命令(set ex px nx)</h3><p>这个命令的几个参数分别表示什么意思呢？跟大家复习一下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">SET key value <span class="token punctuation">[</span>EX seconds<span class="token punctuation">]</span> <span class="token punctuation">[</span>PX milliseconds<span class="token punctuation">]</span> <span class="token punctuation">[</span>NX<span class="token operator">|</span>XX<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li> EX second ：设置键的过期时间为 <code>second</code>秒。</li><li> PX millisecond ：设置键的过期时间为 <code>millisecond</code>毫秒。</li><li> NX ：只在键不存在时，才对键进行设置操作。</li><li> XX ：只在键已经存在时，才对键进行设置操作。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span>（jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> lock_value<span class="token punctuation">,</span> <span class="token string">"NX"</span><span class="token punctuation">,</span> <span class="token string">"EX"</span><span class="token punctuation">,</span> <span class="token number">100</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>）<span class="token punctuation">&#123;</span> <span class="token comment">//加锁</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">do</span> something  <span class="token comment">//业务处理</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>       jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//释放锁</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方案可能存在这样的问题：</p><ul><li> 锁过期释放了，业务还没执行完。</li><li> 锁被别的线程误删。</li></ul><p>有些伙伴可能会有个疑问，就是锁为什么会被别的线程误删 呢？假设并发多线程场景下，线程A获得了锁，但是它没释放锁的话，线程B是获取不到锁的 ，所以按道理它是执行不到加锁下面的代码滴，怎么会导致锁被别的线程误删呢？</p><blockquote><p>假设线程A和B，都想用<code>key</code>加锁，最后A抢到锁加锁成功，但是由于执行业务逻辑的耗时很长，超过了设置的超时时间<code>100s</code>。这时候，Redis就自动释放了<code>key</code>锁。这时候线程B就可以加锁成功了，接下啦，它也执行业务逻辑处理。假设碰巧这时候，A执行完自己的业务逻辑，它就去释放锁，但是它就把B的锁给释放了。</p></blockquote><h3 id="3-4-set-ex-px-nx-校验唯一随机值-再删除"><a href="#3-4-set-ex-px-nx-校验唯一随机值-再删除" class="headerlink" title="3.4 set ex px nx + 校验唯一随机值,再删除"></a>3.4 set ex px nx + 校验唯一随机值,再删除</h3><p>为了解决锁被别的线程误删 问题。可以在<code>set ex px nx</code>的基础上，加上个校验的唯一随机值，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span>（jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> uni_request_id<span class="token punctuation">,</span> <span class="token string">"NX"</span><span class="token punctuation">,</span> <span class="token string">"EX"</span><span class="token punctuation">,</span> <span class="token number">100</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>）<span class="token punctuation">&#123;</span> <span class="token comment">//加锁</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">do</span> something  <span class="token comment">//业务处理</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//判断是不是当前线程加的锁,是才释放</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>uni_request_id<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//释放锁</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，判断当前线程加的锁和释放锁不是一个原子操作 。如果调用<code>jedis.del()</code>释放锁的时候，可能这把锁已经不属于当前客户端 ，会解除他人加的锁。</p><p>一般可以用lua脚本来包一下。lua脚本如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> then    <span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'del'</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">else</span>   <span class="token keyword">return</span> <span class="token number">0</span>end<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式比较不错了，一般情况下，已经可以使用这种实现方式。但是还是存在：锁过期释放了，业务还没执行完的问题 。</p><h3 id="3-5-Redisson"><a href="#3-5-Redisson" class="headerlink" title="3.5 Redisson"></a>3.5 Redisson</h3><p>对于可能存在锁过期释放，业务没执行完 的问题。我们可以稍微把锁过期时间设置长一些，大于正常业务处理时间就好啦。如果你觉得不是很稳，还可以给获得锁的线程，开启一个定时守护线程，每隔一段时间检查锁是否还存在，存在则对锁的过期时间延长，防止锁过期提前释放。</p><p>当前开源框架Redisson解决了这个问题。可以看下Redisson底层原理图：</p><p> <img src="http://markdown.liangtengyu.com:9999/images//image_6ae9d764.png" alt="image_6ae9d764.png"> </p><p>只要线程一加锁成功，就会启动一个<code>watch dog</code>看门狗，它是一个后台线程，会每隔10秒检查一下，如果线程1还持有锁，那么就会不断的延长锁key的生存时间。因此，Redisson就是使用<code>watch dog</code>解决了锁过期释放，业务没执行完问题 。</p><h3 id="3-6-Redisson-RedLock"><a href="#3-6-Redisson-RedLock" class="headerlink" title="3.6 Redisson + RedLock"></a>3.6 Redisson + RedLock</h3><p>前面六种方案都只是基于Redis单机版 的分布式锁讨论，还不是很完美。因为Redis 一般都是集群部署的：</p><p> <img src="http://markdown.liangtengyu.com:9999/images//image_f90141b7.png" alt="image_f90141b7.png"> </p><p>如果线程一在<code>Redis</code>的<code>master</code>节点上拿到了锁，但是加锁的<code>key</code>还没同步到<code>slave</code>节点。恰好这时，<code>master</code>节点发生故障，一个<code>slave</code>节点就会升级为<code>master</code>节点。线程二就可以顺理成章获取同个<code>key</code>的锁啦，但线程一也已经拿到锁了，锁的安全性就没了。</p><p>为了解决这个问题，Redis作者antirez提出一种高级的分布式锁算法：Redlock 。它的核心思想是这样的：</p><blockquote><p>部署多个Redis master，以保证它们不会同时宕掉。并且这些master节点是完全相互独立的，相互之间不存在数据同步。同时，需要确保在这多个master实例上，是与在Redis单实例，使用相同方法来获取和释放锁。</p></blockquote><p>我们假设当前有5个Redis master节点，在5台服务器上面运行这些Redis实例。</p><p> <img src="http://markdown.liangtengyu.com:9999/images//image_669de3e0.png" alt="image_669de3e0.png"> RedLock的实现步骤:</p><ol><li> 获取当前时间，以毫秒为单位。</li><li> 按顺序向5个master节点请求加锁。客户端设置网络连接和响应超时时间，并且超时时间要小于锁的失效时间。（假设锁自动失效时间为10秒，则超时时间一般在5-50毫秒之间,我们就假设超时时间是50ms吧）。如果超时，跳过该master节点，尽快去尝试下一个master节点。</li><li> 客户端使用当前时间减去开始获取锁时间（即步骤1记录的时间），得到获取锁使用的时间。当且仅当超过一半（N/2+1，这里是5/2+1=3个节点）的Redis master节点都获得锁，并且使用的时间小于锁失效时间时，锁才算获取成功。（如上图，10s&gt; 30ms+40ms+50ms+4m0s+50ms）</li><li> 如果取到了锁，key的真正有效时间就变啦，需要减去获取锁所使用的时间。</li><li> 如果获取锁失败（没有在至少N/2+1个master实例取到锁，有或者获取锁时间已经超过了有效时间），客户端要在所有的master节点上解锁（即便有些master节点根本就没有加锁成功，也需要解锁，以防止有些漏网之鱼）。</li></ol><p>简化下步骤就是：</p><ul><li> 按顺序向5个master节点请求加锁</li><li> 根据设置的超时时间来判断，是不是要跳过该master节点。</li><li> 如果大于等于3个节点加锁成功，并且使用的时间小于锁的有效期，即可认定加锁成功啦。</li><li> 如果获取锁失败，解锁！</li></ul><p>Redisson实现了redLock版本的锁 ，有兴趣的小伙伴，可以去了解一下哈~</p><h2 id="4-Zookeeper分布式锁"><a href="#4-Zookeeper分布式锁" class="headerlink" title="4. Zookeeper分布式锁"></a>4. Zookeeper分布式锁</h2><p>在学习Zookeeper分布式锁之前，我们复习一下Zookeeper的节点哈。</p><p>Zookeeper的节点Znode有四种类型：</p><ul><li> 持久节点 ：默认的节点类型。创建节点的客户端与zookeeper断开连接后，该节点依旧存在。</li><li> 持久节点顺序节点 ：所谓顺序节点，就是在创建节点时，Zookeeper根据创建的时间顺序给该节点名称进行编号，持久节点顺序节点就是有顺序的持久节点。</li><li> 临时节点 ：和持久节点相反，当创建节点的客户端与zookeeper断开连接后，临时节点会被删除。</li><li> 临时顺序节点 ：有顺序的临时节点。</li></ul><p>Zookeeper分布式锁实现应用了临时顺序节点 。这里不贴代码啦，来讲下zk分布式锁的实现原理吧。</p><h3 id="4-1-zk获取锁过程"><a href="#4-1-zk获取锁过程" class="headerlink" title="4.1 zk获取锁过程"></a>4.1 zk获取锁过程</h3><p>当第一个客户端请求过来时，Zookeeper客户端会创建一个持久节点<code>locks</code>。如果它（Client1）想获得锁，需要在<code>locks</code>节点下创建一个顺序节点<code>lock1</code>.如图</p><p> <img src="http://markdown.liangtengyu.com:9999/images//image_bd68a96a.png" alt="image_bd68a96a.png"> </p><p>接着，客户端Client1会查找<code>locks</code>下面的所有临时顺序子节点，判断自己的节点<code>lock1</code>是不是排序最小的那一个，如果是，则成功获得锁。</p><p> <img src="http://markdown.liangtengyu.com:9999/images//image_d2f64ca3.png" alt="image_d2f64ca3.png"> </p><p>这时候如果又来一个客户端client2前来尝试获得锁，它会在locks下再创建一个临时节点<code>lock2</code></p><p> <img src="http://markdown.liangtengyu.com:9999/images//image_071b7d88.png" alt="image_071b7d88.png"> </p><p>客户端client2一样也会查找locks下面的所有临时顺序子节点，判断自己的节点lock2是不是最小的，此时，发现lock1才是最小的，于是获取锁失败。获取锁失败，它是不会甘心的，client2向它排序靠前的节点lock1注册Watcher事件，用来监听lock1是否存在，也就是说client2抢锁失败进入等待状态。</p><p> <img src="http://markdown.liangtengyu.com:9999/images//image_b489bef9.png" alt="image_b489bef9.png"> </p><p>此时，如果再来一个客户端Client3来尝试获取锁，它会在locks下再创建一个临时节点lock3</p><p> <img src="http://markdown.liangtengyu.com:9999/images//image_aa38b5f6.png" alt="image_aa38b5f6.png"> 同样的，client3一样也会查找locks下面的所有临时顺序子节点，判断自己的节点lock3是不是最小的，发现自己不是最小的，就获取锁失败。它也是不会甘心的，它会向在它前面的节点lock2注册Watcher事件，以监听lock2节点是否存在。</p><p> <img src="http://markdown.liangtengyu.com:9999/images//image_1cec9bce.png" alt="image_1cec9bce.png"> </p><h3 id="4-2-释放锁"><a href="#4-2-释放锁" class="headerlink" title="4.2 释放锁"></a>4.2 释放锁</h3><p>我们再来看看释放锁的流程，Zookeeper的客户端业务完成或者发生故障，都会删除临时节点，释放锁。如果是任务完成，Client1会显式调用删除lock1的指令</p><p> <img src="http://markdown.liangtengyu.com:9999/images//image_93a8ea85.png" alt="image_93a8ea85.png"> </p><p>如果是客户端故障了，根据临时节点得特性，lock1是会自动删除的</p><p> <img src="http://markdown.liangtengyu.com:9999/images//image_e929ee6e.png" alt="image_e929ee6e.png"> </p><p>lock1节点被删除后，Client2可开心了，因为它一直监听着lock1。lock1节点删除，Client2立刻收到通知，也会查找locks下面的所有临时顺序子节点，发下lock2是最小，就获得锁。</p><p> <img src="http://markdown.liangtengyu.com:9999/images//image_5b5c8168.png" alt="image_5b5c8168.png"> </p><p>同理，Client2获得锁之后，Client3也对它虎视眈眈，啊哈哈~</p><ul><li> Zookeeper设计定位就是分布式协调，简单易用。如果获取不到锁，只需添加一个监听器即可，很适合做分布式锁。</li><li> Zookeeper作为分布式锁也缺点：如果有很多的客户端频繁的申请加锁、释放锁，对于Zookeeper集群的压力会比较大。</li></ul><h2 id="5-三种分布式锁对比"><a href="#5-三种分布式锁对比" class="headerlink" title="5. 三种分布式锁对比"></a>5. 三种分布式锁对比</h2><h3 id="5-1-数据库分布式锁实现"><a href="#5-1-数据库分布式锁实现" class="headerlink" title="5.1 数据库分布式锁实现"></a>5.1 数据库分布式锁实现</h3><p>优点：</p><ul><li> 简单，使用方便，不需要引入 <code>Redis、zookeeper</code>等中间件。</li></ul><p>缺点：</p><ul><li> 不适合高并发的场景</li><li> db操作性能较差；</li></ul><h3 id="5-2-Redis分布式锁实现"><a href="#5-2-Redis分布式锁实现" class="headerlink" title="5.2 Redis分布式锁实现"></a>5.2 Redis分布式锁实现</h3><p>优点：</p><ul><li> 性能好，适合高并发场景</li><li> 较轻量级</li><li> 有较好的框架支持，如Redisson</li></ul><p>缺点：</p><ul><li> 过期时间不好控制</li><li> 需要考虑锁被别的线程误删场景</li></ul><h3 id="5-3-Zookeeper分布式锁实现"><a href="#5-3-Zookeeper分布式锁实现" class="headerlink" title="5.3 Zookeeper分布式锁实现"></a>5.3 Zookeeper分布式锁实现</h3><p>缺点：</p><ul><li> 性能不如redis实现的分布式锁</li><li> 比较重的分布式锁。</li></ul><p>优点：</p><ul><li> 有较好的性能和可靠性</li><li> 有封装较好的框架，如Curator</li></ul><h3 id="5-4-对比汇总"><a href="#5-4-对比汇总" class="headerlink" title="5.4 对比汇总"></a>5.4 对比汇总</h3><ul><li> 从性能角度（从高到低）Redis &gt; Zookeeper &gt;= 数据库；</li><li> 从理解的难易程度角度（从低到高）数据库 &gt; Redis &gt; Zookeeper；</li><li> 从实现的复杂性角度（从低到高）Zookeeper &gt; Redis &gt; 数据库；</li><li> 从可靠性角度（从高到低）Zookeeper &gt; Redis &gt; 数据库。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列原理和选型</title>
      <link href="/2022/11/08/xiao-xi-dui-lie-yuan-li-he-xuan-xing/"/>
      <url>/2022/11/08/xiao-xi-dui-lie-yuan-li-he-xuan-xing/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/11/08/xiao-xi-dui-lie-yuan-li-he-xuan-xing/image_97d0e8f2.png" alt="image_97d0e8f2.png"></p><p>消息队列中间件重要吗？面试必问问题之一，你说重不重要。我有时会问同事，为啥你用 RabbitMQ，不用 Kafka，或者 RocketMQ 呢，他给我的回答 “因为公司用的就是这个，大家都这么用”，如果你去面试，直接就被 Pass，今天这篇文章，告诉你如何回答。</p><p>这篇文章，我重点突出消息队列选型，弱化每种队列内部的实现细节，精华提炼，可读性更强！</p><p>常用的消息队列主要这 4 种，分别为 Kafka、RabbitMQ、RocketMQ 和 ActiveMQ，主要介绍前三，不BB，上思维导图！</p><p><img src="/2022/11/08/xiao-xi-dui-lie-yuan-li-he-xuan-xing/image_a36c2593.png" alt="image_a36c2593.png"></p><h2 id="消息队列基础"><a href="#消息队列基础" class="headerlink" title="消息队列基础"></a>消息队列基础</h2><h3 id="什么是消息队列？"><a href="#什么是消息队列？" class="headerlink" title="什么是消息队列？"></a>什么是消息队列？</h3><p>消息队列是在消息的传输过程中保存消息的容器，用于接收消息并以文件的方式存储，一个消息队列可以被一个也可以被多个消费者消费，包含以下 3 元素：</p><ul><li> Producer：消息生产者，负责产生和发送消息到 Broker；</li><li> Broker：消息处理中心，负责消息存储、确认、重试等，一般其中会包含多个 Queue；</li><li> Consumer：消息消费者，负责从 Broker 中获取消息，并进行相应处理。</li></ul><p><img src="/2022/11/08/xiao-xi-dui-lie-yuan-li-he-xuan-xing/image_6d065553.png" alt="image_6d065553.png"></p><h3 id="消息队列模式"><a href="#消息队列模式" class="headerlink" title="消息队列模式"></a>消息队列模式</h3><ul><li> 点对点模式：多个生产者可以向同一个消息队列发送消息，一个具体的消息只能由一个消费者消费。</li></ul><p><img src="/2022/11/08/xiao-xi-dui-lie-yuan-li-he-xuan-xing/image_d1df2887.png" alt="image_d1df2887.png"></p><ul><li> 发布/订阅模式：单个消息可以被多个订阅者并发的获取和处理。</li></ul><p><img src="/2022/11/08/xiao-xi-dui-lie-yuan-li-he-xuan-xing/image_175157f1.png" alt="image_175157f1.png"></p><h3 id="消息队列应用场景"><a href="#消息队列应用场景" class="headerlink" title="消息队列应用场景"></a>消息队列应用场景</h3><ul><li> 应用解耦 ：消息队列减少了服务之间的耦合性，不同的服务可以通过消息队列进行通信，而不用关心彼此的实现细节。</li><li> 异步处理 ：消息队列本身是异步的，它允许接收者在消息发送很长时间后再取回消息。</li><li> 流量削锋 ：当上下游系统处理能力存在差距的时候，利用消息队列做一个通用的”载体”，在下游有能力处理的时候，再进行分发与处理。</li><li> 日志处理 ：日志处理是指将消息队列用在日志处理中，比如 Kafka 的应用，解决大量日志传输的问题。</li><li> 消息通讯 ：消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯，比如实现点对点消息队列，或者聊天室等。</li><li> 消息广播 ：如果没有消息队列，每当一个新的业务方接入，我们都要接入一次新接口。有了消息队列，我们只需要关心消息是否送达了队列，至于谁希望订阅，是下游的事情，无疑极大地减少了开发和联调的工作量。</li></ul><h2 id="常用消息队列"><a href="#常用消息队列" class="headerlink" title="常用消息队列"></a>常用消息队列</h2><p>由于官方社区现在对 ActiveMQ 5.x 维护越来越少，较少在大规模吞吐的场景中使用，所以我们主要讲解 Kafka、RabbitMQ 和 RocketMQ。</p><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><p>Apache Kafka 最初由 LinkedIn 公司基于独特的设计实现为一个分布式的提交日志系统，之后成为 Apache 项目的一部分，号称大数据的杀手锏，在数据采集、传输、存储的过程中发挥着举足轻重的作用。</p><p>它是一个分布式的，支持多分区、多副本，基于 Zookeeper 的分布式消息流平台 ，它同时也是一款开源的基于发布订阅模式的消息引擎系统。</p><h4 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h4><ul><li> 主题（Topic） ：消息的种类称为主题，可以说一个主题代表了一类消息，相当于是对消息进行分类，主题就像是数据库中的表。</li><li> 分区（partition） ：主题可以被分为若干个分区，同一个主题中的分区可以不在一个机器上，有可能会部署在多个机器上，由此来实现 kafka 的伸缩性。</li><li> 批次 ：为了提高效率， 消息会分批次写入 Kafka，批次就代指的是一组消息。</li><li> 消费者群组（Consumer Group） ：消费者群组指的就是由一个或多个消费者组成的群体。</li><li> Broker : 一个独立的 Kafka 服务器就被称为 broker，broker 接收来自生产者的消息，为消息设置偏移量，并提交消息到磁盘保存。</li><li> Broker 集群 ：broker 集群由一个或多个 broker 组成。</li><li> 重平衡（Rebalance） ：消费者组内某个消费者实例挂掉后，其他消费者实例自动重新分配订阅主题分区的过程。</li></ul><h4 id="Kafka-架构"><a href="#Kafka-架构" class="headerlink" title="Kafka 架构"></a>Kafka 架构</h4><p>一个典型的 Kafka 集群中包含 Producer、broker、Consumer Group、Zookeeper 集群。</p><p>Kafka 通过 Zookeeper 管理集群配置，选举 leader，以及在 Consumer Group 发生变化时进行 rebalance。Producer 使用 push 模式将消息发布到 broker，Consumer 使用 pull 模式从 broker 订阅并消费消息。</p><p><img src="/2022/11/08/xiao-xi-dui-lie-yuan-li-he-xuan-xing/image_0325f376.png" alt="image_0325f376.png"></p><h4 id="Kafka-工作原理"><a href="#Kafka-工作原理" class="headerlink" title="Kafka 工作原理"></a>Kafka 工作原理</h4><p>消息经过序列化后，通过不同的分区策略，找到对应的分区。</p><p>相同主题和分区的消息，会被存放在同一个批次里 ，然后由一个独立的线程负责把它们发到 Kafka Broker 上。</p><p><img src="/2022/11/08/xiao-xi-dui-lie-yuan-li-he-xuan-xing/image_ae0ce795.png" alt="image_ae0ce795.png"></p><p>分区的策略包括顺序轮询、随机轮询和 key hash 这 3 种方式，那什么是分区呢？</p><p>分区是 Kafka 读写数据的最小粒度，比如主题 A 有 15 条消息，有 5 个分区，如果采用顺序轮询的方式，15 条消息会顺序分配给这 5 个分区，后续消费的时候，也是按照分区粒度消费。</p><p><img src="/2022/11/08/xiao-xi-dui-lie-yuan-li-he-xuan-xing/image_0eb903df.png" alt="image_0eb903df.png"></p><p>由于分区可以部署在多个不同的机器上，所以可以通过分区实现 Kafka 的伸缩性，比如主题 A 的 5 个分区，分别部署在 5 台机器上，如果下线一台，分区就变为 4。</p><p>Kafka 消费是通过消费群组完成，同一个消费者群组，一个消费者可以消费多个分区，但是一个分区，只能被一个消费者消费。</p><p><img src="/2022/11/08/xiao-xi-dui-lie-yuan-li-he-xuan-xing/image_c57014d0.png" alt="image_c57014d0.png"></p><p>如果消费者增加，会触发 Rebalance，也就是分区和消费者需要重新配对 。</p><p>不同的消费群组互不干涉 ，比如下图的 2 个消费群组，可以分别消费这 4 个分区的消息，互不影响。</p><p><img src="/2022/11/08/xiao-xi-dui-lie-yuan-li-he-xuan-xing/image_14d8f72e.png" alt="image_14d8f72e.png"></p><h3 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h3><p>RocketMQ 是阿里开源的消息中间件，它是纯 Java 开发，具有高性能、高可靠、高实时、适合大规模分布式系统应用的特点。</p><p>RocketMQ 思路起源于 Kafka，但并不是 Kafka 的一个 Copy，它对消息的可靠传输及事务性做了优化 ，目前在阿里集团被广泛应用于交易、充值、流计算、消息推送、日志流式处理、binlog 分发等场景。</p><h4 id="重要概念-1"><a href="#重要概念-1" class="headerlink" title="重要概念"></a>重要概念</h4><ul><li> Name 服务器（NameServer） ：充当注册中心，类似 Kafka 中的 Zookeeper。</li><li> Broker : 一个独立的 RocketMQ 服务器就被称为 broker，broker 接收来自生产者的消息，为消息设置偏移量。</li><li> 主题（Topic） ：消息的第一级类型，一条消息必须有一个 Topic。</li><li> 子主题（Tag） ：消息的第二级类型，同一业务模块不同目的的消息就可以用相同 Topic 和不同的 Tag 来标识。</li><li> 分组（Group） ：一个组可以订阅多个 Topic，包括生产者组（Producer Group）和消费者组（Consumer Group）。</li><li> 队列（Queue） ：可以类比 Kafka 的分区 Partition。</li></ul><h4 id="RocketMQ-工作原理"><a href="#RocketMQ-工作原理" class="headerlink" title="RocketMQ 工作原理"></a>RocketMQ 工作原理</h4><p>RockerMQ 中的消息模型就是按照主题模型所实现的，包括 Producer Group、Topic、Consumer Group 三个角色。</p><p>为了提高并发能力，一个 Topic 包含多个 Queue ，生产者组根据主题将消息放入对应的 Topic，下图是采用轮询的方式找到里面的 Queue。</p><p>RockerMQ 中的消费群组和 Queue，可以类比 Kafka 中的消费群组和 Partition：不同的消费者组互不干扰，一个 Queue 只能被一个消费者消费，一个消费者可以消费多个 Queue。</p><p>消费 Queue 的过程中，通过偏移量记录消费的位置。</p><p><img src="/2022/11/08/xiao-xi-dui-lie-yuan-li-he-xuan-xing/image_de577e1c.png" alt="image_de577e1c.png"></p><h4 id="RocketMQ-架构"><a href="#RocketMQ-架构" class="headerlink" title="RocketMQ 架构"></a>RocketMQ 架构</h4><p>RocketMQ 技术架构中有四大角色 NameServer、Broker、Producer 和 Consumer，下面主要介绍 Broker。</p><p>Broker 用于存放 Queue，一个 Broker 可以配置多个 Topic，一个 Topic 中存在多个 Queue。</p><p>如果某个 Topic 消息量很大，应该给它多配置几个 Queue，并且尽量多分布在不同 broker 上，以减轻某个 broker 的压力。Topic 消息量都比较均匀的情况下，如果某个 broker 上的队列越多，则该 broker 压力越大。</p><p><img src="/2022/11/08/xiao-xi-dui-lie-yuan-li-he-xuan-xing/image_9ea86f58.png" alt="image_9ea86f58.png"></p><p>简单提一下，Broker 通过集群部署，并且提供了 master/slave 的结构，slave 定时从 master 同步数据（同步刷盘或者异步刷盘），如果 master 宕机，则 slave 提供消费服务，但是不能写入消息。</p><p>看到这里，大家应该可以发现，RocketMQ 的设计和 Kafka 真的很像！</p><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p>RabbitMQ 2007 年发布，是使用 Erlang 语言开发的开源消息队列系统，基于 AMQP 协议来实现。</p><p>AMQP 的主要特征是面向消息、队列、路由、可靠性、安全。AMQP 协议更多用在企业系统内，对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在其次。</p><h4 id="重要概念-2"><a href="#重要概念-2" class="headerlink" title="重要概念"></a>重要概念</h4><ul><li> 信道（Channel） ：消息读写等操作在信道中进行，客户端可以建立多个信道，每个信道代表一个会话任务。</li><li> 交换器（Exchange） ：接收消息，按照路由规则将消息路由到一个或者多个队列；如果路由不到，或者返回给生产者，或者直接丢弃。</li><li> 路由键（RoutingKey） ：生产者将消息发送给交换器的时候，会发送一个 RoutingKey，用来指定路由规则，这样交换器就知道把消息发送到哪个队列。</li><li> 绑定（Binding） ：交换器和消息队列之间的虚拟连接，绑定中可以包含一个或者多个 RoutingKey。</li></ul><h4 id="RabbitMQ-工作原理"><a href="#RabbitMQ-工作原理" class="headerlink" title="RabbitMQ 工作原理"></a>RabbitMQ 工作原理</h4><p>AMQP 协议模型由三部分组成：生产者、消费者和服务端，执行流程如下：</p><ol><li> 生产者是连接到 Server，建立一个连接，开启一个信道。</li><li> 生产者声明交换器和队列，设置相关属性，并通过路由键将交换器和队列进行绑定。</li><li> 消费者也需要进行建立连接，开启信道等操作，便于接收消息。</li><li> 生产者发送消息，发送到服务端中的虚拟主机。</li><li> 虚拟主机中的交换器根据路由键选择路由规则，发送到不同的消息队列中。</li><li> 订阅了消息队列的消费者就可以获取到消息，进行消费。</li></ol><p><img src="/2022/11/08/xiao-xi-dui-lie-yuan-li-he-xuan-xing/image_ea5d47d1.png" alt="image_ea5d47d1.png"></p><h4 id="常用交换器"><a href="#常用交换器" class="headerlink" title="常用交换器"></a>常用交换器</h4><p>RabbitMQ 常用的交换器类型有 direct、topic、fanout、headers 四种。</p><p>具体的使用方法，可以参考官网：</p><ul><li> 官网入口：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></li></ul><p><img src="/2022/11/08/xiao-xi-dui-lie-yuan-li-he-xuan-xing/image_8b2ddfc9.png" alt="image_8b2ddfc9.png"></p><h2 id="消息队列对比-amp-选型"><a href="#消息队列对比-amp-选型" class="headerlink" title="消息队列对比&amp;选型"></a>消息队列对比&amp;选型</h2><p><img src="/2022/11/08/xiao-xi-dui-lie-yuan-li-he-xuan-xing/image_743e1430.png" alt="image_743e1430.png"></p><h3 id="消息队列对比"><a href="#消息队列对比" class="headerlink" title="消息队列对比"></a>消息队列对比</h3><h4 id="Kafka-1"><a href="#Kafka-1" class="headerlink" title="Kafka"></a>Kafka</h4><p>优点：</p><ul><li> 高吞吐、低延迟 ：Kafka 最大的特点就是收发消息非常快，Kafka 每秒可以处理几十万条消息，它的最低延迟只有几毫秒；</li><li> 高伸缩性 ：每个主题（topic）包含多个分区（partition），主题中的分区可以分布在不同的主机（broker）中；</li><li> 高稳定性 ：Kafka 是分布式的，一个数据多个副本，某个节点宕机，Kafka 集群能够正常工作；</li><li> 持久性、可靠性、可回溯 ：Kafka 能够允许数据的持久化存储，消息被持久化到磁盘，并支持数据备份防止数据丢失，支持消息回溯；</li><li> 消息有序：通过控制能够保证所有消息被消费且仅被消费一次；</li><li> 有优秀的第三方 Kafka Web 管理界面 Kafka-Manager，在日志领域比较成熟，被多家公司和多个开源项目使用。</li></ul><p>缺点：</p><ul><li> Kafka 单机超过 64 个队列/分区，Load 会发生明显的飙高现象，队列越多，load 越高，发送消息响应时间变长；</li><li> 不支持消息路由，不支持延迟发送，不支持消息重试；</li><li> 社区更新较慢。</li></ul><h4 id="RocketMQ-1"><a href="#RocketMQ-1" class="headerlink" title="RocketMQ"></a>RocketMQ</h4><p>优点：</p><ul><li> 高吞吐 ：借鉴 Kafka 的设计，单一队列百万消息的堆积能力；</li><li> 高伸缩性 ：灵活的分布式横向扩展部署架构，整体架构其实和 kafka 很像；</li><li> 高容错性 ：通过ACK机制，保证消息一定能正常消费；</li><li> 持久化、可回溯 ：消息可以持久化到磁盘中，支持消息回溯；</li><li> 消息有序：在一个队列中可靠的先进先出（FIFO）和严格的顺序传递；</li><li> 支持发布/订阅和点对点消息模型，支持拉、推两种消息模式；</li><li> 提供 docker 镜像用于隔离测试和云集群部署，提供配置、指标和监控等功能丰富的 Dashboard。</li></ul><p>缺点：</p><ul><li> 不支持消息路由， 支持的客户端语言不多，目前是 java 及 c++，其中 c++ 不成熟 ；</li><li> 部分支持消息有序：需要将同一类的消息 hash 到同一个队列 Queue 中，才能支持消息的顺序，如果同一类消息散落到不同的 Queue中，就不能支持消息的顺序。</li><li> 社区活跃度一般。</li></ul><h4 id="RabbitMQ-1"><a href="#RabbitMQ-1" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><p>优点：</p><ul><li> 支持几乎所有最受欢迎的编程语言 ：Java，C，C ++，C＃，Ruby，Perl，Python，PHP等等；</li><li> 支持消息路由 ：RabbitMQ 可以通过不同的交换器支持不同种类的消息路由；</li><li> 消息时序 ：通过延时队列，可以指定消息的延时时间，过期时间TTL等；</li><li> 支持容错处理：通过交付重试和死信交换器（DLX）来处理消息处理故障；</li><li> 提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker；</li><li> 社区活跃度高。</li></ul><p>缺点：</p><ul><li> Erlang 开发，很难去看懂源码，不利于做二次开发和维护 ，基本只能依赖于开源社区的快速维护和修复 bug；</li><li> RabbitMQ 吞吐量会低一些 ，这是因为他做的实现机制比较重；</li><li> 不支持消息有序、持久化不好、不支持消息回溯、伸缩性一般。</li></ul><h3 id="消息队列选型"><a href="#消息队列选型" class="headerlink" title="消息队列选型"></a>消息队列选型</h3><ul><li> Kafka：追求高吞吐量，一开始的目的就是用于日志收集和传输， 适合产生大量数据的互联网服务的数据收集业务 ，大型公司建议可以选用， 如果有日志采集功能，肯定是首选 kafka。</li><li> RocketMQ： 天生为金融互联网领域而生，对于可靠性要求很高的场景 ，尤其是电商里面的订单扣款，以及业务削峰，在大量交易涌入时，后端可能无法及时处理的情况。RocketMQ 在稳定性上可能更值得信赖，这些业务场景在阿里双 11 已经经历了多次考验， 如果你的业务有上述并发场景，建议可以选择 RocketMQ。</li><li> RabbitMQ：结合 erlang 语言本身的并发优势，性能较好，社区活跃度也比较高，但是不利于做二次开发和维护，不过 RabbitMQ 的社区十分活跃，可以解决开发过程中遇到的 bug。 如果你的数据量没有那么大，小公司优先选择功能比较完备的 RabbitMQ。</li><li> ActiveMQ：官方社区现在对 ActiveMQ 5.x 维护越来越少， 较少在大规模吞吐的场景中使用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java面试 </tag>
            
            <tag> mq </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见代码重构技巧</title>
      <link href="/2022/11/08/chang-jian-dai-ma-chong-gou-ji-qiao/"/>
      <url>/2022/11/08/chang-jian-dai-ma-chong-gou-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="关于重构"><a href="#关于重构" class="headerlink" title="关于重构"></a>关于重构</h1><h2 id="为什么要重构"><a href="#为什么要重构" class="headerlink" title="为什么要重构"></a>为什么要重构</h2><p><img src="/2022/11/08/chang-jian-dai-ma-chong-gou-ji-qiao/image_83d6de95-20221108095355418.png" alt="image_83d6de95.png"> 1_代码重构漫画.jpeg</p><p>项目在不断演进过程中，代码不停地在堆砌。如果没有人为代码的质量负责，代码总是会往越来越混乱的方向演进。当混乱到一定程度之后，量变引起质变，项目的维护成本已经高过重新开发一套新代码的成本，想要再去重构，已经没有人能做到了。</p><p>造成这样的原因往往有以下几点：</p><ol><li> 编码之前缺乏有效的设计</li><li> 成本上的考虑，在原功能堆砌式编程</li><li> 缺乏有效代码质量监督机制</li></ol><p>对于此类问题，业界已有有很好的解决思路：通过持续不断的重构将代码中的“坏味道”清除掉。</p><h2 id="什么是重构"><a href="#什么是重构" class="headerlink" title="什么是重构"></a>什么是重构</h2><p>重构一书的作者Martin Fowler对重构的定义：</p><blockquote><p>重构（名词）：对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。<br>重构（动词）：使用一系列重构手法，在不改变软件可观察行为的前提下，调整其结构。</p></blockquote><p>根据重构的规模可以大致分为大型重构和小型重构：</p><p>大型重构：对顶层代码设计的重构，包括：系统、模块、代码结构、类与类之间的关系等的重构，重构的手段有：分层、模块化、解耦、抽象可复用组件等等。这类重构的工具就是我们学习过的那些设计思想、原则和模式。这类重构涉及的代码改动会比较多，影响面会比较大，所以难度也较大，耗时会比较长，引入bug的风险也会相对比较大。</p><p>小型重构：对代码细节的重构，主要是针对类、函数、变量等代码级别的重构，比如规范命名和注释、消除超大类或函数、提取重复代码等等。小型重构更多的是使用统一的编码规范。这类重构要修改的地方比较集中，比较简单，可操作性较强，耗时会比较短，引入bug的风险相对来说也会比较小。什么时候重构 新功能开发、修bug或者代码review中出现“代码坏味道”，我们就应该及时进行重构。持续在日常开发中进行小重构，能够降低重构和测试的成本。</p><h1 id="代码的坏味道"><a href="#代码的坏味道" class="headerlink" title="代码的坏味道"></a>代码的坏味道</h1><p><img src="/2022/11/08/chang-jian-dai-ma-chong-gou-ji-qiao/image_047389be-20221108095355455.png" alt="image_047389be.png"> 2_代码常见问题.png</p><p>代码重复</p><ul><li> 实现逻辑相同、执行流程相同</li></ul><p>方法过长</p><ul><li> 方法中的语句不在同一个抽象层级</li><li> 逻辑难以理解，需要大量的注释</li><li> 面向过程编程而非面向对象</li></ul><p>过大的类</p><ul><li> 类做了太多的事情</li><li> 包含过多的实例变量和方法</li><li> 类的命名不足以描述所做的事情</li></ul><p>逻辑分散</p><ul><li> 发散式变化：某个类经常因为不同的原因在不同的方向上发生变化</li><li> 散弹式修改：发生某种变化时，需要在多个类中做修改</li></ul><p>严重的情结依恋</p><ul><li> 某个类的方法过多的使用其他类的成员</li></ul><p>数据泥团/基本类型偏执</p><ul><li> 两个类、方法签名中包含相同的字段或参数</li><li> 应该使用类但使用基本类型，比如表示数值与币种的Money类、起始值与结束值的Range类</li></ul><p>不合理的继承体系</p><ul><li> 继承打破了封装性，子类依赖其父类中特定功能的实现细节</li><li> 子类必须跟着其父类的更新而演变，除非父类是专门为了扩展而设计，并且有很好的文档说明</li></ul><p>过多的条件判断</p><p>过长的参数列</p><p>临时变量过多</p><p>令人迷惑的暂时字段</p><ul><li> 某个实例变量仅为某种特定情况而设置</li><li> 将实例变量与相应的方法提取到新的类中</li></ul><p>纯数据类</p><ul><li> 仅包含字段和访问（读写）这些字段的方法</li><li> 此类被称为数据容器，应保持最小可变性</li></ul><p>不恰当的命名</p><ul><li> 命名无法准确描述做的事情</li><li> 命名不符合约定俗称的惯例</li></ul><p>过多的注释</p><h2 id="坏代码的问题"><a href="#坏代码的问题" class="headerlink" title="坏代码的问题"></a>坏代码的问题</h2><ul><li> 难以复用</li><li> 系统关联性过多，导致很难分离可重用部分</li><li> 难于变化</li><li> 一处变化导致其他很多部分的修改，不利于系统稳定</li><li> 难于理解</li><li> 命名杂乱，结构混乱，难于阅读和理解</li><li> 难以测试</li><li> 分支、依赖较多，难以覆盖全面</li></ul><h2 id="什么是好代码"><a href="#什么是好代码" class="headerlink" title="什么是好代码"></a>什么是好代码</h2><p><img src="/2022/11/08/chang-jian-dai-ma-chong-gou-ji-qiao/image_d67b805c-20221108095355391.png" alt="image_d67b805c.png"> 3_代码质量如何衡量.jpg</p><p>代码质量的评价有很强的主观性，描述代码质量的词汇也有很多，比如可读性、可维护性、灵活、优雅、简洁。这些词汇是从不同的维度去评价代码质量的。其中，可维护性、可读性、可扩展性又是提到最多的、最重要的三个评价标准。</p><p>要写出高质量代码，我们就需要掌握一些更加细化、更加能落地的编程方法论，这就包含面向对象设计思想、设计原则、设计模式、编码规范、重构技巧等。</p><h1 id="如何重构"><a href="#如何重构" class="headerlink" title="如何重构"></a>如何重构</h1><h2 id="SOLID原则"><a href="#SOLID原则" class="headerlink" title="SOLID原则"></a>SOLID原则</h2><p><img src="/2022/11/08/chang-jian-dai-ma-chong-gou-ji-qiao/image_f864e546-20221108095355479.png" alt="image_f864e546.png"> 4_SOLID原则.png</p><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>一个类只负责完成一个职责或者功能，不要存在多于一种导致类变更的原因。</p><p>单一职责原则通过避免设计大而全的类，避免将不相关的功能耦合在一起，来提高类的内聚性。同时，类职责单一，类依赖的和被依赖的其他类也会变少，减少了代码的耦合性，以此来实现代码的高内聚、松耦合。但是，如果拆分得过细，实际上会适得其反，反倒会降低内聚性，也会影响代码的可维护性。</p><h3 id="开放-关闭原则"><a href="#开放-关闭原则" class="headerlink" title="开放-关闭原则"></a>开放-关闭原则</h3><p>添加一个新的功能，应该是通过在已有代码基础上扩展代码（新增模块、类、方法、属性等），而非修改已有代码（修改模块、类、方法、属性等）的方式来完成。</p><p>开闭原则并不是说完全杜绝修改，而是以最小的修改代码的代价来完成新功能的开发。</p><p>很多设计原则、设计思想、设计模式，都是以提高代码的扩展性为最终目的的。特别是 23 种经典设计模式，大部分都是为了解决代码的扩展性问题而总结出来的，都是以开闭原则为指导原则的。最常用来提高代码扩展性的方法有：多态、依赖注入、基于接口而非实现编程，以及大部分的设计模式（比如，装饰、策略、模板、职责链、状态）。</p><h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><p>子类对象（object of subtype/derived class）能够替换程序（program）中父类对象（object of base/parent class）出现的任何地方，并且保证原来程序的逻辑行为（behavior）不变及正确性不被破坏。</p><p>子类可以扩展父类的功能，但不能改变父类原有的功能</p><blockquote><p>父类中凡是已经实现好的方法（相对于抽象方法而言），实际上是在设定一系列的规范和契约，虽然它不强制要求所有的子类必须遵从这些契约，但是如果子类对这些非抽象方法任意修改，就会对整个继承体系造成破坏。</p></blockquote><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>调用方不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。接口隔离原则提供了一种判断接口的职责是否单一的标准：通过调用者如何使用接口来间接地判定。如果调用者只使用部分接口或接口的部分功能，那接口的设计就不够职责单一。</p><h3 id="依赖反转原则"><a href="#依赖反转原则" class="headerlink" title="依赖反转原则"></a>依赖反转原则</h3><p>高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。</p><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><p>一个对象应该对其他对象保持最少的了解</p><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><p>尽量使用合成/聚合的方式，而不是使用继承。</p><p>单一职责原则告诉我们实现类要职责单一；里氏替换原则告诉我们不要破坏继承体系；依赖倒置原则告诉我们要面向接口编程；接口隔离原则告诉我们在设计接口的时候要精简单一；迪米特法则告诉我们要降低耦合。而开闭原则是总纲，告诉我们要对扩展开放，对修改关闭。</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><blockquote><p>设计模式：软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案。</p></blockquote><ul><li> 创建型：主要解决对象的创建问题，封装复杂的创建过程，解耦对象的创建代码和使用代码</li><li> 结构型：主要通过类或对象的不同组合，解耦不同功能的耦合</li><li> 行为型：主要解决的是类或对象之间的交互行为的耦合</li></ul><p><img src="/2022/11/08/chang-jian-dai-ma-chong-gou-ji-qiao/image_9db0426b-20221108095355436.png" alt="image_9db0426b.png"><img src="/2022/11/08/chang-jian-dai-ma-chong-gou-ji-qiao/image_41c09a5c.png" alt="image_41c09a5c.png"><img src="/2022/11/08/chang-jian-dai-ma-chong-gou-ji-qiao/image_2c6e506b.png" alt="image_2c6e506b.png"><img src="/2022/11/08/chang-jian-dai-ma-chong-gou-ji-qiao/image_8fa858cb.png" alt="image_8fa858cb.png"></p><h2 id="代码分层"><a href="#代码分层" class="headerlink" title="代码分层"></a>代码分层</h2><p><img src="/2022/11/08/chang-jian-dai-ma-chong-gou-ji-qiao/image_598a46ba.png" alt="image_598a46ba.png"> image.png</p><p>模块结构说明</p><ul><li> server_main：配置层，负责整个项目的module管理，maven配置管理、资源管理等；</li><li> server_application：应用接入层，承接外部流量入口，例如：RPC接口实现、消息处理、定时任务等；不要在此包含业务逻辑；</li><li> server_biz：核心业务层，用例服务、领域实体、领域事件等</li><li> server_irepository：资源接口层，负责资源接口的暴露</li><li> server_repository：资源层，负责资源的proxy访问，统一外部资源访问，隔离变化。注意：这里强调的是弱业务性，强数据性；</li><li> server_common：公共层，vo、工具等</li></ul><p>代码开发要遵守各层的规范，并注意层级之间的依赖关系。</p><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><blockquote><p>一个好的命名应该要满足以下两个约束：</p><ul><li> 准确描述所做得事情</li><li> 格式符合通用的惯例</li></ul><p>如果你觉得一个类或方法难以命名的时候，可能是其承载的功能太多了，需要进一步拆分。</p></blockquote><h3 id="约定俗称的惯例"><a href="#约定俗称的惯例" class="headerlink" title="约定俗称的惯例"></a>约定俗称的惯例</h3><p><img src="/2022/11/08/chang-jian-dai-ma-chong-gou-ji-qiao/image_ff852d0e.png" alt="image_ff852d0e.png"></p><h3 id="类命名"><a href="#类命名" class="headerlink" title="类命名"></a>类命名</h3><blockquote><p>类名使用大驼峰命名形式，类命通常使用名词或名词短语。接口名除了用名词和名词短语以外，还可以使用形容词或形容词短语，如 Cloneable，Callable 等，表示实现该接口的类有某种功能或能力。</p></blockquote><p><img src="/2022/11/08/chang-jian-dai-ma-chong-gou-ji-qiao/image_83a6a12c.png" alt="image_83a6a12c.png"></p><h3 id="方法命名"><a href="#方法命名" class="headerlink" title="方法命名"></a>方法命名</h3><blockquote><p>方法命名采用小驼峰的形式，首字小写，往后的每个单词首字母都要大写。和类名不同的是，方法命名一般为动词或动词短语，与参数或参数名共同组成动宾短语，即动词 + 名词。一个好的函数名一般能通过名字直接获知该函数实现什么样的功能。</p></blockquote><p><img src="/2022/11/08/chang-jian-dai-ma-chong-gou-ji-qiao/image_450be2e5.png" alt="image_450be2e5.png"></p><h2 id="重构技巧"><a href="#重构技巧" class="headerlink" title="重构技巧"></a>重构技巧</h2><h3 id="提炼方法"><a href="#提炼方法" class="headerlink" title="提炼方法"></a>提炼方法</h3><p>多个方法代码重复、方法中代码过长或者方法中的语句不在一个抽象层级。<br>方法是代码复用的最小粒度，方法过长不利于复用，可读性低，提炼方法往往是重构工作的第一步。</p><p>意图导向编程：把处理某件事的流程和具体做事的实现方式分开。</p><ul><li> 把一个问题分解为一系列功能性步骤，并假定这些功能步骤已经实现</li><li> 我们只需把把各个函数组织在一起即可解决这一问题</li><li> 在组织好整个功能后，我们在分别实现各个方法函数</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 1、交易信息开始于一串标准ASCII字符串。   * 2、这个信息字符串必须转换成一个字符串的数组，数组存放的此次交易的领域语言中所包含的词汇元素（token)。   * 3、每一个词汇必须标准化。   * 4、包含超过150个词汇元素的交易，应该采用不同于小型交易的方式（不同的算法）来提交，以提高效率。   * 5、如果提交成功，API返回”true”；失败，则返回”false”。   */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Transaction</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">String</span> command<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Boolean</span> result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tokens <span class="token operator">=</span> <span class="token function">tokenize</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">normalizeTokens</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isALargeTransaction</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  result <span class="token operator">=</span> <span class="token function">processLargeTransaction</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                  result <span class="token operator">=</span> <span class="token function">processSmallTransaction</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="以函数对象取代函数"><a href="#以函数对象取代函数" class="headerlink" title="以函数对象取代函数"></a>以函数对象取代函数</h3><p>将函数放进一个单独对象中，如此一来局部变量就变成了对象内的字段。然后你可以在同一个对象中将这个大型函数分解为多个小型函数。</p><h3 id="引入参数对象"><a href="#引入参数对象" class="headerlink" title="引入参数对象"></a>引入参数对象</h3><p>方法参数比较多时，将参数封装为参数对象</p><h3 id="移除对参数的赋值"><a href="#移除对参数的赋值" class="headerlink" title="移除对参数的赋值"></a>移除对参数的赋值</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">discount</span><span class="token punctuation">(</span><span class="token keyword">int</span> inputVal<span class="token punctuation">,</span> <span class="token keyword">int</span> quantity<span class="token punctuation">,</span> <span class="token keyword">int</span> yearToDate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>inputVal <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span> inputVal <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>quantity <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> inputVal <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>yearToDate <span class="token operator">></span> <span class="token number">10000</span><span class="token punctuation">)</span> inputVal <span class="token operator">-=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> inputVal<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">discount</span><span class="token punctuation">(</span><span class="token keyword">int</span> inputVal<span class="token punctuation">,</span> <span class="token keyword">int</span> quantity<span class="token punctuation">,</span> <span class="token keyword">int</span> yearToDate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> result <span class="token operator">=</span> inputVal<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>inputVal <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span> result <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>quantity <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> result <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>yearToDate <span class="token operator">></span> <span class="token number">10000</span><span class="token punctuation">)</span> result <span class="token operator">-=</span> <span class="token number">4</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="将查询与修改分离"><a href="#将查询与修改分离" class="headerlink" title="将查询与修改分离"></a>将查询与修改分离</h3><p>任何有返回值的方法，都不应该有副作用</p><ul><li> 不要在convert中调用写操作，避免副作用</li><li> 常见的例外：将查询结果缓存到本地</li></ul><h3 id="移除不必要临时变量"><a href="#移除不必要临时变量" class="headerlink" title="移除不必要临时变量"></a>移除不必要临时变量</h3><p>临时变量仅使用一次或者取值逻辑成本很低的情况下</p><h3 id="引入解释性变量"><a href="#引入解释性变量" class="headerlink" title="引入解释性变量"></a>引入解释性变量</h3><p>将复杂表达式（或其中一部分）的结果放进一个临时变量，以此变量名称来解释表达式用途</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>platform<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"MAC"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>browser<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"IE"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wasInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> resize <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// do something </span><span class="token punctuation">&#125;</span>   <span class="token keyword">final</span> <span class="token keyword">boolean</span> isMacOs <span class="token operator">=</span> platform<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"MAC"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> isIEBrowser <span class="token operator">=</span> browser<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"IE"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> wasResized <span class="token operator">=</span> resize <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isMacOs <span class="token operator">&amp;&amp;</span> isIEBrowser <span class="token operator">&amp;&amp;</span> <span class="token function">wasInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> wasResized<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// do something </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用卫语句替代嵌套条件判断"><a href="#使用卫语句替代嵌套条件判断" class="headerlink" title="使用卫语句替代嵌套条件判断"></a>使用卫语句替代嵌套条件判断</h3><p>把复杂的条件表达式拆分成多个条件表达式，减少嵌套。嵌套了好几层的if - then-else语句，转换为多个if语句</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//未使用卫语句</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">setHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">//使用卫语句</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">setHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用多态替代条件判断断"><a href="#使用多态替代条件判断断" class="headerlink" title="使用多态替代条件判断断"></a>使用多态替代条件判断断</h3><p>当存在这样一类条件表达式，它根据对象类型的不同选择不同的行为。可以将这种表达式的每个分支放进一个子类内的复写函数中，然后将原始函数声明为抽象函数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token class-name">String</span> operator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"multiply"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"divide"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"subtract"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当出现大量类型检查和判断时，if else（或switch）语句的体积会比较臃肿，这无疑降低了代码的可读性。 另外，if else（或switch）本身就是一个“变化点”，当需要扩展新的类型时，我们不得不追加if else（或switch）语句块，以及相应的逻辑，这无疑降低了程序的可扩展性，也违反了面向对象的开闭原则。</p><blockquote><p>基于这种场景，我们可以考虑使用“多态”来代替冗长的条件判断，将if else（或switch）中的“变化点”封装到子类中。这样，就不需要使用if else（或switch）语句了，取而代之的是子类多态的实例，从而使得提高代码的可读性和可扩展性。很多设计模式使用都是这种套路，比如策略模式、状态模式。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Operation</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Addition</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperatorFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Operation</span><span class="token punctuation">></span></span> operationMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        operationMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Addition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operationMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"divide"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Division</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// more operators</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Operation</span> <span class="token function">getOperation</span><span class="token punctuation">(</span><span class="token class-name">String</span> operator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> operationMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token class-name">String</span> operator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">OperatorFactory</span> <span class="token punctuation">.</span>getOperation <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Invalid Operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">OperatorFactory</span> <span class="token punctuation">.</span><span class="token function">getOperation</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用异常替代返回错误码"><a href="#使用异常替代返回错误码" class="headerlink" title="使用异常替代返回错误码"></a>使用异常替代返回错误码</h3><p>非正常业务状态的处理，使用抛出异常的方式代替返回错误码</p><ul><li> 不要使用异常处理用于正常的业务流程控制</li><li> 异常处理的性能成本非常高</li><li> 尽量使用标准异常</li><li> 避免在finally语句块中抛出异常</li><li>如果同时抛出两个异常，则第一个异常的调用栈会丢失 finally块中应只做关闭资源这类的事情</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//使用错误码</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">&lt;</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        balance <span class="token operator">-=</span> amount<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用异常</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>amount <span class="token operator">></span> balance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"amount too large"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    balance <span class="token operator">-=</span> amount<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引入断言"><a href="#引入断言" class="headerlink" title="引入断言"></a>引入断言</h3><p>某一段代码需要对程序状态做出某种假设，以断言明确表现这种假设。</p><ul><li> 不要滥用断言，不要使用它来检查“应该为真”的条件，只使用它来检查“一定必须为真”的条件</li><li> 如果断言所指示的约束条件不能满足，代码是否仍能正常运行？如果可以就去掉断言</li></ul><h3 id="引入Null对象或特殊对象"><a href="#引入Null对象或特殊对象" class="headerlink" title="引入Null对象或特殊对象"></a>引入Null对象或特殊对象</h3><p>当使用一个方法返回的对象时，而这个对象可能为空，这个时候需要对这个对象进行操作前，需要进行判空，否则就会报空指针。当这种判断频繁的出现在各处代码之中，就会影响代码的美观程度和可读性，甚至增加Bug的几率。</p><p>空引用的问题在Java中无法避免，但可以通过代码编程技巧（引入空对象）来改善这一问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//空对象的例子</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperatorFactory</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Operation</span><span class="token punctuation">></span></span> operationMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>     operationMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Addition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     operationMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"divide"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Division</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// more operators </span>  <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Operation</span><span class="token punctuation">></span></span> <span class="token function">getOperation</span><span class="token punctuation">(</span><span class="token class-name">String</span> operator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>operationMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token class-name">String</span> operator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">Operation</span> targetOperation <span class="token operator">=</span> <span class="token class-name">OperatorFactory</span><span class="token punctuation">.</span><span class="token function">getOperation</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Invalid Operator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> targetOperation<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">//特殊对象的例子</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvalidOp</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Invalid Operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="提炼类"><a href="#提炼类" class="headerlink" title="提炼类"></a>提炼类</h3><p>根据单一职责原则，一个类应该有明确的责任边界。但在实际工作中，类会不断的扩展。当给某个类添加一项新责任时，你会觉得不值得分离出一个单独的类。于是，随着责任不断增加，这个类包含了大量的数据和函数，逻辑复杂不易理解。</p><p>此时你需要考虑将哪些部分分离到一个单独的类中，可以依据高内聚低耦合的原则。如果某些数据和方法总是一起出现，或者某些数据经常同时变化，这就表明它们应该放到一个类中。另一种信号是类的子类化方式：如果你发现子类化只影响类的部分特性，或者类的特性需要以不同方式来子类化，这就意味着你需要分解原来的类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//原始类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> officeAreaCode<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> officeNumber<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTelephoneNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> officeAreaCode <span class="token operator">+</span> <span class="token string">")"</span> <span class="token operator">+</span> officeNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOfficeAreaCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> officeAreaCode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOfficeAreaCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        officeAreaCode <span class="token operator">=</span> arg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOfficeNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> officeNumber<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOfficeNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        officeNumber <span class="token operator">=</span> arg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//新提炼的类（以对象替换数据值）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TelephoneNumber</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> areaCode<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> number<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTelephnoeNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> <span class="token function">getAreaCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> <span class="token function">getAreaCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> areaCode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">setAreaCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        areaCode <span class="token operator">=</span> arg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> number<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        number <span class="token operator">=</span> arg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组合优先于继承"><a href="#组合优先于继承" class="headerlink" title="组合优先于继承"></a>组合优先于继承</h3><p>继承使实现代码重用的有力手段，但这并非总是完成这项工作的最佳工具，使用不当会导致软件变得很脆弱。与方法调用不同的是，继承打破了封装性。子类依赖于其父类中特定功能的实现细节，如果父类的实现随着发行版本的不同而变化，子类可能会遭到破坏，即使他的代码完全没有改变。</p><p>举例说明，假设有一个程序使用HashSet，为了调优该程序的性能，需要统计HashSet自从它创建以来添加了多少个元素。为了提供该功能，我们编写一个HashSet的变体。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Inappropriate use of inheritance!</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstrumentedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// The number of attempted element insertions</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> addCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">InstrumentedHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">InstrumentedHashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initCap<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>initCap<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        addCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        addCount <span class="token operator">+=</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAddCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> addCount<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过在新的类中增加一个私有域，它引用现有类的一个实例，这种设计被称为组合，因为现有的类变成了新类的一个组件。这样得到的类将会非常稳固，它不依赖现有类的实现细节。即使现有的类添加了新的方法，也不会影响新的类。许多设计模式使用就是这种套路，比如代理模式、装饰者模式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Reusable forwarding class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForwardingSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> s<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ForwardingSet</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">retainAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">retainAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Wrappter class - uses composition in place of inheritance</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstrumentedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">ForwardingSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> addCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">InstrumentedHashSet1</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        addCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        addCount <span class="token operator">+=</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAddCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> addCount<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继承与组合如何取舍</p><ul><li> 只有当子类真正是父类的子类型时，才适合继承。对于两个类A和B，只有两者之间确实存在“is-a”关系的时候，类B才应该继承A；</li><li> 在包的内部使用继承是非常安全的，子类和父类的实现都处在同一个程序员的控制之下；</li><li> 对于专门为了继承而设计并且具有很好的文档说明的类来说，使用继承也是非常安全的；</li><li> 其他情况就应该优先考虑组合的方式来实现</li></ul><h3 id="接口优于抽象类"><a href="#接口优于抽象类" class="headerlink" title="接口优于抽象类"></a>接口优于抽象类</h3><p>Java提供了两种机制，可以用来定义允许多个实现的类型：接口和抽象类。自从Java8为接口增加缺省方法（default method），这两种机制都允许为实例方法提供实现。主要区别在于，为了实现由抽象类定义的类型，类必须称为抽象类的一个子类。因为Java只允许单继承，所以用抽象类作为类型定义受到了限制。</p><p>接口相比于抽象类的优势：</p><ul><li> 现有的类可以很容易被更新，以实现新的接口。</li><li> 接口是定义混合类型（比如Comparable）的理想选择。</li><li> 接口允许构造非层次结构的类型框架。</li></ul><p>接口虽然提供了缺省方法，但接口仍有有以下局限性：</p><ul><li> 接口的变量修饰符只能是public static final的</li><li> 接口的方法修饰符只能是public的</li><li> 接口不存在构造函数，也不存在this</li><li> 可以给现有接口增加缺省方法，但不能确保这些方法在之前存在的实现中都能良好运行。</li><li> 因为这些默认方法是被注入到现有实现中的，它们的实现者并不知道，也没有许可</li></ul><p>接口缺省方法的设计目的和优势在于：</p><p>为了接口的演化</p><ul><li> Java 8 之前我们知道，一个接口的所有方法其子类必须实现（当然，这个子类不是一个抽象类），但是 java 8 之后接口的默认方法可以选择不实现，如上的操作是可以通过编译期编译的。这样就避免了由 Java 7 升级到 Java 8 时项目编译报错了。Java8在核心集合接口中增加了许多新的缺省方法，主要是为了便于使用lambda。</li></ul><p>可以减少第三方工具类的创建</p><ul><li> 例如在 List 等集合接口中都有一些默认方法，List 接口中默认提供 replaceAll(UnaryOperator)、sort(Comparator)、、spliterator()等默认方法，这些方法在接口内部创建，避免了为了这些方法而专门去创建相应的工具类。</li></ul><p>可以避免创建基类</p><ul><li> 在 Java 8 之前我们可能需要创建一个基类来实现代码复用，而默认方法的出现，可以不必要去创建基类。</li></ul><p>由于接口的局限性和设计目的的不同，接口并不能完全替换抽象类。但是通过对接口提供一个抽象的骨架实现类，可以把接口和抽象类的优点结合起来。 接口负责定义类型，或许还提供一些缺省方法，而骨架实现类则负责实现除基本类型接口方法之外，剩下的非基本类型接口方法。扩展骨架实现占了实现接口之外的大部分工作。这就是模板方法（Template Method）设计模式。</p><p><img src="/2022/11/08/chang-jian-dai-ma-chong-gou-ji-qiao/image_24ceb509.png" alt="image_24ceb509.png"> Image [5].png</p><p>接口Protocol：定义了RPC协议层两个主要的方法，export暴露服务和refer引用服务</p><p>抽象类AbstractProtocol：封装了暴露服务之后的Exporter和引用服务之后的Invoker实例，并实现了服务销毁的逻辑</p><p>具体实现类XxxProtocol：实现export暴露服务和refer引用服务具体逻辑</p><h3 id="优先考虑泛型"><a href="#优先考虑泛型" class="headerlink" title="优先考虑泛型"></a>优先考虑泛型</h3><p>声明中具有一个或者多个类型参数（type parameter）的类或者接口，就是泛型（generic）类或者接口。泛型类和接口统称为泛型（generic type）。泛型从Java 5引入，提供了编译时类型安全检测机制。泛型的本质是参数化类型，通过一个参数来表示所操作的数据类型，并且可以限制这个参数的类型范围。泛型的好处就是编译期类型检测，避免类型转换。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 比较三个值并返回最大值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">maximum</span><span class="token punctuation">(</span><span class="token class-name">T</span> x<span class="token punctuation">,</span> <span class="token class-name">T</span> y<span class="token punctuation">,</span> <span class="token class-name">T</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">T</span> max <span class="token operator">=</span> x<span class="token punctuation">;</span>   <span class="token comment">// 假设x是初始最大值   </span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> y<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span> max <span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          max <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token comment">//y 更大  </span>  <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span> z<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span> max <span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         max <span class="token operator">=</span> z<span class="token punctuation">;</span> <span class="token comment">// 现在 z 更大              </span>  <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> max<span class="token punctuation">;</span> <span class="token comment">// 返回最大对象</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%d, %d 和 %d 中最大的数为 %d\n\n"</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token function">maximum</span><span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%.1f, %.1f 和 %.1f 中最大的数为 %.1f\n\n"</span><span class="token punctuation">,</span>  <span class="token number">6.6</span><span class="token punctuation">,</span> <span class="token number">8.8</span><span class="token punctuation">,</span> <span class="token number">7.7</span><span class="token punctuation">,</span>  <span class="token function">maximum</span><span class="token punctuation">(</span> <span class="token number">6.6</span><span class="token punctuation">,</span> <span class="token number">8.8</span><span class="token punctuation">,</span> <span class="token number">7.7</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%s, %s 和 %s 中最大的数为 %s\n"</span><span class="token punctuation">,</span><span class="token string">"pear"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token function">maximum</span><span class="token punctuation">(</span> <span class="token string">"pear"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="不要使用原生态类型"><a href="#不要使用原生态类型" class="headerlink" title="不要使用原生态类型"></a>不要使用原生态类型</h4><p>由于为了保持Java代码的兼容性，支持和原生态类型转换，并使用擦除机制实现的泛型。但是使用原生态类型就会失去泛型的优势，会受到编译器警告。</p><h4 id="要尽可能地消除每一个非受检警告"><a href="#要尽可能地消除每一个非受检警告" class="headerlink" title="要尽可能地消除每一个非受检警告"></a>要尽可能地消除每一个非受检警告</h4><p>每一条警告都表示可能在运行时抛出ClassCastException异常。要尽最大的努力去消除这些警告。如果无法消除但是可以证明引起警告的代码是安全的，就可以在尽可能小的范围中，使用＠SuppressWarnings(“unchecked”)注解来禁止警告，但是要把禁止的原因记录下来。</p><h4 id="利用有限制通配符来提升API的灵活性"><a href="#利用有限制通配符来提升API的灵活性" class="headerlink" title="利用有限制通配符来提升API的灵活性"></a>利用有限制通配符来提升API的灵活性</h4><p>参数化类型不支持协变的，即对于任何两个不同的类型Type1和Type2而言，List既不是List的子类型，也不是它的超类。为了解决这个问题，提高灵活性，Java提供了一种特殊的参数化类型，称作有限制的通配符类型，即List&lt;? extends E&gt;和List&lt;? super E&gt;。使用原则是producer-extends，consumer-super（PECS）。如果即是生产者，又是消费者，就没有必要使用通配符了。</p><p>还有一种特殊的无限制通配符List&lt;?&gt;，表示某种类型但不确定。常用作泛型的引用，不可向其添加除Null以外的任何对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//List&lt;? extends E></span><span class="token comment">// Number 可以认为 是Number 的 "子类"</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">></span></span> numberArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Integer 是 Number 的子类</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">></span></span> numberArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Double 是 Number 的子类</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">></span></span> numberArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//List&lt;? super E></span><span class="token comment">// Integer 可以认为是 Integer 的 "父类"</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>、<span class="token comment">// Number 是 Integer 的 父类</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Object 是 Integer 的 父类</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> dest<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> src<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> srcSize <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>srcSize <span class="token operator">></span> dest<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"Source does not fit in dest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>srcSize <span class="token operator">&lt;</span> COPY_THRESHOLD <span class="token operator">||</span> <span class="token punctuation">(</span>src <span class="token keyword">instanceof</span> <span class="token class-name">RandomAccess</span> <span class="token operator">&amp;&amp;</span> dest <span class="token keyword">instanceof</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>srcSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                dest<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> src<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> di<span class="token operator">=</span>dest<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> si<span class="token operator">=</span>src<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>srcSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  di<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  di<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>si<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态成员类优于非静态成员类"><a href="#静态成员类优于非静态成员类" class="headerlink" title="静态成员类优于非静态成员类"></a>静态成员类优于非静态成员类</h3><p>嵌套类（nested class）是指定义在另一个类的内部的类。嵌套类存在的目的只是为了它的外部类提供服务，如果其他的环境也会用到的话，应该成为一个顶层类（top-level class）。 嵌套类有四种：静态成员类（static member class）、非静态成员类（nonstatic member class）、匿名类（anonymous class）和 局部类（local class）。除了第一种之外，其他三种都称为内部类（inner class）。</p><h4 id="匿名类（anonymous-class）"><a href="#匿名类（anonymous-class）" class="headerlink" title="匿名类（anonymous class）"></a>匿名类（anonymous class）</h4><p>没有名字，声明的同时进行实例化，只能使用一次。当出现在非静态的环境中，会持有外部类实例的引用。通常用于创建函数对象和过程对象，不过现在会优先考虑lambda。</p><h4 id="局部类（local-class）"><a href="#局部类（local-class）" class="headerlink" title="局部类（local class）"></a>局部类（local class）</h4><p>任何可以声明局部变量的地方都可以声明局部类，同时遵循同样的作用域规则。跟匿名类不同的是，有名字可以重复使用。不过实际很少使用局部类。</p><h4 id="静态成员类（static-member-class）"><a href="#静态成员类（static-member-class）" class="headerlink" title="静态成员类（static member class）"></a>静态成员类（static member class）</h4><p>最简单的一种嵌套类，声明在另一个类的内部，是这个类的静态成员，遵循同样的可访问性规则。常见的用法是作为公有的辅助类，只有与它的外部类一起使用才有意义。</p><h4 id="非静态成员类（nonstatic-member-class）"><a href="#非静态成员类（nonstatic-member-class）" class="headerlink" title="非静态成员类（nonstatic member class）"></a>非静态成员类（nonstatic member class）</h4><p>尽管语法上，跟静态成员类的唯一区别就是类的声明不包含static，但两者有很大的不同。非静态成员类的每个实例都隐含地与外部类的实例相关联，可以访问外部类的成员属性和方法。另外必须先创建外部类的实例之后才能创建非静态成员类的实例。</p><p>总而言之，这四种嵌套类都有自己的用途。假设这个嵌套类属于一个方法的内部，如果只需要在一个地方创建实例，并且已经有了一个预置的类型可以说明这个类的特征，就要把它做成匿名类。如果一个嵌套类需要在单个方法之外仍然可见，或者它太长了，不适合放在方法内部，就应该使用成员类。如果成员类的每个实例都需要一个指向其外围实例的引用，就要把成员类做成非静态的，否则就做成静态的。</p><h3 id="优先使用模板-工具类"><a href="#优先使用模板-工具类" class="headerlink" title="优先使用模板/工具类"></a>优先使用模板/工具类</h3><p>通过对常见场景的代码逻辑进行抽象封装，形成相应的模板工具类，可以大大减少重复代码，专注于业务逻辑，提高代码质量。</p><h3 id="分离对象的创建与使用"><a href="#分离对象的创建与使用" class="headerlink" title="分离对象的创建与使用"></a>分离对象的创建与使用</h3><p>面向对象编程相对于面向过程，多了实例化这一步，而对象的创建必须要指定具体类型。我们常见的做法是“哪里用到，就在哪里创建”，使用实例和创建实例的是同一段代码。这似乎使代码更具有可读性，但是某些情况下造成了不必要的耦合。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessObject</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> actionMethond <span class="token punctuation">&#123;</span>     <span class="token comment">//Other things</span>     <span class="token class-name">Service</span> myServiceObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       myServiceObj<span class="token punctuation">.</span><span class="token function">doService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//Other things</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessObject</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> actionMethond <span class="token punctuation">&#123;</span>     <span class="token comment">//Other things</span>     <span class="token class-name">Service</span> myServiceObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       myServiceObj<span class="token punctuation">.</span><span class="token function">doService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//Other things</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessObject</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">private</span> <span class="token class-name">Service</span> myServiceObj<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token class-name">BusinessObject</span><span class="token punctuation">(</span><span class="token class-name">Service</span> aService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       myServiceObj <span class="token operator">=</span> aService<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> actionMethond <span class="token punctuation">&#123;</span>     <span class="token comment">//Other things</span>       myServiceObj<span class="token punctuation">.</span><span class="token function">doService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//Other things</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessObject</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">private</span> <span class="token class-name">Service</span> myServiceObj<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token class-name">BusinessObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       myServiceObj <span class="token operator">=</span> <span class="token class-name">ServiceFactory</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> actionMethond <span class="token punctuation">&#123;</span>     <span class="token comment">//Other things</span>       myServiceObj<span class="token punctuation">.</span><span class="token function">doService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//Other things</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>对象的创建者耦合的是对象的具体类型，而对象的使用者耦合的是对象的接口。也就是说，创建者关心的是这个对象是什么，而使用者关心的是它能干什么。这两者应该视为独立的考量，它们往往会因为不同的原因而改变。</p></blockquote><p>当对象的类型涉及多态、对象创建复杂（依赖较多）可以考虑将对象的创建过程分离出来，使得使用者不用关注对象的创建细节。设计模式中创建型模式的出发点就是如此，实际项目中可以使用工厂模式、构建器、依赖注入的方式。</p><h3 id="可访问性最小化"><a href="#可访问性最小化" class="headerlink" title="可访问性最小化"></a>可访问性最小化</h3><p>区分一个组件设计得好不好，一个很重要的因素在于，它对于外部组件而言，是否隐藏了其内部数据和实现细节。Java提供了访问控制机制来决定类、接口和成员的可访问性。实体的可访问性由该实体声明所在的位置，以及该实体声明中所出现的访问修饰符（private、protected、public）共同决定的。</p><p>对于顶层的（非嵌套的）类和接口，只有两种的访问级别：包级私有的（没有public修饰）和公有的（public修饰）。</p><p>对于成员（实例/域、方法、嵌套类和嵌套接口）由四种的访问级别，可访问性如下递增：</p><ul><li> 私有的（private修饰）–只有在声明该成员的顶层类内部才可以访问这个成员；</li><li> 包级私有的（默认）–声明该成员的包内部的任何类都可以访问这个成员；</li><li> 受保护的（protected修饰）–声明该成员的类的子类可以访问这个成员，并且声明该成员的包内部的任何类也可以访问这个成员；</li><li> 公有的（public修饰）–在任何地方都可以访问该成员；</li></ul><p>正确地使用这些修饰符对于实现信息隐藏是非常关键的，原则就是：尽可能地使每个类和成员不被外界访问（私有或包级私有）。这样好处就是在以后的发行版本中，可以对它进行修改、替换或者删除，而无须担心会影响现有的客户端程序。</p><ul><li> 如果类或接口能够做成包级私有的，它就应该被做成包级私有的；</li><li> 如果一个包级私有的顶层类或接口只是在某一个类的内部被用到，就应该考虑使它成为那个类的私有嵌套类；</li><li> 公有类不应直接暴露实例域，应该提供相应的方法以保留将来改变该类的内部表示法的灵活性；</li><li> 当确定了类的公有API之后，应该把其他的成员都变成私有的；</li><li> 如果同一个包下的类之间存在比较多的访问时，就要考虑重新设计以减少这种耦合；</li></ul><h3 id="可变性最小化"><a href="#可变性最小化" class="headerlink" title="可变性最小化"></a>可变性最小化</h3><p>不可变类是指其实例不能被修改的类。每个实例中包含的所有信息都必须在创建该实例时提供，并在对象的整个生命周期内固定不变。不可变类好处就是简单易用、线程安全、可自由共享而不容易出错。Java平台类库中包含许多不可变的类，比如String、基本类型包装类、BigDecimal等。</p><p>为了使类成为不可变，要遵循下面五条规则：</p><ul><li> 声明所有的域都是私有的</li><li> 声明所有的域都是final的</li><li> 如果一个指向新创建实例的引用在缺乏同步机制的情况下，从一个线程被传递到另一个线程，就必须确保正确的行为</li><li> 不提供任何会修改对象状态的方法</li><li> 保证类不会被扩展（防止子类化，类声明为final）</li><li> 防止粗心或者恶意的子类假装对象的状态已经改变，从而破坏该类的不可变行为</li><li> 确保对任何可变组件的互斥访问</li><li> 如果类具有指向可变对象的域，则必须确保该类的客户端无法获得指向这些对象的引用。并且，永远不要用客户端提供的对象引用来初始化这样的域，也不要从任何访问方法中返回该对象引用。在构造器、访问方法和readObject 方法中使用保护性拷贝技术</li></ul><p>可变性最小化的一些建议：</p><ul><li> 除非有很好的理由要让类成为可变的类，否则它就应该是不可变的；</li><li> 如果类不能被做成不可变的，仍然应该尽可能地限制它的可变性；</li><li> 除非有令人信服的理由要使域变成非final的，否则要使每个域都是private final的；</li><li> 构造器应该创建完全初始化的对象，并建立起所有的约束关系；</li></ul><h1 id="质量如何保证"><a href="#质量如何保证" class="headerlink" title="质量如何保证"></a>质量如何保证</h1><h2 id="测试驱动开发"><a href="#测试驱动开发" class="headerlink" title="测试驱动开发"></a>测试驱动开发</h2><blockquote><p>测试驱动开发（TDD）要求以测试作为开发过程的中心，要求在编写任何代码之前，首先编写用于产码行为的测试，而编写的代码又要以使测试通过为目标。TDD要求测试可以完全自动化地运行，并在对代码重构前后必须运行测试。</p></blockquote><p>TDD的最终目标是整洁可用的代码（clean code that works）。大多数的开发者大部分时间无法得到整洁可用的代码。办法是分而治之。首先解决目标中的“可用”问题，然后再解决“代码的整洁”问题。这与体系结构驱动（architecture-driven）的开发相反。</p><p>采用TDD另一个好处就是让我们拥有一套伴随代码产生的详尽的自动化测试集。将来无论出于任何原因（需求、重构、性能改进）需要对代码进行维护时，在这套测试集的驱动下工作，我们代码将会一直是健壮的。</p><h2 id="TDD的开发周期"><a href="#TDD的开发周期" class="headerlink" title="TDD的开发周期"></a>TDD的开发周期</h2><p><img src="/2022/11/08/chang-jian-dai-ma-chong-gou-ji-qiao/image_4605e609.png" alt="image_4605e609.png"> Image [6].png</p><p>添加一个测试 -&gt; 运行所有测试并检查测试结果 -&gt; 编写代码以通过测试 -&gt; 运行所有测试且全部通过 -&gt; 重构代码，以消除重复设计，优化设计结构</p><h2 id="两个基本的原则"><a href="#两个基本的原则" class="headerlink" title="两个基本的原则"></a>两个基本的原则</h2><ul><li> 仅在测试失败时才编写代码并且只编写刚好使测试通过的代码</li><li> 编写下一个测试之前消除现有的重复设计，优化设计结构</li></ul><p>关注点分离是这两条规则隐含的另一个非常重要的原则。其表达的含义指在编码阶段先达到代码“可用”的目标，在重构阶段再追求“整洁”目标，每次只关注一件事！</p><h2 id="分层测试点"><a href="#分层测试点" class="headerlink" title="分层测试点"></a>分层测试点</h2><p><img src="/2022/11/08/chang-jian-dai-ma-chong-gou-ji-qiao/image_e59205e3.png" alt="image_e59205e3.png"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li> 重构-改善既有代码的设计</li><li> 设计模式</li><li> Effective Java</li><li> 敏捷软件开发与设计的最佳实践</li><li> 实现模式</li><li>测试驱动开发                 </li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> 重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK源码中NB的设计模式</title>
      <link href="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/"/>
      <url>/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、结构性模式："><a href="#一、结构性模式：" class="headerlink" title="一、结构性模式："></a>一、结构性模式：</h2><h3 id="1、适配器模式："><a href="#1、适配器模式：" class="headerlink" title="1、适配器模式："></a>1、适配器模式：</h3><blockquote><p>常用于将一个新接口适配旧接口</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_0db7343e.png" alt="image_0db7343e.png"></p><p>在我们业务代码中经常有新旧接口适配需求，可以采用该模式。</p><h3 id="2、桥接模式："><a href="#2、桥接模式：" class="headerlink" title="2、桥接模式："></a>2、桥接模式：</h3><blockquote><p>将抽象和抽象的具体实现进行解耦，这样可以使得抽象和抽象的具体实现可以独立进行变化。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_80280cd4.png" alt="image_80280cd4.png"></p><p>：这个模式，其实我们每天都在用到，但是你可能却浑然不知。只要你用到面向接口编程，其实都是在用桥接模式。</p><h3 id="3、组合模式"><a href="#3、组合模式" class="headerlink" title="3、组合模式"></a>3、组合模式</h3><blockquote><p>让客户端看起来在处理单个对象和对象的组合是平等的，换句话说，某个类型的方法同时也接受自身类型作为参数。（So in other words methods on a type accepting the same type）</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_da86596b.png" alt="image_da86596b.png"></p><p>从上面那句英文我们就可以得知，组合模式常用于递归操作的优化上，比如每个公司都有个boss系统，都会有什么菜单的功能。比如一级菜单下有二级菜单，二级菜单又有三级菜单。删除一级菜单的时候需要不断删除子菜单，那么这个设计模式你可以试试。总之，凡是有级联操作的，你都可以尝试这个设计模式。</p><h3 id="4、装饰者模式"><a href="#4、装饰者模式" class="headerlink" title="4、装饰者模式"></a>4、装饰者模式</h3><blockquote><p>动态的给一个对象附加额外的功能，因此它也是子类化的一种替代方法。该设计模式在JDK中广泛运用，以下只是列举一小部分</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_a62166f6.png" alt="image_a62166f6.png"></p><p>这个模式使用就太广了，我们常用的AOP，既有动态代理，也有装饰者的味道。</p><h3 id="5、门面模式"><a href="#5、门面模式" class="headerlink" title="5、门面模式"></a>5、门面模式</h3><blockquote><p>为一组组件，接口，抽象或子系统提供简化的接口。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_cabc5bfb.png" alt="image_cabc5bfb.png"></p><p>我们每天使用的SLFJ日志就是门面日志，比如我们使用Dubbo，向外提供的服务就尽量采用门面模式，然后服务在调用各种service做聚合。</p><h3 id="6、享元模式"><a href="#6、享元模式" class="headerlink" title="6、享元模式"></a>6、享元模式</h3><blockquote><p>使用缓存来减少对小对象的访问时间</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_db731042.png" alt="image_db731042.png"></p><p>只要用到了缓存，基本都是在使用享元模式。很多同学都说自己的项目太low了，都没有用到什么设计模式，这不是开玩笑吗，你用个map缓存几个对象，基本上都运用了享元的思想。</p><h3 id="7、代理模式"><a href="#7、代理模式" class="headerlink" title="7、代理模式"></a>7、代理模式</h3><blockquote><p>代理模式用于向较简单的对象代替创建复杂或耗时的对象。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_e9562544.png" alt="image_e9562544.png"></p><p>代理模式用得很广泛，基本所有大家知道的开源框架，都用到了动态代理。</p><h2 id="二、创建模式"><a href="#二、创建模式" class="headerlink" title="二、创建模式"></a>二、创建模式</h2><h3 id="1、抽象工厂模式"><a href="#1、抽象工厂模式" class="headerlink" title="1、抽象工厂模式"></a>1、抽象工厂模式</h3><blockquote><p>抽象工厂模式提供了一个协议来生成一系列的相关或者独立的对象，而不用指定具体对象的类型。它使得应用程序能够和使用的框架的具体实现进行解耦。在JDK和许多开源框架，比如Spring中随处可见，它们很容易被发现。任何用于创建对象但返回接口或抽象类的，就是抽象工厂模式了。（any method that is used to create an object but still returns a interface or abstract class）</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_fbd05a32.png" alt="image_fbd05a32.png"></p><p>从英文就可以得出，该模式可以与策略模式结合使用。</p><h3 id="2、建造者模式"><a href="#2、建造者模式" class="headerlink" title="2、建造者模式"></a>2、建造者模式</h3><blockquote><p>用于通过定义一个类来简化复杂对象的创建，该类的目的是构建另一个类的实例。构建器模式还允许实现Fluent接口。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_a7e0d82b.png" alt="image_a7e0d82b.png"></p><p>这个在我们业务代码中使用的场景太广泛了。比如订单系统大部分项目都有，订单对象就是一个复杂对象，我们就可以采用建造者模式来做。</p><h3 id="3、工厂方法"><a href="#3、工厂方法" class="headerlink" title="3、工厂方法"></a>3、工厂方法</h3><blockquote><p>只是一个返回实际类型的方法。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_b2dcd320.png" alt="image_b2dcd320.png"></p><p>这个属于大家都会的设计模式，不多过介绍。</p><h3 id="4、原型模式"><a href="#4、原型模式" class="headerlink" title="4、原型模式"></a>4、原型模式</h3><blockquote><p>使得类的实例能够生成自身的拷贝。如果创建一个对象的实例非常复杂且耗时时，就可以使用这种模式，而不重新创建一个新的实例，你可以拷贝一个对象并直接修改它。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_3135fcc2.png" alt="image_3135fcc2.png"></p><p>这个你以为是冷门的设计模式，其实错了，这个是大热门的设计模式。比如我们业务代码，经常要各种DTO、BO、DO、VO转换，其实就可以参考原型设计模式的思想来做。</p><h3 id="5、单例模式"><a href="#5、单例模式" class="headerlink" title="5、单例模式"></a>5、单例模式</h3><blockquote><p>用来确保类只有一个实例。Joshua Bloch在Effetive Java中建议到，还有一种方法就是使用枚举。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_f4c365cb.png" alt="image_f4c365cb.png"></p><p>在平时开发中，单例是我们用得最多的了，因为Spring的bean，默认就是单例级别的。单例属于大家基本都会的设计模式。</p><h2 id="三、行为模式"><a href="#三、行为模式" class="headerlink" title="三、行为模式"></a>三、行为模式</h2><h3 id="1、责任链"><a href="#1、责任链" class="headerlink" title="1、责任链"></a>1、责任链</h3><blockquote><p>通过把请求从一个对象传递到链条中下一个对象的方式来解除对象之间的耦合，直到请求被处理完毕。链中的对象是同一接口或抽象类的不同实现。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_26b58e72.png" alt="image_26b58e72.png"></p><p>凡是带有<code>Filter</code>关键词的，基本都在用这个设计模式。在业务代码使用的场景实在是太多了，用到拦截器的地方基本都在用这个设计模式。</p><h3 id="2、命令模式"><a href="#2、命令模式" class="headerlink" title="2、命令模式"></a>2、命令模式</h3><blockquote><p>将命令包装在对象中，以便可以将其存储，传递到方法中，并像任何其他对象一样返回。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_12478821.png" alt="image_12478821.png"></p><p>命令模式使用频率较高，和策略模式比较像，具体区别可以搜索一下。如果用过<code>Activiti</code>工作流引擎的朋友可以看一下里面的源码，很多地方都用到了命令模式。</p><h3 id="3、解释器模式"><a href="#3、解释器模式" class="headerlink" title="3、解释器模式"></a>3、解释器模式</h3><blockquote><p>此模式通常描述为该语言定义语法并使用该语法来解释该格式的语句。（This pattern generally describes defining a grammar for that language and using that grammar to interpret statements in that format.）</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_a76314fe.png" alt="image_a76314fe.png"></p><p>这个比较冷门，肥朝没怎么用过，你用过的话可以留言告诉肥朝。</p><h3 id="4、迭代器模式"><a href="#4、迭代器模式" class="headerlink" title="4、迭代器模式"></a>4、迭代器模式</h3><blockquote><p>提供一个统一的方式来访问集合中的对象。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_56c75850.png" alt="image_56c75850.png"></p><p>这个中间件和基础框架组的同学可能用得比较多，业务代码的话用得不多，不过JDK中的这种使用很经典，可以看看。</p><h3 id="5、中介者模式"><a href="#5、中介者模式" class="headerlink" title="5、中介者模式"></a>5、中介者模式</h3><blockquote><p>通过使用一个中间对象来进行消息分发以及减少类之间的直接依赖。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_4cc8d46f.png" alt="image_4cc8d46f.png"></p><p>看到这个描述不用我多说什么，业务代码使用的场景太多了。比如你们用MQ，其实就是在用中介者模式。所以肥朝一再强调，即使是每天CRUD，关注肥朝一起学习，也能给你的CRUD项目，加上美颜+滤镜（设计模式）的加强效果。</p><h3 id="6、备忘录模式"><a href="#6、备忘录模式" class="headerlink" title="6、备忘录模式"></a>6、备忘录模式</h3><blockquote><p>生成对象状态的一个快照，以便对象可以恢复原始状态而不用暴露自身的内容。比如Date对象通过自身内部的一个long值来实现备忘录模式。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_6794e25f.png" alt="image_6794e25f.png"></p><p>这个在业务中使用得不多，据肥朝了解其中一种场景是，你要把数据丢到MQ，但是MQ暂时不可用，那么你把数据暂存到DB，后面再轮询丢到MQ。如果你有更好的场景，留言告诉肥朝。</p><h3 id="7、空对象模式"><a href="#7、空对象模式" class="headerlink" title="7、空对象模式"></a>7、空对象模式</h3><blockquote><p>它允许您抽象空对象的处理。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_7f6ad923.png" alt="image_7f6ad923.png"></p><p>这个业务代码用得不多，但是JDK中的这几个方法我们倒是挺常用的。</p><h3 id="8、观察者模式"><a href="#8、观察者模式" class="headerlink" title="8、观察者模式"></a>8、观察者模式</h3><blockquote><p>用于为组件提供一种灵活地向感兴趣的接收者广播消息的方式。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_7cbd31c6.png" alt="image_7cbd31c6.png"></p><p>我们业务代码一般是基于Zookeeper来做观察者的。基本上用到ZK的地方，都是在用观察者模式，比如分布式锁，比如服务发现等。</p><h3 id="9、状态模式"><a href="#9、状态模式" class="headerlink" title="9、状态模式"></a>9、状态模式</h3><blockquote><p>允许您在运行时根据内部状态轻松更改对象的行为。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_8826e899.png" alt="image_8826e899.png"></p><p>这个在业务代码用得就太广泛了，我就不信你们系统还没有“状态”了。比如我们常见的订单状态或者各种XX状态，都可以用得上。</p><h3 id="10、策略模式"><a href="#10、策略模式" class="headerlink" title="10、策略模式"></a>10、策略模式</h3><blockquote><p>使用这个模式来将一组算法封装成一系列对象。通过调用这些对象可以灵活的改变程序的功能。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_056a7a91.png" alt="image_056a7a91.png"></p><p>这个太高频了，常用于优化大量的<code>if-else</code>,如果这个设计模式都不会，出去不要说关注过肥朝的公众号！</p><h3 id="11、模板方法模式"><a href="#11、模板方法模式" class="headerlink" title="11、模板方法模式"></a>11、模板方法模式</h3><blockquote><p>让子类可以重写方法的一部分，而不是整个重写，你可以控制子类需要重写那些操作。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_0f3aa81b.png" alt="image_0f3aa81b.png"></p><p>这个模式也是非常高频的模式。业务代码中经常遇到有很多相同的部分，我们可以做一个抽象类，子类来实现差异化，如果还不知道的，赶紧搜索一下，再次强调，非常高频。</p><h3 id="12、访问者模式"><a href="#12、访问者模式" class="headerlink" title="12、访问者模式"></a>12、访问者模式</h3><blockquote><p>提供一个方便的可维护的方式来操作一组对象。它使得你在不改变操作的对象前提下，可以修改或者扩展对象的行为。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_09845ad7.png" alt="image_09845ad7.png"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> jdk源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot内置工具类</title>
      <link href="/2022/11/07/springboot-nei-zhi-gong-ju-lei/"/>
      <url>/2022/11/07/springboot-nei-zhi-gong-ju-lei/</url>
      
        <content type="html"><![CDATA[<p>最近发现同事写了不少重复的工具类，发现其中很多功能，Spring 自带的都有。于是整理了本文，希望能够帮助到大家！</p><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><ol><li> 断言是一个逻辑判断，用于检查不应该发生的情况</li><li> Assert 关键字在 JDK1.4 中引入，可通过 JVM 参数 <code>-enableassertions</code>开启</li><li> SpringBoot 中提供了 Assert 断言工具类，通常用于数据合法性检查</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 要求参数 object 必须为非空（Not Null），否则抛出异常，不予放行</span><span class="token comment">// 参数 message 参数用于定制异常信息。</span><span class="token keyword">void</span> <span class="token function">notNull</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token comment">// 要求参数必须空（Null），否则抛出异常，不予『放行』。</span><span class="token comment">// 和 notNull() 方法断言规则相反</span><span class="token keyword">void</span> <span class="token function">isNull</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token comment">// 要求参数必须为真（True），否则抛出异常，不予『放行』。</span><span class="token keyword">void</span> <span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> expression<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token comment">// 要求参数（List/Set）必须非空（Not Empty），否则抛出异常，不予放行</span><span class="token keyword">void</span> <span class="token function">notEmpty</span><span class="token punctuation">(</span><span class="token class-name">Collection</span> collection<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token comment">// 要求参数（String）必须有长度（即，Not Empty），否则抛出异常，不予放行</span><span class="token keyword">void</span> <span class="token function">hasLength</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token comment">// 要求参数（String）必须有内容（即，Not Blank），否则抛出异常，不予放行</span><span class="token keyword">void</span> <span class="token function">hasText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token comment">// 要求参数是指定类型的实例，否则抛出异常，不予放行</span><span class="token keyword">void</span> <span class="token function">isInstanceOf</span><span class="token punctuation">(</span><span class="token class-name">Class</span> type<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token comment">// 要求参数 `subType` 必须是参数 superType 的子类或实现类，否则抛出异常，不予放行</span><span class="token keyword">void</span> <span class="token function">isAssignable</span><span class="token punctuation">(</span><span class="token class-name">Class</span> superType<span class="token punctuation">,</span> <span class="token class-name">Class</span> subType<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象、数组、集合"><a href="#对象、数组、集合" class="headerlink" title="对象、数组、集合"></a>对象、数组、集合</h2><h3 id="ObjectUtils"><a href="#ObjectUtils" class="headerlink" title="ObjectUtils"></a>ObjectUtils</h3><ol><li> 获取对象的基本信息</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取对象的类名。参数为 null 时，返回字符串："null" </span><span class="token class-name">String</span> <span class="token function">nullSafeClassName</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token comment">// 参数为 null 时，返回 0</span><span class="token keyword">int</span> <span class="token function">nullSafeHashCode</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span><span class="token comment">// 参数为 null 时，返回字符串："null"</span><span class="token class-name">String</span> <span class="token function">nullSafeToString</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token comment">// 获取对象 HashCode（十六进制形式字符串）。参数为 null 时，返回 0 </span><span class="token class-name">String</span> <span class="token function">getIdentityHexString</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token comment">// 获取对象的类名和 HashCode。 参数为 null 时，返回字符串："" </span><span class="token class-name">String</span> <span class="token function">identityToString</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token comment">// 相当于 toString()方法，但参数为 null 时，返回字符串：""</span><span class="token class-name">String</span> <span class="token function">getDisplayString</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>判断工具</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断数组是否为空</span><span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token comment">// 判断参数对象是否是数组</span><span class="token keyword">boolean</span> <span class="token function">isArray</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token comment">// 判断数组中是否包含指定元素</span><span class="token keyword">boolean</span> <span class="token function">containsElement</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token class-name">Object</span> element<span class="token punctuation">)</span><span class="token comment">// 相等，或同为 null时，返回 true</span><span class="token keyword">boolean</span> <span class="token function">nullSafeEquals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span><span class="token comment">/*判断参数对象是否为空，判断标准为：    Optional: Optional.empty()       Array: length == 0CharSequence: length == 0  Collection: Collection.isEmpty()         Map: Map.isEmpty() */</span><span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.其他工具方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 向参数数组的末尾追加新元素，并返回一个新数组</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">O</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">></span></span> <span class="token class-name">A</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">addObjectToArray</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token class-name">O</span> obj<span class="token punctuation">)</span><span class="token comment">// 原生基础类型数组 --> 包装类数组</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toObjectArray</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="StringUtils"><a href="#StringUtils" class="headerlink" title="StringUtils"></a>StringUtils</h3><ol><li> 字符串判断工具</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断字符串是否为 null，或 ""。注意，包含空白符的字符串为非空</span><span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">Object</span> str<span class="token punctuation">)</span><span class="token comment">// 判断字符串是否是以指定内容结束。忽略大小写</span><span class="token keyword">boolean</span> <span class="token function">endsWithIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> suffix<span class="token punctuation">)</span><span class="token comment">// 判断字符串是否已指定内容开头。忽略大小写</span><span class="token keyword">boolean</span> <span class="token function">startsWithIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token comment">// 是否包含空白符</span><span class="token keyword">boolean</span> <span class="token function">containsWhitespace</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token comment">// 判断字符串非空且长度不为 0，即，Not Empty</span><span class="token keyword">boolean</span> <span class="token function">hasLength</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> str<span class="token punctuation">)</span><span class="token comment">// 判断字符串是否包含实际内容，即非仅包含空白符，也就是 Not Blank</span><span class="token keyword">boolean</span> <span class="token function">hasText</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> str<span class="token punctuation">)</span><span class="token comment">// 判断字符串指定索引处是否包含一个子串。</span><span class="token keyword">boolean</span> <span class="token function">substringMatch</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> substring<span class="token punctuation">)</span><span class="token comment">// 计算一个字符串中指定子串的出现次数</span><span class="token keyword">int</span> <span class="token function">countOccurrencesOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> sub<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.字符串操作工具</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 查找并替换指定子串</span><span class="token class-name">String</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">String</span> inString<span class="token punctuation">,</span> <span class="token class-name">String</span> oldPattern<span class="token punctuation">,</span> <span class="token class-name">String</span> newPattern<span class="token punctuation">)</span><span class="token comment">// 去除尾部的特定字符</span><span class="token class-name">String</span> <span class="token function">trimTrailingCharacter</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> trailingCharacter<span class="token punctuation">)</span> <span class="token comment">// 去除头部的特定字符</span><span class="token class-name">String</span> <span class="token function">trimLeadingCharacter</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> leadingCharacter<span class="token punctuation">)</span><span class="token comment">// 去除头部的空白符</span><span class="token class-name">String</span> <span class="token function">trimLeadingWhitespace</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token comment">// 去除头部的空白符</span><span class="token class-name">String</span> <span class="token function">trimTrailingWhitespace</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token comment">// 去除头部和尾部的空白符</span><span class="token class-name">String</span> <span class="token function">trimWhitespace</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token comment">// 删除开头、结尾和中间的空白符</span><span class="token class-name">String</span> <span class="token function">trimAllWhitespace</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token comment">// 删除指定子串</span><span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> inString<span class="token punctuation">,</span> <span class="token class-name">String</span> pattern<span class="token punctuation">)</span><span class="token comment">// 删除指定字符（可以是多个）</span><span class="token class-name">String</span> <span class="token function">deleteAny</span><span class="token punctuation">(</span><span class="token class-name">String</span> inString<span class="token punctuation">,</span> <span class="token class-name">String</span> charsToDelete<span class="token punctuation">)</span><span class="token comment">// 对数组的每一项执行 trim() 方法</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">trimArrayElements</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token comment">// 将 URL 字符串进行解码</span><span class="token class-name">String</span> <span class="token function">uriDecode</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">,</span> <span class="token class-name">Charset</span> charset<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.路径相关工具方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 解析路径字符串，优化其中的 “..” </span><span class="token class-name">String</span> <span class="token function">cleanPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token comment">// 解析路径字符串，解析出文件名部分</span><span class="token class-name">String</span> <span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token comment">// 解析路径字符串，解析出文件后缀名</span><span class="token class-name">String</span> <span class="token function">getFilenameExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token comment">// 比较两个两个字符串，判断是否是同一个路径。会自动处理路径中的 “..” </span><span class="token keyword">boolean</span> <span class="token function">pathEquals</span><span class="token punctuation">(</span><span class="token class-name">String</span> path1<span class="token punctuation">,</span> <span class="token class-name">String</span> path2<span class="token punctuation">)</span><span class="token comment">// 删除文件路径名中的后缀部分</span><span class="token class-name">String</span> <span class="token function">stripFilenameExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token comment">// 以 “. 作为分隔符，获取其最后一部分</span><span class="token class-name">String</span> <span class="token function">unqualify</span><span class="token punctuation">(</span><span class="token class-name">String</span> qualifiedName<span class="token punctuation">)</span><span class="token comment">// 以指定字符作为分隔符，获取其最后一部分</span><span class="token class-name">String</span> <span class="token function">unqualify</span><span class="token punctuation">(</span><span class="token class-name">String</span> qualifiedName<span class="token punctuation">,</span> <span class="token keyword">char</span> separator<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CollectionUtils"><a href="#CollectionUtils" class="headerlink" title="CollectionUtils"></a>CollectionUtils</h3><ol><li> 集合判断工具</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断 List/Set 是否为空</span><span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> collection<span class="token punctuation">)</span><span class="token comment">// 判断 Map 是否为空</span><span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span><span class="token comment">// 判断 List/Set 中是否包含某个对象</span><span class="token keyword">boolean</span> <span class="token function">containsInstance</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> collection<span class="token punctuation">,</span> <span class="token class-name">Object</span> element<span class="token punctuation">)</span><span class="token comment">// 以迭代器的方式，判断 List/Set 中是否包含某个对象</span><span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> iterator<span class="token punctuation">,</span> <span class="token class-name">Object</span> element<span class="token punctuation">)</span><span class="token comment">// 判断 List/Set 是否包含某些对象中的任意一个</span><span class="token keyword">boolean</span> <span class="token function">containsAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> source<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> candidates<span class="token punctuation">)</span><span class="token comment">// 判断 List/Set 中的每个元素是否唯一。即 List/Set 中不存在重复元素</span><span class="token keyword">boolean</span> <span class="token function">hasUniqueObject</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> collection<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.集合操作工具</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 将 Array 中的元素都添加到 List/Set 中</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">mergeArrayIntoCollection</span><span class="token punctuation">(</span><span class="token class-name">Object</span> array<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> collection<span class="token punctuation">)</span>  <span class="token comment">// 将 Properties 中的键值对都添加到 Map 中</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">mergePropertiesIntoMap</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> props<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span><span class="token comment">// 返回 List 中最后一个元素</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">lastElement</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span>  <span class="token comment">// 返回 Set 中最后一个元素</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">lastElement</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> set<span class="token punctuation">)</span> <span class="token comment">// 返回参数 candidates 中第一个存在于参数 source 中的元素</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">E</span> <span class="token function">findFirstMatch</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> source<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> candidates<span class="token punctuation">)</span><span class="token comment">// 返回 List/Set 中指定类型的元素。</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">findValueOfType</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> collection<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> type<span class="token punctuation">)</span><span class="token comment">// 返回 List/Set 中指定类型的元素。如果第一种类型未找到，则查找第二种类型，以此类推</span><span class="token class-name">Object</span> <span class="token function">findValueOfType</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> collection<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> types<span class="token punctuation">)</span><span class="token comment">// 返回 List/Set 中元素的类型</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">findCommonElementType</span><span class="token punctuation">(</span><span class="token class-name">Collectio</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> collection<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件、资源、IO-流"><a href="#文件、资源、IO-流" class="headerlink" title="文件、资源、IO 流"></a>文件、资源、IO 流</h2><h3 id="FileCopyUtils"><a href="#FileCopyUtils" class="headerlink" title="FileCopyUtils"></a>FileCopyUtils</h3><ol><li> 输入</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 从文件中读入到字节数组中</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyToByteArray</span><span class="token punctuation">(</span><span class="token class-name">File</span> in<span class="token punctuation">)</span><span class="token comment">// 从输入流中读入到字节数组中</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyToByteArray</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span><span class="token comment">// 从输入流中读入到字符串中</span><span class="token class-name">String</span> <span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> in<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.输出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 从字节数组到文件</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> in<span class="token punctuation">,</span> <span class="token class-name">File</span> out<span class="token punctuation">)</span><span class="token comment">// 从文件到文件</span><span class="token keyword">int</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">File</span> in<span class="token punctuation">,</span> <span class="token class-name">File</span> out<span class="token punctuation">)</span><span class="token comment">// 从字节数组到输出流</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> in<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span> <span class="token comment">// 从输入流到输出流</span><span class="token keyword">int</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span> <span class="token comment">// 从输入流到输出流</span><span class="token keyword">int</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> in<span class="token punctuation">,</span> <span class="token class-name">Writer</span> out<span class="token punctuation">)</span><span class="token comment">// 从字符串到输出流</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">String</span> in<span class="token punctuation">,</span> <span class="token class-name">Writer</span> out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ResourceUtils"><a href="#ResourceUtils" class="headerlink" title="ResourceUtils"></a>ResourceUtils</h3><ol><li> 从资源路径获取文件</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断字符串是否是一个合法的 URL 字符串。</span><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isUrl</span><span class="token punctuation">(</span><span class="token class-name">String</span> resourceLocation<span class="token punctuation">)</span><span class="token comment">// 获取 URL</span><span class="token keyword">static</span> <span class="token class-name">URL</span> <span class="token function">getURL</span><span class="token punctuation">(</span><span class="token class-name">String</span> resourceLocation<span class="token punctuation">)</span> <span class="token comment">// 获取文件（在 JAR 包内无法正常使用，需要是一个独立的文件）</span><span class="token keyword">static</span> <span class="token class-name">File</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> resourceLocation<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.Resource</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 文件系统资源 D:\...</span><span class="token class-name">FileSystemResource</span><span class="token comment">// URL 资源，如 file://... http://...</span><span class="token class-name">UrlResource</span><span class="token comment">// 类路径下的资源，classpth:...</span><span class="token class-name">ClassPathResource</span><span class="token comment">// Web 容器上下文中的资源（jar 包、war 包）</span><span class="token class-name">ServletContextResource</span><span class="token comment">// 判断资源是否存在</span><span class="token keyword">boolean</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 从资源中获得 File 对象</span><span class="token class-name">File</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 从资源中获得 URI 对象</span><span class="token class-name">URI</span> <span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 从资源中获得 URI 对象</span><span class="token class-name">URL</span> <span class="token function">getURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 获得资源的 InputStream</span><span class="token class-name">InputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 获得资源的描述信息</span><span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="StreamUtils"><a href="#StreamUtils" class="headerlink" title="StreamUtils"></a>StreamUtils</h3><ol><li> 输入</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> in<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">String</span> in<span class="token punctuation">,</span> <span class="token class-name">Charset</span> charset<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span><span class="token keyword">long</span> <span class="token function">copyRange</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> out<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.输出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyToByteArray</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span><span class="token class-name">String</span> <span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">,</span> <span class="token class-name">Charset</span> charset<span class="token punctuation">)</span><span class="token comment">// 舍弃输入流中的内容</span><span class="token keyword">int</span> <span class="token function">drain</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射、AOP"><a href="#反射、AOP" class="headerlink" title="反射、AOP"></a>反射、AOP</h2><h3 id="ReflectionUtils"><a href="#ReflectionUtils" class="headerlink" title="ReflectionUtils"></a>ReflectionUtils</h3><ol><li> 获取方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 在类中查找指定方法</span><span class="token class-name">Method</span> <span class="token function">findMethod</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token comment">// 同上，额外提供方法参数类型作查找条件</span><span class="token class-name">Method</span> <span class="token function">findMethod</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> paramTypes<span class="token punctuation">)</span> <span class="token comment">// 获得类中所有方法，包括继承而来的</span><span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAllDeclaredMethods</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> leafClass<span class="token punctuation">)</span> <span class="token comment">// 在类中查找指定构造方法</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">accessibleConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span> <span class="token comment">// 是否是 equals() 方法</span><span class="token keyword">boolean</span> <span class="token function">isEqualsMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token comment">// 是否是 hashCode() 方法 </span><span class="token keyword">boolean</span> <span class="token function">isHashCodeMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token comment">// 是否是 toString() 方法</span><span class="token keyword">boolean</span> <span class="token function">isToStringMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token comment">// 是否是从 Object 类继承而来的方法</span><span class="token keyword">boolean</span> <span class="token function">isObjectMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token comment">// 检查一个方法是否声明抛出指定异常</span><span class="token keyword">boolean</span> <span class="token function">declaresException</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> exceptionType<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.执行方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 执行方法</span><span class="token class-name">Object</span> <span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span>  <span class="token comment">// 同上，提供方法参数</span><span class="token class-name">Object</span> <span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token comment">// 取消 Java 权限检查。以便后续执行该私有方法</span><span class="token keyword">void</span> <span class="token function">makeAccessible</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token comment">// 取消 Java 权限检查。以便后续执行私有构造方法</span><span class="token keyword">void</span> <span class="token function">makeAccessible</span><span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> ctor<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.获取字段</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 在类中查找指定属性</span><span class="token class-name">Field</span> <span class="token function">findField</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token comment">// 同上，多提供了属性的类型</span><span class="token class-name">Field</span> <span class="token function">findField</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> type<span class="token punctuation">)</span> <span class="token comment">// 是否为一个 "public static final" 属性</span><span class="token keyword">boolean</span> <span class="token function">isPublicStaticFinal</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.设置字段</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取 target 对象的 field 属性值</span><span class="token class-name">Object</span> <span class="token function">getField</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token comment">// 设置 target 对象的 field 属性值，值为 value</span><span class="token keyword">void</span> <span class="token function">setField</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token comment">// 同类对象属性对等赋值</span><span class="token keyword">void</span> <span class="token function">shallowCopyFieldState</span><span class="token punctuation">(</span><span class="token class-name">Object</span> src<span class="token punctuation">,</span> <span class="token class-name">Object</span> dest<span class="token punctuation">)</span><span class="token comment">// 取消 Java 的权限控制检查。以便后续读写该私有属性</span><span class="token keyword">void</span> <span class="token function">makeAccessible</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">)</span> <span class="token comment">// 对类的每个属性执行 callback</span><span class="token keyword">void</span> <span class="token function">doWithFields</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">ReflectionUtils<span class="token punctuation">.</span>FieldCallback</span> fc<span class="token punctuation">)</span> <span class="token comment">// 同上，多了个属性过滤功能。</span><span class="token keyword">void</span> <span class="token function">doWithFields</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">ReflectionUtils<span class="token punctuation">.</span>FieldCallback</span> fc<span class="token punctuation">,</span>                   <span class="token class-name">ReflectionUtils<span class="token punctuation">.</span>FieldFilter</span> ff<span class="token punctuation">)</span> <span class="token comment">// 同上，但不包括继承而来的属性</span><span class="token keyword">void</span> <span class="token function">doWithLocalFields</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">ReflectionUtils<span class="token punctuation">.</span>FieldCallback</span> fc<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AopUtils"><a href="#AopUtils" class="headerlink" title="AopUtils"></a>AopUtils</h3><ol><li> 判断代理类型</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断是不是 Spring 代理对象</span><span class="token keyword">boolean</span> <span class="token function">isAopProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 判断是不是 jdk 动态代理对象</span><span class="token function">isJdkDynamicProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 判断是不是 CGLIB 代理对象</span><span class="token keyword">boolean</span> <span class="token function">isCglibProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.获取被代理对象的 class</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取被代理的目标 class</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="AopContext"><a href="#AopContext" class="headerlink" title="AopContext"></a>AopContext</h3><ol><li> 获取当前对象的代理对象</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> <span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具轮子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中高级面试题总结</title>
      <link href="/2022/11/07/java-zhong-gao-ji-mian-shi-ti-zong-jie/"/>
      <url>/2022/11/07/java-zhong-gao-ji-mian-shi-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>目录</p><p>[前言][Link 1]</p><p>[Part 1 java基础][Part 1 java]</p><p>[1.1. JDK的基本的类库][1.1. JDK]</p><p>[1.2. java虚拟机相关知识点][1.2. java]</p><p>[1.4. Unsafe类][1.4. Unsafe]</p><p>[1.5. Session、cookie区别][1.5. Session_cookie]</p><p>[1.6. 权限问题][1.6.]</p><p>[1.7. 安全问题][1.7.]</p><p>[1.8 HashMap实现原理][1.8 HashMap]</p><p>[1.9. HashMap和HashTable的区别][1.9. HashMap_HashTable]</p><p>[1.9. ArrayList和LinkedList的区别][1.9. ArrayList_LinkedList]</p><p>[1.10 设计模式 ][1.10 _]</p><p>[1.12 NIO][]</p><p>[Part 2 多线程问题][Part 2]</p><p>[多线程问题（必问）][Link 2]</p><p>[Concurrenthashmap原理分析有用][Concurrenthashmap]</p><p>[Volitile关键字的作用][Volitile]</p><p>[Part 3 Spring与ORM映射框架][Part 3 Spring_ORM]</p><p>[面试题集锦：][Link 3]</p><p>[3.1. Spring作用域][3.1. Spring]</p><p>[3.2. SpringMVC面试题][3.2. SpringMVC]</p><p>[SpringMVC的流程][SpringMVC]</p><p>[SpringMVC与Struts2的区别][SpringMVC_Struts2]</p><p>[过滤器与拦截器区别][Link 4]</p><p>[4.4. Mybatis面试题][4.4. Mybatis]</p><p>[#{}和${}的区别是什么？][Link 5]</p><p>[Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？][Xml_select_insert_updae_delete]</p><p>[Mybatis批量插入数据][Mybatis]</p><p>[Part 4 SpringBoot相关][Part 4 SpringBoot]</p><p>[Springboot面试题集锦：][Springboot]</p><p>[Springboot优点][Springboot 1]</p><p>[springboot核心注解][springboot]</p><p>[Spring Boot 支持哪些日志框架][Spring Boot]</p><p>[Part 5 数据库相关][Part 5]</p><p>[面试题集锦：][Link 3]</p><p>[什么是数据库约束,常见的约束有哪几种?][Link 6]</p><p>[乐观锁和悲观锁][Link 7]</p><p>[什么是事务][Link 8]</p><p>[事务四大特性][Link 9]</p><p>[事务的并发问题][Link 10]</p><p>[事务的隔离级别][Link 11]</p><p>[事务的传播行为][Link 12]</p><p>[sql编写以及优化（必问）][sql]</p><p>[Part 5 其它问题][Part 5 1]</p><p>[怎么设计一个高并发系统（比如100万人同时抢票）][100]</p><p>[Spring cloud（有些公司的项目用不到这个）][Spring cloud]</p><p>[java性能优化][java]</p><p>[java8的新特性][java8]</p><p>[redis相关问题][redis]</p><p>[linux常用命令][linux]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章是我近期面试遇到的一些问题（技术类），做的一个总结。</p><p>注意：</p><p>1.有些问题没有标准答案，需要读者朋友在网上查找。</p><p>2.有些问题答案太长，三言两语道不尽，直接给了链接，可以复制链接去搜索。</p><p>3.有些技术涉及到很多问题，我给了总结的链接之后，又给大家列出了我面试遇到的题目</p><h1 id="Part-1-java基础"><a href="#Part-1-java基础" class="headerlink" title="Part 1 java基础"></a>Part 1 java基础</h1><h2 id="1-1-JDK的基本的类库"><a href="#1-1-JDK的基本的类库" class="headerlink" title="1.1. JDK的基本的类库"></a>1.1. JDK的基本的类库</h2><p>存放位置：jre/lib/rt.jar（这个问题很简单，但是很多人答不上来！）</p><p>常用的 Java 核心包 (Java Core Package)</p><p>java.lang Java 编程语言的基本类库（Object、String、StringBuffer、StringBuilder、System、Runtime、Throwable、Exception、Error、Thread、Math等）</p><p>java.io 通过数据流、对象序列以及文件系统实现的系统输入、输出</p><p>java.util 集合类、时间处理模式、日期时间工具等各类常用工具包</p><p>其它还有</p><p>java.sql 访问和处理来自于 Java 标准数据源数据的类</p><p>java.test 以一种独立于自然语言的方式处理文本、日期、数字和消息的类和接口</p><p>java.math简明的整数算术以及十进制算术的基本函数</p><h2 id="1-2-java虚拟机相关知识点"><a href="#1-2-java虚拟机相关知识点" class="headerlink" title="1.2. java虚拟机相关知识点"></a>1.2. java虚拟机相关知识点</h2><p>[<a href="https://shuhao.blog.csdn.net/article/details/113524369][https_shuhao.blog.csdn.net_article_details_113524369]">https://shuhao.blog.csdn.net/article/details/113524369][https_shuhao.blog.csdn.net_article_details_113524369]</a></p><h2 id="1-4-Unsafe类"><a href="#1-4-Unsafe类" class="headerlink" title="1.4. Unsafe类"></a>1.4. Unsafe类</h2><p>参考：[<a href="https://www.cnblogs.com/thomas12112406/p/6510787.html][https_www.cnblogs.com_thomas12112406_p_6510787.html]">https://www.cnblogs.com/thomas12112406/p/6510787.html][https_www.cnblogs.com_thomas12112406_p_6510787.html]</a></p><p>Unsafe类使Java拥有了像C语言的指针一样操作内存空间的能力，同时也带来了指针的问题</p><h2 id="1-5-Session、cookie区别"><a href="#1-5-Session、cookie区别" class="headerlink" title="1.5. Session、cookie区别"></a>1.5. Session、cookie区别</h2><p>1、cookie数据存放在客户端，session数据放在服务器上。</p><p>2、cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session。</p><p>3、session会在一定时间内保存在服务器上，当访问增多，会比较占用你服务器的性能，考虑性能应当使用cookie。</p><p>4、不同浏览器对cookie的数据大小限制不同，个数限制也不相同。</p><p>5、可以考虑将登陆信息等重要信息存放为session，不重要的信息可以放在cookie中。</p><h2 id="1-6-权限问题"><a href="#1-6-权限问题" class="headerlink" title="1.6. 权限问题"></a>1.6. 权限问题</h2><p>参考：[<a href="https://blog.csdn.net/Y0Q2T57s/article/details/82921270][https_blog.csdn.net_Y0Q2T57s_article_details_82921270]">https://blog.csdn.net/Y0Q2T57s/article/details/82921270][https_blog.csdn.net_Y0Q2T57s_article_details_82921270]</a></p><h2 id="1-7-安全问题"><a href="#1-7-安全问题" class="headerlink" title="1.7. 安全问题"></a>1.7. 安全问题</h2><p>参考：[<a href="https://blog.csdn.net/wojiushiwo945you/article/details/77920165][https_blog.csdn.net_wojiushiwo945you_article_details_77920165]">https://blog.csdn.net/wojiushiwo945you/article/details/77920165][https_blog.csdn.net_wojiushiwo945you_article_details_77920165]</a></p><p>shiro：[<a href="https://www.cnblogs.com/WUXIAOCHANG/p/10886534.html][https_www.cnblogs.com_WUXIAOCHANG_p_10886534.html]">https://www.cnblogs.com/WUXIAOCHANG/p/10886534.html][https_www.cnblogs.com_WUXIAOCHANG_p_10886534.html]</a></p><p>[<a href="https://blog.csdn.net/qq/_37254736/article/details/99350029][https_blog.csdn.net_qq_37254736_article_details_99350029]">https://blog.csdn.net/qq\_37254736/article/details/99350029][https_blog.csdn.net_qq_37254736_article_details_99350029]</a></p><h2 id="1-8-HashMap实现原理"><a href="#1-8-HashMap实现原理" class="headerlink" title="1.8 HashMap实现原理"></a>1.8 HashMap实现原理</h2><p>参考：[<a href="https://shuhao.blog.csdn.net/article/details/108733952][https_shuhao.blog.csdn.net_article_details_108733952]">https://shuhao.blog.csdn.net/article/details/108733952][https_shuhao.blog.csdn.net_article_details_108733952]</a></p><h2 id="1-9-HashMap和HashTable的区别"><a href="#1-9-HashMap和HashTable的区别" class="headerlink" title="1.9. HashMap和HashTable的区别"></a>1.9. HashMap和HashTable的区别</h2><p>1.HashMap继承了AbstractMap，HashTable继承Dictionary抽象类，两者均实现Map接口</p><p>2.HashMap和Hashtable的底层实现都是数组+链表结构实现、</p><p>3.Hashtable是线程安全，HashMap是非线程安全</p><p>HashMap的性能会高于Hashtable，我们平时使用时若无特殊需求建议使用HashMap，在多线程环境下若使用HashMap需要使用Collections.synchronizedMap()方法来获取一个线程安全的集合（Collections.synchronizedMap()实现原理是Collections定义了一个SynchronizedMap的内部类，这个类实现了Map接口，在调用方法时使用synchronized来保证线程同步</p><p>4.两者计算hash的方法不同：</p><p>Hashtable计算hash是直接使用key的hashcode对table数组的长度直接进行取模</p><p>HashMap计算hash对key的hashcode进行了二次hash，以获得更好的散列值，然后对table数组长度取摸</p><p>5.HashMap可以使用null作为key，不过建议还是尽量避免这样使用。HashMap以null作为key时，总是存储在table数组的第一个节点上。而Hashtable则不允许null作为key</p><p>6.HashMap的初始容量为16，Hashtable初始容量为11，两者的填充因子默认都是0.75</p><p>7.HashMap扩容时是当前容量翻倍即:capacity2，Hashtable扩容时是容量翻倍+1即:capacity2+1</p><h2 id="1-9-ArrayList和LinkedList的区别"><a href="#1-9-ArrayList和LinkedList的区别" class="headerlink" title="1.9. ArrayList和LinkedList的区别"></a>1.9. ArrayList和LinkedList的区别</h2><p>1、ArrayList和LinkedList可想从名字分析，它们一个是Array(动态数组)的数据结构，一个是Link(链表)的数据结构，此外，它们两个都是对List接口的实现。</p><p>前者是数组队列，相当于动态数组；后者为双向链表结构，也可当作堆栈、队列、双端队列</p><p>2、当随机访问List时（get和set操作），ArrayList比LinkedList的效率更高，因为LinkedList是线性的数据存储方式，所以需要移动指针从前往后依次查找。</p><p>3、当对数据进行增加和删除的操作时(add和remove操作)，LinkedList比ArrayList的效率更高，因为ArrayList是数组，所以在其中进行增删操作时，会对操作点之后所有数据的下标索引造成影响，需要进行数据的移动。</p><p>4、从利用效率来看，ArrayList自由性较低，因为它需要手动的设置固定大小的容量，但是它的使用比较方便，只需要创建，然后添加数据，通过调用下标进行使用；而LinkedList自由性较高，能够动态的随数据量的变化而变化，但是它不便于使用。</p><p>5、ArrayList主要控件开销在于需要在lList列表预留一定空间；而LinkList主要控件开销在于需要存储结点信息以及结点指针信息。</p><h2 id="1-10-设计模式"><a href="#1-10-设计模式" class="headerlink" title="1.10 设计模式"></a>1.10 设计模式</h2><p>参考：[<a href="http://c.biancheng.net/design/_pattern/][http_c.biancheng.net_design_pattern]">http://c.biancheng.net/design\_pattern/][http_c.biancheng.net_design_pattern]</a></p><h2 id="1-12-NIO"><a href="#1-12-NIO" class="headerlink" title="1.12 NIO"></a>1.12 NIO</h2><p>[Java中的IO与NIO面试题][Java_IO_NIO]</p><h1 id="Part-2-多线程问题"><a href="#Part-2-多线程问题" class="headerlink" title="Part 2 多线程问题"></a>Part 2 多线程问题</h1><h2 id="多线程问题（必问）"><a href="#多线程问题（必问）" class="headerlink" title="多线程问题（必问）"></a>多线程问题（必问）</h2><p>多线程的面试题太多了，下面的三个链接总结的很全面很详细：</p><p>[<a href="https://www.cnblogs.com/Jansens520/p/8624708.html][https_www.cnblogs.com_Jansens520_p_8624708.html]">https://www.cnblogs.com/Jansens520/p/8624708.html][https_www.cnblogs.com_Jansens520_p_8624708.html]</a></p><p>[<a href="https://www.cnblogs.com/wangjintao-0623/p/9727234.html][https_www.cnblogs.com_wangjintao-0623_p_9727234.html]">https://www.cnblogs.com/wangjintao-0623/p/9727234.html][https_www.cnblogs.com_wangjintao-0623_p_9727234.html]</a></p><p>[<a href="https://blog.csdn.net/zl1zl2zl3/article/details/81868173][https_blog.csdn.net_zl1zl2zl3_article_details_81868173]">https://blog.csdn.net/zl1zl2zl3/article/details/81868173][https_blog.csdn.net_zl1zl2zl3_article_details_81868173]</a></p><h2 id="Concurrenthashmap原理分析有用"><a href="#Concurrenthashmap原理分析有用" class="headerlink" title="Concurrenthashmap原理分析有用"></a>Concurrenthashmap原理分析有用</h2><p>HashTable容器在竞争激烈的并发环境下表现出效率低下的原因，是因为所有访问HashTable的线程都必须竞争同一把锁，那假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术，首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</p><h2 id="Volitile关键字的作用"><a href="#Volitile关键字的作用" class="headerlink" title="Volitile关键字的作用"></a>Volitile关键字的作用</h2><p>参考：[<a href="https://www.cnblogs.com/xd502djj/p/9873067.html][https_www.cnblogs.com_xd502djj_p_9873067.html]">https://www.cnblogs.com/xd502djj/p/9873067.html][https_www.cnblogs.com_xd502djj_p_9873067.html]</a></p><h1 id="Part-3-Spring与ORM映射框架"><a href="#Part-3-Spring与ORM映射框架" class="headerlink" title="Part 3 Spring与ORM映射框架"></a>Part 3 Spring与ORM映射框架</h1><h2 id="面试题集锦："><a href="#面试题集锦：" class="headerlink" title="面试题集锦："></a>面试题集锦：</h2><p>[<a href="https://blog.csdn.net/qq/_34337272/article/details/90955736][https_blog.csdn.net_qq_34337272_article_details_90955736]">https://blog.csdn.net/qq\_34337272/article/details/90955736][https_blog.csdn.net_qq_34337272_article_details_90955736]</a></p><h2 id="3-1-Spring作用域"><a href="#3-1-Spring作用域" class="headerlink" title="3.1. Spring作用域"></a>3.1. Spring作用域</h2><p>singleton：单例模式，当spring创建applicationContext容器的时候，spring会欲初始化所有的该作用域实例，加上lazy-init就可以避免预处理；</p><p>prototype：原型模式，每次通过getBean获取该bean就会新产生一个实例，创建后spring将不再对其管理；</p><p>====下面是在web项目下才用到的===</p><p>request：搞web的大家都应该明白request的域了吧，就是每次请求都新产生一个实例，和prototype不同就是创建后，接下来的管理，spring依然在监听；</p><p>session：每次会话，同上；</p><p>global session：全局的web域，类似于servlet中的application。</p><h2 id="3-2-SpringMVC面试题"><a href="#3-2-SpringMVC面试题" class="headerlink" title="3.2. SpringMVC面试题"></a>3.2. SpringMVC面试题</h2><p>面试题集锦：</p><p>[<a href="https://blog.csdn.net/a745233700/article/details/80963758][https_blog.csdn.net_a745233700_article_details_80963758]">https://blog.csdn.net/a745233700/article/details/80963758][https_blog.csdn.net_a745233700_article_details_80963758]</a></p><h2 id="SpringMVC的流程"><a href="#SpringMVC的流程" class="headerlink" title="SpringMVC的流程"></a>SpringMVC的流程</h2><p><img src="http://markdown.liangtengyu.com:9999/images//image_0aae936f.png" alt="image_0aae936f.png"><img src="http://markdown.liangtengyu.com:9999/images//image_b8bfb6ea.png" alt="image_b8bfb6ea.png"></p><h2 id="SpringMVC与Struts2的区别"><a href="#SpringMVC与Struts2的区别" class="headerlink" title="SpringMVC与Struts2的区别"></a>SpringMVC与Struts2的区别</h2><p>（1）springmvc的入口是一个servlet即前端控制器（DispatchServlet），而struts2入口是一个filter过虑器（StrutsPrepareAndExecuteFilter）。</p><p>（2）springmvc是基于方法开发(一个url对应一个方法)，请求参数传递到方法的形参，可以设计为单例或多例(建议单例)，struts2是基于类开发，传递参数是通过类的属性，只能设计为多例。</p><p>（3）Struts采用值栈存储请求和响应的数据，通过OGNL存取数据，springmvc通过参数解析器是将request请求内容解析，并给方法形参赋值，将数据和视图封装成ModelAndView对象，最后又将ModelAndView中的模型数据通过reques域传输到页面。Jsp视图解析器默认使用jstl</p><h2 id="过滤器与拦截器区别"><a href="#过滤器与拦截器区别" class="headerlink" title="过滤器与拦截器区别"></a>过滤器与拦截器区别</h2><p>①过滤器只能在容器初始化时被调用一次，在action的生命周期中，而拦截器可以多次被调用</p><p>②过滤器可以对几乎所有的请求起作用，拦截器只能对action请求起作用。</p><p>③过滤器不能访问action上下文、值栈里的对象，而拦截器可以访问。</p><p>④过滤器依赖于servlet容器，而拦截器不依赖于servlet容器。</p><p>⑤过滤器是基于函数回调，而拦截器是基于java的反射机制的。</p><p>⑥过滤器不能获取IOC容器中的各个bean，而拦截器可以，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。</p><h2 id="4-4-Mybatis面试题"><a href="#4-4-Mybatis面试题" class="headerlink" title="4.4. Mybatis面试题"></a>4.4. Mybatis面试题</h2><p>面试题集锦：</p><p>[<a href="https://blog.csdn.net/a745233700/article/details/80977133][https_blog.csdn.net_a745233700_article_details_80977133]">https://blog.csdn.net/a745233700/article/details/80977133][https_blog.csdn.net_a745233700_article_details_80977133]</a></p><h2 id="和-的区别是什么？"><a href="#和-的区别是什么？" class="headerlink" title="#{}和${}的区别是什么？"></a>#{}和${}的区别是什么？</h2><p>#{}是预编译处理，${}是字符串替换。</p><p>Mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；</p><p>Mybatis在处理${}时，就是把${}替换成变量的值。</p><p>使用#{}可以有效的防止SQL注入，提高系统安全性。</p><h2 id="Xml映射文件中，除了常见的select-insert-updae-delete标签之外，还有哪些标签？"><a href="#Xml映射文件中，除了常见的select-insert-updae-delete标签之外，还有哪些标签？" class="headerlink" title="Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？"></a>Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？</h2><p>trim | where | set | foreach | if | choose | when | otherwise | bind</p><h2 id="Mybatis批量插入数据"><a href="#Mybatis批量插入数据" class="headerlink" title="Mybatis批量插入数据"></a>Mybatis批量插入数据</h2><p>可以使用foreach标签</p><h1 id="Part-4-SpringBoot相关"><a href="#Part-4-SpringBoot相关" class="headerlink" title="Part 4 SpringBoot相关"></a>Part 4 SpringBoot相关</h1><h2 id="Springboot面试题集锦："><a href="#Springboot面试题集锦：" class="headerlink" title="Springboot面试题集锦："></a>Springboot面试题集锦：</h2><p>[<a href="https://blog.csdn.net/ThinkWon/article/details/104397299][https_blog.csdn.net_ThinkWon_article_details_104397299]">https://blog.csdn.net/ThinkWon/article/details/104397299][https_blog.csdn.net_ThinkWon_article_details_104397299]</a></p><p>[<a href="https://www.jianshu.com/p/14ef39ed8ad3][https_www.jianshu.com_p_14ef39ed8ad3]">https://www.jianshu.com/p/14ef39ed8ad3][https_www.jianshu.com_p_14ef39ed8ad3]</a></p><p>[<a href="https://segmentfault.com/a/1190000016686735][https_segmentfault.com_a_1190000016686735]">https://segmentfault.com/a/1190000016686735][https_segmentfault.com_a_1190000016686735]</a></p><h2 id="Springboot优点"><a href="#Springboot优点" class="headerlink" title="Springboot优点"></a>Springboot优点</h2><p>内置Tomcat、jetty，简化配置配置，restful风格</p><h2 id="springboot核心注解"><a href="#springboot核心注解" class="headerlink" title="springboot核心注解"></a>springboot核心注解</h2><p>SpringbootApplication，包含3个配置springbootConfiguration、enableAutoConfiguration、componentScan</p><h2 id="Spring-Boot-支持哪些日志框架"><a href="#Spring-Boot-支持哪些日志框架" class="headerlink" title="Spring Boot 支持哪些日志框架"></a>Spring Boot 支持哪些日志框架</h2><p>Spring Boot支持Java Util Logging,Log4j2,Lockback作为日志框架，如果你使用starters启动器，Spring Boot将使用Logback作为默认日志框架。无论使用哪种日志框架，Spring Boot都支持配置将日志输出到控制台或者文件中</p><h1 id="Part-5-数据库相关"><a href="#Part-5-数据库相关" class="headerlink" title="Part 5 数据库相关"></a>Part 5 数据库相关</h1><h2 id="面试题集锦：-1"><a href="#面试题集锦：-1" class="headerlink" title="面试题集锦："></a>面试题集锦：</h2><p>[<a href="https://www.cnblogs.com/wenxiaofei/p/9853682.html][https_www.cnblogs.com_wenxiaofei_p_9853682.html]">https://www.cnblogs.com/wenxiaofei/p/9853682.html][https_www.cnblogs.com_wenxiaofei_p_9853682.html]</a></p><h2 id="什么是数据库约束-常见的约束有哪几种"><a href="#什么是数据库约束-常见的约束有哪几种" class="headerlink" title="什么是数据库约束,常见的约束有哪几种?"></a>什么是数据库约束,常见的约束有哪几种?</h2><p>数据库约束用于保证数据库表数据的完整性（正确性和一致性）。可以通过定义约束\索引\触发器来保证数据的完整性。</p><p>总体来讲,约束可以分为:</p><p>主键约束：primary key；</p><p>外键约束：foreign key；</p><p>唯一约束：unique；</p><p>检查约束：check；</p><p>空值约束：not null；</p><p>默认值约束：default；</p><h2 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h2><p>参考：[<a href="https://blog.csdn.net/qq/_34337272/article/details/81072874][https_blog.csdn.net_qq_34337272_article_details_81072874]">https://blog.csdn.net/qq\_34337272/article/details/81072874][https_blog.csdn.net_qq_34337272_article_details_81072874]</a></p><h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><p>事务是对数据库中一系列操作进行统一的回滚或者提交的操作，主要用来保证数据的完整性和一致性。</p><h2 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h2><p>原子性（Atomicity）: 原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p><p>一致性（Consistency）: 事务开始前和结束后，数据库的完整性约束没有被破坏。比如A向B转账，不可能A扣了钱，B却没收到。</p><p>隔离性（Isolation）: 隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。</p><p>持久性（Durability）: 持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p><h2 id="事务的并发问题"><a href="#事务的并发问题" class="headerlink" title="事务的并发问题"></a>事务的并发问题</h2><p>1、脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</p><p>2、不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果因此本事务先后两次读到的数据结果会不一致。</p><p>3、幻读：幻读解决了不重复读，保证了同一个事务里，查询的结果都是事务开始时的状态（一致性）。</p><p>例如：事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作 这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有跟没有修改一样，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。</p><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><ol><li><p>读未提交：另一个事务修改了数据，但尚未提交，而本事务中的SELECT会读到这些未被提交的数据脏读</p></li><li><p>不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果因此本事务先后两次读到的数据结果会不一致。</p></li><li><p>可重复读：在同一个事务里，SELECT的结果是事务开始时时间点的状态，因此，同样的SELECT操作读到的结果会是一致的。但是，会有幻读现象</p></li><li><p>串行化：最高的隔离级别，在这个隔离级别下，不会产生任何异常。并发的事务，就像事务是在一个个按照顺序执行一样</p></li></ol><h2 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h2><p>1.PROPAGATION_REQUIRED：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，该设置是最常用的设置。</p><p>2.PROPAGATION_SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。</p><p>3.PROPAGATION_MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常。</p><p>4.PROPAGATION_REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务。</p><p>5.PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</p><p>6.PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。</p><p>7.PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</p><h2 id="sql编写以及优化（必问）"><a href="#sql编写以及优化（必问）" class="headerlink" title="sql编写以及优化（必问）"></a>sql编写以及优化（必问）</h2><p>参考：</p><p>[<a href="https://blog.csdn.net/qq/_38789941/article/details/83744271][https_blog.csdn.net_qq_38789941_article_details_83744271]">https://blog.csdn.net/qq\_38789941/article/details/83744271][https_blog.csdn.net_qq_38789941_article_details_83744271]</a></p><h1 id="Part-5-其它问题"><a href="#Part-5-其它问题" class="headerlink" title="Part 5 其它问题"></a>Part 5 其它问题</h1><h2 id="怎么设计一个高并发系统（比如100万人同时抢票）"><a href="#怎么设计一个高并发系统（比如100万人同时抢票）" class="headerlink" title="怎么设计一个高并发系统（比如100万人同时抢票）"></a>怎么设计一个高并发系统（比如100万人同时抢票）</h2><p>[<a href="https://blog.csdn.net/java/_leejin/article/details/98096274][https_blog.csdn.net_java_leejin_article_details_98096274]">https://blog.csdn.net/java\_leejin/article/details/98096274][https_blog.csdn.net_java_leejin_article_details_98096274]</a></p><h2 id="Spring-cloud（有些公司的项目用不到这个）"><a href="#Spring-cloud（有些公司的项目用不到这个）" class="headerlink" title="Spring cloud（有些公司的项目用不到这个）"></a>Spring cloud（有些公司的项目用不到这个）</h2><p>面试题集锦：</p><p>[<a href="https://blog.csdn.net/hjq/_ku/article/details/89504229][https_blog.csdn.net_hjq_ku_article_details_89504229]">https://blog.csdn.net/hjq\_ku/article/details/89504229][https_blog.csdn.net_hjq_ku_article_details_89504229]</a></p><p>[<a href="https://blog.csdn.net/oldshaui/article/details/90675149][https_blog.csdn.net_oldshaui_article_details_90675149]">https://blog.csdn.net/oldshaui/article/details/90675149][https_blog.csdn.net_oldshaui_article_details_90675149]</a></p><p><img src="http://markdown.liangtengyu.com:9999/images//image_63a70387.png" alt="image_63a70387.png"><img src="http://markdown.liangtengyu.com:9999/images//image_4b7e356a.png" alt="image_4b7e356a.png"></p><h2 id="java性能优化"><a href="#java性能优化" class="headerlink" title="java性能优化"></a>java性能优化</h2><p>[<a href="http://www.wityx.com/post/424/_1/_1.html][http_www.wityx.com_post_424_1_1.html]">http://www.wityx.com/post/424\_1\_1.html][http_www.wityx.com_post_424_1_1.html]</a></p><h2 id="java8的新特性"><a href="#java8的新特性" class="headerlink" title="java8的新特性"></a>java8的新特性</h2><p>[<a href="https://www.cnblogs.com/onetwo/p/8526374.html][https_www.cnblogs.com_onetwo_p_8526374.html]">https://www.cnblogs.com/onetwo/p/8526374.html][https_www.cnblogs.com_onetwo_p_8526374.html]</a></p><h2 id="redis相关问题"><a href="#redis相关问题" class="headerlink" title="redis相关问题"></a>redis相关问题</h2><p>[<a href="https://www.cnblogs.com/jasontec/p/9699242.html][https_www.cnblogs.com_jasontec_p_9699242.html]">https://www.cnblogs.com/jasontec/p/9699242.html][https_www.cnblogs.com_jasontec_p_9699242.html]</a></p><h2 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h2><p>[<a href="https://blog.csdn.net/qq/_26230421/article/details/98359696][https_blog.csdn.net_qq_26230421_article_details_98359696]">https://blog.csdn.net/qq\_26230421/article/details/98359696][https_blog.csdn.net_qq_26230421_article_details_98359696]</a></p><p>这些技术都会的话就可以上战场了</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ConcurrentHashMap是如何保证线程安全</title>
      <link href="/2022/11/04/concurrenthashmap-shi-ru-he-bao-zheng-xian-cheng-an-quan/"/>
      <url>/2022/11/04/concurrenthashmap-shi-ru-he-bao-zheng-xian-cheng-an-quan/</url>
      
        <content type="html"><![CDATA[<p>我们知道，ConcurrentHashmap(1.8)这个并发集合框架是线程安全的，当你看到源码的get操作时，会发现get操作全程是没有加任何锁的，这也是这篇博文讨论的问题——为什么它不需要加锁呢？</p><h3 id="ConcurrentHashMap的简介"><a href="#ConcurrentHashMap的简介" class="headerlink" title="ConcurrentHashMap的简介"></a>ConcurrentHashMap的简介</h3><blockquote><p>我想有基础的同学知道在jdk1.7中是采用Segment + HashEntry + ReentrantLock的方式进行实现的，而1.8中放弃了Segment臃肿的设计，取而代之的是采用Node + CAS + Synchronized来保证并发安全进行实现。</p></blockquote><ul><li> JDK1.8的实现降低锁的粒度，JDK1.7版本锁的粒度是基于Segment的，包含多个HashEntry，而JDK1.8锁的粒度就是HashEntry（首节点）</li><li> JDK1.8版本的数据结构变得更加简单，使得操作也更加清晰流畅，因为已经使用synchronized来进行同步，所以不需要分段锁的概念，也就不需要Segment这种数据结构了，由于粒度的降低，实现的复杂度也增加了</li><li> JDK1.8使用红黑树来优化链表，基于长度很长的链表的遍历是一个很漫长的过程，而红黑树的遍历效率是很快的，代替一定阈值的链表，这样形成一个最佳拍档</li></ul><h3 id><a href="#" class="headerlink" title></a><img src="/2022/11/04/concurrenthashmap-shi-ru-he-bao-zheng-xian-cheng-an-quan/image_256782fc-20221104171702786.png" alt="image_256782fc.png"></h3><h3 id="get操作源码"><a href="#get操作源码" class="headerlink" title="get操作源码"></a>get操作源码</h3><ul><li><p>首先计算hash值，定位到该table索引位置，如果是首节点符合就返回</p></li><li><p>如果遇到扩容的时候，会调用标志正在扩容节点ForwardingNode的find方法，查找该节点，匹配就返回</p></li><li><p>以上都不符合的话，就往下遍历节点，匹配就返回，否则最后就返回null</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//会发现源码中没有一处加了锁</span><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">,</span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> eh<span class="token punctuation">;</span> <span class="token class-name">K</span> ek<span class="token punctuation">;</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//计算hash</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>      <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//读取首节点的Node元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>eh <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//如果该节点就是首节点就返回</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//hash值为负值表示正在扩容，这个时候查的是ForwardingNode的find方法来定位到nextTable来</span>        <span class="token comment">//eh=-1，说明该节点是一个ForwardingNode，正在迁移，此时调用ForwardingNode的find方法去nextTable里找。</span>        <span class="token comment">//eh=-2，说明该节点是一个TreeBin，此时调用TreeBin的find方法遍历红黑树，由于红黑树有可能正在旋转变色，所以find里会有读写锁。</span>        <span class="token comment">//eh>=0，说明该节点下挂的是一个链表，直接遍历该链表即可。</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eh <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//既不是首节点也不是ForwardingNode，那就往下遍历</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span>             <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>get没有加锁的话，ConcurrentHashMap是如何保证读到的数据不是脏数据的呢？</p></blockquote><h3 id="volatile登场"><a href="#volatile登场" class="headerlink" title="volatile登场"></a>volatile登场</h3><p>对于可见性，Java提供了volatile关键字来保证可见性、有序性。但不保证原子性。</p><p>普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。</p><ul><li> volatile关键字对于基本类型的修改可以在随后对多个线程的读保持一致，但是对于引用类型如数组，实体bean，仅仅保证引用的可见性，但并不保证引用内容的可见性。。</li><li> 禁止进行指令重排序。</li></ul><p>背景：为了提高处理速度，处理器不直接和内存进行通信，而是先将系统内存的数据读到内部缓存（L1，L2或其他）后再进行操作，但操作完不知道何时会写到内存。</p><ul><li> 如果对声明了volatile的变量进行写操作，JVM就会向处理器发送一条指令，将这个变量所在缓存行的数据写回到系统内存。但是，就算写回到内存，如果其他处理器缓存的值还是旧的，再执行计算操作就会有问题。</li><li>在多处理器下，为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，当某个CPU在写数据时，如果发现操作的变量是共享变量，则会通知其他CPU告知该变量的缓存行是无效的，因此其他CPU在读取该变量时，发现其无效会重新从主存中加载数据。</li></ul><p><img src="/2022/11/04/concurrenthashmap-shi-ru-he-bao-zheng-xian-cheng-an-quan/image_4be279cf-20221104171705595.png" alt="image_4be279cf.png"></p><p>总结下来：  </p><p>第一：使用volatile关键字会强制将修改的值立即写入主存；</p><p>第二：使用volatile关键字的话，当线程2进行修改时，会导致线程1的工作内存中缓存变量的缓存行无效（反映到硬件层的话，就是CPU的L1或者L2缓存中对应的缓存行无效）；</p><p>第三：由于线程1的工作内存中缓存变量的缓存行无效，所以线程1再次读取变量的值时会去主存读取。</p><h3 id="是加在数组上的volatile吗"><a href="#是加在数组上的volatile吗" class="headerlink" title="是加在数组上的volatile吗?"></a>是加在数组上的volatile吗?</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * The array of bins. Lazily initialized upon first insertion. * Size is always a power of two. Accessed directly by iterators. */</span><span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们知道volatile可以修饰数组的，只是意思和它表面上看起来的样子不同。举个栗子，volatile int array[10]是指array的地址是volatile的而不是数组元素的值是volatile的.</p><h3 id="用volatile修饰的Node"><a href="#用volatile修饰的Node" class="headerlink" title="用volatile修饰的Node"></a>用volatile修饰的Node</h3><p>get操作可以无锁是由于Node的元素val和指针next是用volatile修饰的，在多线程环境下线程A修改结点的val或者新增节点的时候是对线程B可见的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>    <span class="token comment">//可以看到这些都用了volatile修饰</span>    <span class="token keyword">volatile</span> <span class="token class-name">V</span> val<span class="token punctuation">;</span>    <span class="token keyword">volatile</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> val<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> val<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> val<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> val<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> k<span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">;</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>          <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>          <span class="token punctuation">(</span>v <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>          <span class="token punctuation">(</span>k <span class="token operator">==</span> key <span class="token operator">||</span> k<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>          <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token punctuation">(</span>u <span class="token operator">=</span> val<span class="token punctuation">)</span> <span class="token operator">||</span> v<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token comment">/**    * Virtualized support for map.get(); overridden in subclasses.    */</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token class-name">Object</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">K</span> ek<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span>                 <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> k<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token keyword">return</span> e<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>既然volatile修饰数组对get操作没有效果那加在数组上的volatile的目的是什么呢？</p></blockquote><p>其实就是为了使得Node数组在扩容的时候对其他线程具有可见性而加的volatile</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li> 在1.8中ConcurrentHashMap的get操作全程不需要加锁，这也是它比其他并发集合比如hashtable、用Collections.synchronizedMap()包装的hashmap;安全效率高的原因之一。</li><li> get操作全程不需要加锁是因为Node的成员val是用volatile修饰的和数组用volatile修饰没有关系。</li><li> 数组用volatile修饰主要是保证在数组扩容的时候保证可见性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不推荐使用@Autowired注解</title>
      <link href="/2022/11/04/bu-tui-jian-shi-yong-autowired-zhu-jie/"/>
      <url>/2022/11/04/bu-tui-jian-shi-yong-autowired-zhu-jie/</url>
      
        <content type="html"><![CDATA[<p>大家在使用IDEA开发的时候有没有注意到过一个提示，在字段上使用Spring的依赖注入注解<code>@Autowired</code>后会出现如下警告  </p><blockquote><p>Field injection is not recommended (字段注入是不被推荐的)</p></blockquote><p>但是使用<code>@Resource</code>却不会出现此提示</p><p>网上文章大部分都是介绍两者的区别，没有提到为什么，当时想了好久想出了可能的原因，今天来总结一下</p><h2 id="Spring常见的DI方式"><a href="#Spring常见的DI方式" class="headerlink" title="Spring常见的DI方式"></a>Spring常见的DI方式</h2><ul><li> 构造器注入：利用构造方法的参数注入依赖</li><li> Setter注入：调用Setter的方法注入依赖</li><li> 字段注入：在字段上使用<code>@Autowired/Resource</code>注解</li></ul><h3 id="Autowired-VS-Resource"><a href="#Autowired-VS-Resource" class="headerlink" title="@Autowired VS @Resource"></a>@Autowired VS @Resource</h3><p>事实上，他们的基本功能都是通过注解实现依赖注入，只不过<code>@Autowired</code>是<code>Spring</code>定义的，而<code>@Resource</code>是<code>JSR-250</code>定义的。大致功能基本相同，但是还有一些细节不同：</p><ul><li> 依赖识别方式：<code>@Autowired</code>默认是byType可以使用<code>@Qualifier</code>指定Name，<code>@Resource</code>默认ByName如果找不到则ByType</li><li> 适用对象：<code>@Autowired</code>可以对构造器、方法、参数、字段使用，<code>@Resource</code>只能对方法、字段使用</li><li> 提供方：<code>@Autowired</code>是Spring提供的，<code>@Resource</code>是JSR-250提供的</li></ul><h2 id="各种DI方式的优缺点"><a href="#各种DI方式的优缺点" class="headerlink" title="各种DI方式的优缺点"></a>各种DI方式的优缺点</h2><p>参考Spring官方文档，建议了如下的使用场景：</p><ul><li> 构造器注入：强依赖性（即必须使用此依赖），不变性（各依赖不会经常变动）</li><li> Setter注入：可选（没有此依赖也可以工作），可变（依赖会经常变动）</li><li> Field注入：大多数情况下尽量少使用字段注入，一定要使用的话， @Resource相对@Autowired对IoC容器的耦合更低</li></ul><h2 id="Field注入的缺点"><a href="#Field注入的缺点" class="headerlink" title="Field注入的缺点"></a>Field注入的缺点</h2><ul><li> 不能像构造器那样注入不可变的对象</li><li> 依赖对外部不可见，外界可以看到构造器和setter，但无法看到私有字段，自然无法了解所需依赖</li><li> 会导致组件与IoC容器紧耦合（这是最重要的原因，离开了IoC容器去使用组件，在注入依赖时就会十分困难）</li><li> 导致单元测试也必须使用IoC容器，原因同上</li><li> 依赖过多时不够明显，比如我需要10个依赖，用构造器注入就会显得庞大，这时候应该考虑一下此组件是不是违反了单一职责原则</li></ul><h3 id="为什么IDEA只对-Autowired警告"><a href="#为什么IDEA只对-Autowired警告" class="headerlink" title="为什么IDEA只对@Autowired警告"></a>为什么IDEA只对@Autowired警告</h3><p>Field注入虽然有很多缺点，但它的好处也不可忽略：那就是太方便了。使用构造器或者setter注入需要写更多业务无关的代码，十分麻烦，而字段注入大幅简化了它们。并且绝大多数情况下业务代码和框架就是强绑定的，完全松耦合只是一件理想上的事，牺牲了敏捷度去过度追求松耦合反而得不偿失。</p><blockquote><p>那么问题来了，为什么IDEA只对@Autowired警告，却对@Resource视而不见呢？</p></blockquote><p>个人认为，就像我们前面提到过的：@Autowired是Spring提供的，它是特定IoC提供的特定注解，这就导致了应用与框架的强绑定，一旦换用了其他的IoC框架，是不能够支持注入的。</p><p>而 @Resource是JSR-250提供的，它是Java标准，我们使用的IoC容器应当去兼容它，这样即使更换容器，也可以正常工作。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ioc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23种设计模式的通俗解释</title>
      <link href="/2022/11/04/23-chong-she-ji-mo-shi-de-tong-su-jie-shi/"/>
      <url>/2022/11/04/23-chong-she-ji-mo-shi-de-tong-su-jie-shi/</url>
      
        <content type="html"><![CDATA[<ul><li> 01 工厂方法</li><li> 02 建造者模式</li><li> 03 抽象工厂</li><li> 04 原型模式</li><li> 05 单态模式</li><li> 06 适配器模式</li><li> 07 桥梁模式</li><li> 08 合成模式</li><li> 09 装饰模式</li><li> 10 门面模式</li><li> 11 享元模式</li><li> 12 代理模式</li><li> 13 责任链模式</li><li> 14 命令模式</li><li> 15 解释器模式</li><li> 16 迭代模式</li><li> 17 调停者模式</li><li> 18 备忘录模式</li><li> 19 观察者模式</li><li> 20 状态模式</li><li> 21 策略模式</li><li> 22 模板方法模式</li><li> 23 访问者模式</li></ul><h2 id="01-工厂方法"><a href="#01-工厂方法" class="headerlink" title="01 工厂方法"></a>01 工厂方法</h2><p>追 MM 少不了请吃饭了，麦当劳的鸡翅和肯德基的鸡翅都是 MM 爱吃的东西，虽然口味有所不同，但不管你带 MM 去麦当劳或肯德基，只管向服务员说「来四个鸡翅」就行了。麦当劳和肯德基就是生产鸡翅的 Factory 工厂模式：客户类和工厂类分开。</p><p>消费者任何时候需要某种产品，只需向工厂请求即可。消费者无须修改就可以接纳新产品。缺点是当产品修改时，工厂类也要做相应的修改。如：如何创建及如何向客户端提供。</p><h2 id="02-建造者模式"><a href="#02-建造者模式" class="headerlink" title="02 建造者模式"></a>02 建造者模式</h2><p>MM 最爱听的就是「我爱你」这句话了，见到不同地方的 MM，要能够用她们的方言跟她说这句话哦，我有一个多种语言翻译机，上面每种语言都有一个按键，见到 MM 我只要按对应的键，它就能够用相应的语言说出「我爱你」这句话了，国外的 MM 也可以轻松搞掂，这就是我的「我爱你」builder。</p><p>建造模式：将产品的内部表象和产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。建造模式使得产品内部表象可以独立的变化，客户不必知道产品内部组成的细节。建造模式可以强制实行一种分步骤进行的建造过程。</p><h2 id="03-抽象工厂"><a href="#03-抽象工厂" class="headerlink" title="03 抽象工厂"></a>03 抽象工厂</h2><p>请 MM 去麦当劳吃汉堡，不同的 MM 有不同的口味，要每个都记住是一件烦人的事情，我一般采用 Factory Method 模式，带着 MM 到服务员那儿，说「要一个汉堡」，具体要什么样的汉堡呢，让 MM 直接跟服务员说就行了。</p><p>工厂方法模式：核心工厂类不再负责所有产品的创建，而是将具体创建的工作交给子类去做，成为一个抽象工厂角色，仅负责给出具体工厂类必须实现的接口，而不接触哪一个产品类应当被实例化这种细节。</p><h2 id="04-原型模式"><a href="#04-原型模式" class="headerlink" title="04 原型模式"></a>04 原型模式</h2><p>跟 MM 用 QQ 聊天，一定要说些深情的话语了，我搜集了好多肉麻的情话，需要时只要 copy 出来放到 QQ 里面就行了，这就是我的情话 prototype 了。（100 块钱一份，你要不要）</p><p>原始模型模式：通过给出一个原型对象来指明所要创建的对象的类型，然后用复制这个原型对象的方法创建出更多同类型的对象。原始模型模式允许动态的增加或减少产品类，产品类不需要非得有任何事先确定的等级结构，原始模型模式适用于任何的等级结构。缺点是每一个类都必须配备一个克隆方法。</p><h2 id="05-单态模式"><a href="#05-单态模式" class="headerlink" title="05 单态模式"></a>05 单态模式</h2><p>俺有 6 个漂亮的老婆，她们的老公都是我，我就是我们家里的老公 Sigleton，她们只要说道「老公」，都是指的同一个人，那就是我 (刚才做了个梦啦，哪有这么好的事)</p><p>单例模式：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例单例模式。单例模式只应在有真正的 “单一实例” 的需求时才可使用。</p><h2 id="06-适配器模式"><a href="#06-适配器模式" class="headerlink" title="06 适配器模式"></a>06 适配器模式</h2><p>在朋友聚会上碰到了一个美女 Sarah，从香港来的，可我不会说粤语，她不会说普通话，只好求助于我的朋友 kent 了，他作为我和 Sarah 之间的 Adapter，让我和 Sarah 可以相互交谈了 (也不知道他会不会耍我)</p><p>适配器（变压器）模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口原因不匹配而无法一起工作的两个类能够一起工作。适配类可以根据参数返还一个合适的实例给客户端。</p><h2 id="07-桥梁模式"><a href="#07-桥梁模式" class="headerlink" title="07 桥梁模式"></a>07 桥梁模式</h2><p>早上碰到 MM，要说早上好，晚上碰到 MM，要说晚上好；碰到 MM 穿了件新衣服，要说你的衣服好漂亮哦，碰到 MM 新做的发型，要说你的头发好漂亮哦。不要问我 “早上碰到 MM 新做了个发型怎么说” 这种问题，自己用 BRIDGE 组合一下不就行了</p><p>桥梁模式：将抽象化与实现化脱耦，使得二者可以独立的变化，也就是说将他们之间的强关联变成弱关联，也就是指在一个软件系统的抽象化和实现化之间使用组合 / 聚合关系而不是继承关系，从而使两者可以独立的变化。</p><p>08 合成模式 Mary 今天过生日。“我过生日，你要送我一件礼物。”“嗯，好吧，去商店，你自己挑。”“这件 T 恤挺漂亮，买，这条裙子好看，买，这个包也不错，买。”“喂，买了三件了呀，我只答应送一件礼物的哦。”“什么呀，T 恤加裙子加包包，正好配成一套呀，小姐，麻烦你包起来。”“……”，MM 都会用 Composite 模式了，你会了没有？</p><p>合成模式：合成模式将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式就是一个处理对象的树结构的模式。合成模式把部分与整体的关系用树结构表示出来。合成模式使得客户端把一个个单独的成分对象和由他们复合而成的合成对象同等看待。</p><h2 id="09-装饰模式"><a href="#09-装饰模式" class="headerlink" title="09 装饰模式"></a>09 装饰模式</h2><p>Mary 过完轮到 Sarly 过生日，还是不要叫她自己挑了，不然这个月伙食费肯定玩完，拿出我去年在华山顶上照的照片，在背面写上 “最好的的礼物，就是爱你的 Fita”，再到街上礼品店买了个像框（卖礼品的 MM 也很漂亮哦），再找隔壁搞美术设计的 Mike 设计了一个漂亮的盒子装起来……，我们都是 Decorator，最终都在修饰我这个人呀，怎么样，看懂了吗？</p><p>装饰模式：装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案，提供比继承更多的灵活性。动态给一个对象增加功能，这些功能可以再动态的撤消。增加由一些基本功能的排列组合而产生的非常大量的功能。</p><h2 id="10-门面模式"><a href="#10-门面模式" class="headerlink" title="10 门面模式"></a>10 门面模式</h2><p>我有一个专业的 Nikon 相机，我就喜欢自己手动调光圈、快门，这样照出来的照片才专业，但 MM 可不懂这些，教了半天也不会。幸好相机有 Facade 设计模式，把相机调整到自动档，只要对准目标按快门就行了，一切由相机自动调整，这样 MM 也可以用这个相机给我拍张照片了。门面模式：外部与一个子系统的通信必须通过一个统一的门面对象进行。</p><p>门面模式提供一个高层次的接口，使得子系统更易于使用。每一个子系统只有一个门面类，而且此门面类只有一个实例，也就是说它是一个单例模式。但整个系统可以有多个门面类。</p><h2 id="11-享元模式"><a href="#11-享元模式" class="headerlink" title="11 享元模式"></a>11 享元模式</h2><p>每天跟 MM 发短信，手指都累死了，最近买了个新手机，可以把一些常用的句子存在手机里，要用的时候，直接拿出来，在前面加上 MM 的名字就可以发送了，再不用一个字一个字敲了。共享的句子就是 Flyweight，MM 的名字就是提取出来的外部特征，根据上下文情况使用。享元模式：FLYWEIGHT 在拳击比赛中指最轻量级。</p><p>享元模式以共享的方式高效的支持大量的细粒度对象。享元模式能做到共享的关键是区分内蕴状态和外蕴状态。内蕴状态存储在享元内部，不会随环境的改变而有所不同。外蕴状态是随环境的改变而改变的。外蕴状态不能影响内蕴状态，它们是相互独立的。</p><p>将可以共享的状态和不可以共享的状态从常规类中区分开来，将不可以共享的状态从类里剔除出去。客户端不可以直接创建被共享的对象，而应当使用一个工厂对象负责创建被共享的对象。享元模式大幅度的降低内存中对象的数量。</p><h2 id="12-代理模式"><a href="#12-代理模式" class="headerlink" title="12 代理模式"></a>12 代理模式</h2><p>跟 MM 在网上聊天，一开头总是 “hi, 你好”,“你从哪儿来呀？”“你多大了？”“身高多少呀？” 这些话，真烦人，写个程序做为我的 Proxy 吧，凡是接收到这些话都设置好了自己的回答，接收到其他的话时再通知我回答，怎么样，酷吧。</p><p>代理模式：代理模式给某一个对象提供一个代理对象，并由代理对象控制对源对象的引用。代理就是一个人或一个机构代表另一个人或者一个机构采取行动。某些情况下，客户不想或者不能够直接引用一个对象，代理对象可以在客户和目标对象直接起到中介的作用。</p><p>客户端分辨不出代理主题对象与真实主题对象。代理模式可以并不知道真正的被代理对象，而仅仅持有一个被代理对象的接口，这时候代理对象不能够创建被代理对象，被代理对象必须有系统的其他角色代为创建并传入。</p><h2 id="13-责任链模式"><a href="#13-责任链模式" class="headerlink" title="13 责任链模式"></a>13 责任链模式</h2><p>晚上去上英语课，为了好开溜坐到了最后一排，哇，前面坐了好几个漂亮的 MM 哎，找张纸条，写上 “Hi, 可以做我的女朋友吗？如果不愿意请向前传”，纸条就一个接一个的传上去了，糟糕，传到第一排的 MM 把纸条传给老师了，听说是个老处女呀，快跑！</p><p>责任链模式：在责任链模式中，很多对象由每一个对象对其下家的引用而接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。客户并不知道链上的哪一个对象最终处理这个请求，系统可以在不影响客户端的情况下动态的重新组织链和分配责任。处理者有两个选择：承担责任或者把责任推给下家。一个请求可以最终不被任何接收端对象所接受。</p><h2 id="14-命令模式"><a href="#14-命令模式" class="headerlink" title="14 命令模式"></a>14 命令模式</h2><p>俺有一个 MM 家里管得特别严，没法见面，只好借助于她弟弟在我们俩之间传送信息，她对我有什么指示，就写一张纸条让她弟弟带给我。这不，她弟弟又传送过来一个 COMMAND，为了感谢他，我请他吃了碗杂酱面，哪知道他说：“我同时给我姐姐三个男朋友送 COMMAND，就数你最小气，才请我吃面。”</p><p>命令模式：命令模式把一个请求或者操作封装到一个对象中。命令模式把发出命令的责任和执行命令的责任分割开，委派给不同的对象。命令模式允许请求的一方和发送的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否执行，何时被执行以及是怎么被执行的。系统支持命令的撤消。</p><h2 id="15-解释器模式"><a href="#15-解释器模式" class="headerlink" title="15 解释器模式"></a>15 解释器模式</h2><p>俺有一个《泡 MM 真经》，上面有各种泡 MM 的攻略，比如说去吃西餐的步骤、去看电影的方法等等，跟 MM 约会时，只要做一个 Interpreter，照着上面的脚本执行就可以了。</p><p>解释器模式：给定一个语言后，解释器模式可以定义出其文法的一种表示，并同时提供一个解释器。客户端可以使用这个解释器来解释这个语言中的句子。解释器模式将描述怎样在有了一个简单的文法后，使用模式设计解释这些语句。</p><p>在解释器模式里面提到的语言是指任何解释器对象能够解释的任何组合。在解释器模式中需要定义一个代表文法的命令类的等级结构，也就是一系列的组合规则。每一个命令对象都有一个解释方法，代表对命令对象的解释。命令对象的等级结构中的对象的任何排列组合都是一个语言。</p><h2 id="16-迭代模式"><a href="#16-迭代模式" class="headerlink" title="16 迭代模式"></a>16 迭代模式</h2><p>我爱上了 Mary，不顾一切的向她求婚。Mary：“想要我跟你结婚，得答应我的条件” 我：“什么条件我都答应，你说吧” Mary：“我看上了那个一克拉的钻石” 我：“我买，我买，还有吗？” Mary：“我看上了湖边的那栋别墅” 我：“我买，我买，还有吗？” Mary：“我看上那辆法拉利跑车” 我脑袋嗡的一声，坐在椅子上，一咬牙：“我买，我买，还有吗？”</p><p>迭代模式：迭代模式可以顺序访问一个聚集中的元素而不必暴露聚集的内部表象。多个对象聚在一起形成的总体称之为聚集，聚集对象是能够包容一组对象的容器对象。迭代子模式将迭代逻辑封装到一个独立的子对象中，从而与聚集本身隔开。</p><p>迭代模式简化了聚集的界面。每一个聚集对象都可以有一个或一个以上的迭代子对象，每一个迭代子的迭代状态可以是彼此独立的。迭代算法可以独立于聚集角色变化。</p><h2 id="17-调停者模式"><a href="#17-调停者模式" class="headerlink" title="17 调停者模式"></a>17 调停者模式</h2><p>四个 MM 打麻将，相互之间谁应该给谁多少钱算不清楚了，幸亏当时我在旁边，按照各自的筹码数算钱，赚了钱的从我这里拿，赔了钱的也付给我，一切就 OK 啦，俺得到了四个 MM 的电话。调停者模式：调停者模式包装了一系列对象相互作用的方式，使得这些对象不必相互明显作用。从而使他们可以松散偶合。</p><p>当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用。保证这些作用可以彼此独立的变化。调停者模式将多对多的相互作用转化为一对多的相互作用。调停者模式将对象的行为和协作抽象化，把对象在小尺度的行为上与其他对象的相互作用分开处理。</p><h2 id="18-备忘录模式"><a href="#18-备忘录模式" class="headerlink" title="18 备忘录模式"></a>18 备忘录模式</h2><p>同时跟几个 MM 聊天时，一定要记清楚刚才跟 MM 说了些什么话，不然 MM 发现了会不高兴的哦，幸亏我有个备忘录，刚才与哪个 MM 说了什么话我都拷贝一份放到备忘录里面保存，这样可以随时察看以前的记录啦。</p><p>备忘录模式：备忘录对象是一个用来存储另外一个对象内部状态的快照的对象。备忘录模式的用意是在不破坏封装的条件下，将一个对象的状态捉住，并外部化，存储起来，从而可以在将来合适的时候把这个对象还原到存储起来的状态。</p><h2 id="19-观察者模式"><a href="#19-观察者模式" class="headerlink" title="19 观察者模式"></a>19 观察者模式</h2><p>想知道咱们公司最新 MM 情报吗？加入公司的 MM 情报邮件组就行了，tom 负责搜集情报，他发现的新情报不用一个一个通知我们，直接发布给邮件组，我们作为订阅者（观察者）就可以及时收到情报啦。</p><p>观察者模式：观察者模式定义了一种一队多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。</p><h2 id="20-状态模式"><a href="#20-状态模式" class="headerlink" title="20 状态模式"></a>20 状态模式</h2><p>跟 MM 交往时，一定要注意她的状态哦，在不同的状态时她的行为会有不同，比如你约她今天晚上去看电影，对你没兴趣的 MM 就会说 “有事情啦”，对你不讨厌但还没喜欢上的 MM 就会说 “好啊，不过可以带上我同事么？”，已经喜欢上你的 MM 就会说 “几点钟？看完电影再去泡吧怎么样？”，当然你看电影过程中表现良好的话，也可以把 MM 的状态从不讨厌不喜欢变成喜欢哦。</p><p>状态模式：状态模式允许一个对象在其内部状态改变的时候改变行为。这个对象看上去象是改变了它的类一样。状态模式把所研究的对象的行为包装在不同的状态对象里，每一个状态对象都属于一个抽象状态类的一个子类。</p><p>状态模式的意图是让一个对象在其内部状态改变的时候，其行为也随之改变。状态模式需要对每一个系统可能取得的状态创立一个状态类的子类。当系统的状态变化时，系统便改变所选的子类。</p><h2 id="21-策略模式"><a href="#21-策略模式" class="headerlink" title="21 策略模式"></a>21 策略模式</h2><p>跟不同类型的 MM 约会，要用不同的策略，有的请电影比较好，有的则去吃小吃效果不错，有的去海边浪漫最合适，单目的都是为了得到 MM 的芳心，我的追 MM 锦囊中有好多 Strategy 哦。策略模式：策略模式针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。</p><p>策略模式使得算法可以在不影响到客户端的情况下发生变化。策略模把行为和环境分开。环境类负责维持和查询行为类，各种算法在具体的策略类中提供。由于算法和环境独立开来，算法的增减，修改都不会影响到环境和客户端。</p><h2 id="22-模板方法模式"><a href="#22-模板方法模式" class="headerlink" title="22 模板方法模式"></a>22 模板方法模式</h2><p>看过《如何说服女生上床》这部经典文章吗？女生从认识到上床的不变的步骤分为巧遇、打破僵局、展开追求、接吻、前戏、动手、爱抚、进去八大步骤 (Template method)，但每个步骤针对不同的情况，都有不一样的做法，这就要看你随机应变啦 (具体实现)；</p><p>模板方法模式：模板方法模式准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。先制定一个顶级逻辑框架，而将逻辑的细节留给具体的子类去实现。</p><h2 id="23-访问者模式"><a href="#23-访问者模式" class="headerlink" title="23 访问者模式"></a>23 访问者模式</h2><p>情人节到了，要给每个 MM 送一束鲜花和一张卡片，可是每个 MM 送的花都要针对她个人的特点，每张卡片也要根据个人的特点来挑，我一个人哪搞得清楚，还是找花店老板和礼品店老板做一下 Visitor，让花店老板根据 MM 的特点选一束花，让礼品店老板也根据每个人特点选一张卡，这样就轻松多了；</p><p>访问者模式：访问者模式的目的是封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改的话，接受这个操作的数据结构可以保持不变。访问者模式适用于数据结构相对未定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由的演化。访问者模式使得增加新的操作变的很容易，就是增加一个新的访问者类。</p><p>访问者模式将有关的行为集中到一个访问者对象中，而不是分散到一个个的节点类中。当使用访问者模式时，要将尽可能多的对象浏览逻辑放在访问者类中，而不是放到它的子类中。访问者模式可以跨过几个类的等级结构访问属于不同的等级结构的成员类。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL语句性能优化策略</title>
      <link href="/2022/11/04/sql-yu-ju-xing-neng-you-hua-ce-lue/"/>
      <url>/2022/11/04/sql-yu-ju-xing-neng-you-hua-ce-lue/</url>
      
        <content type="html"><![CDATA[<ul><li>前言 -</li></ul><p>本文将全面揭秘 SQL 语句性能优化策略，直接上干货！</p><ul><li>52 条 SQL 语句性能优化策略 -</li></ul><p>1、对查询进行优化，应尽量避免全表扫描，首先应考虑在where及order by涉及的列上建立索引。</p><p>2、应尽量避免在where子句中对字段进行null值判断，创建表时NULL是默认值，但大多数时候应该使用NOT NULL，或者使用一个特殊的值，如0，-1作为默认值。</p><p>3、应尽量避免在where子句中使用!=或&lt;&gt;操作符，MySQL只有对以下操作符才使用索引：&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN，以及某些时候的LIKE。</p><p>4、应尽量避免在where子句中使用or来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，可以使用UNION合并查询：select id from t where num=10 union all select id from t where num=20。</p><p>5、in和not in也要慎用，否则会导致全表扫描，对于连续的数值，能用between就不要用in了：Select id from t where num between 1 and 3。</p><p>6、下面的查询也将导致全表扫描：select id from t where name like‘%abc%’或者select id from t where name like‘%abc’若要提高效率，可以考虑全文检索。而select id from t where name like‘abc%’才用到索引。</p><p>7、如果在where子句中使用参数，也会导致全表扫描。</p><p>8、应尽量避免在where子句中对字段进行表达式操作，应尽量避免在where子句中对字段进行函数操作。</p><p>9、很多时候用exists代替in是一个好的选择：select num from a where num in(select num from b)。用下面的语句替换：select num from a where exists(select 1 from b where num=a.num)。</p><p>10、索引固然可以提高相应的select的效率，但同时也降低了insert及update的效率，因为insert或update时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p><p>11、应尽可能的避免更新clustered索引数据列， 因为clustered索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新clustered索引数据列，那么需要考虑是否应将该索引建为clustered索引。</p><p>12、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。</p><p>13、尽可能的使用varchar/nvarchar代替char/nchar，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p><p>14、最好不要使用”“返回所有：select from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p><p>15、尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p><p>16、使用表的别名(Alias)：当在SQL语句中连接多个表时，请使用表的别名并把别名前缀于每个Column上。这样一来，就可以减少解析的时间并减少那些由Column歧义引起的语法错误。</p><p>17、使用“临时表”暂存中间结果 ：</p><p>简化SQL语句的重要方法就是采用临时表暂存中间结果，但是临时表的好处远远不止这些，将临时结果暂存在临时表，后面的查询就在tempdb中了，这可以避免程序中多次扫描主表，也大大减少了程序执行中“共享锁”阻塞“更新锁”，减少了阻塞，提高了并发性能。</p><p>18、一些SQL查询语句应加上nolock，读、写是会相互阻塞的，为了提高并发性能，对于一些查询，可以加上nolock，这样读的时候可以允许写，但缺点是可能读到未提交的脏数据。</p><p>使用nolock有3条原则：</p><ul><li> 查询的结果用于“插、删、改”的不能加nolock；</li><li> 查询的表属于频繁发生页分裂的，慎用nolock ；</li><li>使用临时表一样可以保存“数据前影”，起到类似Oracle的undo表空间的功能，能采用临时表提高并发性能的，不要用nolock。</li></ul><p>19、常见的简化规则如下：</p><p>不要有超过5个以上的表连接（JOIN），考虑使用临时表或表变量存放中间结果。少用子查询，视图嵌套不要过深，一般视图嵌套不要超过2个为宜。</p><p>20、将需要查询的结果预先计算好放在表中，查询的时候再Select。这在SQL7.0以前是最重要的手段，例如医院的住院费计算。</p><p>21、用OR的字句可以分解成多个查询，并且通过UNION 连接多个查询。他们的速度只同是否使用索引有关，如果查询需要用到联合索引，用UNION all执行的效率更高。多个OR的字句没有用到索引，改写成UNION的形式再试图与索引匹配。一个关键的问题是否用到索引。</p><p>22、在IN后面值的列表中，将出现最频繁的值放在最前面，出现得最少的放在最后面，减少判断的次数。</p><p>23、尽量将数据的处理工作放在服务器上，减少网络的开销，如使用存储过程。</p><p>存储过程是编译好、优化过、并且被组织到一个执行规划里、且存储在数据库中的SQL语句，是控制流语言的集合，速度当然快。反复执行的动态SQL，可以使用临时存储过程，该过程（临时表）被放在Tempdb中。</p><p>24、当服务器的内存够多时，配制线程数量 = 最大连接数+5，这样能发挥最大的效率；否则使用 配制线程数量&lt;最大连接数启用SQL SERVER的线程池来解决，如果还是数量 = 最大连接数+5，严重的损害服务器的性能。</p><p>25、查询的关联同写的顺序 ：</p><p>select a.personMemberID, * from chineseresume a,personmember b where personMemberID = b.referenceid and a.personMemberID = ‘JCNPRH39681’ （A = B ,B = ‘号码’） </p><p>select a.personMemberID, * from chineseresume a,personmember b where a.personMemberID = b.referenceid and a.personMemberID = ‘JCNPRH39681’ and b.referenceid = ‘JCNPRH39681’ （A = B ,B = ‘号码’， A = ‘号码’） </p><p>select a.personMemberID, * from chineseresume a,personmember b where b.referenceid = ‘JCNPRH39681’ and a.personMemberID = ‘JCNPRH39681’ （B = ‘号码’， A = ‘号码’）</p><p>26、尽量使用exists代替select count(1)来判断是否存在记录，count函数只有在统计表中所有行数时使用，而且count(1)比count(*)更有效率。  </p><p>27、尽量使用“&gt;=”，不要使用“&gt;”。</p><p>28、索引的使用规范：</p><ul><li> 索引的创建要与应用结合考虑，建议大的OLTP表不要超过6个索引；</li><li> 尽可能的使用索引字段作为查询条件，尤其是聚簇索引，必要时可以通过index index_name来强制指定索引；</li><li> 避免对大表查询时进行table scan，必要时考虑新建索引；</li><li> 在使用索引字段作为条件时，如果该索引是联合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用；</li><li>要注意索引的维护，周期性重建索引，重新编译存储过程。　　</li></ul><p>29、下列SQL条件语句中的列都建有恰当的索引，但执行速度却非常慢： </p><p>SELECT * FROM record WHERE substrINg(card_no,1,4)=’5378’ (13秒) </p><p>SELECT * FROM record WHERE amount/30&lt; 1000 （11秒） </p><p>SELECT * FROM record WHERE convert(char(10),date,112)=’19991201’ （10秒） </p><p>分析： </p><p>WHERE子句中对列的任何操作结果都是在SQL运行时逐列计算得到的，因此它不得不进行表搜索，而没有使用该列上面的索引。</p><p>如果这些结果在查询编译时就能得到，那么就可以被SQL优化器优化，使用索引，避免表搜索，因此将SQL重写成下面这样： </p><p>SELECT * FROM record WHERE card_no like ‘5378%’ （&lt; 1秒） </p><p>SELECT * FROM record WHERE amount&lt; 1000*30 （&lt; 1秒） </p><p>SELECT * FROM record WHERE date= ‘1999/12/01’ （&lt; 1秒）</p><p>30、当有一批处理的插入或更新时，用批量插入或批量更新，绝不会一条条记录的去更新。  </p><p>31、在所有的存储过程中，能够用SQL语句的，我绝不会用循环去实现。</p><p>例如：列出上个月的每一天，我会用connect by去递归查询一下，绝不会去用循环从上个月第一天到最后一天。</p><p>32、选择最有效率的表名顺序（只在基于规则的优化器中有效）： </p><p>Oracle的解析器按照从右到左的顺序处理FROM子句中的表名，FROM子句中写在最后的表（基础表 driving table）将被最先处理，在FROM子句中包含多个表的情况下，你必须选择记录条数最少的表作为基础表。</p><p>如果有3个以上的表连接查询，那就需要选择交叉表（intersection table）作为基础表，交叉表是指那个被其他表所引用的表。</p><p>33、提高GROUP BY语句的效率，可以通过将不需要的记录在GROUP BY之前过滤掉。下面两个查询返回相同结果，但第二个明显就快了许多。 </p><p>低效：</p><p>SELECT JOB , AVG(SAL) </p><p>FROM EMP </p><p>GROUP BY JOB </p><p>HAVING JOB =’PRESIDENT’ </p><p>OR JOB =’MANAGER’ </p><p>高效: </p><p>SELECT JOB , AVG(SAL) </p><p>FROM EMP </p><p>WHERE JOB =’PRESIDENT’ </p><p>OR JOB =’MANAGER’ </p><p>GROUP BY JOB</p><p>34、SQL语句用大写，因为Oracle总是先解析SQL语句，把小写的字母转换成大写的再执行。  </p><p>35、别名的使用，别名是大型数据库的应用技巧，就是表名、列名在查询中以一个字母为别名，查询速度要比建连接表快1.5倍。</p><p>36、避免死锁，在你的存储过程和触发器中访问同一个表时总是以相同的顺序；事务应经可能地缩短，在一个事务中应尽可能减少涉及到的数据量；永远不要在事务中等待用户输入。</p><p>37、避免使用临时表，除非却有需要，否则应尽量避免使用临时表，相反，可以使用表变量代替；大多数时候(99%)，表变量驻扎在内存中，因此速度比临时表更快，临时表驻扎在TempDb数据库中，因此临时表上的操作需要跨数据库通信，速度自然慢。</p><p>38、最好不要使用触发器：</p><ul><li> 触发一个触发器，执行一个触发器事件本身就是一个耗费资源的过程；</li><li> 如果能够使用约束实现的，尽量不要使用触发器；</li><li> 不要为不同的触发事件(Insert，Update和Delete)使用相同的触发器；</li><li>不要在触发器中使用事务型代码。</li></ul><p>39、索引创建规则： </p><ul><li> 表的主键、外键必须有索引； </li><li> 数据量超过300的表应该有索引； </li><li> 经常与其他表进行连接的表，在连接字段上应该建立索引； </li><li> 经常出现在Where子句中的字段，特别是大表的字段，应该建立索引； </li><li> 索引应该建在选择性高的字段上； </li><li> 索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引； </li><li> 复合索引的建立需要进行仔细分析，尽量考虑用单字段索引代替； </li><li> 正确选择复合索引中的主列字段，一般是选择性较好的字段； </li><li> 复合索引的几个字段是否经常同时以AND方式出现在Where子句中？单字段查询是否极少甚至没有？如果是，则可以建立复合索引；否则考虑单字段索引； </li><li> 如果复合索引中包含的字段经常单独出现在Where子句中，则分解为多个单字段索引； </li><li> 如果复合索引所包含的字段超过3个，那么仔细考虑其必要性，考虑减少复合的字段； </li><li> 如果既有单字段索引，又有这几个字段上的复合索引，一般可以删除复合索引； </li><li> 频繁进行数据操作的表，不要建立太多的索引； </li><li> 删除无用的索引，避免对执行计划造成负面影响； </li><li> 表上建立的每个索引都会增加存储开销，索引对于插入、删除、更新操作也会增加处理上的开销。另外，过多的复合索引，在有单字段索引的情况下，一般都是没有存在价值的；相反，还会降低数据增加删除时的性能，特别是对频繁更新的表来说，负面影响更大。 </li><li>尽量不要对数据库中某个含有大量重复的值的字段建立索引。</li></ul><p>40、MySQL查询优化总结：</p><p>使用慢查询日志去发现慢查询，使用执行计划去判断查询是否正常运行，总是去测试你的查询看看是否他们运行在最佳状态下。</p><p>久而久之性能总会变化，避免在整个表上使用count(*)，它可能锁住整张表，使查询保持一致以便后续相似的查询可以使用查询缓存，在适当的情形下使用GROUP BY而不是DISTINCT，在WHERE、GROUP BY和ORDER BY子句中使用有索引的列，保持索引简单，不在多个索引中包含同一个列。</p><p>有时候MySQL会使用错误的索引，对于这种情况使用USE INDEX，检查使用SQL_MODE=STRICT的问题，对于记录数小于5的索引字段，在UNION的时候使用LIMIT不是是用OR。 </p><p>为了避免在更新前SELECT，使用INSERT ON DUPLICATE KEY或者INSERT IGNORE，不要用UPDATE去实现，不要使用MAX，使用索引字段和ORDER BY子句，LIMIT M，N实际上可以减缓查询在某些情况下，有节制地使用，在WHERE子句中使用UNION代替子查询，在重新启动的MySQL，记得来温暖你的数据库，以确保数据在内存和查询速度快，考虑持久连接，而不是多个连接，以减少开销。</p><p>基准查询，包括使用服务器上的负载，有时一个简单的查询可以影响其他查询，当负载增加在服务器上，使用SHOW PROCESSLIST查看慢的和有问题的查询，在开发环境中产生的镜像数据中测试的所有可疑的查询。</p><p>41、MySQL备份过程：</p><ul><li> 从二级复制服务器上进行备份；</li><li> 在进行备份期间停止复制，以避免在数据依赖和外键约束上出现不一致；</li><li> 彻底停止MySQL，从数据库文件进行备份；</li><li> 如果使用MySQL dump进行备份，请同时备份二进制日志文件 – 确保复制没有中断；</li><li> 不要信任LVM快照，这很可能产生数据不一致，将来会给你带来麻烦；</li><li> 为了更容易进行单表恢复，以表为单位导出数据——如果数据是与其他表隔离的。 </li><li> 当使用mysqldump时请使用–opt；</li><li> 在备份之前检查和优化表；</li><li> 为了更快的进行导入，在导入时临时禁用外键约束。；</li><li> 为了更快的进行导入，在导入时临时禁用唯一性检测；</li><li> 在每一次备份后计算数据库，表以及索引的尺寸，以便更够监控数据尺寸的增长；</li><li> 通过自动调度脚本监控复制实例的错误和延迟；</li><li>定期执行备份。</li></ul><p>42、查询缓冲并不自动处理空格，因此，在写SQL语句时，应尽量减少空格的使用，尤其是在SQL首和尾的空格（因为查询缓冲并不自动截取首尾空格）。</p><p>43、member用mid做标准进行分表方便查询么？一般的业务需求中基本上都是以username为查询依据，正常应当是username做hash取模来分表。</p><p>而分表的话MySQL的partition功能就是干这个的，对代码是透明的；在代码层面去实现貌似是不合理的。</p><p>44、我们应该为数据库里的每张表都设置一个ID做为其主键，而且最好的是一个INT型的（推荐使用UNSIGNED），并设置上自动增加的AUTO_INCREMENT标志。</p><p>45、在所有的存储过程和触发器的开始处设置SET NOCOUNT ON，在结束时设置SET NOCOUNT OFF。无需在执行存储过程和触发器的每个语句后向客户端发送DONE_IN_PROC消息。</p><p>46、MySQL查询可以启用高速查询缓存。这是提高数据库性能的有效MySQL优化方法之一。当同一个查询被执行多次时，从缓存中提取数据和直接从数据库中返回数据快很多。</p><p>47、EXPLAIN SELECT查询用来跟踪查看效果：</p><p>使用EXPLAIN关键字可以让你知道MySQL是如何处理你的SQL语句的。这可以帮你分析你的查询语句或是表结构的性能瓶颈。EXPLAIN的查询结果还会告诉你你的索引主键被如何利用的，你的数据表是如何被搜索和排序的。</p><p>48、当只要一行数据时使用LIMIT 1 ：</p><p>当你查询表的有些时候，你已经知道结果只会有一条结果，但因为你可能需要去fetch游标，或是你也许会去检查返回的记录数。</p><p>在这种情况下，加上LIMIT 1可以增加性能。这样一来，MySQL数据库引擎会在找到一条数据后停止搜索，而不是继续往后查少下一条符合记录的数据。</p><p>49、选择表合适存储引擎： </p><ul><li> myisam：应用时以读和插入操作为主，只有少量的更新和删除，并且对事务的完整性，并发性要求不是很高的。 </li><li>InnoDB：事务处理，以及并发条件下要求数据的一致性。除了插入和查询外，包括很多的更新和删除。（InnoDB有效地降低删除和更新导致的锁定）。 对于支持事务的InnoDB类型的表来说，影响速度的主要原因是AUTOCOMMIT默认设置是打开的，而且程序没有显式调用BEGIN 开始事务，导致每插入一条都自动提交，严重影响了速度。可以在执行SQL前调用begin，多条SQL形成一个事物（即使autocommit打开也可以），将大大提高性能。</li></ul><p>50、优化表的数据类型，选择合适的数据类型： </p><p>原则：更小通常更好，简单就好，所有字段都得有默认值，尽量避免null。 </p><p>例如：数据库表设计时候更小的占磁盘空间尽可能使用更小的整数类型。(mediumint就比int更合适) </p><p>比如时间字段：datetime和timestamp，datetime占用8个字节，而timestamp占用4个字节，只用了一半，而timestamp表示的范围是1970—2037适合做更新时间 </p><p>MySQL可以很好的支持大数据量的存取，但是一般说来，数据库中的表越小，在它上面执行的查询也就会越快。 </p><p>因此，在创建表的时候，为了获得更好的性能，我们可以将表中字段的宽度设得尽可能小。</p><p>例如：在定义邮政编码这个字段时，如果将其设置为CHAR(255)，显然给数据库增加了不必要的空间。甚至使用VARCHAR这种类型也是多余的，因为CHAR(6)就可以很好的完成任务了。</p><p>同样的，如果可以的话，我们应该使用MEDIUMINT而不是BIGIN来定义整型字段，应该尽量把字段设置为NOT NULL，这样在将来执行查询的时候，数据库不用去比较NULL值。 </p><p>对于某些文本字段，例如“省份”或者“性别”，我们可以将它们定义为ENUM类型。因为在MySQL中，ENUM类型被当作数值型数据来处理，而数值型数据被处理起来的速度要比文本类型快得多。这样，我们又可以提高数据库的性能。</p><p>51、字符串数据类型：char，varchar，text选择区别。</p><p>52、任何对列的操作都将导致表扫描，它包括数据库函数、计算表达式等等，查询时要尽可能将操作移至等号右边。</p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程八股文</title>
      <link href="/2022/11/04/java-bing-fa-bian-cheng-ba-gu-wen/"/>
      <url>/2022/11/04/java-bing-fa-bian-cheng-ba-gu-wen/</url>
      
        <content type="html"><![CDATA[<h3 id="简述Java内存模型（JMM）"><a href="#简述Java内存模型（JMM）" class="headerlink" title="简述Java内存模型（JMM）"></a>简述Java内存模型（JMM）</h3><p>Java内存模型定义了程序中各种变量的访问规则：</p><ul><li> 所有变量都存储在主存，每个线程都有自己的工作内存。</li><li> 工作内存中保存了被该线程使用的变量的主存副本，线程对变量的所有操作都必须在工作空间进行，不能直接读写主内存数据。</li><li> 操作完成后，线程的工作内存通过缓存一致性协议将操作完的数据刷回主存。</li></ul><h3 id="简述as-if-serial"><a href="#简述as-if-serial" class="headerlink" title="简述as-if-serial"></a>简述as-if-serial</h3><p>编译器会对原始的程序进行指令重排序和优化。但不管怎么重排序，其结果都必须和用户原始程序输出的预定结果保持一致。</p><h3 id="简述happens-before八大规则"><a href="#简述happens-before八大规则" class="headerlink" title="简述happens-before八大规则"></a>简述happens-before八大规则</h3><ul><li> 程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作；</li><li> 锁定规则：一个unLock操作先行发生于后面对同一个锁的lock操作；</li><li> volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作；</li><li> 传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C；</li><li> 线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作；</li><li> 线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生；</li><li> 线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行；</li><li> 对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始；</li></ul><h3 id="as-if-serial-和-happens-before-的区别"><a href="#as-if-serial-和-happens-before-的区别" class="headerlink" title="as-if-serial 和 happens-before 的区别"></a>as-if-serial 和 happens-before 的区别</h3><p>as-if-serial 保证单线程程序的执行结果不变，happens-before 保证正确同步的多线程程序的执行结果不变。</p><h3 id="简述原子性操作"><a href="#简述原子性操作" class="headerlink" title="简述原子性操作"></a>简述原子性操作</h3><p>一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行，这就是原子性操作。</p><h3 id="简述线程的可见性"><a href="#简述线程的可见性" class="headerlink" title="简述线程的可见性"></a>简述线程的可见性</h3><p>可见性指当一个线程修改了共享变量时，其他线程能够立即得知修改。volatile、synchronized、final 关键字都能保证可见性。</p><h3 id="简述有序性"><a href="#简述有序性" class="headerlink" title="简述有序性"></a>简述有序性</h3><p>虽然多线程存在并发和指令优化等操作，但在本线程内观察该线程的所有执行操作是有序的。</p><h3 id="简述Java中volatile关键字作用"><a href="#简述Java中volatile关键字作用" class="headerlink" title="简述Java中volatile关键字作用"></a>简述Java中volatile关键字作用</h3><ul><li> 保证变量对所有线程的可见性。当一个线程修改了变量值，新值对于其他线程来说是立即可以得知的。</li><li> 禁止指令重排。使用 volatile 变量进行写操作，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器进行重排序。</li></ul><h3 id="Java线程的实现方式"><a href="#Java线程的实现方式" class="headerlink" title="Java线程的实现方式"></a>Java线程的实现方式</h3><ul><li> 实现Runnable接口</li><li> 继承Thread类</li><li> 实现Callable接口</li></ul><h3 id="简述Java线程的状态"><a href="#简述Java线程的状态" class="headerlink" title="简述Java线程的状态"></a>简述Java线程的状态</h3><p>线程状态有 NEW、RUNNABLE、BLOCK、WAITING、TIMED_WAITING、THERMINATED</p><ul><li> NEW：新建状态，线程被创建且未启动，此时还未调用 start 方法。</li><li> RUNNABLE：运行状态。表示线程正在JVM中执行，但是这个执行，不一定真的在跑，也可能在排队等CPU。</li><li> BLOCKED：阻塞状态。线程等待获取锁，锁还没获得。</li><li> WAITING：等待状态。线程内run方法执行完Object.wait()/Thread.join()进入该状态。</li><li> TIMED_WAITING：限期等待。在一定时间之后跳出状态。调用Thread.sleep(long) Object.wait(long) Thread.join(long)进入状态。其中这些参数代表等待的时间。</li><li> TERMINATED：结束状态。线程调用完run方法进入该状态。</li></ul><h3 id="简述线程通信的方式"><a href="#简述线程通信的方式" class="headerlink" title="简述线程通信的方式"></a>简述线程通信的方式</h3><ul><li> volatile 关键词修饰变量，保证所有线程对变量访问的可见性。</li><li> synchronized关键词。确保多个线程在同一时刻只能有一个处于方法或同步块中。</li><li> wait/notify方法</li><li> IO通信</li></ul><h3 id="简述线程池"><a href="#简述线程池" class="headerlink" title="简述线程池"></a>简述线程池</h3><p>没有线程池的情况下，多次创建，销毁线程开销比较大。如果在开辟的线程执行完当前任务后复用已创建的线程，可以降低开销、控制最大并发数。</p><p>线程池创建线程时，会将线程封装成工作线程 Worker，Worker 在执行完任务后还会循环获取工作队列中的任务来执行。</p><p>将任务派发给线程池时，会出现以下几种情况</p><ul><li> 核心线程池未满，创建一个新的线程执行任务。</li><li> 如果核心线程池已满，工作队列未满，将线程存储在工作队列。</li><li> 如果工作队列已满，线程数小于最大线程数就创建一个新线程处理任务。</li><li> 如果超过大小线程数，按照拒绝策略来处理任务。</li></ul><p>线程池参数：</p><ul><li> corePoolSize：常驻核心线程数。超过该值后如果线程空闲会被销毁。</li><li> maximumPoolSize：线程池能够容纳同时执行的线程最大数。</li><li> keepAliveTime：线程空闲时间，线程空闲时间达到该值后会被销毁，直到只剩下 corePoolSize 个线程为止，避免浪费内存资源。</li><li> workQueue：工作队列。</li><li> threadFactory：线程工厂，用来生产一组相同任务的线程。</li><li> handler：拒绝策略。</li></ul><p>拒绝策略有以下几种：</p><ul><li> AbortPolicy：丢弃任务并抛出异常</li><li> CallerRunsPolicy：重新尝试提交该任务</li><li> DiscardOldestPolicy 抛弃队列里等待最久的任务并把当前任务加入队列</li><li> DiscardPolicy 表示直接抛弃当前任务但不抛出异常。</li></ul><h3 id="简述Executor框架"><a href="#简述Executor框架" class="headerlink" title="简述Executor框架"></a>简述Executor框架</h3><p>Executor框架目的是将任务提交和任务如何运行分离开来的机制。用户不再需要从代码层考虑设计任务的提交运行，只需要调用Executor框架实现类的Execute方法就可以提交任务。</p><h3 id="简述Executor的继承关系"><a href="#简述Executor的继承关系" class="headerlink" title="简述Executor的继承关系"></a>简述Executor的继承关系</h3><ul><li> Executor：一个接口，其定义了一个接收Runnable对象的方法executor，该方法接收一个Runable实例执行这个任务。</li><li> ExecutorService：Executor的子类接口，其定义了一个接收Callable对象的方法，返回 Future 对象，同时提供execute方法。</li><li> ScheduledExecutorService：ExecutorService的子类接口，支持定期执行任务。</li><li> AbstractExecutorService：抽象类，提供 ExecutorService 执行方法的默认实现。</li><li> Executors：实现ExecutorService接口的静态工厂类，提供了一系列工厂方法用于创建线程池。</li><li> ThreadPoolExecutor：继承AbstractExecutorService，用于创建线程池。</li><li> ForkJoinPool: 继承AbstractExecutorService，Fork 将大任务分叉为多个小任务，然后让小任务执行，Join 是获得小任务的结果，类似于map reduce。</li><li> ThreadPoolExecutor：继承ThreadPoolExecutor，实现ScheduledExecutorService，用于创建带定时任务的线程池。</li></ul><h3 id="简述线程池的状态"><a href="#简述线程池的状态" class="headerlink" title="简述线程池的状态"></a>简述线程池的状态</h3><ul><li> Running：能接受新提交的任务，也可以处理阻塞队列的任务。</li><li> Shutdown：不再接受新提交的任务，但可以处理存量任务，线程池处于running时调用shutdown方法，会进入该状态。</li><li> Stop：不接受新任务，不处理存量任务，调用shutdownnow进入该状态。</li><li> Tidying：所有任务已经终止了，worker_count（有效线程数）为0。</li><li> Terminated：线程池彻底终止。在tidying模式下调用terminated方法会进入该状态。</li></ul><h3 id="简述线程池类型"><a href="#简述线程池类型" class="headerlink" title="简述线程池类型"></a>简述线程池类型</h3><ul><li> newCachedThreadPool 可缓存线程池，可设置最小线程数和最大线程数，线程空闲1分钟后自动销毁。</li><li> newFixedThreadPool 指定工作线程数量线程池。</li><li> newSingleThreadExecutor 单线程Executor。</li><li> newScheduleThreadPool 支持定时任务的指定工作线程数量线程池。</li><li> newSingleThreadScheduledExecutor 支持定时任务的单线程Executor。</li></ul><h3 id="简述阻塞队列"><a href="#简述阻塞队列" class="headerlink" title="简述阻塞队列"></a>简述阻塞队列</h3><p>阻塞队列是生产者消费者的实现具体组件之一。当阻塞队列为空时，从队列中获取元素的操作将会被阻塞，当阻塞队列满了，往队列添加元素的操作将会被阻塞。具体实现有：</p><ul><li> ArrayBlockingQueue：底层是由数组组成的有界阻塞队列。</li><li> LinkedBlockingQueue：底层是由链表组成的有界阻塞队列。</li><li> PriorityBlockingQueue：阻塞优先队列。</li><li> DelayQueue：创建元素时可以指定多久才能从队列中获取当前元素</li><li> SynchronousQueue：不存储元素的阻塞队列，每一个存储必须等待一个取出操作</li><li> LinkedTransferQueue：与LinkedBlockingQueue相比多一个transfer方法，即如果当前有消费者正等待接收元素，可以把生产者传入的元素立刻传输给消费者。</li><li> LinkedBlockingDeque：双向阻塞队列。</li></ul><h3 id="谈一谈ThreadLocal"><a href="#谈一谈ThreadLocal" class="headerlink" title="谈一谈ThreadLocal"></a>谈一谈ThreadLocal</h3><p>ThreadLocal 是线程共享变量。ThreadLoacl 有一个静态内部类 ThreadLocalMap，其 Key 是 ThreadLocal 对象，值是 Entry 对象，ThreadLocalMap是每个线程私有的。</p><ul><li> set 给ThreadLocalMap设置值。</li><li> get 获取ThreadLocalMap。</li><li> remove 删除ThreadLocalMap类型的对象。</li></ul><p>存在的问题：对于线程池，由于线程池会重用 Thread 对象，因此与 Thread 绑定的 ThreadLocal 也会被重用，造成一系列问题。</p><p>比如说内存泄漏。由于 ThreadLocal 是弱引用，但 Entry 的 value 是强引用，因此当 ThreadLocal 被垃圾回收后，value 依旧不会被释放，产生内存泄漏。</p><h3 id="聊聊你对Java并发包下unsafe类的理解"><a href="#聊聊你对Java并发包下unsafe类的理解" class="headerlink" title="聊聊你对Java并发包下unsafe类的理解"></a>聊聊你对Java并发包下unsafe类的理解</h3><p>对于 Java 语言，没有直接的指针组件，一般也不能使用偏移量对某块内存进行操作。这些操作相对来讲是安全（safe）的。</p><p>Java 有个类叫 Unsafe 类，这个类使 Java 拥有了像 C 语言的指针一样操作内存空间的能力，同时也带来了指针的问题。这个类可以说是 Java 并发开发的基础。</p><h3 id="Java中的乐观锁与CAS算法"><a href="#Java中的乐观锁与CAS算法" class="headerlink" title="Java中的乐观锁与CAS算法"></a>Java中的乐观锁与CAS算法</h3><p>乐观锁认为数据发送时发生并发冲突的概率不大，所以读操作前不上锁。</p><p>到了写操作时才会进行判断，数据在此期间是否被其他线程修改。如果发生修改，那就返回写入失败；如果没有被修改，那就执行修改操作，返回修改成功。</p><p>乐观锁一般都采用 Compare And Swap（CAS）算法进行实现。顾名思义，该算法涉及到了两个操作，比较（Compare）和交换（Swap）。</p><p>CAS 算法的思路如下：</p><ul><li> 该算法认为不同线程对变量的操作时产生竞争的情况比较少。</li><li> 该算法的核心是对当前读取变量值 E 和内存中的变量旧值 V 进行比较。</li><li> 如果相等，就代表其他线程没有对该变量进行修改，就将变量值更新为新值 N。</li><li> 如果不等，就认为在读取值 E 到比较阶段，有其他线程对变量进行过修改，不进行任何操作。</li></ul><h3 id="ABA问题及解决方法简述"><a href="#ABA问题及解决方法简述" class="headerlink" title="ABA问题及解决方法简述"></a>ABA问题及解决方法简述</h3><p>CAS 算法是基于值来做比较的，如果当前有两个线程，一个线程将变量值从 A 改为 B ，再由 B 改回为 A ，当前线程开始执行 CAS 算法时，就很容易认为值没有变化，误认为读取数据到执行 CAS 算法的期间，没有线程修改过数据。</p><p>juc 包提供了一个 AtomicStampedReference，即在原始的版本下加入版本号戳，解决 ABA 问题。</p><h3 id="简述常见的Atomic类"><a href="#简述常见的Atomic类" class="headerlink" title="简述常见的Atomic类"></a>简述常见的Atomic类</h3><p>在很多时候，我们需要的仅仅是一个简单的、高效的、线程安全的++或者–方案，使用synchronized关键字和lock固然可以实现，但代价比较大，此时用原子类更加方便。基本数据类型的原子类有：</p><ul><li> AtomicInteger 原子更新整形</li><li> AtomicLong 原子更新长整型</li><li> AtomicBoolean 原子更新布尔类型</li></ul><p>Atomic数组类型有：</p><ul><li> AtomicIntegerArray 原子更新整形数组里的元素</li><li> AtomicLongArray 原子更新长整型数组里的元素</li><li> AtomicReferenceArray 原子更新引用类型数组里的元素。</li></ul><p>Atomic引用类型有：</p><ul><li> AtomicReference 原子更新引用类型</li><li> AtomicMarkableReference 原子更新带有标记位的引用类型，可以绑定一个 boolean 标记</li><li> AtomicStampedReference 原子更新带有版本号的引用类型</li></ul><p>FieldUpdater类型：</p><ul><li> AtomicIntegerFieldUpdater 原子更新整形字段的更新器</li><li> AtomicLongFieldUpdater 原子更新长整形字段的更新器</li><li> AtomicReferenceFieldUpdater 原子更新引用类型字段的更新器</li></ul><h3 id="简述Atomic类基本实现原理"><a href="#简述Atomic类基本实现原理" class="headerlink" title="简述Atomic类基本实现原理"></a>简述Atomic类基本实现原理</h3><p>以AtomicIntger 为例。</p><p>方法getAndIncrement，以原子方式将当前的值加1，具体实现为：</p><ul><li> 在 for 死循环中取得 AtomicInteger 里存储的数值</li><li> 对 AtomicInteger 当前的值加 1</li><li> 调用 compareAndSet 方法进行原子更新</li><li> 先检查当前数值是否等于 expect</li><li> 如果等于则说明当前值没有被其他线程修改，则将值更新为 next，</li><li> 如果不是会更新失败返回 false，程序会进入 for 循环重新进行 compareAndSet 操作。</li></ul><h3 id="简述CountDownLatch"><a href="#简述CountDownLatch" class="headerlink" title="简述CountDownLatch"></a>简述CountDownLatch</h3><p>CountDownLatch这个类使一个线程等待其他线程各自执行完毕后再执行。是通过一个计数器来实现的，计数器的初始值是线程的数量。每当一个线程执行完毕后，调用countDown方法，计数器的值就减1，当计数器的值为0时，表示所有线程都执行完毕，然后在等待的线程就可以恢复工作了。只能一次性使用，不能reset。</p><h3 id="简述CyclicBarrier"><a href="#简述CyclicBarrier" class="headerlink" title="简述CyclicBarrier"></a>简述CyclicBarrier</h3><p>CyclicBarrier 主要功能和CountDownLatch类似，也是通过一个计数器，使一个线程等待其他线程各自执行完毕后再执行。但是其可以重复使用（reset）。</p><h3 id="简述Semaphore"><a href="#简述Semaphore" class="headerlink" title="简述Semaphore"></a>简述Semaphore</h3><p>Semaphore即信号量。Semaphore 的构造方法参数接收一个 int 值，设置一个计数器，表示可用的许可数量即最大并发数。使用 acquire 方法获得一个许可证，计数器减一，使用 release 方法归还许可，计数器加一。如果此时计数器值为0，线程进入休眠。</p><h3 id="简述Exchanger"><a href="#简述Exchanger" class="headerlink" title="简述Exchanger"></a>简述Exchanger</h3><p>Exchanger类可用于两个线程之间交换信息。可简单地将Exchanger对象理解为一个包含两个格子的容器，通过exchanger方法可以向两个格子中填充信息。线程通过exchange 方法交换数据，第一个线程执行 exchange 方法后会阻塞等待第二个线程执行该方法。当两个线程都到达同步点时这两个线程就可以交换数据当两个格子中的均被填充时，该对象会自动将两个格子的信息交换，然后返回给线程，从而实现两个线程的信息交换。</p><h3 id="简述ConcurrentHashMap"><a href="#简述ConcurrentHashMap" class="headerlink" title="简述ConcurrentHashMap"></a>简述ConcurrentHashMap</h3><p>JDK7采用锁分段技术。首先将数据分成 Segment 数据段，然后给每一个数据段配一把锁，当一个线程占用锁访问其中一个段的数据时，其他段的数据也能被其他线程访问。</p><p>get 除读到空值不需要加锁。该方法先经过一次再散列，再用这个散列值通过散列运算定位到 Segment，最后通过散列算法定位到元素。put 须加锁，首先定位到 Segment，然后进行插入操作，第一步判断是否需要对 Segment 里的 HashEntry 数组进行扩容，第二步定位添加元素的位置，然后将其放入数组。</p><p>JDK8的改进</p><ul><li> 取消分段锁机制，采用CAS算法进行值的设置，如果CAS失败再使用 synchronized 加锁添加元素</li><li> 引入红黑树结构，当某个槽内的元素个数超过8且 Node数组 容量大于 64 时，链表转为红黑树。</li><li> 使用了更加优化的方式统计集合内的元素数量。</li></ul><h3 id="synchronized底层实现原理"><a href="#synchronized底层实现原理" class="headerlink" title="synchronized底层实现原理"></a>synchronized底层实现原理</h3><p>Java 对象底层都会关联一个 monitor，使用 synchronized 时 JVM 会根据使用环境找到对象的 monitor，根据 monitor 的状态进行加解锁的判断。如果成功加锁就成为该 monitor 的唯一持有者，monitor 在被释放前不能再被其他线程获取。</p><p>synchronized在JVM编译后会产生monitorenter 和 monitorexit 这两个字节码指令，获取和释放 monitor。这两个字节码指令都需要一个引用类型的参数指明要锁定和解锁的对象，对于同步普通方法，锁是当前实例对象；对于静态同步方法，锁是当前类的 Class 对象；对于同步方法块，锁是 synchronized 括号里的对象。</p><p>执行 monitorenter 指令时，首先尝试获取对象锁。如果这个对象没有被锁定，或当前线程已经持有锁，就把锁的计数器加 1，执行 monitorexit 指令时会将锁计数器减 1。一旦计数器为 0 锁随即就被释放。</p><h3 id="synchronized关键词使用方法"><a href="#synchronized关键词使用方法" class="headerlink" title="synchronized关键词使用方法"></a>synchronized关键词使用方法</h3><ul><li> 直接修饰某个实例方法</li><li> 直接修饰某个静态方法</li><li> 修饰代码块</li></ul><h3 id="简述Java偏向锁"><a href="#简述Java偏向锁" class="headerlink" title="简述Java偏向锁"></a>简述Java偏向锁</h3><p>JDK 1.6 中提出了偏向锁的概念。该锁提出的原因是，开发者发现多数情况下锁并不存在竞争，一把锁往往是由同一个线程获得的。偏向锁并不会主动释放，这样每次偏向锁进入的时候都会判断该资源是否是偏向自己的，如果是偏向自己的则不需要进行额外的操作，直接可以进入同步操作。</p><p>其申请流程为：</p><ul><li> 首先需要判断对象的 Mark Word 是否属于偏向模式，如果不属于，那就进入轻量级锁判断逻辑。否则继续下一步判断；</li><li> 判断目前请求锁的线程 ID 是否和偏向锁本身记录的线程 ID 一致。如果一致，继续下一步的判断，如果不一致，跳转到步骤4；</li><li> 判断是否需要重偏向。如果不用的话，直接获得偏向锁；</li><li> 利用 CAS 算法将对象的 Mark Word 进行更改，使线程 ID 部分换成本线程 ID。如果更换成功，则重偏向完成，获得偏向锁。如果失败，则说明有多线程竞争，升级为轻量级锁。</li></ul><h3 id="简述轻量级锁"><a href="#简述轻量级锁" class="headerlink" title="简述轻量级锁"></a>简述轻量级锁</h3><p>轻量级锁是为了在没有竞争的前提下减少重量级锁出现并导致的性能消耗。</p><p>其申请流程为：</p><ul><li> 如果同步对象没有被锁定，虚拟机将在当前线程的栈帧中建立一个锁记录空间，存储锁对象目前 Mark Word 的拷贝。</li><li> 虚拟机使用 CAS 尝试把对象的 Mark Word 更新为指向锁记录的指针</li><li> 如果更新成功即代表该线程拥有了锁，锁标志位将转变为 00，表示处于轻量级锁定状态。</li><li> 如果更新失败就意味着至少存在一条线程与当前线程竞争。虚拟机检查对象的 Mark Word 是否指向当前线程的栈帧</li><li> 如果指向当前线程的栈帧，说明当前线程已经拥有了锁，直接进入同步块继续执行</li><li> 如果不是则说明锁对象已经被其他线程抢占。</li><li> 如果出现两条以上线程争用同一个锁，轻量级锁就不再有效，将膨胀为重量级锁，锁标志状态变为 10，此时Mark Word 存储的就是指向重量级锁的指针，后面等待锁的线程也必须阻塞。</li></ul><h3 id="简述锁优化策略"><a href="#简述锁优化策略" class="headerlink" title="简述锁优化策略"></a>简述锁优化策略</h3><p>即自适应自旋、锁消除、锁粗化、锁升级等策略偏。</p><h3 id="简述Java的自旋锁"><a href="#简述Java的自旋锁" class="headerlink" title="简述Java的自旋锁"></a>简述Java的自旋锁</h3><p>线程获取锁失败后，可以采用这样的策略，可以不放弃 CPU ，不停的重试内重试，这种操作也称为自旋锁。</p><h3 id="简述自适应自旋锁"><a href="#简述自适应自旋锁" class="headerlink" title="简述自适应自旋锁"></a>简述自适应自旋锁</h3><p>自适应自旋锁自旋次数不再人为设定，通常由前一次在同一个锁上的自旋时间及锁的拥有者的状态决定。</p><h3 id="简述锁粗化"><a href="#简述锁粗化" class="headerlink" title="简述锁粗化"></a>简述锁粗化</h3><p>锁粗化的思想就是扩大加锁范围，避免反复的加锁和解锁。</p><h3 id="简述锁消除"><a href="#简述锁消除" class="headerlink" title="简述锁消除"></a>简述锁消除</h3><p>锁消除是一种更为彻底的优化，在编译时，Java编译器对运行上下文进行扫描，去除不可能存在共享资源竞争的锁。</p><h3 id="简述Lock与ReentrantLock"><a href="#简述Lock与ReentrantLock" class="headerlink" title="简述Lock与ReentrantLock"></a>简述Lock与ReentrantLock</h3><p>Lock接口是 Java并发包的顶层接口。</p><p>可重入锁 ReentrantLock 是 Lock 最常见的实现，与 synchronized 一样可重入。ReentrantLock 在默认情况下是非公平的，可以通过构造方法指定公平锁。一旦使用了公平锁，性能会下降。</p><h3 id="简述AQS"><a href="#简述AQS" class="headerlink" title="简述AQS"></a>简述AQS</h3><p>AQS（AbstractQuenedSynchronizer）抽象的队列式同步器。AQS是将每一条请求共享资源的线程封装成一个锁队列的一个结点（Node），来实现锁的分配。AQS是用来构建锁或其他同步组件的基础框架，它使用一个 volatile int state 变量作为共享资源，如果线程获取资源失败，则进入同步队列等待；如果获取成功就执行临界区代码，释放资源时会通知同步队列中的等待线程。</p><p>子类通过继承同步器并实现它的抽象方法getState、setState 和 compareAndSetState对同步状态进行更改。</p><p>AQS获取独占锁/释放独占锁原理：</p><p>获取：（acquire）</p><ul><li> 调用 tryAcquire 方法安全地获取线程同步状态，获取失败的线程会被构造同步节点并通过 addWaiter 方法加入到同步队列的尾部，在队列中自旋。</li><li> 调用 acquireQueued 方法使得该节点以死循环的方式获取同步状态，如果获取不到则阻塞。</li></ul><p>释放：（release）</p><ul><li> 调用 tryRelease 方法释放同步状态</li><li> 调用 unparkSuccessor 方法唤醒头节点的后继节点，使后继节点重新尝试获取同步状态。</li></ul><p>AQS获取共享锁/释放共享锁原理</p><p>获取锁（acquireShared）</p><ul><li> 调用 tryAcquireShared 方法尝试获取同步状态，返回值不小于 0 表示能获取同步状态。</li><li> 释放（releaseShared），并唤醒后续处于等待状态的节点。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
            <tag> 八股文 </tag>
            
            <tag> java面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java虚拟机八股文</title>
      <link href="/2022/11/04/java-xu-ni-ji-ba-gu-wen/"/>
      <url>/2022/11/04/java-xu-ni-ji-ba-gu-wen/</url>
      
        <content type="html"><![CDATA[<h3 id="简述JVM内存模型"><a href="#简述JVM内存模型" class="headerlink" title="简述JVM内存模型"></a>简述JVM内存模型</h3><p>线程私有的运行时数据区: 程序计数器、Java 虚拟机栈、本地方法栈。</p><p>线程共享的运行时数据区：Java 堆、方法区。</p><h3 id="简述程序计数器"><a href="#简述程序计数器" class="headerlink" title="简述程序计数器"></a>简述程序计数器</h3><p>程序计数器表示当前线程所执行的字节码的行号指示器。</p><p>程序计数器不会产生StackOverflowError和OutOfMemoryError。</p><h3 id="简述虚拟机栈"><a href="#简述虚拟机栈" class="headerlink" title="简述虚拟机栈"></a>简述虚拟机栈</h3><p>Java 虚拟机栈用来描述 Java 方法执行的内存模型。线程创建时就会分配一个栈空间，线程结束后栈空间被回收。</p><p>栈中元素用于支持虚拟机进行方法调用，每个方法在执行时都会创建一个栈帧存储方法的局部变量表、操作栈、动态链接和返回地址等信息。</p><p>虚拟机栈会产生两类异常：</p><ul><li> StackOverflowError：线程请求的栈深度大于虚拟机允许的深度抛出。</li><li> OutOfMemoryError：如果 JVM 栈容量可以动态扩展，虚拟机栈占用内存超出抛出。</li></ul><h3 id="简述本地方法栈"><a href="#简述本地方法栈" class="headerlink" title="简述本地方法栈"></a>简述本地方法栈</h3><p>本地方法栈与虚拟机栈作用相似，不同的是虚拟机栈为虚拟机执行 Java 方法服务，本地方法栈为本地方法服务。可以将虚拟机栈看作普通的java函数对应的内存模型，本地方法栈看作由native关键词修饰的函数对应的内存模型。</p><p>本地方法栈会产生两类异常：</p><ul><li> StackOverflowError：线程请求的栈深度大于虚拟机允许的深度抛出。</li><li> OutOfMemoryError：如果 JVM 栈容量可以动态扩展，虚拟机栈占用内存超出抛出。</li></ul><h3 id="简述JVM中的堆"><a href="#简述JVM中的堆" class="headerlink" title="简述JVM中的堆"></a>简述JVM中的堆</h3><p>堆主要作用是存放对象实例，Java 里几乎所有对象实例都在堆上分配内存，堆也是内存管理中最大的一块。Java的垃圾回收主要就是针对堆这一区域进行。可通过 -Xms 和 -Xmx 设置堆的最小和最大容量。</p><p>堆会抛出 OutOfMemoryError异常。</p><h3 id="简述方法区"><a href="#简述方法区" class="headerlink" title="简述方法区"></a>简述方法区</h3><p>方法区用于存储被虚拟机加载的类信息、常量、静态变量等数据。</p><p>JDK6之前使用永久代实现方法区，容易内存溢出。JDK7 把放在永久代的字符串常量池、静态变量等移出，JDK8 中抛弃永久代，改用在本地内存中实现的元空间来实现方法区，把 JDK 7 中永久代内容移到元空间。</p><p>方法区会抛出 OutOfMemoryError异常。</p><h3 id="简述运行时常量池"><a href="#简述运行时常量池" class="headerlink" title="简述运行时常量池"></a>简述运行时常量池</h3><p>运行时常量池存放常量池表，用于存放编译器生成的各种字面量与符号引用。一般除了保存 Class 文件中描述的符号引用外，还会把符号引用翻译的直接引用也存储在运行时常量池。除此之外，也会存放字符串基本类型。</p><p>JDK8之前，放在方法区，大小受限于方法区。JDK8将运行时常量池存放堆中。</p><h3 id="简述直接内存"><a href="#简述直接内存" class="headerlink" title="简述直接内存"></a>简述直接内存</h3><p>直接内存也称为堆外内存，就是把内存对象分配在JVM堆外的内存区域。这部分内存不是虚拟机管理，而是由操作系统来管理。Java通过DriectByteBuffer对其进行操作，避免了在 Java 堆和 Native堆来回复制数据。</p><h3 id="简述Java创建对象的过程"><a href="#简述Java创建对象的过程" class="headerlink" title="简述Java创建对象的过程"></a>简述Java创建对象的过程</h3><ul><li> 检查该指令的参数能否在常量池中定位到一个类的符号引用，并检查引用代表的类是否已被加载、解析和初始化，如果没有就先执行类加载。</li><li> 通过检查通过后虚拟机将为新生对象分配内存。</li><li> 完成内存分配后虚拟机将成员变量设为零值</li><li> 设置对象头，包括哈希码、GC 信息、锁信息、对象所属类的类元信息等。</li><li> 执行 init 方法，初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量。</li></ul><h3 id="简述JVM给对象分配内存的策略"><a href="#简述JVM给对象分配内存的策略" class="headerlink" title="简述JVM给对象分配内存的策略"></a>简述JVM给对象分配内存的策略</h3><ul><li> 指针碰撞：这种方式在内存中放一个指针作为分界指示器将使用过的内存放在一边，空闲的放在另一边，通过指针挪动完成分配。</li><li> 空闲列表：对于 Java 堆内存不规整的情况，虚拟机必须维护一个列表记录哪些内存可用，在分配时从列表中找到一块足够大的空间划分给对象并更新列表记录。</li></ul><h3 id="Java对象内存分配是如何保证线程安全的"><a href="#Java对象内存分配是如何保证线程安全的" class="headerlink" title="Java对象内存分配是如何保证线程安全的"></a>Java对象内存分配是如何保证线程安全的</h3><p>第一种方法，采用CAS机制，配合失败重试的方式保证更新操作的原子性。该方式效率低。</p><p>第二种方法，每个线程在Java堆中预先分配一小块内存，然后再给对象分配内存的时候，直接在自己这块”私有”内存中分配。一般采用这种策略。</p><h3 id="简述对象的内存布局"><a href="#简述对象的内存布局" class="headerlink" title="简述对象的内存布局"></a>简述对象的内存布局</h3><p>对象在堆内存的存储布局可分为对象头、实例数据和对齐填充。</p><p>1）对象头主要包含两部分数据：MarkWord、类型指针。</p><p>MarkWord 用于存储哈希码（HashCode）、GC分代年龄、锁状态标志位、线程持有的锁、偏向线程ID等信息。</p><p>类型指针即对象指向他的类元数据指针，如果对象是一个 Java 数组，会有一块用于记录数组长度的数据。</p><p>2）实例数据存储代码中所定义的各种类型的字段信息。</p><p>3）对齐填充起占位作用。HotSpot 虚拟机要求对象的起始地址必须是8的整数倍，因此需要对齐填充。</p><h3 id="如何判断对象是否是垃圾"><a href="#如何判断对象是否是垃圾" class="headerlink" title="如何判断对象是否是垃圾"></a>如何判断对象是否是垃圾</h3><p>1）引用计数法：</p><p>设置引用计数器，对象被引用计数器加 1，引用失效时计数器减 1，如果计数器为 0 则被标记为垃圾。会存在对象间循环引用的问题，一般不使用这种方法。</p><p>2）可达性分析：</p><p>通过 GC Roots 的根对象作为起始节点，从这些节点开始，根据引用关系向下搜索，如果某个对象没有被搜到，则会被标记为垃圾。可作为 GC Roots 的对象包括虚拟机栈和本地方法栈中引用的对象、类静态属性引用的对象、常量引用的对象。</p><h3 id="简述java的引用类型"><a href="#简述java的引用类型" class="headerlink" title="简述java的引用类型"></a>简述java的引用类型</h3><ul><li> 强引用：被强引用关联的对象不会被回收。一般采用 new 方法创建强引用。</li><li> 软引用：被软引用关联的对象只有在内存不够的情况下才会被回收。一般采用 SoftReference 类来创建软引用。</li><li> 弱引用：垃圾收集器碰到即回收，也就是说它只能存活到下一次垃圾回收发生之前。一般采用 WeakReference 类来创建弱引用。</li><li> 虚引用：无法通过该引用获取对象。唯一目的就是为了能在对象被回收时收到一个系统通知。虚引用必须与引用队列联合使用。</li></ul><h3 id="简述标记清除算法、标记整理算法和标记复制算法"><a href="#简述标记清除算法、标记整理算法和标记复制算法" class="headerlink" title="简述标记清除算法、标记整理算法和标记复制算法"></a>简述标记清除算法、标记整理算法和标记复制算法</h3><ul><li> 标记清除算法：先标记需清除的对象，之后统一回收。这种方法效率不高，会产生大量不连续的碎片。</li><li> 标记整理算法：先标记存活对象，然后让所有存活对象向一端移动，之后清理端边界以外的内存</li><li> 标记复制算法：将可用内存按容量划分为大小相等的两块，每次只使用其中一块。当使用的这块空间用完了，就将存活对象复制到另一块，再把已使用过的内存空间一次清理掉。</li></ul><h3 id="简述分代收集算法"><a href="#简述分代收集算法" class="headerlink" title="简述分代收集算法"></a>简述分代收集算法</h3><p>根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。</p><p>一般将堆分为新生代和老年代，对这两块采用不同的算法。</p><p>新生代使用：标记复制算法</p><p>老年代使用：标记清除或者标记整理算法</p><h3 id="简述Serial垃圾收集器"><a href="#简述Serial垃圾收集器" class="headerlink" title="简述Serial垃圾收集器"></a>简述Serial垃圾收集器</h3><p>Serial垃圾收集器是单线程串行收集器。垃圾回收的时候，必须暂停其他所有线程。新生代使用标记复制算法，老年代使用标记整理算法。简单高效。</p><h3 id="简述ParNew垃圾收集器"><a href="#简述ParNew垃圾收集器" class="headerlink" title="简述ParNew垃圾收集器"></a>简述ParNew垃圾收集器</h3><p>ParNew垃圾收集器可以看作Serial垃圾收集器的多线程版本，新生代使用标记复制算法，老年代使用标记整理算法。</p><h3 id="简述Parallel-Scavenge垃圾收集器"><a href="#简述Parallel-Scavenge垃圾收集器" class="headerlink" title="简述Parallel Scavenge垃圾收集器"></a>简述Parallel Scavenge垃圾收集器</h3><p>注重吞吐量，即 CPU运行代码时间/CPU耗时总时间（CPU运行代码时间+ 垃圾回收时间）。新生代使用标记复制算法，老年代使用标记整理算法。</p><h3 id="简述CMS垃圾收集器"><a href="#简述CMS垃圾收集器" class="headerlink" title="简述CMS垃圾收集器"></a>简述CMS垃圾收集器</h3><p>CMS垃圾收集器注重最短时间停顿。CMS垃圾收集器为最早提出的并发收集器，垃圾收集线程与用户线程同时工作。采用标记清除算法。该收集器分为初始标记、并发标记、并发预清理、并发清除、并发重置这么几个步骤。</p><ul><li> 初始标记：暂停其他线程(stop the world)，标记与GC roots直接关联的对象。</li><li> 并发标记：可达性分析过程(程序不会停顿)。</li><li> 并发预清理：查找执行并发标记阶段从年轻代晋升到老年代的对象，重新标记，暂停虚拟机（stop the world）扫描CMS堆中剩余对象。</li><li> 并发清除：清理垃圾对象，(程序不会停顿)。</li><li> 并发重置，重置CMS收集器的数据结构。</li></ul><h3 id="简述G1垃圾收集器"><a href="#简述G1垃圾收集器" class="headerlink" title="简述G1垃圾收集器"></a>简述G1垃圾收集器</h3><p>和Serial、Parallel Scavenge、CMS不同，G1垃圾收集器把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。</p><ul><li> 初始标记：标记与GC roots直接关联的对象。</li><li> 并发标记：可达性分析。</li><li> 最终标记：对并发标记过程中，用户线程修改的对象再次标记一下。</li><li> 筛选回收：对各个Region的回收价值和成本进行排序，然后根据用户所期望的GC停顿时间制定回收计划并回收。</li></ul><h3 id="简述Minor-GC"><a href="#简述Minor-GC" class="headerlink" title="简述Minor GC"></a>简述Minor GC</h3><p>Minor GC指发生在新生代的垃圾收集，因为 Java 对象大多存活时间短，所以 Minor GC 非常频繁，一般回收速度也比较快。</p><h3 id="简述Full-GC"><a href="#简述Full-GC" class="headerlink" title="简述Full GC"></a>简述Full GC</h3><p>Full GC 是清理整个堆空间—包括年轻代和永久代。调用System.gc(),老年代空间不足，空间分配担保失败，永生代空间不足会产生full gc。</p><h3 id="常见内存分配策略"><a href="#常见内存分配策略" class="headerlink" title="常见内存分配策略"></a>常见内存分配策略</h3><p>大多数情况下对象在新生代 Eden 区分配，当 Eden 没有足够空间时将发起一次 Minor GC。</p><p>大对象需要大量连续内存空间，直接进入老年代区分配。</p><p>如果经历过第一次 Minor GC 仍然存活且能被 Survivor 容纳，该对象就会被移动到 Survivor 中并将年龄设置为 1，并且每熬过一次 Minor GC 年龄就加 1 ，当增加到一定程度（默认15）就会被晋升到老年代。</p><p>如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 的一半，年龄不小于该年龄的对象就可以直接进入老年代。</p><p>MinorGC 前，虚拟机必须检查老年代最大可用连续空间是否大于新生代对象总空间，如果满足则说明这次 Minor GC 确定安全。如果不，JVM会查看HandlePromotionFailure 参数是否允许担保失败，如果允许会继续检查老年代最大可用连续空间是否大于历次晋升老年代对象的平均大小，如果满足将Minor GC，否则改成一次 FullGC。</p><h3 id="简述JVM类加载过程"><a href="#简述JVM类加载过程" class="headerlink" title="简述JVM类加载过程"></a>简述JVM类加载过程</h3><p>1）加载：</p><ul><li> 通过全类名获取类的二进制字节流。</li><li> 将类的静态存储结构转化为方法区的运行时数据结构。</li><li> 在内存中生成类的Class对象，作为方法区数据的入口。</li></ul><p>2）验证：对文件格式，元数据，字节码，符号引用等验证正确性。</p><p>3）准备：在方法区内为类变量分配内存并设置为0值。</p><p>4）解析：将符号引用转化为直接引用。</p><p>5）初始化：执行类构造器clinit方法，真正初始化。</p><h3 id="简述JVM中的类加载器"><a href="#简述JVM中的类加载器" class="headerlink" title="简述JVM中的类加载器"></a>简述JVM中的类加载器</h3><ul><li> BootstrapClassLoader启动类加载器：加载/lib下的jar包和类。由C++编写。</li><li> ExtensionClassLoader扩展类加载器：/lib/ext目录下的jar包和类。由Java编写。</li><li> AppClassLoader应用类加载器，加载当前classPath下的jar包和类。由Java编写。</li></ul><h3 id="简述双亲委派机制"><a href="#简述双亲委派机制" class="headerlink" title="简述双亲委派机制"></a>简述双亲委派机制</h3><p>一个类加载器收到类加载请求之后，首先判断当前类是否被加载过。已经被加载的类会直接返回，如果没有被加载，首先将类加载请求转发给父类加载器，一直转发到启动类加载器，只有当父类加载器无法完成时才尝试自己加载。</p><p>加载类顺序：BootstrapClassLoader-&gt;ExtensionClassLoader-&gt;AppClassLoader-&gt;CustomClassLoader 检查类是否加载顺序：CustomClassLoader-&gt;AppClassLoader-&gt;ExtensionClassLoader-&gt;BootstrapClassLoader</p><h3 id="双亲委派机制的优点"><a href="#双亲委派机制的优点" class="headerlink" title="双亲委派机制的优点"></a>双亲委派机制的优点</h3><ul><li> 避免类的重复加载。相同的类被不同的类加载器加载会产生不同的类，双亲委派保证了Java程序的稳定运行。</li><li> 保证核心API不被修改。</li><li> 如何破坏双亲委派机制</li><li> 重载loadClass()方法，即自定义类加载器。</li></ul><h3 id="如何构建自定义类加载器"><a href="#如何构建自定义类加载器" class="headerlink" title="如何构建自定义类加载器"></a>如何构建自定义类加载器</h3><p>新建自定义类继承自java.lang.ClassLoader，重写findClass、loadClass、defineClass方法</p><h3 id="JVM常见调优参数"><a href="#JVM常见调优参数" class="headerlink" title="JVM常见调优参数"></a>JVM常见调优参数</h3><ul><li> -Xms 初始堆大小</li><li> -Xmx 最大堆大小</li><li> -XX:NewSize 年轻代大小</li><li> -XX:MaxNewSize 年轻代最大值</li><li> -XX:PermSize 永生代初始值</li><li> -XX:MaxPermSize 永生代最大值</li><li> -XX:NewRatio 新生代与老年代的比例</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
            <tag> java虚拟机 </tag>
            
            <tag> java面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础篇的八股文</title>
      <link href="/2022/11/04/java-ji-chu-pian-de-ba-gu-wen/"/>
      <url>/2022/11/04/java-ji-chu-pian-de-ba-gu-wen/</url>
      
        <content type="html"><![CDATA[<h3 id="Java-语言具有哪些特点？"><a href="#Java-语言具有哪些特点？" class="headerlink" title="Java 语言具有哪些特点？"></a>Java 语言具有哪些特点？</h3><ul><li> Java 为纯面向对象的语言。它能够直接反应现实生活中的对象。</li><li> 具有平台无关性。Java 利用 Java 虚拟机运行字节码，无论是在 Windows、Linux 还是 MacOS 等其它平台对 Java 程序进行编译，编译后的程序可在其它平台运行。</li><li> Java 为解释型语言，编译器把 Java 代码编译成平台无关的中间代码，然后在 JVM 上解释运行，具有很好的可移植性。</li><li> Java 提供了很多内置类库。如对多线程支持，对网络通信支持，最重要的一点是提供了垃圾回收器。</li><li> Java 具有较好的安全性和健壮性。Java 提供了异常处理和垃圾回收机制，去除了 C++中难以理解的指针特性。</li></ul><h3 id="JDK-与-JRE-有什么区别？"><a href="#JDK-与-JRE-有什么区别？" class="headerlink" title="JDK 与 JRE 有什么区别？"></a>JDK 与 JRE 有什么区别？</h3><ul><li> JDK：Java 开发工具包（Java Development Kit），提供了 Java 的开发环境和运行环境。</li><li> JRE：Java 运行环境(Java Runtime Environment)，提供了 Java 运行所需的环境。</li><li> JDK 包含了 JRE。如果只运行 Java 程序，安装 JRE 即可。要编写 Java 程序需安装 JDK.</li></ul><h3 id="简述-Java-基本数据类型"><a href="#简述-Java-基本数据类型" class="headerlink" title="简述 Java 基本数据类型"></a>简述 Java 基本数据类型</h3><ul><li> byte: 占用 1 个字节，取值范围-128 ~ 127</li><li> short: 占用 2 个字节，取值范围-2^15^ ~ 2^15^-1</li><li> int：占用 4 个字节，取值范围-2^31^ ~ 2^31^-1</li><li> long：占用 8 个字节</li><li> float：占用 4 个字节</li><li> double：占用 8 个字节</li><li> char: 占用 2 个字节</li><li> boolean：占用大小根据实现虚拟机不同有所差异</li></ul><h3 id="简述自动装箱拆箱"><a href="#简述自动装箱拆箱" class="headerlink" title="简述自动装箱拆箱"></a>简述自动装箱拆箱</h3><p>对于 Java 基本数据类型，均对应一个包装类。</p><p>装箱就是自动将基本数据类型转换为包装器类型，如 int-&gt;Integer</p><p>拆箱就是自动将包装器类型转换为基本数据类型，如 Integer-&gt;int</p><h3 id="简述-Java-访问修饰符"><a href="#简述-Java-访问修饰符" class="headerlink" title="简述 Java 访问修饰符"></a>简述 Java 访问修饰符</h3><ul><li> default: 默认访问修饰符，在同一包内可见</li><li> private: 在同一类内可见，不能修饰类</li><li> protected : 对同一包内的类和所有子类可见，不能修饰类</li><li> public: 对所有类可见</li></ul><h3 id="构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？"><a href="#构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？" class="headerlink" title="构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？"></a>构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？</h3><p>先后顺序：静态成员变量、成员变量、构造方法。</p><p>详细的先后顺序：父类静态变量、父类静态代码块、子类静态变量、子类静态代码块、父类非静态变量、父类非静态代码块、父类构造函数、子类非静态变量、子类非静态代码块、子类构造函数。</p><h3 id="Java-代码块执行顺序"><a href="#Java-代码块执行顺序" class="headerlink" title="Java 代码块执行顺序"></a>Java 代码块执行顺序</h3><ul><li> 父类静态代码块（只执行一次）</li><li> 子类静态代码块（只执行一次）</li><li> 父类构造代码块</li><li> 父类构造函数</li><li> 子类构造代码块</li><li> 子类构造函数</li><li> 普通代码块</li></ul><h3 id="面向对象的三大特性？"><a href="#面向对象的三大特性？" class="headerlink" title="面向对象的三大特性？"></a>面向对象的三大特性？</h3><p>继承：对象的一个新类可以从现有的类中派生，派生类可以从它的基类那继承方法和实例变量，且派生类可以修改或新增新的方法使之更适合特殊的需求。</p><p>封装：将客观事物抽象成类，每个类可以把自身数据和方法只让可信的类或对象操作，对不可信的进行信息隐藏。</p><p>多态：允许不同类的对象对同一消息作出响应。不同对象调用相同方法即使参数也相同，最终表现行为是不一样的。</p><h3 id="为什么-Java-语言不支持多重继承？"><a href="#为什么-Java-语言不支持多重继承？" class="headerlink" title="为什么 Java 语言不支持多重继承？"></a>为什么 Java 语言不支持多重继承？</h3><p>为了程序的结构能够更加清晰从而便于维护。假设 Java 语言支持多重继承，类 C 继承自类 A 和类 B，如果类 A 和 B 都有自定义的成员方法 <code>f()</code>，那么当代码中调用类 C 的 <code>f()</code> 会产生二义性。</p><p>Java 语言通过实现多个接口间接支持多重继承，接口由于只包含方法定义，不能有方法的实现，类 C 继承接口 A 与接口 B 时即使它们都有方法<code>f()</code>，也不能直接调用方法，需实现具体的<code>f()</code>方法才能调用，不会产生二义性。</p><p>多重继承会使类型转换、构造方法的调用顺序变得复杂，会影响到性能。</p><h3 id="简述-Java-的多态"><a href="#简述-Java-的多态" class="headerlink" title="简述 Java 的多态"></a>简述 Java 的多态</h3><p>Java 多态可以分为编译时多态和运行时多态。</p><p>编译时多态主要指方法的重载，即通过参数列表的不同来区分不同的方法。</p><p>运行时多态主要指继承父类和实现接口时，可使用父类引用指向子类对象。</p><p>运行时多态的实现：主要依靠方法表，方法表中最先存放的是 Object 类的方法，接下来是该类的父类的方法，最后是该类本身的方法。如果子类改写了父类的方法，那么子类和父类的那些同名方法共享一个方法表项，都被认作是父类的方法。因此可以实现运行时多态。</p><h3 id="Java-提供的多态机制？"><a href="#Java-提供的多态机制？" class="headerlink" title="Java 提供的多态机制？"></a>Java 提供的多态机制？</h3><p>Java 提供了两种用于多态的机制，分别是重载与覆盖。</p><p>重载：重载是指同一个类中有多个同名的方法，但这些方法有不同的参数，在编译期间就可以确定调用哪个方法。</p><p>覆盖：覆盖是指派生类重写基类的方法，使用基类指向其子类的实例对象，或接口的引用变量指向其实现类的实例对象，在程序调用的运行期根据引用变量所指的具体实例对象调用正在运行的那个对象的方法，即需要到运行期才能确定调用哪个方法。</p><h3 id="重载与覆盖的区别？"><a href="#重载与覆盖的区别？" class="headerlink" title="重载与覆盖的区别？"></a>重载与覆盖的区别？</h3><ul><li> 覆盖是父类与子类之间的关系，是垂直关系；重载是同一类中方法之间的关系，是水平关系。</li><li> 覆盖只能由一个方法或一对方法产生关系；重载是多个方法之间的关系。</li><li> 覆盖要求参数列表相同；重载要求参数列表不同。</li><li> 覆盖中，调用方法体是根据对象的类型来决定的，而重载是根据调用时实参表与形参表来对应选择方法体。</li><li> 重载方法可以改变返回值的类型，覆盖方法不能改变返回值的类型。</li></ul><h3 id="接口和抽象类的相同点和不同点？"><a href="#接口和抽象类的相同点和不同点？" class="headerlink" title="接口和抽象类的相同点和不同点？"></a>接口和抽象类的相同点和不同点？</h3><p>相同点:</p><ul><li> 都不能被实例化。</li><li> 接口的实现类或抽象类的子类需实现接口或抽象类中相应的方法才能被实例化。</li></ul><p>不同点：</p><ul><li> 接口只能有方法定义，不能有方法的实现，而抽象类可以有方法的定义与实现。</li><li> 实现接口的关键字为 implements，继承抽象类的关键字为 extends。一个类可以实现多个接口，只能继承一个抽象类。</li><li> 当子类和父类之间存在逻辑上的层次结构，推荐使用抽象类，有利于功能的累积。当功能不需要，希望支持差别较大的两个或更多对象间的特定交互行为，推荐使用接口。使用接口能降低软件系统的耦合度，便于日后维护或添加删除方法。</li></ul><h3 id="简述抽象类与接口的区别"><a href="#简述抽象类与接口的区别" class="headerlink" title="简述抽象类与接口的区别"></a>简述抽象类与接口的区别</h3><p>抽象类：体现的是 is-a 的关系，如对于 man is a person，就可以将 person 定义为抽象类。</p><p>接口：体现的是 can 的关系。是作为模板实现的。如设置接口 fly，plane 类和 bird 类均可实现该接口。</p><p>一个类只能继承一个抽象类，但可以实现多个接口。</p><h3 id="简述内部类及其作用"><a href="#简述内部类及其作用" class="headerlink" title="简述内部类及其作用"></a>简述内部类及其作用</h3><ul><li> 成员内部类：作为成员对象的内部类。可以访问 private 及以上外部类的属性和方法。外部类想要访问内部类属性或方法时，必须要创建一个内部类对象，然后通过该对象访问内部类的属性或方法。外部类也可访问 private 修饰的内部类属性。</li><li> 局部内部类：存在于方法中的内部类。访问权限类似局部变量，只能访问外部类的 final 变量。</li><li> 匿名内部类：只能使用一次，没有类名，只能访问外部类的 final 变量。</li><li> 静态内部类：类似类的静态成员变量。</li></ul><h3 id="Java-语言中关键字-static-的作用是什么？"><a href="#Java-语言中关键字-static-的作用是什么？" class="headerlink" title="Java 语言中关键字 static 的作用是什么？"></a>Java 语言中关键字 static 的作用是什么？</h3><p>static 的主要作用有两个：</p><ul><li> 为某种特定数据类型或对象分配与创建对象个数无关的单一的存储空间。</li><li> 使得某个方法或属性与类而不是对象关联在一起，即在不创建对象的情况下可通过类直接调用方法或使用类的属性。</li></ul><p>具体而言 static 又可分为 4 种使用方式：</p><ul><li> 修饰成员变量。用 static 关键字修饰的静态变量在内存中只有一个副本。只要静态变量所在的类被加载，这个静态变量就会被分配空间，可以使用“类.静态变量”和“对象.静态变量”的方法使用。</li><li> 修饰成员方法。static 修饰的方法无需创建对象就可以被调用。static 方法中不能使用 this 和 super 关键字，不能调用非 static 方法，只能访问所属类的静态成员变量和静态成员方法。</li><li> 修饰代码块。JVM 在加载类的时候会执行 static 代码块。static 代码块常用于初始化静态变量。static 代码块只会被执行一次。</li><li> 修饰内部类。static 内部类可以不依赖外部类实例对象而被实例化。静态内部类不能与外部类有相同的名字，不能访问普通成员变量，只能访问外部类中的静态成员和静态成员方法。</li></ul><h3 id="为什么要把-String-设计为不可变？"><a href="#为什么要把-String-设计为不可变？" class="headerlink" title="为什么要把 String 设计为不可变？"></a>为什么要把 String 设计为不可变？</h3><ul><li> 节省空间：字符串常量存储在 JVM 的字符串池中可以被用户共享。</li><li> 提高效率：String 可以被不同线程共享，是线程安全的。在涉及多线程操作中不需要同步操作。</li><li> 安全：String 常被用于用户名、密码、文件名等使用，由于其不可变，可避免黑客行为对其恶意修改。</li></ul><h3 id="简述-String-StringBuffer-与-StringBuilder"><a href="#简述-String-StringBuffer-与-StringBuilder" class="headerlink" title="简述 String/StringBuffer 与 StringBuilder"></a>简述 String/StringBuffer 与 StringBuilder</h3><p>String 类采用利用 final 修饰的字符数组进行字符串保存，因此不可变。如果对 String 类型对象修改，需要新建对象，将老字符和新增加的字符一并存进去。</p><p>StringBuilder，采用无 final 修饰的字符数组进行保存，因此可变。但线程不安全。</p><p>StringBuffer，采用无 final 修饰的字符数组进行保存，可理解为实现线程安全的 StringBuilder。</p><h3 id="判等运算符-与-equals-的区别？"><a href="#判等运算符-与-equals-的区别？" class="headerlink" title="判等运算符==与 equals 的区别？"></a>判等运算符==与 equals 的区别？</h3><p>== 比较的是引用，equals 比较的是内容。</p><p>如果变量是基础数据类型，== 用于比较其对应值是否相等。如果变量指向的是对象，== 用于比较两个对象是否指向同一块存储空间。</p><p>equals 是 Object 类提供的方法之一，每个 Java 类都继承自 Object 类，所以每个对象都具有 equals 这个方法。Object 类中定义的 equals 方法内部是直接调用 == 比较对象的。但通过覆盖的方法可以让它不是比较引用而是比较数据内容。</p><h3 id="简述-Object-类常用方法"><a href="#简述-Object-类常用方法" class="headerlink" title="简述 Object 类常用方法"></a>简述 Object 类常用方法</h3><ul><li> hashCode：通过对象计算出的散列码。用于 map 型或 equals 方法。需要保证同一个对象多次调用该方法，总返回相同的整型值。</li><li> equals：判断两个对象是否一致。需保证 equals 方法相同对应的对象 hashCode 也相同。</li><li> toString: 用字符串表示该对象</li><li> clone:深拷贝一个对象</li></ul><h3 id="Java-中一维数组和二维数组的声明方式？"><a href="#Java-中一维数组和二维数组的声明方式？" class="headerlink" title="Java 中一维数组和二维数组的声明方式？"></a>Java 中一维数组和二维数组的声明方式？</h3><p>一维数组的声明方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">type arrayName<span class="token punctuation">[</span><span class="token punctuation">]</span>type<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>二维数组的声明方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">type arrayName<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>type<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayNametype<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayName<span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中 type 为基本数据类型或类，arrayName 为数组名字</p><h3 id="简述-Java-异常的分类"><a href="#简述-Java-异常的分类" class="headerlink" title="简述 Java 异常的分类"></a>简述 Java 异常的分类</h3><p>Java 异常分为 Error（程序无法处理的错误），和 Exception（程序本身可以处理的异常）。这两个类均继承 Throwable。</p><p>Error 常见的有 StackOverFlowError、OutOfMemoryError 等等。</p><p>Exception 可分为运行时异常和非运行时异常。对于运行时异常，可以利用 try catch 的方式进行处理，也可以不处理。对于非运行时异常，必须处理，不处理的话程序无法通过编译。</p><h3 id="简述-throw-与-throws-的区别"><a href="#简述-throw-与-throws-的区别" class="headerlink" title="简述 throw 与 throws 的区别"></a>简述 throw 与 throws 的区别</h3><p>throw 一般是用在方法体的内部，由开发者定义当程序语句出现问题后主动抛出一个异常。</p><p>throws 一般用于方法声明上，代表该方法可能会抛出的异常列表。</p><h3 id="出现在-Java-程序中的-finally-代码块是否一定会执行？"><a href="#出现在-Java-程序中的-finally-代码块是否一定会执行？" class="headerlink" title="出现在 Java 程序中的 finally 代码块是否一定会执行？"></a>出现在 Java 程序中的 finally 代码块是否一定会执行？</h3><p>当遇到下面情况不会执行。</p><ul><li> 当程序在进入 try 语句块之前就出现异常时会直接结束。</li><li> 当程序在 try 块中强制退出时，如使用 System.exit(0)，也不会执行 finally 块中的代码。</li></ul><p>其它情况下，在 try/catch/finally 语句执行的时候，try 块先执行，当有异常发生，catch 和 finally 进行处理后程序就结束了，当没有异常发生，在执行完 finally 中的代码后，后面代码会继续执行。值得注意的是，当 try/catch 语句块中有 return 时，finally 语句块中的代码会在 return 之前执行。如果 try/catch/finally 块中都有 return 语句，finally 块中的 return 语句会覆盖 try/catch 模块中的 return 语句。</p><h3 id="final、finally-和-finalize-的区别是什么？"><a href="#final、finally-和-finalize-的区别是什么？" class="headerlink" title="final、finally 和 finalize 的区别是什么？"></a>final、finally 和 finalize 的区别是什么？</h3><ul><li> final 用于声明属性、方法和类，分别表示属性不可变、方法不可覆盖、类不可继承。</li><li> finally 作为异常处理的一部分，只能在 try/catch 语句中使用，finally 附带一个语句块用来表示这个语句最终一定被执行，经常被用在需要释放资源的情况下。</li><li> finalize 是 Object 类的一个方法，在垃圾收集器执行的时候会调用被回收对象的 finalize()方法。当垃圾回收器准备好释放对象占用空间时，首先会调用 finalize()方法，并在下一次垃圾回收动作发生时真正回收对象占用的内存。</li></ul><h3 id="简述泛型"><a href="#简述泛型" class="headerlink" title="简述泛型"></a>简述泛型</h3><p>泛型，即“参数化类型”，解决不确定对象具体类型的问题。在编译阶段有效。在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型在类中称为泛型类、接口中称为泛型接口和方法中称为泛型方法。</p><h3 id="简述泛型擦除"><a href="#简述泛型擦除" class="headerlink" title="简述泛型擦除"></a>简述泛型擦除</h3><p>Java 编译器生成的字节码是不包涵泛型信息的，泛型类型信息将在编译处理是被擦除，这个过程被称为泛型擦除。</p><h3 id="简述注解"><a href="#简述注解" class="headerlink" title="简述注解"></a>简述注解</h3><p>Java 注解用于为 Java 代码提供元数据。作为元数据，注解不直接影响你的代码执行，但也有一些类型的注解实际上可以用于这一目的。</p><p>其可以用于提供信息给编译器，在编译阶段时给软件提供信息进行相关的处理，在运行时处理写相应代码，做对应操作。</p><h3 id="简述元注解"><a href="#简述元注解" class="headerlink" title="简述元注解"></a>简述元注解</h3><p>元注解可以理解为注解的注解，即在注解中使用，实现想要的功能。其具体分为：</p><ul><li> @Retention: 表示注解存在阶段是保留在源码，还是在字节码（类加载）或者运行期（JVM 中运行）。</li><li> @Target：表示注解作用的范围。</li><li> @Documented：将注解中的元素包含到 Javadoc 中去。</li><li> @Inherited：一个被@Inherited 注解了的注解修饰了一个父类，如果他的子类没有被其他注解修饰，则它的子类也继承了父类的注解。</li><li> @Repeatable：被这个元注解修饰的注解可以同时作用一个对象多次，但是每次作用注解又可以代表不同的含义。</li></ul><h3 id="简述-Java-中-Class-对象"><a href="#简述-Java-中-Class-对象" class="headerlink" title="简述 Java 中 Class 对象"></a>简述 Java 中 Class 对象</h3><p>java 中对象可以分为实例对象和 Class 对象，每一个类都有一个 Class 对象，其包含了与该类有关的信息。</p><p>获取 Class 对象的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>“类的全限定名”<span class="token punctuation">)</span>实例对象<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>类名<span class="token punctuation">.</span><span class="token keyword">class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Java-反射机制是什么？"><a href="#Java-反射机制是什么？" class="headerlink" title="Java 反射机制是什么？"></a>Java 反射机制是什么？</h3><p>Java 反射机制是指在程序的运行过程中可以构造任意一个类的对象、获取任意一个类的成员变量和成员方法、获取任意一个对象所属的类信息、调用任意一个对象的属性和方法。反射机制使得 Java 具有动态获取程序信息和动态调用对象方法的能力。可以通过以下类调用反射 API。</p><ul><li> Class 类：可获得类属性方法</li><li> Field 类：获得类的成员变量</li><li> Method 类：获取类的方法信息</li><li> Construct 类：获取类的构造方法等信息</li></ul><h3 id="序列化是什么？"><a href="#序列化是什么？" class="headerlink" title="序列化是什么？"></a>序列化是什么？</h3><p>序列化是一种将对象转换成字节序列的过程，用于解决在对对象流进行读写操作时所引发的问题。序列化可以将对象的状态写在流里进行网络传输，或者保存到文件、数据库等系统里，并在需要的时候把该流读取出来重新构造成一个相同的对象。</p><h3 id="简述-Java-序列化与反序列化的实现"><a href="#简述-Java-序列化与反序列化的实现" class="headerlink" title="简述 Java 序列化与反序列化的实现"></a>简述 Java 序列化与反序列化的实现</h3><p>序列化：将 java 对象转化为字节序列，由此可以通过网络对象进行传输。</p><p>反序列化：将字节序列转化为 java 对象。</p><p>具体实现：实现 Serializable 接口，或实现 Externalizable 接口中的 writeExternal()与 readExternal()方法。</p><h3 id="简述-Java-的-List"><a href="#简述-Java-的-List" class="headerlink" title="简述 Java 的 List"></a>简述 Java 的 List</h3><p>List 是一个有序队列，在 Java 中有两种实现方式:</p><p>ArrayList 使用数组实现，是容量可变的非线程安全列表，随机访问快，集合扩容时会创建更大的数组，把原有数组复制到新数组。</p><p>LinkedList 本质是双向链表，与 ArrayList 相比插入和删除速度更快，但随机访问元素很慢。</p><h3 id="Java-中线程安全的基本数据结构有哪些"><a href="#Java-中线程安全的基本数据结构有哪些" class="headerlink" title="Java 中线程安全的基本数据结构有哪些"></a>Java 中线程安全的基本数据结构有哪些</h3><ul><li> HashTable: 哈希表的线程安全版，效率低</li><li> ConcurrentHashMap：哈希表的线程安全版，效率高，用于替代 HashTable</li><li> Vector：线程安全版 Arraylist</li><li> Stack：线程安全版栈</li><li> BlockingQueue 及其子类：线程安全版队列</li></ul><h3 id="简述-Java-的-Set"><a href="#简述-Java-的-Set" class="headerlink" title="简述 Java 的 Set"></a>简述 Java 的 Set</h3><p>Set 即集合，该数据结构不允许元素重复且无序。Java 对 Set 有三种实现方式：</p><p>HashSet 通过 HashMap 实现，HashMap 的 Key 即 HashSet 存储的元素，Value 系统自定义一个名为 PRESENT 的 Object 类型常量。判断元素是否相同时，先比较 hashCode，相同后再利用 equals 比较，查询 O(1)</p><p>LinkedHashSet 继承自 HashSet，通过 LinkedHashMap 实现，使用双向链表维护元素插入顺序。</p><p>TreeSet 通过 TreeMap 实现的，底层数据结构是红黑树，添加元素到集合时按照比较规则将其插入合适的位置，保证插入后的集合仍然有序。查询 O(logn)</p><h3 id="简述-Java-的-HashMap"><a href="#简述-Java-的-HashMap" class="headerlink" title="简述 Java 的 HashMap"></a>简述 Java 的 HashMap</h3><p>JDK8 之前底层实现是数组 + 链表，JDK8 改为数组 + 链表/红黑树。主要成员变量包括存储数据的 table 数组、元素数量 size、加载因子 loadFactor。HashMap 中数据以键值对的形式存在，键对应的 hash 值用来计算数组下标，如果两个元素 key 的 hash 值一样，就会发生哈希冲突，被放到同一个链表上。</p><p>table 数组记录 HashMap 的数据，每个下标对应一条链表，所有哈希冲突的数据都会被存放到同一条链表，Node/Entry 节点包含四个成员变量：key、value、next 指针和 hash 值。在 JDK8 后链表超过 8 会转化为红黑树。</p><p>若当前数据/总数据容量&gt;负载因子，Hashmap 将执行扩容操作。默认初始化容量为 16，扩容容量必须是 2 的幂次方、最大容量为 1&lt;&lt; 30 、默认加载因子为 0.75。</p><h3 id="为何-HashMap-线程不安全"><a href="#为何-HashMap-线程不安全" class="headerlink" title="为何 HashMap 线程不安全"></a>为何 HashMap 线程不安全</h3><p>在 JDK1.7 中，HashMap 采用头插法插入元素，因此并发情况下会导致环形链表，产生死循环。</p><p>虽然 JDK1.8 采用了尾插法解决了这个问题，但是并发下的 put 操作也会使前一个 key 被后一个 key 覆盖。</p><p>由于 HashMap 有扩容机制存在，也存在 A 线程进行扩容后，B 线程执行 get 方法出现失误的情况。</p><h3 id="简述-Java-的-TreeMap"><a href="#简述-Java-的-TreeMap" class="headerlink" title="简述 Java 的 TreeMap"></a>简述 Java 的 TreeMap</h3><p>TreeMap 是底层利用红黑树实现的 Map 结构，底层实现是一棵平衡的排序二叉树，由于红黑树的插入、删除、遍历时间复杂度都为 O(logN)，所以性能上低于哈希表。但是哈希表无法提供键值对的有序输出，红黑树可以按照键的值的大小有序输出。</p><h3 id="ArrayList、Vector-和-LinkedList-有什么共同点与区别？"><a href="#ArrayList、Vector-和-LinkedList-有什么共同点与区别？" class="headerlink" title="ArrayList、Vector 和 LinkedList 有什么共同点与区别？"></a>ArrayList、Vector 和 LinkedList 有什么共同点与区别？</h3><ul><li> ArrayList、Vector 和 LinkedList 都是可伸缩的数组，即可以动态改变长度的数组。</li><li> ArrayList 和 Vector 都是基于存储元素的 Object[] array 来实现的，它们会在内存中开辟一块连续的空间来存储，支持下标、索引访问。但在涉及插入元素时可能需要移动容器中的元素，插入效率较低。当存储元素超过容器的初始化容量大小，ArrayList 与 Vector 均会进行扩容。</li><li> Vector 是线程安全的，其大部分方法是直接或间接同步的。ArrayList 不是线程安全的，其方法不具有同步性质。LinkedList 也不是线程安全的。</li><li> LinkedList 采用双向列表实现，对数据索引需要从头开始遍历，因此随机访问效率较低，但在插入元素的时候不需要对数据进行移动，插入效率较高。</li></ul><h3 id="HashMap-和-Hashtable-有什么区别？"><a href="#HashMap-和-Hashtable-有什么区别？" class="headerlink" title="HashMap 和 Hashtable 有什么区别？"></a>HashMap 和 Hashtable 有什么区别？</h3><ul><li> HashMap 是 Hashtable 的轻量级实现，HashMap 允许 key 和 value 为 null，但最多允许一条记录的 key 为 null.而 HashTable 不允许。</li><li> HashTable 中的方法是线程安全的，而 HashMap 不是。在多线程访问 HashMap 需要提供额外的同步机制。</li><li> Hashtable 使用 Enumeration 进行遍历，HashMap 使用 Iterator 进行遍历。</li></ul><h3 id="如何决定使用-HashMap-还是-TreeMap"><a href="#如何决定使用-HashMap-还是-TreeMap" class="headerlink" title="如何决定使用 HashMap 还是 TreeMap?"></a>如何决定使用 HashMap 还是 TreeMap?</h3><p>如果对 Map 进行插入、删除或定位一个元素的操作更频繁，HashMap 是更好的选择。如果需要对 key 集合进行有序的遍历，TreeMap 是更好的选择。</p><h3 id="HashSet-中，equals-与-hashCode-之间的关系？"><a href="#HashSet-中，equals-与-hashCode-之间的关系？" class="headerlink" title="HashSet 中，equals 与 hashCode 之间的关系？"></a>HashSet 中，equals 与 hashCode 之间的关系？</h3><p>equals 和 hashCode 这两个方法都是从 object 类中继承过来的，equals 主要用于判断对象的内存地址引用是否是同一个地址；hashCode 根据定义的哈希规则将对象的内存地址转换为一个哈希码。HashSet 中存储的元素是不能重复的，主要通过 hashCode 与 equals 两个方法来判断存储的对象是否相同：</p><ul><li> 如果两个对象的 hashCode 值不同，说明两个对象不相同。</li><li> 如果两个对象的 hashCode 值相同，接着会调用对象的 equals 方法，如果 equlas 方法的返回结果为 true，那么说明两个对象相同，否则不相同。</li></ul><h3 id="fail-fast-和-fail-safe-迭代器的区别是什么？"><a href="#fail-fast-和-fail-safe-迭代器的区别是什么？" class="headerlink" title="fail-fast 和 fail-safe 迭代器的区别是什么？"></a>fail-fast 和 fail-safe 迭代器的区别是什么？</h3><ul><li> fail-fast 直接在容器上进行，在遍历过程中，一旦发现容器中的数据被修改，就会立刻抛出 ConcurrentModificationException 异常从而导致遍历失败。常见的使用 fail-fast 方式的容器有 HashMap 和 ArrayList 等。</li><li> fail-safe 这种遍历基于容器的一个克隆。因此对容器中的内容修改不影响遍历。常见的使用 fail-safe 方式遍历的容器有 ConcurrentHashMap 和 CopyOnWriteArrayList。</li></ul><h3 id="Collection-和-Collections-有什么区别？"><a href="#Collection-和-Collections-有什么区别？" class="headerlink" title="Collection 和 Collections 有什么区别？"></a>Collection 和 Collections 有什么区别？</h3><ul><li> Collection 是一个集合接口，它提供了对集合对象进行基本操作的通用接口方法，所有集合都是它的子类，比如 List、Set 等。</li><li> Collections 是一个包装类，包含了很多静态方法、不能被实例化，而是作为工具类使用，比如提供的排序方法：Collections.sort(list);提供的反转方法：Collections.reverse(list)。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
            <tag> 八股文 </tag>
            
            <tag> java面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>45个日常用git合代码的经典操作场景</title>
      <link href="/2022/11/04/45-ge-ri-chang-yong-git-he-dai-ma-de-jing-dian-cao-zuo-chang-jing/"/>
      <url>/2022/11/04/45-ge-ri-chang-yong-git-he-dai-ma-de-jing-dian-cao-zuo-chang-jing/</url>
      
        <content type="html"><![CDATA[<p>git对于大家应该都不太陌生，熟练使用git已经成为程序员的一项基本技能，尽管在工作中有诸如 <code>Sourcetree</code>这样牛X的客户端工具，使得合并代码变的很方便。但找工作面试和一些需彰显个人实力的场景，仍然需要我们掌握足够多的git命令。  </p><p>下边我们整理了45个日常用git合代码的经典操作场景，基本覆盖了工作中的需求。  </p><h3 id="我刚才提交了什么"><a href="#我刚才提交了什么" class="headerlink" title="我刚才提交了什么?"></a>我刚才提交了什么?</h3><p>如果你用 <code>git commit -a</code> 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。你就可以用下面的命令显示当前<code>HEAD</code>上的最近一次的提交(commit):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git log <span class="token operator">-</span>n1 <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我的提交信息-commit-message-写错了"><a href="#我的提交信息-commit-message-写错了" class="headerlink" title="我的提交信息(commit message)写错了"></a>我的提交信息(commit message)写错了</h3><p>如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git commit <span class="token operator">--</span>amend <span class="token operator">--</span>only<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git commit <span class="token operator">--</span>amend <span class="token operator">--</span>only <span class="token operator">-</span>m <span class="token string">'xxxxxxx'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。</p><h3 id="我提交-commit-里的用户名和邮箱不对"><a href="#我提交-commit-里的用户名和邮箱不对" class="headerlink" title="我提交(commit)里的用户名和邮箱不对"></a>我提交(commit)里的用户名和邮箱不对</h3><p>如果这只是单个提交(commit)，修改它：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git commit <span class="token operator">--</span>amend <span class="token operator">--</span>author <span class="token string">"New Authorname &lt;authoremail@mydomain.com>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你需要修改所有历史, 参考 ‘git filter-branch’的指南页.</p><h3 id="我想从一个提交-commit-里移除一个文件"><a href="#我想从一个提交-commit-里移除一个文件" class="headerlink" title="我想从一个提交(commit)里移除一个文件"></a>我想从一个提交(commit)里移除一个文件</h3><p>通过下面的方法，从一个提交(commit)里移除一个文件:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git checkout HEAD<span class="token operator">^</span> myfile$ git add <span class="token operator">-</span><span class="token class-name">A</span>$ git commit <span class="token operator">--</span>amend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。</p><h3 id="我想删除我的的最后一次提交-commit"><a href="#我想删除我的的最后一次提交-commit" class="headerlink" title="我想删除我的的最后一次提交(commit)"></a>我想删除我的的最后一次提交(commit)</h3><p>如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git reset HEAD<span class="token operator">^</span> <span class="token operator">--</span>hard$ git push <span class="token operator">-</span>f <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token operator">*</span><span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>soft HEAD@<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 <code>git revert SHAofBadCommit</code>， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)；或者, 如果你推的这个分支是rebase-safe的 (例如：其它开发者不会从这个分支拉), 只需要使用 <code>git push -f</code>。</p><h3 id="删除任意提交-commit"><a href="#删除任意提交-commit" class="headerlink" title="删除任意提交(commit)"></a>删除任意提交(commit)</h3><p>同样的警告：不到万不得已的时候不要这么做.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git rebase <span class="token operator">--</span>onto SHA1_OF_BAD_COMMIT<span class="token operator">^</span> SHA1_OF_BAD_COMMIT$ git push <span class="token operator">-</span>f <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者做一个 交互式rebase 删除那些你想要删除的提交(commit)里所对应的行。</p><h3 id="我尝试推一个修正后的提交-amended-commit-到远程，但是报错："><a href="#我尝试推一个修正后的提交-amended-commit-到远程，但是报错：" class="headerlink" title="我尝试推一个修正后的提交(amended commit)到远程，但是报错："></a>我尝试推一个修正后的提交(amended commit)到远程，但是报错：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">To</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>yourusername<span class="token operator">/</span>repo<span class="token punctuation">.</span>git<span class="token operator">!</span> <span class="token punctuation">[</span>rejected<span class="token punctuation">]</span>        mybranch <span class="token operator">-></span> mybranch <span class="token punctuation">(</span>non<span class="token operator">-</span>fast<span class="token operator">-</span>forward<span class="token punctuation">)</span>error<span class="token operator">:</span> failed <span class="token keyword">to</span> <span class="token namespace">push</span> some refs <span class="token keyword">to</span> <span class="token string">'https://github.com/tanay1337/webmaker.org.git'</span>hint<span class="token operator">:</span> <span class="token class-name">Updates</span> were rejected because the tip of your current branch is behindhint<span class="token operator">:</span> its remote <span class="token class-name"><span class="token namespace">counterpart<span class="token punctuation">.</span></span> Integrate</span> the remote changes <span class="token punctuation">(</span>e<span class="token punctuation">.</span>g<span class="token punctuation">.</span>hint<span class="token operator">:</span> <span class="token string">'git pull ...'</span><span class="token punctuation">)</span> before pushing again<span class="token punctuation">.</span>hint<span class="token operator">:</span> <span class="token class-name">See</span> the <span class="token string">'Note about fast-forwards'</span> in <span class="token string">'git push --help'</span> <span class="token keyword">for</span> details<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意, rebasing(见下面)和修正(amending)会用一个新的提交(commit)代替旧的, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (<code>-f</code>)。注意 – 总是 确保你指明一个分支!</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git push origin mybranch <span class="token operator">-</span>f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一般来说, 要避免强推. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。</p><h3 id="我意外的做了一次硬重置-hard-reset-，我想找回我的内容"><a href="#我意外的做了一次硬重置-hard-reset-，我想找回我的内容" class="headerlink" title="我意外的做了一次硬重置(hard reset)，我想找回我的内容"></a>我意外的做了一次硬重置(hard reset)，我想找回我的内容</h3><p>如果你意外的做了 <code>git reset --hard</code>, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reflog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。选择你想要回到的提交(commit)的SHA，再重置一次:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard SHA1234<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就完成了。</p><h2 id="暂存-Staging"><a href="#暂存-Staging" class="headerlink" title="暂存(Staging)"></a>暂存(Staging)</h2><h3 id="我需要把暂存的内容添加到上一次的提交-commit"><a href="#我需要把暂存的内容添加到上一次的提交-commit" class="headerlink" title="我需要把暂存的内容添加到上一次的提交(commit)"></a>我需要把暂存的内容添加到上一次的提交(commit)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token operator">*</span><span class="token punctuation">)</span>$ git commit <span class="token operator">--</span>amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想要暂存一个新文件的一部分，而不是这个文件的全部"><a href="#我想要暂存一个新文件的一部分，而不是这个文件的全部" class="headerlink" title="我想要暂存一个新文件的一部分，而不是这个文件的全部"></a>我想要暂存一个新文件的一部分，而不是这个文件的全部</h3><p>一般来说, 如果你想暂存一个文件的一部分, 你可这样做:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git add <span class="token operator">--</span>patch filename<span class="token punctuation">.</span>x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-p</code> 简写。这会打开交互模式， 你将能够用 <code>s</code> 选项来分隔提交(commit)；然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git add <span class="token operator">-</span><span class="token class-name">N</span> filename<span class="token punctuation">.</span>x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后, 你需要用 <code>e</code> 选项来手动选择需要添加的行，执行 <code>git diff --cached</code> 将会显示哪些行暂存了哪些行只是保存在本地了。</p><h3 id="我想把在一个文件里的变化-changes-加到两个提交-commit-里"><a href="#我想把在一个文件里的变化-changes-加到两个提交-commit-里" class="headerlink" title="我想把在一个文件里的变化(changes)加到两个提交(commit)里"></a>我想把在一个文件里的变化(changes)加到两个提交(commit)里</h3><p><code>git add</code> 会把整个文件加入到一个提交. <code>git add -p</code> 允许交互式的选择你想要提交的部分.</p><h3 id="我想把暂存的内容变成未暂存，把未暂存的内容暂存起来"><a href="#我想把暂存的内容变成未暂存，把未暂存的内容暂存起来" class="headerlink" title="我想把暂存的内容变成未暂存，把未暂存的内容暂存起来"></a>我想把暂存的内容变成未暂存，把未暂存的内容暂存起来</h3><p>多数情况下，你应该将所有的内容变为未暂存，然后再选择你想要的内容进行commit。但假定你就是想要这么做，这里你可以创建一个临时的commit来保存你已暂存的内容，然后暂存你的未暂存的内容并进行stash。然后reset最后一个commit将原本暂存的内容变为未暂存，最后stash pop回来。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git commit <span class="token operator">-</span>m <span class="token string">"WIP"</span>$ git add <span class="token punctuation">.</span>$ git stash$ git reset HEAD<span class="token operator">^</span>$ git stash pop <span class="token operator">--</span>index <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意1: 这里使用<code>pop</code>仅仅是因为想尽可能保持幂等。注意2: 假如你不加上<code>--index</code>你会把暂存的文件标记为为存储。</p><h2 id="未暂存-Unstaged-的内容"><a href="#未暂存-Unstaged-的内容" class="headerlink" title="未暂存(Unstaged)的内容"></a>未暂存(Unstaged)的内容</h2><h3 id="我想把未暂存的内容移动到一个新分支"><a href="#我想把未暂存的内容移动到一个新分支" class="headerlink" title="我想把未暂存的内容移动到一个新分支"></a>我想把未暂存的内容移动到一个新分支</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git checkout <span class="token operator">-</span>b my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想把未暂存的内容移动到另一个已存在的分支"><a href="#我想把未暂存的内容移动到另一个已存在的分支" class="headerlink" title="我想把未暂存的内容移动到另一个已存在的分支"></a>我想把未暂存的内容移动到另一个已存在的分支</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash$ git checkout my<span class="token operator">-</span>branch$ git stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="我想丢弃本地未提交的变化-uncommitted-changes"><a href="#我想丢弃本地未提交的变化-uncommitted-changes" class="headerlink" title="我想丢弃本地未提交的变化(uncommitted changes)"></a>我想丢弃本地未提交的变化(uncommitted changes)</h3><p>如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># one commit<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard HEAD<span class="token operator">^</span># two commits<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard HEAD<span class="token operator">^</span><span class="token operator">^</span># four commits<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard HEAD<span class="token operator">~</span><span class="token number">4</span># or<span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout <span class="token operator">-</span>f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重置某个特殊的文件, 你可以用文件名做为参数:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git reset filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想丢弃某些未暂存的内容"><a href="#我想丢弃某些未暂存的内容" class="headerlink" title="我想丢弃某些未暂存的内容"></a>我想丢弃某些未暂存的内容</h3><p>如果你想丢弃工作拷贝中的一部分内容，而不是全部。</p><p>签出(checkout)不需要的内容，保留需要的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git checkout <span class="token operator">-</span>p# <span class="token class-name">Answer</span> y <span class="token keyword">to</span> <span class="token namespace">all</span> of the snippets you want <span class="token keyword">to</span> <span class="token namespace">drop</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>另外一个方法是使用 <code>stash</code>， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash <span class="token operator">-</span>p# <span class="token class-name">Select</span> all of the snippets you want <span class="token keyword">to</span> <span class="token namespace">save</span>$ git reset <span class="token operator">--</span>hard$ git stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或者, stash 你不需要的部分, 然后stash drop。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash <span class="token operator">-</span>p# <span class="token class-name">Select</span> all of the snippets you don't want <span class="token keyword">to</span> <span class="token namespace">save</span>$ git stash drop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="分支-Branches"><a href="#分支-Branches" class="headerlink" title="分支(Branches)"></a>分支(Branches)</h2><h3 id="我从错误的分支拉取了内容，或把内容拉取到了错误的分支"><a href="#我从错误的分支拉取了内容，或把内容拉取到了错误的分支" class="headerlink" title="我从错误的分支拉取了内容，或把内容拉取到了错误的分支"></a>我从错误的分支拉取了内容，或把内容拉取到了错误的分支</h3><p>这是另外一种使用 <code>git reflog</code> 情况，找到在这次错误拉(pull) 之前HEAD的指向。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reflogab7555f HEAD@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> pull origin wrong<span class="token operator">-</span>branch<span class="token operator">:</span> <span class="token class-name">Fast</span><span class="token operator">-</span>forwardc5bc55a HEAD@<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> checkout<span class="token operator">:</span> checkout message goes here<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重置分支到你所需的提交(desired commit):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git reset <span class="token operator">--</span>hard c5bc55a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完成。</p><h3 id="我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致"><a href="#我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致" class="headerlink" title="我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致"></a>我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致</h3><p>先确认你没有推(push)你的内容到远程。</p><p><code>git status</code> 会显示你领先(ahead)源(origin)多少个提交:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git status# <span class="token class-name">On</span> branch my<span class="token operator">-</span>branch# <span class="token class-name">Your</span> branch is ahead of <span class="token string">'origin/my-branch'</span> by <span class="token number">2</span> commits<span class="token punctuation">.</span>#   <span class="token punctuation">(</span>use <span class="token string">"git push"</span> <span class="token keyword">to</span> <span class="token namespace">publish</span> your local commits<span class="token punctuation">)</span>#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一种方法是:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard origin<span class="token operator">/</span>my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我需要提交到一个新分支，但错误的提交到了main"><a href="#我需要提交到一个新分支，但错误的提交到了main" class="headerlink" title="我需要提交到一个新分支，但错误的提交到了main"></a>我需要提交到一个新分支，但错误的提交到了main</h3><p>在main下创建一个新分支，不切换到新分支,仍在main下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git branch my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把main分支重置到前一个提交:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard HEAD<span class="token operator">^</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>HEAD^</code> 是 <code>HEAD^1</code> 的简写，你可以通过指定要设置的<code>HEAD</code>来进一步重置。</p><p>或者, 如果你不想使用 <code>HEAD^</code>, 找到你想重置到的提交(commit)的hash(<code>git log</code> 能够完成)， 然后重置到这个hash。使用<code>git push</code> 同步内容到远程。</p><p>例如, main分支想重置到的提交的hash为<code>a13b85e</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard a13b85eHEAD is now at a13b85e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>签出(checkout)刚才新建的分支继续工作:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想保留来自另外一个ref-ish的整个文件"><a href="#我想保留来自另外一个ref-ish的整个文件" class="headerlink" title="我想保留来自另外一个ref-ish的整个文件"></a>我想保留来自另外一个ref-ish的整个文件</h3><p>假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:微信搜索公众号：Java后端编程，回复：java 领取资料 。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>$ git add <span class="token operator">-</span><span class="token class-name">A</span> <span class="token operator">&amp;&amp;</span> git commit <span class="token operator">-</span>m <span class="token string">"Adding all changes from this spike into one big commit."</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当你想要把它放到一个分支里 (可能是<code>feature</code>, 或者 <code>develop</code>), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。</p><p>假设你有:</p><ul><li> 分支 <code>solution</code>, 拥有原型方案， 领先 <code>develop</code> 分支。</li><li> 分支 <code>develop</code>, 在这里你应用原型方案的一些内容。</li></ul><p>我去可以通过把内容拿到你的分支里，来解决这个问题:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>develop<span class="token punctuation">)</span>$ git checkout solution <span class="token operator">--</span> file1<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会把这个文件内容从分支 <code>solution</code> 拿到分支 <code>develop</code> 里来:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># <span class="token class-name">On</span> branch develop# <span class="token class-name">Your</span> branch is up<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>date <span class="token keyword">with</span> <span class="token string">'origin/develop'</span><span class="token punctuation">.</span># <span class="token class-name">Changes</span> <span class="token keyword">to</span> <span class="token namespace">be</span> committed<span class="token operator">:</span>#  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file>..."</span> <span class="token keyword">to</span> <span class="token namespace">unstage</span><span class="token punctuation">)</span>##        modified<span class="token operator">:</span>   file1<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后, 正常提交。</p><p>Note: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem.</p><h3 id="我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里"><a href="#我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里" class="headerlink" title="我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里"></a>我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里</h3><p>假设你有一个<code>main</code>分支， 执行<code>git log</code>, 你看到你做过两次提交:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git logcommit e3851e817c451cc36f2e6f3049db528415e3c114<span class="token class-name">Author</span><span class="token operator">:</span> <span class="token class-name">Alex</span> <span class="token class-name">Lee</span> <span class="token operator">&lt;</span>alexlee<span class="token annotation punctuation">@example.com</span><span class="token operator">></span><span class="token class-name">Date</span><span class="token operator">:</span>   <span class="token class-name">Tue</span> <span class="token class-name">Jul</span> <span class="token number">22</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">39</span><span class="token operator">:</span><span class="token number">27</span> <span class="token number">2014</span> <span class="token operator">-</span><span class="token number">0400</span>    <span class="token class-name">Bug</span> #<span class="token number">21</span> <span class="token operator">-</span> <span class="token class-name">Added</span> CSRF protectioncommit <span class="token number">5</span>ea51731d150f7ddc4a365437931cd8be3bf3131<span class="token class-name">Author</span><span class="token operator">:</span> <span class="token class-name">Alex</span> <span class="token class-name">Lee</span> <span class="token operator">&lt;</span>alexlee<span class="token annotation punctuation">@example.com</span><span class="token operator">></span><span class="token class-name">Date</span><span class="token operator">:</span>   <span class="token class-name">Tue</span> <span class="token class-name">Jul</span> <span class="token number">22</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">39</span><span class="token operator">:</span><span class="token number">12</span> <span class="token number">2014</span> <span class="token operator">-</span><span class="token number">0400</span>    <span class="token class-name">Bug</span> #<span class="token number">14</span> <span class="token operator">-</span> <span class="token class-name">Fixed</span> spacing on titlecommit a13b85e984171c6e2a1729bb061994525f626d14<span class="token class-name">Author</span><span class="token operator">:</span> <span class="token class-name">Aki</span> <span class="token class-name">Rose</span> <span class="token operator">&lt;</span>akirose<span class="token annotation punctuation">@example.com</span><span class="token operator">></span><span class="token class-name">Date</span><span class="token operator">:</span>   <span class="token class-name">Tue</span> <span class="token class-name">Jul</span> <span class="token number">21</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span><span class="token number">48</span> <span class="token number">2014</span> <span class="token operator">-</span><span class="token number">0400</span>    <span class="token class-name">First</span> commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们用提交hash(commit hash)标记bug (<code>e3851e8</code> for #21, <code>5ea5173</code> for #14).</p><p>首先, 我们把<code>main</code>分支重置到正确的提交(<code>a13b85e</code>):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard a13b85eHEAD is now at a13b85e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在, 我们对 bug #21 创建一个新的分支:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout <span class="token operator">-</span>b <span class="token number">21</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接着, 我们用 cherry-pick 把对bug #21的提交放入当前分支。这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span>$ git cherry<span class="token operator">-</span>pick e3851e8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时候, 这里可能会产生冲突， 参见交互式 rebasing 章 冲突节 解决冲突.</p><p>再者， 我们为bug #14 创建一个新的分支, 也基于<code>main</code>分支</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span>$ git checkout main<span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout <span class="token operator">-</span>b <span class="token number">14</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后, 为 bug #14 执行 <code>cherry-pick</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>$ git cherry<span class="token operator">-</span>pick <span class="token number">5</span>ea5173<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想删除上游-upstream-分支被删除了的本地分支"><a href="#我想删除上游-upstream-分支被删除了的本地分支" class="headerlink" title="我想删除上游(upstream)分支被删除了的本地分支"></a>我想删除上游(upstream)分支被删除了的本地分支</h3><p>一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中（[IDEA 中玩转 Git][IDEA _ Git]）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git fetch <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我不小心删除了我的分支"><a href="#我不小心删除了我的分支" class="headerlink" title="我不小心删除了我的分支"></a>我不小心删除了我的分支</h3><p>如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。让我们先创建一个分支和一个新的文件:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout <span class="token operator">-</span>b my<span class="token operator">-</span>branch<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git branch<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ touch foo<span class="token punctuation">.</span>txt<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ lsREADME<span class="token punctuation">.</span>md foo<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加文件并做一次提交</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git add <span class="token punctuation">.</span><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git commit <span class="token operator">-</span>m <span class="token string">'foo.txt added'</span><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ foo<span class="token punctuation">.</span>txt added <span class="token number">1</span> files changed<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token function">insertions</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span> create mode <span class="token number">100644</span> foo<span class="token punctuation">.</span>txt<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git logcommit <span class="token number">4e3</span>cd85a670ced7cc17a2b5d8d3d809ac88d5012<span class="token class-name">Author</span><span class="token operator">:</span> siemiatj <span class="token operator">&lt;</span>siemiatj<span class="token annotation punctuation">@example.com</span><span class="token operator">></span><span class="token class-name">Date</span><span class="token operator">:</span>   <span class="token class-name">Wed</span> <span class="token class-name">Jul</span> <span class="token number">30</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">10</span> <span class="token number">2014</span> <span class="token operator">+</span><span class="token number">0200</span>    foo<span class="token punctuation">.</span>txt addedcommit <span class="token number">69204</span>cdf0acbab201619d95ad8295928e7f411d5<span class="token class-name">Author</span><span class="token operator">:</span> <span class="token class-name">Kate</span> <span class="token class-name">Hudson</span> <span class="token operator">&lt;</span>katehudson<span class="token annotation punctuation">@example.com</span><span class="token operator">></span><span class="token class-name">Date</span><span class="token operator">:</span>   <span class="token class-name">Tue</span> <span class="token class-name">Jul</span> <span class="token number">29</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">46</span> <span class="token number">2014</span> <span class="token operator">-</span><span class="token number">0400</span>    <span class="token class-name">Fixes</span> #<span class="token number">6</span><span class="token operator">:</span> <span class="token class-name">Force</span> pushing after amending commits<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们切回到主(main)分支，‘不小心的’删除<code>my-branch</code>分支</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git checkout main<span class="token class-name">Switched</span> <span class="token keyword">to</span> <span class="token namespace">branch</span> <span class="token string">'main'</span><span class="token class-name">Your</span> branch is up<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>date <span class="token keyword">with</span> <span class="token string">'origin/main'</span><span class="token punctuation">.</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git branch <span class="token operator">-</span><span class="token class-name">D</span> my<span class="token operator">-</span>branch<span class="token class-name">Deleted</span> branch my<span class="token operator">-</span>branch <span class="token punctuation">(</span>was <span class="token number">4e3</span>cd85<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ echo oh noes<span class="token punctuation">,</span> deleted my branch<span class="token operator">!</span>oh noes<span class="token punctuation">,</span> deleted my branch<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这时候你应该想起了<code>reflog</code>, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reflog<span class="token number">69204</span>cd HEAD@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> checkout<span class="token operator">:</span> moving from my<span class="token operator">-</span>branch <span class="token keyword">to</span> <span class="token namespace">main</span><span class="token number">4e3</span>cd85 HEAD@<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> commit<span class="token operator">:</span> foo<span class="token punctuation">.</span>txt added<span class="token number">69204</span>cd HEAD@<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> checkout<span class="token operator">:</span> moving from main <span class="token keyword">to</span> <span class="token namespace">my</span><span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout <span class="token operator">-</span>b my<span class="token operator">-</span>branch<span class="token operator">-</span>help<span class="token class-name">Switched</span> <span class="token keyword">to</span> <span class="token namespace">a</span> <span class="token keyword">new</span> branch <span class="token string">'my-branch-help'</span><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token operator">-</span>help<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard <span class="token number">4e3</span>cd85HEAD is now at <span class="token number">4e3</span>cd85 foo<span class="token punctuation">.</span>txt added<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token operator">-</span>help<span class="token punctuation">)</span>$ lsREADME<span class="token punctuation">.</span>md foo<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看! 我们把删除的文件找回来了。Git的 <code>reflog</code> 在rebasing出错的时候也是同样有用的。</p><h3 id="我想删除一个分支"><a href="#我想删除一个分支" class="headerlink" title="我想删除一个分支"></a>我想删除一个分支</h3><p>删除一个远程分支:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git push origin <span class="token operator">--</span>delete my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你也可以:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git push origin <span class="token operator">:</span>my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除一个本地分支:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git branch <span class="token operator">-</span><span class="token class-name">D</span> my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想从别人正在工作的远程分支签出-checkout-一个分支"><a href="#我想从别人正在工作的远程分支签出-checkout-一个分支" class="headerlink" title="我想从别人正在工作的远程分支签出(checkout)一个分支"></a>我想从别人正在工作的远程分支签出(checkout)一个分支</h3><p>首先, 从远程拉取(fetch) 所有分支:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git fetch <span class="token operator">--</span>all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设你想要从远程的<code>daves</code>分支签出到本地的<code>daves</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout <span class="token operator">--</span>track origin<span class="token operator">/</span>daves<span class="token class-name">Branch</span> daves set up <span class="token keyword">to</span> <span class="token namespace">track</span> remote branch daves from <span class="token class-name"><span class="token namespace">origin<span class="token punctuation">.</span></span>Switched</span> <span class="token keyword">to</span> <span class="token namespace">a</span> <span class="token keyword">new</span> branch <span class="token string">'daves'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(<code>--track</code> 是 <code>git checkout -b [branch] [remotename]/[branch]</code> 的简写)</p><p>这样就得到了一个<code>daves</code>分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.</p><h2 id="Rebasing-和合并-Merging"><a href="#Rebasing-和合并-Merging" class="headerlink" title="Rebasing 和合并(Merging)"></a>Rebasing 和合并(Merging)</h2><h3 id="我想撤销rebase-merge"><a href="#我想撤销rebase-merge" class="headerlink" title="我想撤销rebase/merge"></a>我想撤销rebase/merge</h3><p>你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard ORIG_HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我已经rebase过-但是我不想强推-force-push"><a href="#我已经rebase过-但是我不想强推-force-push" class="headerlink" title="我已经rebase过, 但是我不想强推(force push)"></a>我已经rebase过, 但是我不想强推(force push)</h3><p>不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。是因你快进(Fast forward)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout my<span class="token operator">-</span>branch<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git rebase <span class="token operator">-</span>i main<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git checkout main<span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git merge <span class="token operator">--</span>ff<span class="token operator">-</span>only my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="我需要组合-combine-几个提交-commit"><a href="#我需要组合-combine-几个提交-commit" class="headerlink" title="我需要组合(combine)几个提交(commit)"></a>我需要组合(combine)几个提交(commit)</h3><p>假设你的工作分支将会做对于 <code>main</code> 的pull-request。一般情况下你不关心提交(commit)的时间戳，只想组合 所有 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。确保主(main)分支是最新的和你的变化都已经提交了, 然后:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>soft main<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git commit <span class="token operator">-</span>am <span class="token string">"New awesome feature"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git rebase <span class="token operator">-</span>i main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有相对的其它分支， 你将不得不相对自己的<code>HEAD</code> 进行 rebase。例如：你想组合最近的两次提交(commit), 你将相对于<code>HEAD~2</code> 进行rebase， 组合最近3次提交(commit), 相对于<code>HEAD~3</code>, 等等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git rebase <span class="token operator">-</span>i HEAD<span class="token operator">~</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在你执行了交互式 rebase的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">pick a9c8a1d <span class="token class-name">Some</span> refactoringpick <span class="token number">01</span>b2fd8 <span class="token class-name">New</span> awesome featurepick b729ad5 fixuppick e3851e8 another fix# <span class="token class-name">Rebase</span> <span class="token number">8074d</span><span class="token number">12.</span><span class="token punctuation">.</span>b729ad5 onto <span class="token number">8074d</span><span class="token number">12</span>## <span class="token class-name">Commands</span><span class="token operator">:</span>#  p<span class="token punctuation">,</span> pick <span class="token operator">=</span> use commit#  r<span class="token punctuation">,</span> reword <span class="token operator">=</span> use commit<span class="token punctuation">,</span> but edit the commit message#  e<span class="token punctuation">,</span> edit <span class="token operator">=</span> use commit<span class="token punctuation">,</span> but stop <span class="token keyword">for</span> amending#  s<span class="token punctuation">,</span> squash <span class="token operator">=</span> use commit<span class="token punctuation">,</span> but meld into previous commit#  f<span class="token punctuation">,</span> fixup <span class="token operator">=</span> like <span class="token string">"squash"</span><span class="token punctuation">,</span> but discard <span class="token keyword">this</span> commit's log message#  x<span class="token punctuation">,</span> exec <span class="token operator">=</span> run command <span class="token punctuation">(</span>the rest of the line<span class="token punctuation">)</span> using shell## <span class="token class-name">These</span> lines can be re<span class="token operator">-</span>ordered<span class="token punctuation">;</span> they are executed from top <span class="token keyword">to</span> <span class="token namespace">bottom<span class="token punctuation">.</span></span>## <span class="token class-name">If</span> you remove a line here THAT COMMIT WILL BE LOST<span class="token punctuation">.</span>## <span class="token class-name">However</span><span class="token punctuation">,</span> <span class="token keyword">if</span> you remove everything<span class="token punctuation">,</span> the rebase will be aborted<span class="token punctuation">.</span>## <span class="token class-name">Note</span> that empty commits are commented out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有以 <code>#</code> 开头的行都是注释, 不会影响 rebase.</p><p>然后，你可以用任何上面命令列表的命令替换 <code>pick</code>, 你也可以通过删除对应的行来删除一个提交(commit)。</p><p>例如, 如果你想 单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 <code>f</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">pick a9c8a1d <span class="token class-name">Some</span> refactoringpick <span class="token number">01</span>b2fd8 <span class="token class-name">New</span> awesome featuref b729ad5 fixupf e3851e8 another fix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果你想组合这些提交(commit) 并重命名这个提交(commit), 你应该在第二个提交(commit)旁边添加一个<code>r</code>，或者更简单的用<code>s</code> 替代 <code>f</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">pick a9c8a1d <span class="token class-name">Some</span> refactoringpick <span class="token number">01</span>b2fd8 <span class="token class-name">New</span> awesome features b729ad5 fixups e3851e8 another fix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你可以在接下来弹出的文本提示框里重命名提交(commit)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Newer</span><span class="token punctuation">,</span> awesomer features# <span class="token class-name">Please</span> enter the commit message <span class="token keyword">for</span> your <span class="token class-name"><span class="token namespace">changes<span class="token punctuation">.</span></span> Lines</span> starting# <span class="token keyword">with</span> <span class="token string">'#'</span> will be ignored<span class="token punctuation">,</span> and an empty message aborts the commit<span class="token punctuation">.</span># rebase in progress<span class="token punctuation">;</span> onto <span class="token number">8074d</span><span class="token number">12</span># <span class="token class-name">You</span> are currently editing a commit <span class="token keyword">while</span> rebasing branch <span class="token string">'main'</span> on <span class="token string">'8074d12'</span><span class="token punctuation">.</span>## <span class="token class-name">Changes</span> <span class="token keyword">to</span> <span class="token namespace">be</span> committed<span class="token operator">:</span>#modified<span class="token operator">:</span>   README<span class="token punctuation">.</span>md#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果成功了, 你应该看到类似下面的内容:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ <span class="token class-name">Successfully</span> rebased and updated refs<span class="token operator">/</span>heads<span class="token operator">/</span>main<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安全合并-merging-策略"><a href="#安全合并-merging-策略" class="headerlink" title="安全合并(merging)策略"></a>安全合并(merging)策略</h4><p><code>--no-commit</code> 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。<code>no-ff</code> 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致（更多Git资料，参见[IDEA 中如何完成 Git 版本回退？][IDEA _ Git 1]）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git merge <span class="token operator">--</span>no<span class="token operator">-</span>ff <span class="token operator">--</span>no<span class="token operator">-</span>commit my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="我需要将一个分支合并成一个提交-commit"><a href="#我需要将一个分支合并成一个提交-commit" class="headerlink" title="我需要将一个分支合并成一个提交(commit)"></a>我需要将一个分支合并成一个提交(commit)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git merge <span class="token operator">--</span>squash my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="我只想组合-combine-未推的提交-unpushed-commit"><a href="#我只想组合-combine-未推的提交-unpushed-commit" class="headerlink" title="我只想组合(combine)未推的提交(unpushed commit)"></a>我只想组合(combine)未推的提交(unpushed commit)</h4><p>有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git rebase <span class="token operator">-</span>i @<span class="token punctuation">&#123;</span>u<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder/fix/squash 都是安全的。</p><h3 id="检查是否分支上的所有提交-commit-都合并-merge-过了"><a href="#检查是否分支上的所有提交-commit-都合并-merge-过了" class="headerlink" title="检查是否分支上的所有提交(commit)都合并(merge)过了"></a>检查是否分支上的所有提交(commit)都合并(merge)过了</h3><p>检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git log <span class="token operator">--</span>graph <span class="token operator">--</span>left<span class="token operator">-</span>right <span class="token operator">--</span>cherry<span class="token operator">-</span>pick <span class="token operator">--</span>oneline HEAD<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>feature<span class="token operator">/</span><span class="token number">120</span><span class="token operator">-</span>on<span class="token operator">-</span>scroll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。另一个做法可以是:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git log main <span class="token operator">^</span>feature<span class="token operator">/</span><span class="token number">120</span><span class="token operator">-</span>on<span class="token operator">-</span>scroll <span class="token operator">--</span>no<span class="token operator">-</span>merges<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="交互式rebase-interactive-rebase-可能出现的问题"><a href="#交互式rebase-interactive-rebase-可能出现的问题" class="headerlink" title="交互式rebase(interactive rebase)可能出现的问题"></a>交互式rebase(interactive rebase)可能出现的问题</h3><h4 id="这个rebase-编辑屏幕出现’noop’"><a href="#这个rebase-编辑屏幕出现’noop’" class="headerlink" title="这个rebase 编辑屏幕出现’noop’"></a>这个rebase 编辑屏幕出现’noop’</h4><p>如果你看到的是这样:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">noop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 领先(ahead) 当前分支。你可以尝试:</p><ul><li> 检查确保主(main)分支没有问题</li><li> rebase <code>HEAD~2</code> 或者更早</li></ul><h4 id="有冲突的情况"><a href="#有冲突的情况" class="headerlink" title="有冲突的情况"></a>有冲突的情况</h4><p>如果你不能成功的完成rebase, 你可能必须要解决冲突。</p><p>首先执行 <code>git status</code> 找出哪些文件有冲突:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git status<span class="token class-name">On</span> branch my<span class="token operator">-</span>branch<span class="token class-name">Changes</span> not staged <span class="token keyword">for</span> commit<span class="token operator">:</span>  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> <span class="token keyword">to</span> <span class="token namespace">update</span> what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file>..."</span> <span class="token keyword">to</span> <span class="token namespace">discard</span> changes in working directory<span class="token punctuation">)</span> modified<span class="token operator">:</span>   README<span class="token punctuation">.</span>md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子里面, <code>README.md</code> 有冲突。打开这个文件找到类似下面的内容:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span> HEAD   some code   <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>   some code   <span class="token operator">>>></span><span class="token operator">>>></span><span class="token operator">></span> <span class="token keyword">new</span><span class="token operator">-</span>commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你需要解决新提交的代码(示例里, 从中间<code>==</code>线到<code>new-commit</code>的地方)与<code>HEAD</code> 之间不一样的地方.</p><p>有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token operator">*</span><span class="token punctuation">)</span>$ git mergetool <span class="token operator">-</span>t opendiff<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在你解决完所有冲突和测试过后, <code>git add</code> 变化了的(changed)文件, 然后用<code>git rebase --continue</code> 继续rebase。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git add README<span class="token punctuation">.</span>md<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git rebase <span class="token operator">--</span><span class="token keyword">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行<code>git rebase --skip</code>。</p><p>任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git rebase <span class="token operator">--</span>abort<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h2><h3 id="暂存所有改动"><a href="#暂存所有改动" class="headerlink" title="暂存所有改动"></a>暂存所有改动</h3><p>暂存你工作目录下的所有改动</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可以使用<code>-u</code>来排除一些文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash <span class="token operator">-</span>u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="暂存指定文件"><a href="#暂存指定文件" class="headerlink" title="暂存指定文件"></a>暂存指定文件</h3><p>假设你只想暂存某一个文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash push working<span class="token operator">-</span>directory<span class="token operator">-</span>path<span class="token operator">/</span>filename<span class="token punctuation">.</span>ext<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设你想暂存多个文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash push working<span class="token operator">-</span>directory<span class="token operator">-</span>path<span class="token operator">/</span>filename1<span class="token punctuation">.</span>ext working<span class="token operator">-</span>directory<span class="token operator">-</span>path<span class="token operator">/</span>filename2<span class="token punctuation">.</span>ext<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="暂存时记录消息"><a href="#暂存时记录消息" class="headerlink" title="暂存时记录消息"></a>暂存时记录消息</h3><p>这样你可以在<code>list</code>时看到它</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash save <span class="token generics"><span class="token punctuation">&lt;</span>message<span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash push <span class="token operator">-</span>m <span class="token generics"><span class="token punctuation">&lt;</span>message<span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用某个指定暂存"><a href="#使用某个指定暂存" class="headerlink" title="使用某个指定暂存"></a>使用某个指定暂存</h3><p>首先你可以查看你的<code>stash</code>记录</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后你可以<code>apply</code>某个<code>stash</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash apply <span class="token string">"stash@&#123;n&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此处， ‘n’是<code>stash</code>在栈中的位置，最上层的<code>stash</code>会是0</p><p>除此之外，也可以使用时间标记(假如你能记得的话)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash apply <span class="token string">"stash@&#123;2.hours.ago&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="暂存时保留未暂存的内容"><a href="#暂存时保留未暂存的内容" class="headerlink" title="暂存时保留未暂存的内容"></a>暂存时保留未暂存的内容</h3><p>你需要手动create一个<code>stash commit</code>， 然后使用<code>git stash store</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash create$ git stash store <span class="token operator">-</span>m <span class="token string">"commit-message"</span> CREATED_SHA1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="杂项-Miscellaneous-Objects"><a href="#杂项-Miscellaneous-Objects" class="headerlink" title="杂项(Miscellaneous Objects)"></a>杂项(Miscellaneous Objects)</h2><h3 id="克隆所有子模块"><a href="#克隆所有子模块" class="headerlink" title="克隆所有子模块"></a>克隆所有子模块</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git clone <span class="token operator">--</span>recursive git<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>foo<span class="token operator">/</span>bar<span class="token punctuation">.</span>git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果已经克隆了:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git submodule update <span class="token operator">--</span>init <span class="token operator">--</span>recursive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除标签-tag"><a href="#删除标签-tag" class="headerlink" title="删除标签(tag)"></a>删除标签(tag)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git tag <span class="token operator">-</span>d <span class="token generics"><span class="token punctuation">&lt;</span>tag_name<span class="token punctuation">></span></span>$ git push <span class="token generics"><span class="token punctuation">&lt;</span>remote<span class="token punctuation">></span></span> <span class="token operator">:</span>refs<span class="token operator">/</span>tags<span class="token operator">/</span><span class="token generics"><span class="token punctuation">&lt;</span>tag_name<span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="恢复已删除标签-tag"><a href="#恢复已删除标签-tag" class="headerlink" title="恢复已删除标签(tag)"></a>恢复已删除标签(tag)</h3><p>如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git fsck <span class="token operator">--</span>unreachable <span class="token operator">|</span> grep tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>记下这个标签(tag)的hash，然后用Git的 update-ref</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git update<span class="token operator">-</span>ref refs<span class="token operator">/</span>tags<span class="token operator">/</span><span class="token generics"><span class="token punctuation">&lt;</span>tag_name<span class="token punctuation">></span></span> <span class="token generics"><span class="token punctuation">&lt;</span>hash<span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时你的标签(tag)应该已经恢复了。</p><h3 id="已删除补丁-patch"><a href="#已删除补丁-patch" class="headerlink" title="已删除补丁(patch)"></a>已删除补丁(patch)</h3><p>如果某人在 GitHub 上给你发了一个pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 <code>git am</code>。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。</p><p>做完提交后, 再修改作者，参见变更作者。然后, 应用变化, 再发起一个新的pull request。</p><h2 id="跟踪文件-Tracking-Files"><a href="#跟踪文件-Tracking-Files" class="headerlink" title="跟踪文件(Tracking Files)"></a>跟踪文件(Tracking Files)</h2><h3 id="我只想改变一个文件名字的大小写，而不修改内容"><a href="#我只想改变一个文件名字的大小写，而不修改内容" class="headerlink" title="我只想改变一个文件名字的大小写，而不修改内容"></a>我只想改变一个文件名字的大小写，而不修改内容</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git mv <span class="token operator">--</span>force myfile <span class="token class-name">MyFile</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想从Git删除一个文件，但保留该文件"><a href="#我想从Git删除一个文件，但保留该文件" class="headerlink" title="我想从Git删除一个文件，但保留该文件"></a>我想从Git删除一个文件，但保留该文件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git rm <span class="token operator">--</span>cached log<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置-Configuration"><a href="#配置-Configuration" class="headerlink" title="配置(Configuration)"></a>配置(Configuration)</h2><h3 id="我想给一些Git命令添加别名-alias"><a href="#我想给一些Git命令添加别名-alias" class="headerlink" title="我想给一些Git命令添加别名(alias)"></a>我想给一些Git命令添加别名(alias)</h3><p>在 OS X 和 Linux 下, 你的 Git的配置文件储存在 <code>~/.gitconfig</code>。我在<code>[alias]</code> 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>alias<span class="token punctuation">]</span>    a <span class="token operator">=</span> add    amend <span class="token operator">=</span> commit <span class="token operator">--</span>amend    c <span class="token operator">=</span> commit    ca <span class="token operator">=</span> commit <span class="token operator">--</span>amend    ci <span class="token operator">=</span> commit <span class="token operator">-</span>a    co <span class="token operator">=</span> checkout    d <span class="token operator">=</span> diff    dc <span class="token operator">=</span> diff <span class="token operator">--</span>changed    ds <span class="token operator">=</span> diff <span class="token operator">--</span>staged    f <span class="token operator">=</span> fetch    loll <span class="token operator">=</span> log <span class="token operator">--</span>graph <span class="token operator">--</span>decorate <span class="token operator">--</span>pretty<span class="token operator">=</span>oneline <span class="token operator">--</span>abbrev<span class="token operator">-</span>commit    m <span class="token operator">=</span> merge    one <span class="token operator">=</span> log <span class="token operator">--</span>pretty<span class="token operator">=</span>oneline    outstanding <span class="token operator">=</span> rebase <span class="token operator">-</span>i @<span class="token punctuation">&#123;</span>u<span class="token punctuation">&#125;</span>    s <span class="token operator">=</span> status    unpushed <span class="token operator">=</span> log @<span class="token punctuation">&#123;</span>u<span class="token punctuation">&#125;</span>    wc <span class="token operator">=</span> whatchanged    wip <span class="token operator">=</span> rebase <span class="token operator">-</span>i @<span class="token punctuation">&#123;</span>u<span class="token punctuation">&#125;</span>    zap <span class="token operator">=</span> fetch <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="我想缓存一个仓库-repository-的用户名和密码"><a href="#我想缓存一个仓库-repository-的用户名和密码" class="headerlink" title="我想缓存一个仓库(repository)的用户名和密码"></a>我想缓存一个仓库(repository)的用户名和密码</h3><p>你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper能帮你。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git config <span class="token operator">--</span>global credential<span class="token punctuation">.</span>helper cache# <span class="token class-name">Set</span> git <span class="token keyword">to</span> <span class="token namespace">use</span> the credential memory cache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git config <span class="token operator">--</span>global credential<span class="token punctuation">.</span>helper <span class="token string">'cache --timeout=3600'</span># <span class="token class-name">Set</span> the cache <span class="token keyword">to</span> <span class="token namespace">timeout</span> after <span class="token number">1</span> hour <span class="token punctuation">(</span>setting is in seconds<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="我不知道我做错了些什么"><a href="#我不知道我做错了些什么" class="headerlink" title="我不知道我做错了些什么"></a>我不知道我做错了些什么</h3><p>你把事情搞砸了：你 <code>重置(reset)</code> 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。</p><p>这就是 <code>git reflog</code> 的目的， <code>reflog</code> 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到<code>reflog</code>。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reflog<span class="token number">0</span>a2e358 HEAD@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> reset<span class="token operator">:</span> moving <span class="token keyword">to</span> HEAD<span class="token operator">~</span><span class="token number">2</span><span class="token number">0254</span>ea7 HEAD@<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> checkout<span class="token operator">:</span> moving from <span class="token number">2.2</span> <span class="token keyword">to</span> <span class="token namespace">main</span>c10f740 HEAD@<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> checkout<span class="token operator">:</span> moving from main <span class="token keyword">to</span> <span class="token number">2.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的reflog展示了从main分支签出(checkout)到2.2 分支，然后再签回。那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 <code>HEAD@&#123;0&#125;</code>标识.</p><p>如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前main上指向的提交(0254ea7)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git reset <span class="token operator">--</span>hard <span class="token number">0254</span>ea7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后使用git reset就可以把main改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 代码合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8Stream实战系列</title>
      <link href="/2022/11/04/java8stream-shi-zhan-xi-lie/"/>
      <url>/2022/11/04/java8stream-shi-zhan-xi-lie/</url>
      
        <content type="html"><![CDATA[<p>就目前而言，Java8之类的仍然是主流，即使用比较广泛，其次就是JDK11之类的，毕竟对于企业研发而言，求稳第一。  </p><h2 id="一、Java8有哪些新特性？"><a href="#一、Java8有哪些新特性？" class="headerlink" title="一、Java8有哪些新特性？"></a>一、Java8有哪些新特性？</h2><ul><li> 1.Lambda表达式；</li><li> 2.新的日期API；</li><li> 3.引入Optional；</li><li> 4.新增Base64加解密API；</li><li> 5.接口的默认方法和静态方法；</li><li> 6.新增方法引用格式；</li><li> 7.新增Stream类；</li><li> 8.注解相关的改变；</li><li> 9.支持并行数组；</li><li> 10.对并发类的扩展。</li></ul><p>这里不一一讲解，只讲Stream相关系列的实战和应用。</p><h2 id="二、我在实践应用Stream相关的是如何提高开发效率的？"><a href="#二、我在实践应用Stream相关的是如何提高开发效率的？" class="headerlink" title="二、我在实践应用Stream相关的是如何提高开发效率的？"></a>二、我在实践应用Stream相关的是如何提高开发效率的？</h2><p>以下以实用为主(实际应用比较多的)，进行分类划分。在实际中这些通常以组合的形式进行使用，不局限于单单使用某一个。这样做的目的就是为了提高研发效率以及更快更好的解决问题。不然，使用Stream这些新特性的意义也就不存在了。</p><h3 id="1-分组"><a href="#1-分组" class="headerlink" title="1.分组"></a>1.分组</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> groupMapData <span class="token operator">=</span> originData<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token operator">::</span><span class="token function">getType</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-条件筛选"><a href="#2-条件筛选" class="headerlink" title="2.条件筛选"></a>2.条件筛选</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> filterList <span class="token operator">=</span> originData<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">-></span> a<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"YC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-排序"><a href="#3-排序" class="headerlink" title="3.排序"></a>3.排序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> filterOBDHourData <span class="token operator">=</span> originData<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-去重"><a href="#4-去重" class="headerlink" title="4.去重"></a>4.去重</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> dataVOS <span class="token operator">=</span> originData<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>        <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">collectingAndThen</span><span class="token punctuation">(</span>            <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ArrayList</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-数组转List"><a href="#5-数组转List" class="headerlink" title="5.数组转List"></a>5.数组转List</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> codes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  codes <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-数据合并-含去重以及不去重"><a href="#6-数据合并-含去重以及不去重" class="headerlink" title="6.数据合并(含去重以及不去重)"></a>6.数据合并(含去重以及不去重)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token operator">::</span><span class="token function">stream</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token operator">::</span><span class="token function">stream</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-分页"><a href="#7-分页" class="headerlink" title="7.分页"></a>7.分页</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> dataList <span class="token operator">=</span> originData<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> dto<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-统计"><a href="#8-统计" class="headerlink" title="8.统计"></a>8.统计</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//求最大值BigDecimal max = dataList.stream().map(T::getPrice).max((x1, x2) -> x1.compareTo(x2)).get();</span><span class="token comment">//求最小值BigDecimal min = dataList.stream().map(T::getPrice).min((x1, x2) -> x1.compareTo(x2)).get();</span><span class="token comment">//求和 空指针异常排除BigDecimal sum = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add);</span><span class="token comment">//求平均值BigDecimal average = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add).divide(BigDecimal.valueOf(dataList.size()), 2, BigDecimal.ROUND_HALF_UP);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-拼接"><a href="#9-拼接" class="headerlink" title="9.拼接"></a>9.拼接</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> nameJoin <span class="token operator">=</span> dataList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-归集"><a href="#10-归集" class="headerlink" title="10.归集"></a>10.归集</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> mapNameObject <span class="token operator">=</span> dataList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> item <span class="token operator">-></span> item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="11-映射Map"><a href="#11-映射Map" class="headerlink" title="11.映射Map"></a>11.映射Map</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"1,2,3"</span><span class="token punctuation">,</span> <span class="token string">"4,5,6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> newStrList <span class="token operator">=</span> strList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>item <span class="token operator">-></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-搜索"><a href="#12-搜索" class="headerlink" title="12.搜索"></a>12.搜索</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">originData<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>data <span class="token operator">-></span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>FALSE <span class="token operator">?</span> data<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span>data<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>dto    <span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk1.8 </tag>
            
            <tag> stream </tag>
            
            <tag> lambda操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在hexo中无痛使用本地图片</title>
      <link href="/2022/11/04/zai-hexo-zhong-wu-tong-shi-yong-ben-di-tu-pian/"/>
      <url>/2022/11/04/zai-hexo-zhong-wu-tong-shi-yong-ben-di-tu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="1-起因"><a href="#1-起因" class="headerlink" title="1 起因"></a>1 起因</h2><p>在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。</p><p>这些问题使得我一度不愿意使用本地图片而选择用图床，但被移动运营商无耻的横条广告逼得打算上 https，图床只支持 http 就成了问题。</p><p>hexo 下插入图片现在大概有几个方案</p><h3 id="1-1-放在根目录"><a href="#1-1-放在根目录" class="headerlink" title="1.1 放在根目录"></a>1.1 放在根目录</h3><p>早期大部分的方案是把图片放在 <code>source/img</code> 下，然后在 markdown 里写 <code>![img](/source/img/img.png)</code> 。显然这样在本地的编辑器里完全不能正确识别图片的位置。</p><h3 id="1-2-asset-image"><a href="#1-2-asset-image" class="headerlink" title="1.2 asset-image"></a>1.2 asset-image</h3><p>在 hexo 2.x 时出现的插件，后来被吸纳进 <code>hexo 3 core</code> ，用法的介绍见 [资源文件夹 | Hexo][_ Hexo] 。比较尴尬的是，这种方法直接放弃了 markdown 原来的语法，使用类似 ``的语法，。markdown 本来有插入图片的语法不好好支持，专门用一个新的语法来插入本地图片，让我这种强迫症不太能接受。</p><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2 解决方案"></a>2 解决方案</h2><h3 id="2-1-使用"><a href="#2-1-使用" class="headerlink" title="2.1 使用"></a>2.1 使用</h3><p>首先确认 <code>_config.yml</code> 中有 <code>post_asset_folder:true</code> 。</p><p>在 hexo 目录，执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">npm install https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token class-name">CodeFalling</span><span class="token operator">/</span>hexo<span class="token operator">-</span>asset<span class="token operator">-</span>image <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设在</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MacGesture2</span><span class="token operator">-</span><span class="token class-name">Publish</span>├── apppicker<span class="token punctuation">.</span>jpg├── logo<span class="token punctuation">.</span>jpg└── rules<span class="token punctuation">.</span>jpg <span class="token class-name">MacGesture2</span><span class="token operator">-</span><span class="token class-name">Publish</span><span class="token punctuation">.</span>md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样的目录结构（目录名和文章名一致），只要使用 <code>![logo](MacGesture2-Publish/logo.jpg)</code>就可以插入图片。</p><p>生成的结构为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">/</span><span class="token number">2015</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">18</span><span class="token operator">/</span><span class="token class-name">MacGesture2</span><span class="token operator">-</span><span class="token class-name">Publish</span>├── apppicker<span class="token punctuation">.</span>jpg├── index<span class="token punctuation">.</span>html├── logo<span class="token punctuation">.</span>jpg└── rules<span class="token punctuation">.</span>jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，生成的 html 是</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"/2015/10/18/MacGesture2-Publish/logo.jpg"</span> alt<span class="token operator">=</span><span class="token string">"logo"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而不是愚蠢的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"MacGesture2-Publish/logo.jpg"</span> alt<span class="token operator">=</span><span class="token string">"logo"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>值得一提的是，这个插件对于 [CodeFalling/hexo-renderer-org][CodeFalling_hexo-renderer-org] 同样有效。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感受java8后lambda之美</title>
      <link href="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/"/>
      <url>/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/</url>
      
        <content type="html"><![CDATA[<p>一、引言</p><p>java8最大的特性就是引入Lambda表达式，即函数式编程，可以将行为进行传递。总结就是：使用不可变值与函数，函数对不可变值进行处理，映射成另一个值。</p><h2 id="二、java重要的函数式接口"><a href="#二、java重要的函数式接口" class="headerlink" title="二、java重要的函数式接口"></a>二、java重要的函数式接口</h2><h3 id="1、什么是函数式接口"><a href="#1、什么是函数式接口" class="headerlink" title="1、什么是函数式接口"></a>1、什么是函数式接口</h3><p>函数接口是只有一个抽象方法的接口，用作 Lambda 表达式的类型。使用@FunctionalInterface注解修饰的类，编译器会检测该类是否只有一个抽象方法或接口，否则，会报错。可以有多个默认方法，静态方法。</p><h4 id="1-1-java8自带的常用函数式接口。"><a href="#1-1-java8自带的常用函数式接口。" class="headerlink" title="1.1 java8自带的常用函数式接口。"></a>1.1 java8自带的常用函数式接口。</h4><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_ec9c4260.png" alt="image_ec9c4260.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> predicate <span class="token operator">=</span> x <span class="token operator">-></span> x <span class="token operator">></span> <span class="token number">185</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"9龙"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>            <span class="token string">"9龙的身高高于185吗？："</span> <span class="token operator">+</span> predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getStature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> consumer <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"命运由我不由天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> function <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> supplier <span class="token operator">=</span>             <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>TEN<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UnaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> unaryOperator <span class="token operator">=</span> uglily <span class="token operator">-></span> <span class="token operator">!</span>uglily<span class="token punctuation">;</span>        <span class="token class-name">Boolean</span> apply2 <span class="token operator">=</span> unaryOperator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>apply2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> operator <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>        <span class="token class-name">Integer</span> integer <span class="token operator">=</span> operator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token string">"我是一个演示的函数式接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 演示自定义函数式接口使用     *     * @param worker     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Worker</span> worker<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> work <span class="token operator">=</span> worker<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Worker</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//9龙的身高高于185吗？：false</span><span class="token comment">//命运由我不由天</span><span class="token comment">//9龙</span><span class="token comment">//10</span><span class="token comment">//false</span><span class="token comment">//6</span><span class="token comment">//我是一个演示的函数式接口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上演示了lambda接口的使用及自定义一个函数式接口并使用。下面，我们看看java8将函数式接口封装到流中如何高效的帮助我们处理集合。  </p><p>注意：Student::getName例子中这种编写lambda表达式的方式称为方法引用。格式为ClassNmae::methodName。是不是很神奇，java8就是这么迷人。</p><blockquote><p>示例：本篇所有示例都基于以下三个类。OutstandingClass：班级；Student：学生；SpecialityEnum：特长。</p></blockquote><h4 id><a href="#" class="headerlink" title></a><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_7771b4fe.png" alt="image_7771b4fe.png"></h4><h4 id="1-2-惰性求值与及早求值"><a href="#1-2-惰性求值与及早求值" class="headerlink" title="1.2 惰性求值与及早求值"></a>1.2 惰性求值与及早求值</h4><p>惰性求值：只描述Stream，操作的结果也是Stream，这样的操作称为惰性求值。惰性求值可以像建造者模式一样链式使用，最后再使用及早求值得到最终结果。</p><p>及早求值：得到最终的结果而不是Stream，这样的操作称为及早求值。</p><h3 id="2、常用的流"><a href="#2、常用的流" class="headerlink" title="2、常用的流"></a>2、常用的流</h3><h4 id="2-1-collect-Collectors-toList"><a href="#2-1-collect-Collectors-toList" class="headerlink" title="2.1 collect(Collectors.toList())"></a>2.1 collect(Collectors.toList())</h4><p>将流转换为list。还有toSet()，toMap()等。及早求值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> studentList <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>studentList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;, </span><span class="token comment">//Student&#123;name='红发', age=40, stature=180, specialities=null&#125;, </span><span class="token comment">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-filter"><a href="#2-2-filter" class="headerlink" title="2.2 filter"></a>2.2 filter</h4><p>顾名思义，起过滤筛选的作用。内部就是Predicate接口。惰性求值。</p><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_eba0197b.png" alt="image_eba0197b.png"></p><p>比如我们筛选出出身高小于180的同学。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>stu <span class="token operator">-></span> stu<span class="token punctuation">.</span><span class="token function">getStature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">180</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-map"><a href="#2-3-map" class="headerlink" title="2.3 map"></a>2.3 map</h4><p>转换功能，内部就是Function接口。惰性求值</p><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_23fab375.png" alt="image_23fab375.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> names <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>student <span class="token operator">-></span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//[路飞, 红发, 白胡子]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子中将student对象转换为String对象，获取student的名字。  </p><h4 id="2-4-flatMap"><a href="#2-4-flatMap" class="headerlink" title="2.4 flatMap"></a>2.4 flatMap</h4><p>将多个Stream合并为一个Stream。惰性求值</p><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_c1ac2536.png" alt="image_c1ac2536.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> studentList <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span>                <span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"艾斯"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"雷利"</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>students1 <span class="token operator">-></span> students1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>studentList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;, </span><span class="token comment">//Student&#123;name='红发', age=40, stature=180, specialities=null&#125;, </span><span class="token comment">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;, </span><span class="token comment">//Student&#123;name='艾斯', age=25, stature=183, specialities=null&#125;,</span><span class="token comment">//Student&#123;name='雷利', age=48, stature=176, specialities=null&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用Stream.of的静态方法将两个list转换为Stream，再通过flatMap将两个流合并为一个。  </p><h4 id="2-5-max和min"><a href="#2-5-max和min" class="headerlink" title="2.5 max和min"></a>2.5 max和min</h4><p>我们经常会在集合中求最大或最小值，使用流就很方便。及早求值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>stu <span class="token operator">-></span> stu<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> min <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>stu <span class="token operator">-></span> stu<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断是否有值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;</span><span class="token comment">//Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>max、min接收一个Comparator（例子中使用java8自带的静态函数，只需要传进需要比较值即可。）并且返回一个Optional对象，该对象是java8新增的类，专门为了防止null引发的空指针异常。  </p><p>可以使用max.isPresent()判断是否有值；可以使用max.orElse(new Student())，当值为null时就使用给定值；也可以使用max.orElseGet(() -&gt; new Student());这需要传入一个Supplier的lambda表达式。</p><h4 id="2-6-count"><a href="#2-6-count" class="headerlink" title="2.6 count"></a>2.6 count</h4><p>统计功能，一般都是结合filter使用，因为先筛选出我们需要的再统计即可。及早求值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s1 <span class="token operator">-></span> s1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄小于45岁的人数是："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//年龄小于45岁的人数是：2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-7-reduce"><a href="#2-7-reduce" class="headerlink" title="2.7 reduce"></a>2.7 reduce</h4><p>reduce 操作可以实现从一组值中生成一个值。在上述例子中用到的 count 、 min 和 max 方法，因为常用而被纳入标准库中。事实上，这些方法都是 reduce 操作。及早求值。</p><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_9186bf98.png" alt="image_9186bf98.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> reduce <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>acc<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-></span> acc<span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看得reduce接收了一个初始值为0的累加器，依次取出值与累加器相加，最后累加器的值就是最终的结果。</p><h2 id="三、高级集合类及收集器"><a href="#三、高级集合类及收集器" class="headerlink" title="三、高级集合类及收集器"></a>三、高级集合类及收集器</h2><h3 id="3-1-转换成值"><a href="#3-1-转换成值" class="headerlink" title="3.1 转换成值"></a>3.1 转换成值</h3><p>收集器，一种通用的、从流生成复杂值的结构。只要将它传给 collect 方法，所有的流就都可以使用它了。标准类库已经提供了一些有用的收集器，以下示例代码中的收集器都是从 java.util.stream.Collectors 类中静态导入的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectorsTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutstandingClass</span> ostClass1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutstandingClass</span><span class="token punctuation">(</span><span class="token string">"一班"</span><span class="token punctuation">,</span> students1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//复制students1，并移除一个学生</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>students1<span class="token punctuation">)</span><span class="token punctuation">;</span>        students2<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutstandingClass</span> ostClass2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutstandingClass</span><span class="token punctuation">(</span><span class="token string">"二班"</span><span class="token punctuation">,</span> students2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将ostClass1、ostClass2转换为Stream</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OutstandingClass</span><span class="token punctuation">></span></span> classStream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>ostClass1<span class="token punctuation">,</span> ostClass2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutstandingClass</span> outstandingClass <span class="token operator">=</span> <span class="token function">biggestGroup</span><span class="token punctuation">(</span>classStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人数最多的班级是："</span> <span class="token operator">+</span> outstandingClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一班平均年龄是："</span> <span class="token operator">+</span> <span class="token function">averageNumberOfStudent</span><span class="token punctuation">(</span>students1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取人数最多的班级     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">OutstandingClass</span> <span class="token function">biggestGroup</span><span class="token punctuation">(</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OutstandingClass</span><span class="token punctuation">></span></span> outstandingClasses<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> outstandingClasses<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>                <span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token function">comparing</span><span class="token punctuation">(</span>ostClass <span class="token operator">-></span> ostClass<span class="token punctuation">.</span><span class="token function">getStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token class-name">OutstandingClass</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 计算平均年龄     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">averageNumberOfStudent</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">averagingInt</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//人数最多的班级是：一班</span><span class="token comment">//一班平均年龄是：37.666666666666664</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>maxBy或者minBy就是求最大值与最小值。  </p><h3 id="3-2-转换成块"><a href="#3-2-转换成块" class="headerlink" title="3.2 转换成块"></a>3.2 转换成块</h3><p>常用的流操作是将其分解成两个集合，Collectors.partitioningBy帮我们实现了，接收一个Predicate函数式接口。</p><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_16155432.png" alt="image_16155432.png"></p><p>将示例学生分为会唱歌与不会唱歌的两个集合。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PartitioningByTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//省略List&lt;student> students的初始化</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span><span class="token punctuation">></span></span> listMap <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>            <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>student <span class="token operator">-></span> student<span class="token punctuation">.</span><span class="token function">getSpecialities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                                      <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">SpecialityEnum</span><span class="token punctuation">.</span>SING<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-数据分组"><a href="#3-3-数据分组" class="headerlink" title="3.3 数据分组"></a>3.3 数据分组</h3><p>数据分组是一种更自然的分割数据操作，与将数据分成 ture 和 false 两部分不同，可以使用任意值对数据分组。Collectors.groupingBy接收一个Function做转换。</p><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_79d304da.png" alt="image_79d304da.png"></p><p>如图，我们使用groupingBy将根据进行分组为圆形一组，三角形一组，正方形一组。</p><p>例子：根据学生第一个特长进行分组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupingByTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//省略List&lt;student> students的初始化</span>         <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpecialityEnum</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span><span class="token punctuation">></span></span> listMap <span class="token operator">=</span>              students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>             <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>student <span class="token operator">-></span> student<span class="token punctuation">.</span><span class="token function">getSpecialities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Collectors.groupingBy与SQL 中的 group by 操作是一样的。</p><h3 id="3-4-字符串拼接"><a href="#3-4-字符串拼接" class="headerlink" title="3.4 字符串拼接"></a>3.4 字符串拼接</h3><p>如果将所有学生的名字拼接起来，怎么做呢？通常只能创建一个StringBuilder，循环拼接。使用Stream，使用Collectors.joining()简单容易。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JoiningTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> names <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token string">"["</span><span class="token punctuation">,</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//[路飞,红发,白胡子]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>joining接收三个参数，第一个是分界符，第二个是前缀符，第三个是结束符。也可以不传入参数Collectors.joining()，这样就是直接拼接。  </p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>本篇主要从实际使用讲述了常用的方法及流，使用java8可以很清晰表达你要做什么，代码也很简洁。本篇例子主要是为了讲解较为简单，大家可以去使用java8重构自己现有的代码，自行领会lambda的奥妙。</p><p>本文说的Stream要组合使用才会发挥更大的功能，链式调用很迷人，根据自己的业务去做吧。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk1.8 </tag>
            
            <tag> lambda </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
