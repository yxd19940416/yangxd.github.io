<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JDK源码中NB的设计模式</title>
      <link href="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/"/>
      <url>/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、结构性模式："><a href="#一、结构性模式：" class="headerlink" title="一、结构性模式："></a>一、结构性模式：</h2><h3 id="1、适配器模式："><a href="#1、适配器模式：" class="headerlink" title="1、适配器模式："></a>1、适配器模式：</h3><blockquote><p>常用于将一个新接口适配旧接口</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_0db7343e.png" alt="image_0db7343e.png"></p><p>在我们业务代码中经常有新旧接口适配需求，可以采用该模式。</p><h3 id="2、桥接模式："><a href="#2、桥接模式：" class="headerlink" title="2、桥接模式："></a>2、桥接模式：</h3><blockquote><p>将抽象和抽象的具体实现进行解耦，这样可以使得抽象和抽象的具体实现可以独立进行变化。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_80280cd4.png" alt="image_80280cd4.png"></p><p>：这个模式，其实我们每天都在用到，但是你可能却浑然不知。只要你用到面向接口编程，其实都是在用桥接模式。</p><h3 id="3、组合模式"><a href="#3、组合模式" class="headerlink" title="3、组合模式"></a>3、组合模式</h3><blockquote><p>让客户端看起来在处理单个对象和对象的组合是平等的，换句话说，某个类型的方法同时也接受自身类型作为参数。（So in other words methods on a type accepting the same type）</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_da86596b.png" alt="image_da86596b.png"></p><p>从上面那句英文我们就可以得知，组合模式常用于递归操作的优化上，比如每个公司都有个boss系统，都会有什么菜单的功能。比如一级菜单下有二级菜单，二级菜单又有三级菜单。删除一级菜单的时候需要不断删除子菜单，那么这个设计模式你可以试试。总之，凡是有级联操作的，你都可以尝试这个设计模式。</p><h3 id="4、装饰者模式"><a href="#4、装饰者模式" class="headerlink" title="4、装饰者模式"></a>4、装饰者模式</h3><blockquote><p>动态的给一个对象附加额外的功能，因此它也是子类化的一种替代方法。该设计模式在JDK中广泛运用，以下只是列举一小部分</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_a62166f6.png" alt="image_a62166f6.png"></p><p>这个模式使用就太广了，我们常用的AOP，既有动态代理，也有装饰者的味道。</p><h3 id="5、门面模式"><a href="#5、门面模式" class="headerlink" title="5、门面模式"></a>5、门面模式</h3><blockquote><p>为一组组件，接口，抽象或子系统提供简化的接口。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_cabc5bfb.png" alt="image_cabc5bfb.png"></p><p>我们每天使用的SLFJ日志就是门面日志，比如我们使用Dubbo，向外提供的服务就尽量采用门面模式，然后服务在调用各种service做聚合。</p><h3 id="6、享元模式"><a href="#6、享元模式" class="headerlink" title="6、享元模式"></a>6、享元模式</h3><blockquote><p>使用缓存来减少对小对象的访问时间</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_db731042.png" alt="image_db731042.png"></p><p>只要用到了缓存，基本都是在使用享元模式。很多同学都说自己的项目太low了，都没有用到什么设计模式，这不是开玩笑吗，你用个map缓存几个对象，基本上都运用了享元的思想。</p><h3 id="7、代理模式"><a href="#7、代理模式" class="headerlink" title="7、代理模式"></a>7、代理模式</h3><blockquote><p>代理模式用于向较简单的对象代替创建复杂或耗时的对象。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_e9562544.png" alt="image_e9562544.png"></p><p>代理模式用得很广泛，基本所有大家知道的开源框架，都用到了动态代理。</p><h2 id="二、创建模式"><a href="#二、创建模式" class="headerlink" title="二、创建模式"></a>二、创建模式</h2><h3 id="1、抽象工厂模式"><a href="#1、抽象工厂模式" class="headerlink" title="1、抽象工厂模式"></a>1、抽象工厂模式</h3><blockquote><p>抽象工厂模式提供了一个协议来生成一系列的相关或者独立的对象，而不用指定具体对象的类型。它使得应用程序能够和使用的框架的具体实现进行解耦。在JDK和许多开源框架，比如Spring中随处可见，它们很容易被发现。任何用于创建对象但返回接口或抽象类的，就是抽象工厂模式了。（any method that is used to create an object but still returns a interface or abstract class）</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_fbd05a32.png" alt="image_fbd05a32.png"></p><p>从英文就可以得出，该模式可以与策略模式结合使用。</p><h3 id="2、建造者模式"><a href="#2、建造者模式" class="headerlink" title="2、建造者模式"></a>2、建造者模式</h3><blockquote><p>用于通过定义一个类来简化复杂对象的创建，该类的目的是构建另一个类的实例。构建器模式还允许实现Fluent接口。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_a7e0d82b.png" alt="image_a7e0d82b.png"></p><p>这个在我们业务代码中使用的场景太广泛了。比如订单系统大部分项目都有，订单对象就是一个复杂对象，我们就可以采用建造者模式来做。</p><h3 id="3、工厂方法"><a href="#3、工厂方法" class="headerlink" title="3、工厂方法"></a>3、工厂方法</h3><blockquote><p>只是一个返回实际类型的方法。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_b2dcd320.png" alt="image_b2dcd320.png"></p><p>这个属于大家都会的设计模式，不多过介绍。</p><h3 id="4、原型模式"><a href="#4、原型模式" class="headerlink" title="4、原型模式"></a>4、原型模式</h3><blockquote><p>使得类的实例能够生成自身的拷贝。如果创建一个对象的实例非常复杂且耗时时，就可以使用这种模式，而不重新创建一个新的实例，你可以拷贝一个对象并直接修改它。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_3135fcc2.png" alt="image_3135fcc2.png"></p><p>这个你以为是冷门的设计模式，其实错了，这个是大热门的设计模式。比如我们业务代码，经常要各种DTO、BO、DO、VO转换，其实就可以参考原型设计模式的思想来做。</p><h3 id="5、单例模式"><a href="#5、单例模式" class="headerlink" title="5、单例模式"></a>5、单例模式</h3><blockquote><p>用来确保类只有一个实例。Joshua Bloch在Effetive Java中建议到，还有一种方法就是使用枚举。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_f4c365cb.png" alt="image_f4c365cb.png"></p><p>在平时开发中，单例是我们用得最多的了，因为Spring的bean，默认就是单例级别的。单例属于大家基本都会的设计模式。</p><h2 id="三、行为模式"><a href="#三、行为模式" class="headerlink" title="三、行为模式"></a>三、行为模式</h2><h3 id="1、责任链"><a href="#1、责任链" class="headerlink" title="1、责任链"></a>1、责任链</h3><blockquote><p>通过把请求从一个对象传递到链条中下一个对象的方式来解除对象之间的耦合，直到请求被处理完毕。链中的对象是同一接口或抽象类的不同实现。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_26b58e72.png" alt="image_26b58e72.png"></p><p>凡是带有<code>Filter</code>关键词的，基本都在用这个设计模式。在业务代码使用的场景实在是太多了，用到拦截器的地方基本都在用这个设计模式。</p><h3 id="2、命令模式"><a href="#2、命令模式" class="headerlink" title="2、命令模式"></a>2、命令模式</h3><blockquote><p>将命令包装在对象中，以便可以将其存储，传递到方法中，并像任何其他对象一样返回。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_12478821.png" alt="image_12478821.png"></p><p>命令模式使用频率较高，和策略模式比较像，具体区别可以搜索一下。如果用过<code>Activiti</code>工作流引擎的朋友可以看一下里面的源码，很多地方都用到了命令模式。</p><h3 id="3、解释器模式"><a href="#3、解释器模式" class="headerlink" title="3、解释器模式"></a>3、解释器模式</h3><blockquote><p>此模式通常描述为该语言定义语法并使用该语法来解释该格式的语句。（This pattern generally describes defining a grammar for that language and using that grammar to interpret statements in that format.）</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_a76314fe.png" alt="image_a76314fe.png"></p><p>这个比较冷门，肥朝没怎么用过，你用过的话可以留言告诉肥朝。</p><h3 id="4、迭代器模式"><a href="#4、迭代器模式" class="headerlink" title="4、迭代器模式"></a>4、迭代器模式</h3><blockquote><p>提供一个统一的方式来访问集合中的对象。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_56c75850.png" alt="image_56c75850.png"></p><p>这个中间件和基础框架组的同学可能用得比较多，业务代码的话用得不多，不过JDK中的这种使用很经典，可以看看。</p><h3 id="5、中介者模式"><a href="#5、中介者模式" class="headerlink" title="5、中介者模式"></a>5、中介者模式</h3><blockquote><p>通过使用一个中间对象来进行消息分发以及减少类之间的直接依赖。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_4cc8d46f.png" alt="image_4cc8d46f.png"></p><p>看到这个描述不用我多说什么，业务代码使用的场景太多了。比如你们用MQ，其实就是在用中介者模式。所以肥朝一再强调，即使是每天CRUD，关注肥朝一起学习，也能给你的CRUD项目，加上美颜+滤镜（设计模式）的加强效果。</p><h3 id="6、备忘录模式"><a href="#6、备忘录模式" class="headerlink" title="6、备忘录模式"></a>6、备忘录模式</h3><blockquote><p>生成对象状态的一个快照，以便对象可以恢复原始状态而不用暴露自身的内容。比如Date对象通过自身内部的一个long值来实现备忘录模式。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_6794e25f.png" alt="image_6794e25f.png"></p><p>这个在业务中使用得不多，据肥朝了解其中一种场景是，你要把数据丢到MQ，但是MQ暂时不可用，那么你把数据暂存到DB，后面再轮询丢到MQ。如果你有更好的场景，留言告诉肥朝。</p><h3 id="7、空对象模式"><a href="#7、空对象模式" class="headerlink" title="7、空对象模式"></a>7、空对象模式</h3><blockquote><p>它允许您抽象空对象的处理。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_7f6ad923.png" alt="image_7f6ad923.png"></p><p>这个业务代码用得不多，但是JDK中的这几个方法我们倒是挺常用的。</p><h3 id="8、观察者模式"><a href="#8、观察者模式" class="headerlink" title="8、观察者模式"></a>8、观察者模式</h3><blockquote><p>用于为组件提供一种灵活地向感兴趣的接收者广播消息的方式。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_7cbd31c6.png" alt="image_7cbd31c6.png"></p><p>我们业务代码一般是基于Zookeeper来做观察者的。基本上用到ZK的地方，都是在用观察者模式，比如分布式锁，比如服务发现等。</p><h3 id="9、状态模式"><a href="#9、状态模式" class="headerlink" title="9、状态模式"></a>9、状态模式</h3><blockquote><p>允许您在运行时根据内部状态轻松更改对象的行为。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_8826e899.png" alt="image_8826e899.png"></p><p>这个在业务代码用得就太广泛了，我就不信你们系统还没有“状态”了。比如我们常见的订单状态或者各种XX状态，都可以用得上。</p><h3 id="10、策略模式"><a href="#10、策略模式" class="headerlink" title="10、策略模式"></a>10、策略模式</h3><blockquote><p>使用这个模式来将一组算法封装成一系列对象。通过调用这些对象可以灵活的改变程序的功能。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_056a7a91.png" alt="image_056a7a91.png"></p><p>这个太高频了，常用于优化大量的<code>if-else</code>,如果这个设计模式都不会，出去不要说关注过肥朝的公众号！</p><h3 id="11、模板方法模式"><a href="#11、模板方法模式" class="headerlink" title="11、模板方法模式"></a>11、模板方法模式</h3><blockquote><p>让子类可以重写方法的一部分，而不是整个重写，你可以控制子类需要重写那些操作。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_0f3aa81b.png" alt="image_0f3aa81b.png"></p><p>这个模式也是非常高频的模式。业务代码中经常遇到有很多相同的部分，我们可以做一个抽象类，子类来实现差异化，如果还不知道的，赶紧搜索一下，再次强调，非常高频。</p><h3 id="12、访问者模式"><a href="#12、访问者模式" class="headerlink" title="12、访问者模式"></a>12、访问者模式</h3><blockquote><p>提供一个方便的可维护的方式来操作一组对象。它使得你在不改变操作的对象前提下，可以修改或者扩展对象的行为。</p></blockquote><p><img src="/2022/11/07/jdk-yuan-ma-zhong-nb-de-she-ji-mo-shi/image_09845ad7.png" alt="image_09845ad7.png"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> jdk源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot内置工具类</title>
      <link href="/2022/11/07/springboot-nei-zhi-gong-ju-lei/"/>
      <url>/2022/11/07/springboot-nei-zhi-gong-ju-lei/</url>
      
        <content type="html"><![CDATA[<p>最近发现同事写了不少重复的工具类，发现其中很多功能，Spring 自带的都有。于是整理了本文，希望能够帮助到大家！</p><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><ol><li> 断言是一个逻辑判断，用于检查不应该发生的情况</li><li> Assert 关键字在 JDK1.4 中引入，可通过 JVM 参数 <code>-enableassertions</code>开启</li><li> SpringBoot 中提供了 Assert 断言工具类，通常用于数据合法性检查</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 要求参数 object 必须为非空（Not Null），否则抛出异常，不予放行</span><span class="token comment">// 参数 message 参数用于定制异常信息。</span><span class="token keyword">void</span> <span class="token function">notNull</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token comment">// 要求参数必须空（Null），否则抛出异常，不予『放行』。</span><span class="token comment">// 和 notNull() 方法断言规则相反</span><span class="token keyword">void</span> <span class="token function">isNull</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token comment">// 要求参数必须为真（True），否则抛出异常，不予『放行』。</span><span class="token keyword">void</span> <span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> expression<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token comment">// 要求参数（List/Set）必须非空（Not Empty），否则抛出异常，不予放行</span><span class="token keyword">void</span> <span class="token function">notEmpty</span><span class="token punctuation">(</span><span class="token class-name">Collection</span> collection<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token comment">// 要求参数（String）必须有长度（即，Not Empty），否则抛出异常，不予放行</span><span class="token keyword">void</span> <span class="token function">hasLength</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token comment">// 要求参数（String）必须有内容（即，Not Blank），否则抛出异常，不予放行</span><span class="token keyword">void</span> <span class="token function">hasText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token comment">// 要求参数是指定类型的实例，否则抛出异常，不予放行</span><span class="token keyword">void</span> <span class="token function">isInstanceOf</span><span class="token punctuation">(</span><span class="token class-name">Class</span> type<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token comment">// 要求参数 `subType` 必须是参数 superType 的子类或实现类，否则抛出异常，不予放行</span><span class="token keyword">void</span> <span class="token function">isAssignable</span><span class="token punctuation">(</span><span class="token class-name">Class</span> superType<span class="token punctuation">,</span> <span class="token class-name">Class</span> subType<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象、数组、集合"><a href="#对象、数组、集合" class="headerlink" title="对象、数组、集合"></a>对象、数组、集合</h2><h3 id="ObjectUtils"><a href="#ObjectUtils" class="headerlink" title="ObjectUtils"></a>ObjectUtils</h3><ol><li> 获取对象的基本信息</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取对象的类名。参数为 null 时，返回字符串："null" </span><span class="token class-name">String</span> <span class="token function">nullSafeClassName</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token comment">// 参数为 null 时，返回 0</span><span class="token keyword">int</span> <span class="token function">nullSafeHashCode</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span><span class="token comment">// 参数为 null 时，返回字符串："null"</span><span class="token class-name">String</span> <span class="token function">nullSafeToString</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token comment">// 获取对象 HashCode（十六进制形式字符串）。参数为 null 时，返回 0 </span><span class="token class-name">String</span> <span class="token function">getIdentityHexString</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token comment">// 获取对象的类名和 HashCode。 参数为 null 时，返回字符串："" </span><span class="token class-name">String</span> <span class="token function">identityToString</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token comment">// 相当于 toString()方法，但参数为 null 时，返回字符串：""</span><span class="token class-name">String</span> <span class="token function">getDisplayString</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>判断工具</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断数组是否为空</span><span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token comment">// 判断参数对象是否是数组</span><span class="token keyword">boolean</span> <span class="token function">isArray</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token comment">// 判断数组中是否包含指定元素</span><span class="token keyword">boolean</span> <span class="token function">containsElement</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token class-name">Object</span> element<span class="token punctuation">)</span><span class="token comment">// 相等，或同为 null时，返回 true</span><span class="token keyword">boolean</span> <span class="token function">nullSafeEquals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span><span class="token comment">/*判断参数对象是否为空，判断标准为：    Optional: Optional.empty()       Array: length == 0CharSequence: length == 0  Collection: Collection.isEmpty()         Map: Map.isEmpty() */</span><span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.其他工具方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 向参数数组的末尾追加新元素，并返回一个新数组</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">O</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">></span></span> <span class="token class-name">A</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">addObjectToArray</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token class-name">O</span> obj<span class="token punctuation">)</span><span class="token comment">// 原生基础类型数组 --> 包装类数组</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toObjectArray</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="StringUtils"><a href="#StringUtils" class="headerlink" title="StringUtils"></a>StringUtils</h3><ol><li> 字符串判断工具</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断字符串是否为 null，或 ""。注意，包含空白符的字符串为非空</span><span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">Object</span> str<span class="token punctuation">)</span><span class="token comment">// 判断字符串是否是以指定内容结束。忽略大小写</span><span class="token keyword">boolean</span> <span class="token function">endsWithIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> suffix<span class="token punctuation">)</span><span class="token comment">// 判断字符串是否已指定内容开头。忽略大小写</span><span class="token keyword">boolean</span> <span class="token function">startsWithIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token comment">// 是否包含空白符</span><span class="token keyword">boolean</span> <span class="token function">containsWhitespace</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token comment">// 判断字符串非空且长度不为 0，即，Not Empty</span><span class="token keyword">boolean</span> <span class="token function">hasLength</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> str<span class="token punctuation">)</span><span class="token comment">// 判断字符串是否包含实际内容，即非仅包含空白符，也就是 Not Blank</span><span class="token keyword">boolean</span> <span class="token function">hasText</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> str<span class="token punctuation">)</span><span class="token comment">// 判断字符串指定索引处是否包含一个子串。</span><span class="token keyword">boolean</span> <span class="token function">substringMatch</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> substring<span class="token punctuation">)</span><span class="token comment">// 计算一个字符串中指定子串的出现次数</span><span class="token keyword">int</span> <span class="token function">countOccurrencesOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> sub<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.字符串操作工具</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 查找并替换指定子串</span><span class="token class-name">String</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">String</span> inString<span class="token punctuation">,</span> <span class="token class-name">String</span> oldPattern<span class="token punctuation">,</span> <span class="token class-name">String</span> newPattern<span class="token punctuation">)</span><span class="token comment">// 去除尾部的特定字符</span><span class="token class-name">String</span> <span class="token function">trimTrailingCharacter</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> trailingCharacter<span class="token punctuation">)</span> <span class="token comment">// 去除头部的特定字符</span><span class="token class-name">String</span> <span class="token function">trimLeadingCharacter</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> leadingCharacter<span class="token punctuation">)</span><span class="token comment">// 去除头部的空白符</span><span class="token class-name">String</span> <span class="token function">trimLeadingWhitespace</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token comment">// 去除头部的空白符</span><span class="token class-name">String</span> <span class="token function">trimTrailingWhitespace</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token comment">// 去除头部和尾部的空白符</span><span class="token class-name">String</span> <span class="token function">trimWhitespace</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token comment">// 删除开头、结尾和中间的空白符</span><span class="token class-name">String</span> <span class="token function">trimAllWhitespace</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token comment">// 删除指定子串</span><span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> inString<span class="token punctuation">,</span> <span class="token class-name">String</span> pattern<span class="token punctuation">)</span><span class="token comment">// 删除指定字符（可以是多个）</span><span class="token class-name">String</span> <span class="token function">deleteAny</span><span class="token punctuation">(</span><span class="token class-name">String</span> inString<span class="token punctuation">,</span> <span class="token class-name">String</span> charsToDelete<span class="token punctuation">)</span><span class="token comment">// 对数组的每一项执行 trim() 方法</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">trimArrayElements</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token comment">// 将 URL 字符串进行解码</span><span class="token class-name">String</span> <span class="token function">uriDecode</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">,</span> <span class="token class-name">Charset</span> charset<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.路径相关工具方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 解析路径字符串，优化其中的 “..” </span><span class="token class-name">String</span> <span class="token function">cleanPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token comment">// 解析路径字符串，解析出文件名部分</span><span class="token class-name">String</span> <span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token comment">// 解析路径字符串，解析出文件后缀名</span><span class="token class-name">String</span> <span class="token function">getFilenameExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token comment">// 比较两个两个字符串，判断是否是同一个路径。会自动处理路径中的 “..” </span><span class="token keyword">boolean</span> <span class="token function">pathEquals</span><span class="token punctuation">(</span><span class="token class-name">String</span> path1<span class="token punctuation">,</span> <span class="token class-name">String</span> path2<span class="token punctuation">)</span><span class="token comment">// 删除文件路径名中的后缀部分</span><span class="token class-name">String</span> <span class="token function">stripFilenameExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token comment">// 以 “. 作为分隔符，获取其最后一部分</span><span class="token class-name">String</span> <span class="token function">unqualify</span><span class="token punctuation">(</span><span class="token class-name">String</span> qualifiedName<span class="token punctuation">)</span><span class="token comment">// 以指定字符作为分隔符，获取其最后一部分</span><span class="token class-name">String</span> <span class="token function">unqualify</span><span class="token punctuation">(</span><span class="token class-name">String</span> qualifiedName<span class="token punctuation">,</span> <span class="token keyword">char</span> separator<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CollectionUtils"><a href="#CollectionUtils" class="headerlink" title="CollectionUtils"></a>CollectionUtils</h3><ol><li> 集合判断工具</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断 List/Set 是否为空</span><span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> collection<span class="token punctuation">)</span><span class="token comment">// 判断 Map 是否为空</span><span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span><span class="token comment">// 判断 List/Set 中是否包含某个对象</span><span class="token keyword">boolean</span> <span class="token function">containsInstance</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> collection<span class="token punctuation">,</span> <span class="token class-name">Object</span> element<span class="token punctuation">)</span><span class="token comment">// 以迭代器的方式，判断 List/Set 中是否包含某个对象</span><span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> iterator<span class="token punctuation">,</span> <span class="token class-name">Object</span> element<span class="token punctuation">)</span><span class="token comment">// 判断 List/Set 是否包含某些对象中的任意一个</span><span class="token keyword">boolean</span> <span class="token function">containsAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> source<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> candidates<span class="token punctuation">)</span><span class="token comment">// 判断 List/Set 中的每个元素是否唯一。即 List/Set 中不存在重复元素</span><span class="token keyword">boolean</span> <span class="token function">hasUniqueObject</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> collection<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.集合操作工具</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 将 Array 中的元素都添加到 List/Set 中</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">mergeArrayIntoCollection</span><span class="token punctuation">(</span><span class="token class-name">Object</span> array<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> collection<span class="token punctuation">)</span>  <span class="token comment">// 将 Properties 中的键值对都添加到 Map 中</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">mergePropertiesIntoMap</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> props<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span><span class="token comment">// 返回 List 中最后一个元素</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">lastElement</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span>  <span class="token comment">// 返回 Set 中最后一个元素</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">lastElement</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> set<span class="token punctuation">)</span> <span class="token comment">// 返回参数 candidates 中第一个存在于参数 source 中的元素</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">E</span> <span class="token function">findFirstMatch</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> source<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> candidates<span class="token punctuation">)</span><span class="token comment">// 返回 List/Set 中指定类型的元素。</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">findValueOfType</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> collection<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> type<span class="token punctuation">)</span><span class="token comment">// 返回 List/Set 中指定类型的元素。如果第一种类型未找到，则查找第二种类型，以此类推</span><span class="token class-name">Object</span> <span class="token function">findValueOfType</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> collection<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> types<span class="token punctuation">)</span><span class="token comment">// 返回 List/Set 中元素的类型</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">findCommonElementType</span><span class="token punctuation">(</span><span class="token class-name">Collectio</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> collection<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件、资源、IO-流"><a href="#文件、资源、IO-流" class="headerlink" title="文件、资源、IO 流"></a>文件、资源、IO 流</h2><h3 id="FileCopyUtils"><a href="#FileCopyUtils" class="headerlink" title="FileCopyUtils"></a>FileCopyUtils</h3><ol><li> 输入</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 从文件中读入到字节数组中</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyToByteArray</span><span class="token punctuation">(</span><span class="token class-name">File</span> in<span class="token punctuation">)</span><span class="token comment">// 从输入流中读入到字节数组中</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyToByteArray</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span><span class="token comment">// 从输入流中读入到字符串中</span><span class="token class-name">String</span> <span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> in<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.输出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 从字节数组到文件</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> in<span class="token punctuation">,</span> <span class="token class-name">File</span> out<span class="token punctuation">)</span><span class="token comment">// 从文件到文件</span><span class="token keyword">int</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">File</span> in<span class="token punctuation">,</span> <span class="token class-name">File</span> out<span class="token punctuation">)</span><span class="token comment">// 从字节数组到输出流</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> in<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span> <span class="token comment">// 从输入流到输出流</span><span class="token keyword">int</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span> <span class="token comment">// 从输入流到输出流</span><span class="token keyword">int</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> in<span class="token punctuation">,</span> <span class="token class-name">Writer</span> out<span class="token punctuation">)</span><span class="token comment">// 从字符串到输出流</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">String</span> in<span class="token punctuation">,</span> <span class="token class-name">Writer</span> out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ResourceUtils"><a href="#ResourceUtils" class="headerlink" title="ResourceUtils"></a>ResourceUtils</h3><ol><li> 从资源路径获取文件</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断字符串是否是一个合法的 URL 字符串。</span><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isUrl</span><span class="token punctuation">(</span><span class="token class-name">String</span> resourceLocation<span class="token punctuation">)</span><span class="token comment">// 获取 URL</span><span class="token keyword">static</span> <span class="token class-name">URL</span> <span class="token function">getURL</span><span class="token punctuation">(</span><span class="token class-name">String</span> resourceLocation<span class="token punctuation">)</span> <span class="token comment">// 获取文件（在 JAR 包内无法正常使用，需要是一个独立的文件）</span><span class="token keyword">static</span> <span class="token class-name">File</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> resourceLocation<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.Resource</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 文件系统资源 D:\...</span><span class="token class-name">FileSystemResource</span><span class="token comment">// URL 资源，如 file://... http://...</span><span class="token class-name">UrlResource</span><span class="token comment">// 类路径下的资源，classpth:...</span><span class="token class-name">ClassPathResource</span><span class="token comment">// Web 容器上下文中的资源（jar 包、war 包）</span><span class="token class-name">ServletContextResource</span><span class="token comment">// 判断资源是否存在</span><span class="token keyword">boolean</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 从资源中获得 File 对象</span><span class="token class-name">File</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 从资源中获得 URI 对象</span><span class="token class-name">URI</span> <span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 从资源中获得 URI 对象</span><span class="token class-name">URL</span> <span class="token function">getURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 获得资源的 InputStream</span><span class="token class-name">InputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 获得资源的描述信息</span><span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="StreamUtils"><a href="#StreamUtils" class="headerlink" title="StreamUtils"></a>StreamUtils</h3><ol><li> 输入</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> in<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">String</span> in<span class="token punctuation">,</span> <span class="token class-name">Charset</span> charset<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span><span class="token keyword">long</span> <span class="token function">copyRange</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> out<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.输出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyToByteArray</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span><span class="token class-name">String</span> <span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">,</span> <span class="token class-name">Charset</span> charset<span class="token punctuation">)</span><span class="token comment">// 舍弃输入流中的内容</span><span class="token keyword">int</span> <span class="token function">drain</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射、AOP"><a href="#反射、AOP" class="headerlink" title="反射、AOP"></a>反射、AOP</h2><h3 id="ReflectionUtils"><a href="#ReflectionUtils" class="headerlink" title="ReflectionUtils"></a>ReflectionUtils</h3><ol><li> 获取方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 在类中查找指定方法</span><span class="token class-name">Method</span> <span class="token function">findMethod</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token comment">// 同上，额外提供方法参数类型作查找条件</span><span class="token class-name">Method</span> <span class="token function">findMethod</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> paramTypes<span class="token punctuation">)</span> <span class="token comment">// 获得类中所有方法，包括继承而来的</span><span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAllDeclaredMethods</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> leafClass<span class="token punctuation">)</span> <span class="token comment">// 在类中查找指定构造方法</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">accessibleConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span> <span class="token comment">// 是否是 equals() 方法</span><span class="token keyword">boolean</span> <span class="token function">isEqualsMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token comment">// 是否是 hashCode() 方法 </span><span class="token keyword">boolean</span> <span class="token function">isHashCodeMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token comment">// 是否是 toString() 方法</span><span class="token keyword">boolean</span> <span class="token function">isToStringMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token comment">// 是否是从 Object 类继承而来的方法</span><span class="token keyword">boolean</span> <span class="token function">isObjectMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token comment">// 检查一个方法是否声明抛出指定异常</span><span class="token keyword">boolean</span> <span class="token function">declaresException</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> exceptionType<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.执行方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 执行方法</span><span class="token class-name">Object</span> <span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span>  <span class="token comment">// 同上，提供方法参数</span><span class="token class-name">Object</span> <span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token comment">// 取消 Java 权限检查。以便后续执行该私有方法</span><span class="token keyword">void</span> <span class="token function">makeAccessible</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token comment">// 取消 Java 权限检查。以便后续执行私有构造方法</span><span class="token keyword">void</span> <span class="token function">makeAccessible</span><span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> ctor<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.获取字段</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 在类中查找指定属性</span><span class="token class-name">Field</span> <span class="token function">findField</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token comment">// 同上，多提供了属性的类型</span><span class="token class-name">Field</span> <span class="token function">findField</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> type<span class="token punctuation">)</span> <span class="token comment">// 是否为一个 "public static final" 属性</span><span class="token keyword">boolean</span> <span class="token function">isPublicStaticFinal</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.设置字段</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取 target 对象的 field 属性值</span><span class="token class-name">Object</span> <span class="token function">getField</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token comment">// 设置 target 对象的 field 属性值，值为 value</span><span class="token keyword">void</span> <span class="token function">setField</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token comment">// 同类对象属性对等赋值</span><span class="token keyword">void</span> <span class="token function">shallowCopyFieldState</span><span class="token punctuation">(</span><span class="token class-name">Object</span> src<span class="token punctuation">,</span> <span class="token class-name">Object</span> dest<span class="token punctuation">)</span><span class="token comment">// 取消 Java 的权限控制检查。以便后续读写该私有属性</span><span class="token keyword">void</span> <span class="token function">makeAccessible</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">)</span> <span class="token comment">// 对类的每个属性执行 callback</span><span class="token keyword">void</span> <span class="token function">doWithFields</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">ReflectionUtils<span class="token punctuation">.</span>FieldCallback</span> fc<span class="token punctuation">)</span> <span class="token comment">// 同上，多了个属性过滤功能。</span><span class="token keyword">void</span> <span class="token function">doWithFields</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">ReflectionUtils<span class="token punctuation">.</span>FieldCallback</span> fc<span class="token punctuation">,</span>                   <span class="token class-name">ReflectionUtils<span class="token punctuation">.</span>FieldFilter</span> ff<span class="token punctuation">)</span> <span class="token comment">// 同上，但不包括继承而来的属性</span><span class="token keyword">void</span> <span class="token function">doWithLocalFields</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">ReflectionUtils<span class="token punctuation">.</span>FieldCallback</span> fc<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AopUtils"><a href="#AopUtils" class="headerlink" title="AopUtils"></a>AopUtils</h3><ol><li> 判断代理类型</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断是不是 Spring 代理对象</span><span class="token keyword">boolean</span> <span class="token function">isAopProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 判断是不是 jdk 动态代理对象</span><span class="token function">isJdkDynamicProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 判断是不是 CGLIB 代理对象</span><span class="token keyword">boolean</span> <span class="token function">isCglibProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.获取被代理对象的 class</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取被代理的目标 class</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="AopContext"><a href="#AopContext" class="headerlink" title="AopContext"></a>AopContext</h3><ol><li> 获取当前对象的代理对象</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> <span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具轮子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中高级面试题总结</title>
      <link href="/2022/11/07/java-zhong-gao-ji-mian-shi-ti-zong-jie/"/>
      <url>/2022/11/07/java-zhong-gao-ji-mian-shi-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>目录</p><p>[前言][Link 1]</p><p>[Part 1 java基础][Part 1 java]</p><p>[1.1. JDK的基本的类库][1.1. JDK]</p><p>[1.2. java虚拟机相关知识点][1.2. java]</p><p>[1.4. Unsafe类][1.4. Unsafe]</p><p>[1.5. Session、cookie区别][1.5. Session_cookie]</p><p>[1.6. 权限问题][1.6.]</p><p>[1.7. 安全问题][1.7.]</p><p>[1.8 HashMap实现原理][1.8 HashMap]</p><p>[1.9. HashMap和HashTable的区别][1.9. HashMap_HashTable]</p><p>[1.9. ArrayList和LinkedList的区别][1.9. ArrayList_LinkedList]</p><p>[1.10 设计模式 ][1.10 _]</p><p>[1.12 NIO][]</p><p>[Part 2 多线程问题][Part 2]</p><p>[多线程问题（必问）][Link 2]</p><p>[Concurrenthashmap原理分析有用][Concurrenthashmap]</p><p>[Volitile关键字的作用][Volitile]</p><p>[Part 3 Spring与ORM映射框架][Part 3 Spring_ORM]</p><p>[面试题集锦：][Link 3]</p><p>[3.1. Spring作用域][3.1. Spring]</p><p>[3.2. SpringMVC面试题][3.2. SpringMVC]</p><p>[SpringMVC的流程][SpringMVC]</p><p>[SpringMVC与Struts2的区别][SpringMVC_Struts2]</p><p>[过滤器与拦截器区别][Link 4]</p><p>[4.4. Mybatis面试题][4.4. Mybatis]</p><p>[#{}和${}的区别是什么？][Link 5]</p><p>[Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？][Xml_select_insert_updae_delete]</p><p>[Mybatis批量插入数据][Mybatis]</p><p>[Part 4 SpringBoot相关][Part 4 SpringBoot]</p><p>[Springboot面试题集锦：][Springboot]</p><p>[Springboot优点][Springboot 1]</p><p>[springboot核心注解][springboot]</p><p>[Spring Boot 支持哪些日志框架][Spring Boot]</p><p>[Part 5 数据库相关][Part 5]</p><p>[面试题集锦：][Link 3]</p><p>[什么是数据库约束,常见的约束有哪几种?][Link 6]</p><p>[乐观锁和悲观锁][Link 7]</p><p>[什么是事务][Link 8]</p><p>[事务四大特性][Link 9]</p><p>[事务的并发问题][Link 10]</p><p>[事务的隔离级别][Link 11]</p><p>[事务的传播行为][Link 12]</p><p>[sql编写以及优化（必问）][sql]</p><p>[Part 5 其它问题][Part 5 1]</p><p>[怎么设计一个高并发系统（比如100万人同时抢票）][100]</p><p>[Spring cloud（有些公司的项目用不到这个）][Spring cloud]</p><p>[java性能优化][java]</p><p>[java8的新特性][java8]</p><p>[redis相关问题][redis]</p><p>[linux常用命令][linux]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章是我近期面试遇到的一些问题（技术类），做的一个总结。</p><p>注意：</p><p>1.有些问题没有标准答案，需要读者朋友在网上查找。</p><p>2.有些问题答案太长，三言两语道不尽，直接给了链接，可以复制链接去搜索。</p><p>3.有些技术涉及到很多问题，我给了总结的链接之后，又给大家列出了我面试遇到的题目</p><h1 id="Part-1-java基础"><a href="#Part-1-java基础" class="headerlink" title="Part 1 java基础"></a>Part 1 java基础</h1><h2 id="1-1-JDK的基本的类库"><a href="#1-1-JDK的基本的类库" class="headerlink" title="1.1. JDK的基本的类库"></a>1.1. JDK的基本的类库</h2><p>存放位置：jre/lib/rt.jar（这个问题很简单，但是很多人答不上来！）</p><p>常用的 Java 核心包 (Java Core Package)</p><p>java.lang Java 编程语言的基本类库（Object、String、StringBuffer、StringBuilder、System、Runtime、Throwable、Exception、Error、Thread、Math等）</p><p>java.io 通过数据流、对象序列以及文件系统实现的系统输入、输出</p><p>java.util 集合类、时间处理模式、日期时间工具等各类常用工具包</p><p>其它还有</p><p>java.sql 访问和处理来自于 Java 标准数据源数据的类</p><p>java.test 以一种独立于自然语言的方式处理文本、日期、数字和消息的类和接口</p><p>java.math简明的整数算术以及十进制算术的基本函数</p><h2 id="1-2-java虚拟机相关知识点"><a href="#1-2-java虚拟机相关知识点" class="headerlink" title="1.2. java虚拟机相关知识点"></a>1.2. java虚拟机相关知识点</h2><p>[<a href="https://shuhao.blog.csdn.net/article/details/113524369][https_shuhao.blog.csdn.net_article_details_113524369]">https://shuhao.blog.csdn.net/article/details/113524369][https_shuhao.blog.csdn.net_article_details_113524369]</a></p><h2 id="1-4-Unsafe类"><a href="#1-4-Unsafe类" class="headerlink" title="1.4. Unsafe类"></a>1.4. Unsafe类</h2><p>参考：[<a href="https://www.cnblogs.com/thomas12112406/p/6510787.html][https_www.cnblogs.com_thomas12112406_p_6510787.html]">https://www.cnblogs.com/thomas12112406/p/6510787.html][https_www.cnblogs.com_thomas12112406_p_6510787.html]</a></p><p>Unsafe类使Java拥有了像C语言的指针一样操作内存空间的能力，同时也带来了指针的问题</p><h2 id="1-5-Session、cookie区别"><a href="#1-5-Session、cookie区别" class="headerlink" title="1.5. Session、cookie区别"></a>1.5. Session、cookie区别</h2><p>1、cookie数据存放在客户端，session数据放在服务器上。</p><p>2、cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session。</p><p>3、session会在一定时间内保存在服务器上，当访问增多，会比较占用你服务器的性能，考虑性能应当使用cookie。</p><p>4、不同浏览器对cookie的数据大小限制不同，个数限制也不相同。</p><p>5、可以考虑将登陆信息等重要信息存放为session，不重要的信息可以放在cookie中。</p><h2 id="1-6-权限问题"><a href="#1-6-权限问题" class="headerlink" title="1.6. 权限问题"></a>1.6. 权限问题</h2><p>参考：[<a href="https://blog.csdn.net/Y0Q2T57s/article/details/82921270][https_blog.csdn.net_Y0Q2T57s_article_details_82921270]">https://blog.csdn.net/Y0Q2T57s/article/details/82921270][https_blog.csdn.net_Y0Q2T57s_article_details_82921270]</a></p><h2 id="1-7-安全问题"><a href="#1-7-安全问题" class="headerlink" title="1.7. 安全问题"></a>1.7. 安全问题</h2><p>参考：[<a href="https://blog.csdn.net/wojiushiwo945you/article/details/77920165][https_blog.csdn.net_wojiushiwo945you_article_details_77920165]">https://blog.csdn.net/wojiushiwo945you/article/details/77920165][https_blog.csdn.net_wojiushiwo945you_article_details_77920165]</a></p><p>shiro：[<a href="https://www.cnblogs.com/WUXIAOCHANG/p/10886534.html][https_www.cnblogs.com_WUXIAOCHANG_p_10886534.html]">https://www.cnblogs.com/WUXIAOCHANG/p/10886534.html][https_www.cnblogs.com_WUXIAOCHANG_p_10886534.html]</a></p><p>[<a href="https://blog.csdn.net/qq/_37254736/article/details/99350029][https_blog.csdn.net_qq_37254736_article_details_99350029]">https://blog.csdn.net/qq\_37254736/article/details/99350029][https_blog.csdn.net_qq_37254736_article_details_99350029]</a></p><h2 id="1-8-HashMap实现原理"><a href="#1-8-HashMap实现原理" class="headerlink" title="1.8 HashMap实现原理"></a>1.8 HashMap实现原理</h2><p>参考：[<a href="https://shuhao.blog.csdn.net/article/details/108733952][https_shuhao.blog.csdn.net_article_details_108733952]">https://shuhao.blog.csdn.net/article/details/108733952][https_shuhao.blog.csdn.net_article_details_108733952]</a></p><h2 id="1-9-HashMap和HashTable的区别"><a href="#1-9-HashMap和HashTable的区别" class="headerlink" title="1.9. HashMap和HashTable的区别"></a>1.9. HashMap和HashTable的区别</h2><p>1.HashMap继承了AbstractMap，HashTable继承Dictionary抽象类，两者均实现Map接口</p><p>2.HashMap和Hashtable的底层实现都是数组+链表结构实现、</p><p>3.Hashtable是线程安全，HashMap是非线程安全</p><p>HashMap的性能会高于Hashtable，我们平时使用时若无特殊需求建议使用HashMap，在多线程环境下若使用HashMap需要使用Collections.synchronizedMap()方法来获取一个线程安全的集合（Collections.synchronizedMap()实现原理是Collections定义了一个SynchronizedMap的内部类，这个类实现了Map接口，在调用方法时使用synchronized来保证线程同步</p><p>4.两者计算hash的方法不同：</p><p>Hashtable计算hash是直接使用key的hashcode对table数组的长度直接进行取模</p><p>HashMap计算hash对key的hashcode进行了二次hash，以获得更好的散列值，然后对table数组长度取摸</p><p>5.HashMap可以使用null作为key，不过建议还是尽量避免这样使用。HashMap以null作为key时，总是存储在table数组的第一个节点上。而Hashtable则不允许null作为key</p><p>6.HashMap的初始容量为16，Hashtable初始容量为11，两者的填充因子默认都是0.75</p><p>7.HashMap扩容时是当前容量翻倍即:capacity2，Hashtable扩容时是容量翻倍+1即:capacity2+1</p><h2 id="1-9-ArrayList和LinkedList的区别"><a href="#1-9-ArrayList和LinkedList的区别" class="headerlink" title="1.9. ArrayList和LinkedList的区别"></a>1.9. ArrayList和LinkedList的区别</h2><p>1、ArrayList和LinkedList可想从名字分析，它们一个是Array(动态数组)的数据结构，一个是Link(链表)的数据结构，此外，它们两个都是对List接口的实现。</p><p>前者是数组队列，相当于动态数组；后者为双向链表结构，也可当作堆栈、队列、双端队列</p><p>2、当随机访问List时（get和set操作），ArrayList比LinkedList的效率更高，因为LinkedList是线性的数据存储方式，所以需要移动指针从前往后依次查找。</p><p>3、当对数据进行增加和删除的操作时(add和remove操作)，LinkedList比ArrayList的效率更高，因为ArrayList是数组，所以在其中进行增删操作时，会对操作点之后所有数据的下标索引造成影响，需要进行数据的移动。</p><p>4、从利用效率来看，ArrayList自由性较低，因为它需要手动的设置固定大小的容量，但是它的使用比较方便，只需要创建，然后添加数据，通过调用下标进行使用；而LinkedList自由性较高，能够动态的随数据量的变化而变化，但是它不便于使用。</p><p>5、ArrayList主要控件开销在于需要在lList列表预留一定空间；而LinkList主要控件开销在于需要存储结点信息以及结点指针信息。</p><h2 id="1-10-设计模式"><a href="#1-10-设计模式" class="headerlink" title="1.10 设计模式"></a>1.10 设计模式</h2><p>参考：[<a href="http://c.biancheng.net/design/_pattern/][http_c.biancheng.net_design_pattern]">http://c.biancheng.net/design\_pattern/][http_c.biancheng.net_design_pattern]</a></p><h2 id="1-12-NIO"><a href="#1-12-NIO" class="headerlink" title="1.12 NIO"></a>1.12 NIO</h2><p>[Java中的IO与NIO面试题][Java_IO_NIO]</p><h1 id="Part-2-多线程问题"><a href="#Part-2-多线程问题" class="headerlink" title="Part 2 多线程问题"></a>Part 2 多线程问题</h1><h2 id="多线程问题（必问）"><a href="#多线程问题（必问）" class="headerlink" title="多线程问题（必问）"></a>多线程问题（必问）</h2><p>多线程的面试题太多了，下面的三个链接总结的很全面很详细：</p><p>[<a href="https://www.cnblogs.com/Jansens520/p/8624708.html][https_www.cnblogs.com_Jansens520_p_8624708.html]">https://www.cnblogs.com/Jansens520/p/8624708.html][https_www.cnblogs.com_Jansens520_p_8624708.html]</a></p><p>[<a href="https://www.cnblogs.com/wangjintao-0623/p/9727234.html][https_www.cnblogs.com_wangjintao-0623_p_9727234.html]">https://www.cnblogs.com/wangjintao-0623/p/9727234.html][https_www.cnblogs.com_wangjintao-0623_p_9727234.html]</a></p><p>[<a href="https://blog.csdn.net/zl1zl2zl3/article/details/81868173][https_blog.csdn.net_zl1zl2zl3_article_details_81868173]">https://blog.csdn.net/zl1zl2zl3/article/details/81868173][https_blog.csdn.net_zl1zl2zl3_article_details_81868173]</a></p><h2 id="Concurrenthashmap原理分析有用"><a href="#Concurrenthashmap原理分析有用" class="headerlink" title="Concurrenthashmap原理分析有用"></a>Concurrenthashmap原理分析有用</h2><p>HashTable容器在竞争激烈的并发环境下表现出效率低下的原因，是因为所有访问HashTable的线程都必须竞争同一把锁，那假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术，首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</p><h2 id="Volitile关键字的作用"><a href="#Volitile关键字的作用" class="headerlink" title="Volitile关键字的作用"></a>Volitile关键字的作用</h2><p>参考：[<a href="https://www.cnblogs.com/xd502djj/p/9873067.html][https_www.cnblogs.com_xd502djj_p_9873067.html]">https://www.cnblogs.com/xd502djj/p/9873067.html][https_www.cnblogs.com_xd502djj_p_9873067.html]</a></p><h1 id="Part-3-Spring与ORM映射框架"><a href="#Part-3-Spring与ORM映射框架" class="headerlink" title="Part 3 Spring与ORM映射框架"></a>Part 3 Spring与ORM映射框架</h1><h2 id="面试题集锦："><a href="#面试题集锦：" class="headerlink" title="面试题集锦："></a>面试题集锦：</h2><p>[<a href="https://blog.csdn.net/qq/_34337272/article/details/90955736][https_blog.csdn.net_qq_34337272_article_details_90955736]">https://blog.csdn.net/qq\_34337272/article/details/90955736][https_blog.csdn.net_qq_34337272_article_details_90955736]</a></p><h2 id="3-1-Spring作用域"><a href="#3-1-Spring作用域" class="headerlink" title="3.1. Spring作用域"></a>3.1. Spring作用域</h2><p>singleton：单例模式，当spring创建applicationContext容器的时候，spring会欲初始化所有的该作用域实例，加上lazy-init就可以避免预处理；</p><p>prototype：原型模式，每次通过getBean获取该bean就会新产生一个实例，创建后spring将不再对其管理；</p><p>====下面是在web项目下才用到的===</p><p>request：搞web的大家都应该明白request的域了吧，就是每次请求都新产生一个实例，和prototype不同就是创建后，接下来的管理，spring依然在监听；</p><p>session：每次会话，同上；</p><p>global session：全局的web域，类似于servlet中的application。</p><h2 id="3-2-SpringMVC面试题"><a href="#3-2-SpringMVC面试题" class="headerlink" title="3.2. SpringMVC面试题"></a>3.2. SpringMVC面试题</h2><p>面试题集锦：</p><p>[<a href="https://blog.csdn.net/a745233700/article/details/80963758][https_blog.csdn.net_a745233700_article_details_80963758]">https://blog.csdn.net/a745233700/article/details/80963758][https_blog.csdn.net_a745233700_article_details_80963758]</a></p><h2 id="SpringMVC的流程"><a href="#SpringMVC的流程" class="headerlink" title="SpringMVC的流程"></a>SpringMVC的流程</h2><p><img src="http://markdown.liangtengyu.com:9999/images//image_0aae936f.png" alt="image_0aae936f.png"><img src="http://markdown.liangtengyu.com:9999/images//image_b8bfb6ea.png" alt="image_b8bfb6ea.png"></p><h2 id="SpringMVC与Struts2的区别"><a href="#SpringMVC与Struts2的区别" class="headerlink" title="SpringMVC与Struts2的区别"></a>SpringMVC与Struts2的区别</h2><p>（1）springmvc的入口是一个servlet即前端控制器（DispatchServlet），而struts2入口是一个filter过虑器（StrutsPrepareAndExecuteFilter）。</p><p>（2）springmvc是基于方法开发(一个url对应一个方法)，请求参数传递到方法的形参，可以设计为单例或多例(建议单例)，struts2是基于类开发，传递参数是通过类的属性，只能设计为多例。</p><p>（3）Struts采用值栈存储请求和响应的数据，通过OGNL存取数据，springmvc通过参数解析器是将request请求内容解析，并给方法形参赋值，将数据和视图封装成ModelAndView对象，最后又将ModelAndView中的模型数据通过reques域传输到页面。Jsp视图解析器默认使用jstl</p><h2 id="过滤器与拦截器区别"><a href="#过滤器与拦截器区别" class="headerlink" title="过滤器与拦截器区别"></a>过滤器与拦截器区别</h2><p>①过滤器只能在容器初始化时被调用一次，在action的生命周期中，而拦截器可以多次被调用</p><p>②过滤器可以对几乎所有的请求起作用，拦截器只能对action请求起作用。</p><p>③过滤器不能访问action上下文、值栈里的对象，而拦截器可以访问。</p><p>④过滤器依赖于servlet容器，而拦截器不依赖于servlet容器。</p><p>⑤过滤器是基于函数回调，而拦截器是基于java的反射机制的。</p><p>⑥过滤器不能获取IOC容器中的各个bean，而拦截器可以，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。</p><h2 id="4-4-Mybatis面试题"><a href="#4-4-Mybatis面试题" class="headerlink" title="4.4. Mybatis面试题"></a>4.4. Mybatis面试题</h2><p>面试题集锦：</p><p>[<a href="https://blog.csdn.net/a745233700/article/details/80977133][https_blog.csdn.net_a745233700_article_details_80977133]">https://blog.csdn.net/a745233700/article/details/80977133][https_blog.csdn.net_a745233700_article_details_80977133]</a></p><h2 id="和-的区别是什么？"><a href="#和-的区别是什么？" class="headerlink" title="#{}和${}的区别是什么？"></a>#{}和${}的区别是什么？</h2><p>#{}是预编译处理，${}是字符串替换。</p><p>Mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；</p><p>Mybatis在处理${}时，就是把${}替换成变量的值。</p><p>使用#{}可以有效的防止SQL注入，提高系统安全性。</p><h2 id="Xml映射文件中，除了常见的select-insert-updae-delete标签之外，还有哪些标签？"><a href="#Xml映射文件中，除了常见的select-insert-updae-delete标签之外，还有哪些标签？" class="headerlink" title="Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？"></a>Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？</h2><p>trim | where | set | foreach | if | choose | when | otherwise | bind</p><h2 id="Mybatis批量插入数据"><a href="#Mybatis批量插入数据" class="headerlink" title="Mybatis批量插入数据"></a>Mybatis批量插入数据</h2><p>可以使用foreach标签</p><h1 id="Part-4-SpringBoot相关"><a href="#Part-4-SpringBoot相关" class="headerlink" title="Part 4 SpringBoot相关"></a>Part 4 SpringBoot相关</h1><h2 id="Springboot面试题集锦："><a href="#Springboot面试题集锦：" class="headerlink" title="Springboot面试题集锦："></a>Springboot面试题集锦：</h2><p>[<a href="https://blog.csdn.net/ThinkWon/article/details/104397299][https_blog.csdn.net_ThinkWon_article_details_104397299]">https://blog.csdn.net/ThinkWon/article/details/104397299][https_blog.csdn.net_ThinkWon_article_details_104397299]</a></p><p>[<a href="https://www.jianshu.com/p/14ef39ed8ad3][https_www.jianshu.com_p_14ef39ed8ad3]">https://www.jianshu.com/p/14ef39ed8ad3][https_www.jianshu.com_p_14ef39ed8ad3]</a></p><p>[<a href="https://segmentfault.com/a/1190000016686735][https_segmentfault.com_a_1190000016686735]">https://segmentfault.com/a/1190000016686735][https_segmentfault.com_a_1190000016686735]</a></p><h2 id="Springboot优点"><a href="#Springboot优点" class="headerlink" title="Springboot优点"></a>Springboot优点</h2><p>内置Tomcat、jetty，简化配置配置，restful风格</p><h2 id="springboot核心注解"><a href="#springboot核心注解" class="headerlink" title="springboot核心注解"></a>springboot核心注解</h2><p>SpringbootApplication，包含3个配置springbootConfiguration、enableAutoConfiguration、componentScan</p><h2 id="Spring-Boot-支持哪些日志框架"><a href="#Spring-Boot-支持哪些日志框架" class="headerlink" title="Spring Boot 支持哪些日志框架"></a>Spring Boot 支持哪些日志框架</h2><p>Spring Boot支持Java Util Logging,Log4j2,Lockback作为日志框架，如果你使用starters启动器，Spring Boot将使用Logback作为默认日志框架。无论使用哪种日志框架，Spring Boot都支持配置将日志输出到控制台或者文件中</p><h1 id="Part-5-数据库相关"><a href="#Part-5-数据库相关" class="headerlink" title="Part 5 数据库相关"></a>Part 5 数据库相关</h1><h2 id="面试题集锦：-1"><a href="#面试题集锦：-1" class="headerlink" title="面试题集锦："></a>面试题集锦：</h2><p>[<a href="https://www.cnblogs.com/wenxiaofei/p/9853682.html][https_www.cnblogs.com_wenxiaofei_p_9853682.html]">https://www.cnblogs.com/wenxiaofei/p/9853682.html][https_www.cnblogs.com_wenxiaofei_p_9853682.html]</a></p><h2 id="什么是数据库约束-常见的约束有哪几种"><a href="#什么是数据库约束-常见的约束有哪几种" class="headerlink" title="什么是数据库约束,常见的约束有哪几种?"></a>什么是数据库约束,常见的约束有哪几种?</h2><p>数据库约束用于保证数据库表数据的完整性（正确性和一致性）。可以通过定义约束\索引\触发器来保证数据的完整性。</p><p>总体来讲,约束可以分为:</p><p>主键约束：primary key；</p><p>外键约束：foreign key；</p><p>唯一约束：unique；</p><p>检查约束：check；</p><p>空值约束：not null；</p><p>默认值约束：default；</p><h2 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h2><p>参考：[<a href="https://blog.csdn.net/qq/_34337272/article/details/81072874][https_blog.csdn.net_qq_34337272_article_details_81072874]">https://blog.csdn.net/qq\_34337272/article/details/81072874][https_blog.csdn.net_qq_34337272_article_details_81072874]</a></p><h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><p>事务是对数据库中一系列操作进行统一的回滚或者提交的操作，主要用来保证数据的完整性和一致性。</p><h2 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h2><p>原子性（Atomicity）: 原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p><p>一致性（Consistency）: 事务开始前和结束后，数据库的完整性约束没有被破坏。比如A向B转账，不可能A扣了钱，B却没收到。</p><p>隔离性（Isolation）: 隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。</p><p>持久性（Durability）: 持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p><h2 id="事务的并发问题"><a href="#事务的并发问题" class="headerlink" title="事务的并发问题"></a>事务的并发问题</h2><p>1、脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</p><p>2、不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果因此本事务先后两次读到的数据结果会不一致。</p><p>3、幻读：幻读解决了不重复读，保证了同一个事务里，查询的结果都是事务开始时的状态（一致性）。</p><p>例如：事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作 这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有跟没有修改一样，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。</p><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><ol><li><p>读未提交：另一个事务修改了数据，但尚未提交，而本事务中的SELECT会读到这些未被提交的数据脏读</p></li><li><p>不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果因此本事务先后两次读到的数据结果会不一致。</p></li><li><p>可重复读：在同一个事务里，SELECT的结果是事务开始时时间点的状态，因此，同样的SELECT操作读到的结果会是一致的。但是，会有幻读现象</p></li><li><p>串行化：最高的隔离级别，在这个隔离级别下，不会产生任何异常。并发的事务，就像事务是在一个个按照顺序执行一样</p></li></ol><h2 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h2><p>1.PROPAGATION_REQUIRED：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，该设置是最常用的设置。</p><p>2.PROPAGATION_SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。</p><p>3.PROPAGATION_MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常。</p><p>4.PROPAGATION_REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务。</p><p>5.PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</p><p>6.PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。</p><p>7.PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</p><h2 id="sql编写以及优化（必问）"><a href="#sql编写以及优化（必问）" class="headerlink" title="sql编写以及优化（必问）"></a>sql编写以及优化（必问）</h2><p>参考：</p><p>[<a href="https://blog.csdn.net/qq/_38789941/article/details/83744271][https_blog.csdn.net_qq_38789941_article_details_83744271]">https://blog.csdn.net/qq\_38789941/article/details/83744271][https_blog.csdn.net_qq_38789941_article_details_83744271]</a></p><h1 id="Part-5-其它问题"><a href="#Part-5-其它问题" class="headerlink" title="Part 5 其它问题"></a>Part 5 其它问题</h1><h2 id="怎么设计一个高并发系统（比如100万人同时抢票）"><a href="#怎么设计一个高并发系统（比如100万人同时抢票）" class="headerlink" title="怎么设计一个高并发系统（比如100万人同时抢票）"></a>怎么设计一个高并发系统（比如100万人同时抢票）</h2><p>[<a href="https://blog.csdn.net/java/_leejin/article/details/98096274][https_blog.csdn.net_java_leejin_article_details_98096274]">https://blog.csdn.net/java\_leejin/article/details/98096274][https_blog.csdn.net_java_leejin_article_details_98096274]</a></p><h2 id="Spring-cloud（有些公司的项目用不到这个）"><a href="#Spring-cloud（有些公司的项目用不到这个）" class="headerlink" title="Spring cloud（有些公司的项目用不到这个）"></a>Spring cloud（有些公司的项目用不到这个）</h2><p>面试题集锦：</p><p>[<a href="https://blog.csdn.net/hjq/_ku/article/details/89504229][https_blog.csdn.net_hjq_ku_article_details_89504229]">https://blog.csdn.net/hjq\_ku/article/details/89504229][https_blog.csdn.net_hjq_ku_article_details_89504229]</a></p><p>[<a href="https://blog.csdn.net/oldshaui/article/details/90675149][https_blog.csdn.net_oldshaui_article_details_90675149]">https://blog.csdn.net/oldshaui/article/details/90675149][https_blog.csdn.net_oldshaui_article_details_90675149]</a></p><p><img src="http://markdown.liangtengyu.com:9999/images//image_63a70387.png" alt="image_63a70387.png"><img src="http://markdown.liangtengyu.com:9999/images//image_4b7e356a.png" alt="image_4b7e356a.png"></p><h2 id="java性能优化"><a href="#java性能优化" class="headerlink" title="java性能优化"></a>java性能优化</h2><p>[<a href="http://www.wityx.com/post/424/_1/_1.html][http_www.wityx.com_post_424_1_1.html]">http://www.wityx.com/post/424\_1\_1.html][http_www.wityx.com_post_424_1_1.html]</a></p><h2 id="java8的新特性"><a href="#java8的新特性" class="headerlink" title="java8的新特性"></a>java8的新特性</h2><p>[<a href="https://www.cnblogs.com/onetwo/p/8526374.html][https_www.cnblogs.com_onetwo_p_8526374.html]">https://www.cnblogs.com/onetwo/p/8526374.html][https_www.cnblogs.com_onetwo_p_8526374.html]</a></p><h2 id="redis相关问题"><a href="#redis相关问题" class="headerlink" title="redis相关问题"></a>redis相关问题</h2><p>[<a href="https://www.cnblogs.com/jasontec/p/9699242.html][https_www.cnblogs.com_jasontec_p_9699242.html]">https://www.cnblogs.com/jasontec/p/9699242.html][https_www.cnblogs.com_jasontec_p_9699242.html]</a></p><h2 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h2><p>[<a href="https://blog.csdn.net/qq/_26230421/article/details/98359696][https_blog.csdn.net_qq_26230421_article_details_98359696]">https://blog.csdn.net/qq\_26230421/article/details/98359696][https_blog.csdn.net_qq_26230421_article_details_98359696]</a></p><p>这些技术都会的话就可以上战场了</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ConcurrentHashMap是如何保证线程安全</title>
      <link href="/2022/11/04/concurrenthashmap-shi-ru-he-bao-zheng-xian-cheng-an-quan/"/>
      <url>/2022/11/04/concurrenthashmap-shi-ru-he-bao-zheng-xian-cheng-an-quan/</url>
      
        <content type="html"><![CDATA[<p>我们知道，ConcurrentHashmap(1.8)这个并发集合框架是线程安全的，当你看到源码的get操作时，会发现get操作全程是没有加任何锁的，这也是这篇博文讨论的问题——为什么它不需要加锁呢？</p><h3 id="ConcurrentHashMap的简介"><a href="#ConcurrentHashMap的简介" class="headerlink" title="ConcurrentHashMap的简介"></a>ConcurrentHashMap的简介</h3><blockquote><p>我想有基础的同学知道在jdk1.7中是采用Segment + HashEntry + ReentrantLock的方式进行实现的，而1.8中放弃了Segment臃肿的设计，取而代之的是采用Node + CAS + Synchronized来保证并发安全进行实现。</p></blockquote><ul><li> JDK1.8的实现降低锁的粒度，JDK1.7版本锁的粒度是基于Segment的，包含多个HashEntry，而JDK1.8锁的粒度就是HashEntry（首节点）</li><li> JDK1.8版本的数据结构变得更加简单，使得操作也更加清晰流畅，因为已经使用synchronized来进行同步，所以不需要分段锁的概念，也就不需要Segment这种数据结构了，由于粒度的降低，实现的复杂度也增加了</li><li> JDK1.8使用红黑树来优化链表，基于长度很长的链表的遍历是一个很漫长的过程，而红黑树的遍历效率是很快的，代替一定阈值的链表，这样形成一个最佳拍档</li></ul><h3 id><a href="#" class="headerlink" title></a><img src="/2022/11/04/concurrenthashmap-shi-ru-he-bao-zheng-xian-cheng-an-quan/image_256782fc-20221104171702786.png" alt="image_256782fc.png"></h3><h3 id="get操作源码"><a href="#get操作源码" class="headerlink" title="get操作源码"></a>get操作源码</h3><ul><li><p>首先计算hash值，定位到该table索引位置，如果是首节点符合就返回</p></li><li><p>如果遇到扩容的时候，会调用标志正在扩容节点ForwardingNode的find方法，查找该节点，匹配就返回</p></li><li><p>以上都不符合的话，就往下遍历节点，匹配就返回，否则最后就返回null</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//会发现源码中没有一处加了锁</span><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">,</span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> eh<span class="token punctuation">;</span> <span class="token class-name">K</span> ek<span class="token punctuation">;</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//计算hash</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>      <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//读取首节点的Node元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>eh <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//如果该节点就是首节点就返回</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//hash值为负值表示正在扩容，这个时候查的是ForwardingNode的find方法来定位到nextTable来</span>        <span class="token comment">//eh=-1，说明该节点是一个ForwardingNode，正在迁移，此时调用ForwardingNode的find方法去nextTable里找。</span>        <span class="token comment">//eh=-2，说明该节点是一个TreeBin，此时调用TreeBin的find方法遍历红黑树，由于红黑树有可能正在旋转变色，所以find里会有读写锁。</span>        <span class="token comment">//eh>=0，说明该节点下挂的是一个链表，直接遍历该链表即可。</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eh <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//既不是首节点也不是ForwardingNode，那就往下遍历</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span>             <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>get没有加锁的话，ConcurrentHashMap是如何保证读到的数据不是脏数据的呢？</p></blockquote><h3 id="volatile登场"><a href="#volatile登场" class="headerlink" title="volatile登场"></a>volatile登场</h3><p>对于可见性，Java提供了volatile关键字来保证可见性、有序性。但不保证原子性。</p><p>普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。</p><ul><li> volatile关键字对于基本类型的修改可以在随后对多个线程的读保持一致，但是对于引用类型如数组，实体bean，仅仅保证引用的可见性，但并不保证引用内容的可见性。。</li><li> 禁止进行指令重排序。</li></ul><p>背景：为了提高处理速度，处理器不直接和内存进行通信，而是先将系统内存的数据读到内部缓存（L1，L2或其他）后再进行操作，但操作完不知道何时会写到内存。</p><ul><li> 如果对声明了volatile的变量进行写操作，JVM就会向处理器发送一条指令，将这个变量所在缓存行的数据写回到系统内存。但是，就算写回到内存，如果其他处理器缓存的值还是旧的，再执行计算操作就会有问题。</li><li>在多处理器下，为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，当某个CPU在写数据时，如果发现操作的变量是共享变量，则会通知其他CPU告知该变量的缓存行是无效的，因此其他CPU在读取该变量时，发现其无效会重新从主存中加载数据。</li></ul><p><img src="/2022/11/04/concurrenthashmap-shi-ru-he-bao-zheng-xian-cheng-an-quan/image_4be279cf-20221104171705595.png" alt="image_4be279cf.png"></p><p>总结下来：  </p><p>第一：使用volatile关键字会强制将修改的值立即写入主存；</p><p>第二：使用volatile关键字的话，当线程2进行修改时，会导致线程1的工作内存中缓存变量的缓存行无效（反映到硬件层的话，就是CPU的L1或者L2缓存中对应的缓存行无效）；</p><p>第三：由于线程1的工作内存中缓存变量的缓存行无效，所以线程1再次读取变量的值时会去主存读取。</p><h3 id="是加在数组上的volatile吗"><a href="#是加在数组上的volatile吗" class="headerlink" title="是加在数组上的volatile吗?"></a>是加在数组上的volatile吗?</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * The array of bins. Lazily initialized upon first insertion. * Size is always a power of two. Accessed directly by iterators. */</span><span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们知道volatile可以修饰数组的，只是意思和它表面上看起来的样子不同。举个栗子，volatile int array[10]是指array的地址是volatile的而不是数组元素的值是volatile的.</p><h3 id="用volatile修饰的Node"><a href="#用volatile修饰的Node" class="headerlink" title="用volatile修饰的Node"></a>用volatile修饰的Node</h3><p>get操作可以无锁是由于Node的元素val和指针next是用volatile修饰的，在多线程环境下线程A修改结点的val或者新增节点的时候是对线程B可见的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>    <span class="token comment">//可以看到这些都用了volatile修饰</span>    <span class="token keyword">volatile</span> <span class="token class-name">V</span> val<span class="token punctuation">;</span>    <span class="token keyword">volatile</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> val<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> val<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> val<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> val<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> k<span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">;</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>          <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>          <span class="token punctuation">(</span>v <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>          <span class="token punctuation">(</span>k <span class="token operator">==</span> key <span class="token operator">||</span> k<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>          <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token punctuation">(</span>u <span class="token operator">=</span> val<span class="token punctuation">)</span> <span class="token operator">||</span> v<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token comment">/**    * Virtualized support for map.get(); overridden in subclasses.    */</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token class-name">Object</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">K</span> ek<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span>                 <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> k<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token keyword">return</span> e<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>既然volatile修饰数组对get操作没有效果那加在数组上的volatile的目的是什么呢？</p></blockquote><p>其实就是为了使得Node数组在扩容的时候对其他线程具有可见性而加的volatile</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li> 在1.8中ConcurrentHashMap的get操作全程不需要加锁，这也是它比其他并发集合比如hashtable、用Collections.synchronizedMap()包装的hashmap;安全效率高的原因之一。</li><li> get操作全程不需要加锁是因为Node的成员val是用volatile修饰的和数组用volatile修饰没有关系。</li><li> 数组用volatile修饰主要是保证在数组扩容的时候保证可见性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不推荐使用@Autowired注解</title>
      <link href="/2022/11/04/bu-tui-jian-shi-yong-autowired-zhu-jie/"/>
      <url>/2022/11/04/bu-tui-jian-shi-yong-autowired-zhu-jie/</url>
      
        <content type="html"><![CDATA[<p>大家在使用IDEA开发的时候有没有注意到过一个提示，在字段上使用Spring的依赖注入注解<code>@Autowired</code>后会出现如下警告  </p><blockquote><p>Field injection is not recommended (字段注入是不被推荐的)</p></blockquote><p>但是使用<code>@Resource</code>却不会出现此提示</p><p>网上文章大部分都是介绍两者的区别，没有提到为什么，当时想了好久想出了可能的原因，今天来总结一下</p><h2 id="Spring常见的DI方式"><a href="#Spring常见的DI方式" class="headerlink" title="Spring常见的DI方式"></a>Spring常见的DI方式</h2><ul><li> 构造器注入：利用构造方法的参数注入依赖</li><li> Setter注入：调用Setter的方法注入依赖</li><li> 字段注入：在字段上使用<code>@Autowired/Resource</code>注解</li></ul><h3 id="Autowired-VS-Resource"><a href="#Autowired-VS-Resource" class="headerlink" title="@Autowired VS @Resource"></a>@Autowired VS @Resource</h3><p>事实上，他们的基本功能都是通过注解实现依赖注入，只不过<code>@Autowired</code>是<code>Spring</code>定义的，而<code>@Resource</code>是<code>JSR-250</code>定义的。大致功能基本相同，但是还有一些细节不同：</p><ul><li> 依赖识别方式：<code>@Autowired</code>默认是byType可以使用<code>@Qualifier</code>指定Name，<code>@Resource</code>默认ByName如果找不到则ByType</li><li> 适用对象：<code>@Autowired</code>可以对构造器、方法、参数、字段使用，<code>@Resource</code>只能对方法、字段使用</li><li> 提供方：<code>@Autowired</code>是Spring提供的，<code>@Resource</code>是JSR-250提供的</li></ul><h2 id="各种DI方式的优缺点"><a href="#各种DI方式的优缺点" class="headerlink" title="各种DI方式的优缺点"></a>各种DI方式的优缺点</h2><p>参考Spring官方文档，建议了如下的使用场景：</p><ul><li> 构造器注入：强依赖性（即必须使用此依赖），不变性（各依赖不会经常变动）</li><li> Setter注入：可选（没有此依赖也可以工作），可变（依赖会经常变动）</li><li> Field注入：大多数情况下尽量少使用字段注入，一定要使用的话， @Resource相对@Autowired对IoC容器的耦合更低</li></ul><h2 id="Field注入的缺点"><a href="#Field注入的缺点" class="headerlink" title="Field注入的缺点"></a>Field注入的缺点</h2><ul><li> 不能像构造器那样注入不可变的对象</li><li> 依赖对外部不可见，外界可以看到构造器和setter，但无法看到私有字段，自然无法了解所需依赖</li><li> 会导致组件与IoC容器紧耦合（这是最重要的原因，离开了IoC容器去使用组件，在注入依赖时就会十分困难）</li><li> 导致单元测试也必须使用IoC容器，原因同上</li><li> 依赖过多时不够明显，比如我需要10个依赖，用构造器注入就会显得庞大，这时候应该考虑一下此组件是不是违反了单一职责原则</li></ul><h3 id="为什么IDEA只对-Autowired警告"><a href="#为什么IDEA只对-Autowired警告" class="headerlink" title="为什么IDEA只对@Autowired警告"></a>为什么IDEA只对@Autowired警告</h3><p>Field注入虽然有很多缺点，但它的好处也不可忽略：那就是太方便了。使用构造器或者setter注入需要写更多业务无关的代码，十分麻烦，而字段注入大幅简化了它们。并且绝大多数情况下业务代码和框架就是强绑定的，完全松耦合只是一件理想上的事，牺牲了敏捷度去过度追求松耦合反而得不偿失。</p><blockquote><p>那么问题来了，为什么IDEA只对@Autowired警告，却对@Resource视而不见呢？</p></blockquote><p>个人认为，就像我们前面提到过的：@Autowired是Spring提供的，它是特定IoC提供的特定注解，这就导致了应用与框架的强绑定，一旦换用了其他的IoC框架，是不能够支持注入的。</p><p>而 @Resource是JSR-250提供的，它是Java标准，我们使用的IoC容器应当去兼容它，这样即使更换容器，也可以正常工作。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ioc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23种设计模式的通俗解释</title>
      <link href="/2022/11/04/23-chong-she-ji-mo-shi-de-tong-su-jie-shi/"/>
      <url>/2022/11/04/23-chong-she-ji-mo-shi-de-tong-su-jie-shi/</url>
      
        <content type="html"><![CDATA[<ul><li> 01 工厂方法</li><li> 02 建造者模式</li><li> 03 抽象工厂</li><li> 04 原型模式</li><li> 05 单态模式</li><li> 06 适配器模式</li><li> 07 桥梁模式</li><li> 08 合成模式</li><li> 09 装饰模式</li><li> 10 门面模式</li><li> 11 享元模式</li><li> 12 代理模式</li><li> 13 责任链模式</li><li> 14 命令模式</li><li> 15 解释器模式</li><li> 16 迭代模式</li><li> 17 调停者模式</li><li> 18 备忘录模式</li><li> 19 观察者模式</li><li> 20 状态模式</li><li> 21 策略模式</li><li> 22 模板方法模式</li><li> 23 访问者模式</li></ul><h2 id="01-工厂方法"><a href="#01-工厂方法" class="headerlink" title="01 工厂方法"></a>01 工厂方法</h2><p>追 MM 少不了请吃饭了，麦当劳的鸡翅和肯德基的鸡翅都是 MM 爱吃的东西，虽然口味有所不同，但不管你带 MM 去麦当劳或肯德基，只管向服务员说「来四个鸡翅」就行了。麦当劳和肯德基就是生产鸡翅的 Factory 工厂模式：客户类和工厂类分开。</p><p>消费者任何时候需要某种产品，只需向工厂请求即可。消费者无须修改就可以接纳新产品。缺点是当产品修改时，工厂类也要做相应的修改。如：如何创建及如何向客户端提供。</p><h2 id="02-建造者模式"><a href="#02-建造者模式" class="headerlink" title="02 建造者模式"></a>02 建造者模式</h2><p>MM 最爱听的就是「我爱你」这句话了，见到不同地方的 MM，要能够用她们的方言跟她说这句话哦，我有一个多种语言翻译机，上面每种语言都有一个按键，见到 MM 我只要按对应的键，它就能够用相应的语言说出「我爱你」这句话了，国外的 MM 也可以轻松搞掂，这就是我的「我爱你」builder。</p><p>建造模式：将产品的内部表象和产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。建造模式使得产品内部表象可以独立的变化，客户不必知道产品内部组成的细节。建造模式可以强制实行一种分步骤进行的建造过程。</p><h2 id="03-抽象工厂"><a href="#03-抽象工厂" class="headerlink" title="03 抽象工厂"></a>03 抽象工厂</h2><p>请 MM 去麦当劳吃汉堡，不同的 MM 有不同的口味，要每个都记住是一件烦人的事情，我一般采用 Factory Method 模式，带着 MM 到服务员那儿，说「要一个汉堡」，具体要什么样的汉堡呢，让 MM 直接跟服务员说就行了。</p><p>工厂方法模式：核心工厂类不再负责所有产品的创建，而是将具体创建的工作交给子类去做，成为一个抽象工厂角色，仅负责给出具体工厂类必须实现的接口，而不接触哪一个产品类应当被实例化这种细节。</p><h2 id="04-原型模式"><a href="#04-原型模式" class="headerlink" title="04 原型模式"></a>04 原型模式</h2><p>跟 MM 用 QQ 聊天，一定要说些深情的话语了，我搜集了好多肉麻的情话，需要时只要 copy 出来放到 QQ 里面就行了，这就是我的情话 prototype 了。（100 块钱一份，你要不要）</p><p>原始模型模式：通过给出一个原型对象来指明所要创建的对象的类型，然后用复制这个原型对象的方法创建出更多同类型的对象。原始模型模式允许动态的增加或减少产品类，产品类不需要非得有任何事先确定的等级结构，原始模型模式适用于任何的等级结构。缺点是每一个类都必须配备一个克隆方法。</p><h2 id="05-单态模式"><a href="#05-单态模式" class="headerlink" title="05 单态模式"></a>05 单态模式</h2><p>俺有 6 个漂亮的老婆，她们的老公都是我，我就是我们家里的老公 Sigleton，她们只要说道「老公」，都是指的同一个人，那就是我 (刚才做了个梦啦，哪有这么好的事)</p><p>单例模式：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例单例模式。单例模式只应在有真正的 “单一实例” 的需求时才可使用。</p><h2 id="06-适配器模式"><a href="#06-适配器模式" class="headerlink" title="06 适配器模式"></a>06 适配器模式</h2><p>在朋友聚会上碰到了一个美女 Sarah，从香港来的，可我不会说粤语，她不会说普通话，只好求助于我的朋友 kent 了，他作为我和 Sarah 之间的 Adapter，让我和 Sarah 可以相互交谈了 (也不知道他会不会耍我)</p><p>适配器（变压器）模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口原因不匹配而无法一起工作的两个类能够一起工作。适配类可以根据参数返还一个合适的实例给客户端。</p><h2 id="07-桥梁模式"><a href="#07-桥梁模式" class="headerlink" title="07 桥梁模式"></a>07 桥梁模式</h2><p>早上碰到 MM，要说早上好，晚上碰到 MM，要说晚上好；碰到 MM 穿了件新衣服，要说你的衣服好漂亮哦，碰到 MM 新做的发型，要说你的头发好漂亮哦。不要问我 “早上碰到 MM 新做了个发型怎么说” 这种问题，自己用 BRIDGE 组合一下不就行了</p><p>桥梁模式：将抽象化与实现化脱耦，使得二者可以独立的变化，也就是说将他们之间的强关联变成弱关联，也就是指在一个软件系统的抽象化和实现化之间使用组合 / 聚合关系而不是继承关系，从而使两者可以独立的变化。</p><p>08 合成模式 Mary 今天过生日。“我过生日，你要送我一件礼物。”“嗯，好吧，去商店，你自己挑。”“这件 T 恤挺漂亮，买，这条裙子好看，买，这个包也不错，买。”“喂，买了三件了呀，我只答应送一件礼物的哦。”“什么呀，T 恤加裙子加包包，正好配成一套呀，小姐，麻烦你包起来。”“……”，MM 都会用 Composite 模式了，你会了没有？</p><p>合成模式：合成模式将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式就是一个处理对象的树结构的模式。合成模式把部分与整体的关系用树结构表示出来。合成模式使得客户端把一个个单独的成分对象和由他们复合而成的合成对象同等看待。</p><h2 id="09-装饰模式"><a href="#09-装饰模式" class="headerlink" title="09 装饰模式"></a>09 装饰模式</h2><p>Mary 过完轮到 Sarly 过生日，还是不要叫她自己挑了，不然这个月伙食费肯定玩完，拿出我去年在华山顶上照的照片，在背面写上 “最好的的礼物，就是爱你的 Fita”，再到街上礼品店买了个像框（卖礼品的 MM 也很漂亮哦），再找隔壁搞美术设计的 Mike 设计了一个漂亮的盒子装起来……，我们都是 Decorator，最终都在修饰我这个人呀，怎么样，看懂了吗？</p><p>装饰模式：装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案，提供比继承更多的灵活性。动态给一个对象增加功能，这些功能可以再动态的撤消。增加由一些基本功能的排列组合而产生的非常大量的功能。</p><h2 id="10-门面模式"><a href="#10-门面模式" class="headerlink" title="10 门面模式"></a>10 门面模式</h2><p>我有一个专业的 Nikon 相机，我就喜欢自己手动调光圈、快门，这样照出来的照片才专业，但 MM 可不懂这些，教了半天也不会。幸好相机有 Facade 设计模式，把相机调整到自动档，只要对准目标按快门就行了，一切由相机自动调整，这样 MM 也可以用这个相机给我拍张照片了。门面模式：外部与一个子系统的通信必须通过一个统一的门面对象进行。</p><p>门面模式提供一个高层次的接口，使得子系统更易于使用。每一个子系统只有一个门面类，而且此门面类只有一个实例，也就是说它是一个单例模式。但整个系统可以有多个门面类。</p><h2 id="11-享元模式"><a href="#11-享元模式" class="headerlink" title="11 享元模式"></a>11 享元模式</h2><p>每天跟 MM 发短信，手指都累死了，最近买了个新手机，可以把一些常用的句子存在手机里，要用的时候，直接拿出来，在前面加上 MM 的名字就可以发送了，再不用一个字一个字敲了。共享的句子就是 Flyweight，MM 的名字就是提取出来的外部特征，根据上下文情况使用。享元模式：FLYWEIGHT 在拳击比赛中指最轻量级。</p><p>享元模式以共享的方式高效的支持大量的细粒度对象。享元模式能做到共享的关键是区分内蕴状态和外蕴状态。内蕴状态存储在享元内部，不会随环境的改变而有所不同。外蕴状态是随环境的改变而改变的。外蕴状态不能影响内蕴状态，它们是相互独立的。</p><p>将可以共享的状态和不可以共享的状态从常规类中区分开来，将不可以共享的状态从类里剔除出去。客户端不可以直接创建被共享的对象，而应当使用一个工厂对象负责创建被共享的对象。享元模式大幅度的降低内存中对象的数量。</p><h2 id="12-代理模式"><a href="#12-代理模式" class="headerlink" title="12 代理模式"></a>12 代理模式</h2><p>跟 MM 在网上聊天，一开头总是 “hi, 你好”,“你从哪儿来呀？”“你多大了？”“身高多少呀？” 这些话，真烦人，写个程序做为我的 Proxy 吧，凡是接收到这些话都设置好了自己的回答，接收到其他的话时再通知我回答，怎么样，酷吧。</p><p>代理模式：代理模式给某一个对象提供一个代理对象，并由代理对象控制对源对象的引用。代理就是一个人或一个机构代表另一个人或者一个机构采取行动。某些情况下，客户不想或者不能够直接引用一个对象，代理对象可以在客户和目标对象直接起到中介的作用。</p><p>客户端分辨不出代理主题对象与真实主题对象。代理模式可以并不知道真正的被代理对象，而仅仅持有一个被代理对象的接口，这时候代理对象不能够创建被代理对象，被代理对象必须有系统的其他角色代为创建并传入。</p><h2 id="13-责任链模式"><a href="#13-责任链模式" class="headerlink" title="13 责任链模式"></a>13 责任链模式</h2><p>晚上去上英语课，为了好开溜坐到了最后一排，哇，前面坐了好几个漂亮的 MM 哎，找张纸条，写上 “Hi, 可以做我的女朋友吗？如果不愿意请向前传”，纸条就一个接一个的传上去了，糟糕，传到第一排的 MM 把纸条传给老师了，听说是个老处女呀，快跑！</p><p>责任链模式：在责任链模式中，很多对象由每一个对象对其下家的引用而接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。客户并不知道链上的哪一个对象最终处理这个请求，系统可以在不影响客户端的情况下动态的重新组织链和分配责任。处理者有两个选择：承担责任或者把责任推给下家。一个请求可以最终不被任何接收端对象所接受。</p><h2 id="14-命令模式"><a href="#14-命令模式" class="headerlink" title="14 命令模式"></a>14 命令模式</h2><p>俺有一个 MM 家里管得特别严，没法见面，只好借助于她弟弟在我们俩之间传送信息，她对我有什么指示，就写一张纸条让她弟弟带给我。这不，她弟弟又传送过来一个 COMMAND，为了感谢他，我请他吃了碗杂酱面，哪知道他说：“我同时给我姐姐三个男朋友送 COMMAND，就数你最小气，才请我吃面。”</p><p>命令模式：命令模式把一个请求或者操作封装到一个对象中。命令模式把发出命令的责任和执行命令的责任分割开，委派给不同的对象。命令模式允许请求的一方和发送的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否执行，何时被执行以及是怎么被执行的。系统支持命令的撤消。</p><h2 id="15-解释器模式"><a href="#15-解释器模式" class="headerlink" title="15 解释器模式"></a>15 解释器模式</h2><p>俺有一个《泡 MM 真经》，上面有各种泡 MM 的攻略，比如说去吃西餐的步骤、去看电影的方法等等，跟 MM 约会时，只要做一个 Interpreter，照着上面的脚本执行就可以了。</p><p>解释器模式：给定一个语言后，解释器模式可以定义出其文法的一种表示，并同时提供一个解释器。客户端可以使用这个解释器来解释这个语言中的句子。解释器模式将描述怎样在有了一个简单的文法后，使用模式设计解释这些语句。</p><p>在解释器模式里面提到的语言是指任何解释器对象能够解释的任何组合。在解释器模式中需要定义一个代表文法的命令类的等级结构，也就是一系列的组合规则。每一个命令对象都有一个解释方法，代表对命令对象的解释。命令对象的等级结构中的对象的任何排列组合都是一个语言。</p><h2 id="16-迭代模式"><a href="#16-迭代模式" class="headerlink" title="16 迭代模式"></a>16 迭代模式</h2><p>我爱上了 Mary，不顾一切的向她求婚。Mary：“想要我跟你结婚，得答应我的条件” 我：“什么条件我都答应，你说吧” Mary：“我看上了那个一克拉的钻石” 我：“我买，我买，还有吗？” Mary：“我看上了湖边的那栋别墅” 我：“我买，我买，还有吗？” Mary：“我看上那辆法拉利跑车” 我脑袋嗡的一声，坐在椅子上，一咬牙：“我买，我买，还有吗？”</p><p>迭代模式：迭代模式可以顺序访问一个聚集中的元素而不必暴露聚集的内部表象。多个对象聚在一起形成的总体称之为聚集，聚集对象是能够包容一组对象的容器对象。迭代子模式将迭代逻辑封装到一个独立的子对象中，从而与聚集本身隔开。</p><p>迭代模式简化了聚集的界面。每一个聚集对象都可以有一个或一个以上的迭代子对象，每一个迭代子的迭代状态可以是彼此独立的。迭代算法可以独立于聚集角色变化。</p><h2 id="17-调停者模式"><a href="#17-调停者模式" class="headerlink" title="17 调停者模式"></a>17 调停者模式</h2><p>四个 MM 打麻将，相互之间谁应该给谁多少钱算不清楚了，幸亏当时我在旁边，按照各自的筹码数算钱，赚了钱的从我这里拿，赔了钱的也付给我，一切就 OK 啦，俺得到了四个 MM 的电话。调停者模式：调停者模式包装了一系列对象相互作用的方式，使得这些对象不必相互明显作用。从而使他们可以松散偶合。</p><p>当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用。保证这些作用可以彼此独立的变化。调停者模式将多对多的相互作用转化为一对多的相互作用。调停者模式将对象的行为和协作抽象化，把对象在小尺度的行为上与其他对象的相互作用分开处理。</p><h2 id="18-备忘录模式"><a href="#18-备忘录模式" class="headerlink" title="18 备忘录模式"></a>18 备忘录模式</h2><p>同时跟几个 MM 聊天时，一定要记清楚刚才跟 MM 说了些什么话，不然 MM 发现了会不高兴的哦，幸亏我有个备忘录，刚才与哪个 MM 说了什么话我都拷贝一份放到备忘录里面保存，这样可以随时察看以前的记录啦。</p><p>备忘录模式：备忘录对象是一个用来存储另外一个对象内部状态的快照的对象。备忘录模式的用意是在不破坏封装的条件下，将一个对象的状态捉住，并外部化，存储起来，从而可以在将来合适的时候把这个对象还原到存储起来的状态。</p><h2 id="19-观察者模式"><a href="#19-观察者模式" class="headerlink" title="19 观察者模式"></a>19 观察者模式</h2><p>想知道咱们公司最新 MM 情报吗？加入公司的 MM 情报邮件组就行了，tom 负责搜集情报，他发现的新情报不用一个一个通知我们，直接发布给邮件组，我们作为订阅者（观察者）就可以及时收到情报啦。</p><p>观察者模式：观察者模式定义了一种一队多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。</p><h2 id="20-状态模式"><a href="#20-状态模式" class="headerlink" title="20 状态模式"></a>20 状态模式</h2><p>跟 MM 交往时，一定要注意她的状态哦，在不同的状态时她的行为会有不同，比如你约她今天晚上去看电影，对你没兴趣的 MM 就会说 “有事情啦”，对你不讨厌但还没喜欢上的 MM 就会说 “好啊，不过可以带上我同事么？”，已经喜欢上你的 MM 就会说 “几点钟？看完电影再去泡吧怎么样？”，当然你看电影过程中表现良好的话，也可以把 MM 的状态从不讨厌不喜欢变成喜欢哦。</p><p>状态模式：状态模式允许一个对象在其内部状态改变的时候改变行为。这个对象看上去象是改变了它的类一样。状态模式把所研究的对象的行为包装在不同的状态对象里，每一个状态对象都属于一个抽象状态类的一个子类。</p><p>状态模式的意图是让一个对象在其内部状态改变的时候，其行为也随之改变。状态模式需要对每一个系统可能取得的状态创立一个状态类的子类。当系统的状态变化时，系统便改变所选的子类。</p><h2 id="21-策略模式"><a href="#21-策略模式" class="headerlink" title="21 策略模式"></a>21 策略模式</h2><p>跟不同类型的 MM 约会，要用不同的策略，有的请电影比较好，有的则去吃小吃效果不错，有的去海边浪漫最合适，单目的都是为了得到 MM 的芳心，我的追 MM 锦囊中有好多 Strategy 哦。策略模式：策略模式针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。</p><p>策略模式使得算法可以在不影响到客户端的情况下发生变化。策略模把行为和环境分开。环境类负责维持和查询行为类，各种算法在具体的策略类中提供。由于算法和环境独立开来，算法的增减，修改都不会影响到环境和客户端。</p><h2 id="22-模板方法模式"><a href="#22-模板方法模式" class="headerlink" title="22 模板方法模式"></a>22 模板方法模式</h2><p>看过《如何说服女生上床》这部经典文章吗？女生从认识到上床的不变的步骤分为巧遇、打破僵局、展开追求、接吻、前戏、动手、爱抚、进去八大步骤 (Template method)，但每个步骤针对不同的情况，都有不一样的做法，这就要看你随机应变啦 (具体实现)；</p><p>模板方法模式：模板方法模式准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。先制定一个顶级逻辑框架，而将逻辑的细节留给具体的子类去实现。</p><h2 id="23-访问者模式"><a href="#23-访问者模式" class="headerlink" title="23 访问者模式"></a>23 访问者模式</h2><p>情人节到了，要给每个 MM 送一束鲜花和一张卡片，可是每个 MM 送的花都要针对她个人的特点，每张卡片也要根据个人的特点来挑，我一个人哪搞得清楚，还是找花店老板和礼品店老板做一下 Visitor，让花店老板根据 MM 的特点选一束花，让礼品店老板也根据每个人特点选一张卡，这样就轻松多了；</p><p>访问者模式：访问者模式的目的是封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改的话，接受这个操作的数据结构可以保持不变。访问者模式适用于数据结构相对未定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由的演化。访问者模式使得增加新的操作变的很容易，就是增加一个新的访问者类。</p><p>访问者模式将有关的行为集中到一个访问者对象中，而不是分散到一个个的节点类中。当使用访问者模式时，要将尽可能多的对象浏览逻辑放在访问者类中，而不是放到它的子类中。访问者模式可以跨过几个类的等级结构访问属于不同的等级结构的成员类。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL语句性能优化策略</title>
      <link href="/2022/11/04/sql-yu-ju-xing-neng-you-hua-ce-lue/"/>
      <url>/2022/11/04/sql-yu-ju-xing-neng-you-hua-ce-lue/</url>
      
        <content type="html"><![CDATA[<ul><li>前言 -</li></ul><p>本文将全面揭秘 SQL 语句性能优化策略，直接上干货！</p><ul><li>52 条 SQL 语句性能优化策略 -</li></ul><p>1、对查询进行优化，应尽量避免全表扫描，首先应考虑在where及order by涉及的列上建立索引。</p><p>2、应尽量避免在where子句中对字段进行null值判断，创建表时NULL是默认值，但大多数时候应该使用NOT NULL，或者使用一个特殊的值，如0，-1作为默认值。</p><p>3、应尽量避免在where子句中使用!=或&lt;&gt;操作符，MySQL只有对以下操作符才使用索引：&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN，以及某些时候的LIKE。</p><p>4、应尽量避免在where子句中使用or来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，可以使用UNION合并查询：select id from t where num=10 union all select id from t where num=20。</p><p>5、in和not in也要慎用，否则会导致全表扫描，对于连续的数值，能用between就不要用in了：Select id from t where num between 1 and 3。</p><p>6、下面的查询也将导致全表扫描：select id from t where name like‘%abc%’或者select id from t where name like‘%abc’若要提高效率，可以考虑全文检索。而select id from t where name like‘abc%’才用到索引。</p><p>7、如果在where子句中使用参数，也会导致全表扫描。</p><p>8、应尽量避免在where子句中对字段进行表达式操作，应尽量避免在where子句中对字段进行函数操作。</p><p>9、很多时候用exists代替in是一个好的选择：select num from a where num in(select num from b)。用下面的语句替换：select num from a where exists(select 1 from b where num=a.num)。</p><p>10、索引固然可以提高相应的select的效率，但同时也降低了insert及update的效率，因为insert或update时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p><p>11、应尽可能的避免更新clustered索引数据列， 因为clustered索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新clustered索引数据列，那么需要考虑是否应将该索引建为clustered索引。</p><p>12、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。</p><p>13、尽可能的使用varchar/nvarchar代替char/nchar，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p><p>14、最好不要使用”“返回所有：select from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p><p>15、尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p><p>16、使用表的别名(Alias)：当在SQL语句中连接多个表时，请使用表的别名并把别名前缀于每个Column上。这样一来，就可以减少解析的时间并减少那些由Column歧义引起的语法错误。</p><p>17、使用“临时表”暂存中间结果 ：</p><p>简化SQL语句的重要方法就是采用临时表暂存中间结果，但是临时表的好处远远不止这些，将临时结果暂存在临时表，后面的查询就在tempdb中了，这可以避免程序中多次扫描主表，也大大减少了程序执行中“共享锁”阻塞“更新锁”，减少了阻塞，提高了并发性能。</p><p>18、一些SQL查询语句应加上nolock，读、写是会相互阻塞的，为了提高并发性能，对于一些查询，可以加上nolock，这样读的时候可以允许写，但缺点是可能读到未提交的脏数据。</p><p>使用nolock有3条原则：</p><ul><li> 查询的结果用于“插、删、改”的不能加nolock；</li><li> 查询的表属于频繁发生页分裂的，慎用nolock ；</li><li>使用临时表一样可以保存“数据前影”，起到类似Oracle的undo表空间的功能，能采用临时表提高并发性能的，不要用nolock。</li></ul><p>19、常见的简化规则如下：</p><p>不要有超过5个以上的表连接（JOIN），考虑使用临时表或表变量存放中间结果。少用子查询，视图嵌套不要过深，一般视图嵌套不要超过2个为宜。</p><p>20、将需要查询的结果预先计算好放在表中，查询的时候再Select。这在SQL7.0以前是最重要的手段，例如医院的住院费计算。</p><p>21、用OR的字句可以分解成多个查询，并且通过UNION 连接多个查询。他们的速度只同是否使用索引有关，如果查询需要用到联合索引，用UNION all执行的效率更高。多个OR的字句没有用到索引，改写成UNION的形式再试图与索引匹配。一个关键的问题是否用到索引。</p><p>22、在IN后面值的列表中，将出现最频繁的值放在最前面，出现得最少的放在最后面，减少判断的次数。</p><p>23、尽量将数据的处理工作放在服务器上，减少网络的开销，如使用存储过程。</p><p>存储过程是编译好、优化过、并且被组织到一个执行规划里、且存储在数据库中的SQL语句，是控制流语言的集合，速度当然快。反复执行的动态SQL，可以使用临时存储过程，该过程（临时表）被放在Tempdb中。</p><p>24、当服务器的内存够多时，配制线程数量 = 最大连接数+5，这样能发挥最大的效率；否则使用 配制线程数量&lt;最大连接数启用SQL SERVER的线程池来解决，如果还是数量 = 最大连接数+5，严重的损害服务器的性能。</p><p>25、查询的关联同写的顺序 ：</p><p>select a.personMemberID, * from chineseresume a,personmember b where personMemberID = b.referenceid and a.personMemberID = ‘JCNPRH39681’ （A = B ,B = ‘号码’） </p><p>select a.personMemberID, * from chineseresume a,personmember b where a.personMemberID = b.referenceid and a.personMemberID = ‘JCNPRH39681’ and b.referenceid = ‘JCNPRH39681’ （A = B ,B = ‘号码’， A = ‘号码’） </p><p>select a.personMemberID, * from chineseresume a,personmember b where b.referenceid = ‘JCNPRH39681’ and a.personMemberID = ‘JCNPRH39681’ （B = ‘号码’， A = ‘号码’）</p><p>26、尽量使用exists代替select count(1)来判断是否存在记录，count函数只有在统计表中所有行数时使用，而且count(1)比count(*)更有效率。  </p><p>27、尽量使用“&gt;=”，不要使用“&gt;”。</p><p>28、索引的使用规范：</p><ul><li> 索引的创建要与应用结合考虑，建议大的OLTP表不要超过6个索引；</li><li> 尽可能的使用索引字段作为查询条件，尤其是聚簇索引，必要时可以通过index index_name来强制指定索引；</li><li> 避免对大表查询时进行table scan，必要时考虑新建索引；</li><li> 在使用索引字段作为条件时，如果该索引是联合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用；</li><li>要注意索引的维护，周期性重建索引，重新编译存储过程。　　</li></ul><p>29、下列SQL条件语句中的列都建有恰当的索引，但执行速度却非常慢： </p><p>SELECT * FROM record WHERE substrINg(card_no,1,4)=’5378’ (13秒) </p><p>SELECT * FROM record WHERE amount/30&lt; 1000 （11秒） </p><p>SELECT * FROM record WHERE convert(char(10),date,112)=’19991201’ （10秒） </p><p>分析： </p><p>WHERE子句中对列的任何操作结果都是在SQL运行时逐列计算得到的，因此它不得不进行表搜索，而没有使用该列上面的索引。</p><p>如果这些结果在查询编译时就能得到，那么就可以被SQL优化器优化，使用索引，避免表搜索，因此将SQL重写成下面这样： </p><p>SELECT * FROM record WHERE card_no like ‘5378%’ （&lt; 1秒） </p><p>SELECT * FROM record WHERE amount&lt; 1000*30 （&lt; 1秒） </p><p>SELECT * FROM record WHERE date= ‘1999/12/01’ （&lt; 1秒）</p><p>30、当有一批处理的插入或更新时，用批量插入或批量更新，绝不会一条条记录的去更新。  </p><p>31、在所有的存储过程中，能够用SQL语句的，我绝不会用循环去实现。</p><p>例如：列出上个月的每一天，我会用connect by去递归查询一下，绝不会去用循环从上个月第一天到最后一天。</p><p>32、选择最有效率的表名顺序（只在基于规则的优化器中有效）： </p><p>Oracle的解析器按照从右到左的顺序处理FROM子句中的表名，FROM子句中写在最后的表（基础表 driving table）将被最先处理，在FROM子句中包含多个表的情况下，你必须选择记录条数最少的表作为基础表。</p><p>如果有3个以上的表连接查询，那就需要选择交叉表（intersection table）作为基础表，交叉表是指那个被其他表所引用的表。</p><p>33、提高GROUP BY语句的效率，可以通过将不需要的记录在GROUP BY之前过滤掉。下面两个查询返回相同结果，但第二个明显就快了许多。 </p><p>低效：</p><p>SELECT JOB , AVG(SAL) </p><p>FROM EMP </p><p>GROUP BY JOB </p><p>HAVING JOB =’PRESIDENT’ </p><p>OR JOB =’MANAGER’ </p><p>高效: </p><p>SELECT JOB , AVG(SAL) </p><p>FROM EMP </p><p>WHERE JOB =’PRESIDENT’ </p><p>OR JOB =’MANAGER’ </p><p>GROUP BY JOB</p><p>34、SQL语句用大写，因为Oracle总是先解析SQL语句，把小写的字母转换成大写的再执行。  </p><p>35、别名的使用，别名是大型数据库的应用技巧，就是表名、列名在查询中以一个字母为别名，查询速度要比建连接表快1.5倍。</p><p>36、避免死锁，在你的存储过程和触发器中访问同一个表时总是以相同的顺序；事务应经可能地缩短，在一个事务中应尽可能减少涉及到的数据量；永远不要在事务中等待用户输入。</p><p>37、避免使用临时表，除非却有需要，否则应尽量避免使用临时表，相反，可以使用表变量代替；大多数时候(99%)，表变量驻扎在内存中，因此速度比临时表更快，临时表驻扎在TempDb数据库中，因此临时表上的操作需要跨数据库通信，速度自然慢。</p><p>38、最好不要使用触发器：</p><ul><li> 触发一个触发器，执行一个触发器事件本身就是一个耗费资源的过程；</li><li> 如果能够使用约束实现的，尽量不要使用触发器；</li><li> 不要为不同的触发事件(Insert，Update和Delete)使用相同的触发器；</li><li>不要在触发器中使用事务型代码。</li></ul><p>39、索引创建规则： </p><ul><li> 表的主键、外键必须有索引； </li><li> 数据量超过300的表应该有索引； </li><li> 经常与其他表进行连接的表，在连接字段上应该建立索引； </li><li> 经常出现在Where子句中的字段，特别是大表的字段，应该建立索引； </li><li> 索引应该建在选择性高的字段上； </li><li> 索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引； </li><li> 复合索引的建立需要进行仔细分析，尽量考虑用单字段索引代替； </li><li> 正确选择复合索引中的主列字段，一般是选择性较好的字段； </li><li> 复合索引的几个字段是否经常同时以AND方式出现在Where子句中？单字段查询是否极少甚至没有？如果是，则可以建立复合索引；否则考虑单字段索引； </li><li> 如果复合索引中包含的字段经常单独出现在Where子句中，则分解为多个单字段索引； </li><li> 如果复合索引所包含的字段超过3个，那么仔细考虑其必要性，考虑减少复合的字段； </li><li> 如果既有单字段索引，又有这几个字段上的复合索引，一般可以删除复合索引； </li><li> 频繁进行数据操作的表，不要建立太多的索引； </li><li> 删除无用的索引，避免对执行计划造成负面影响； </li><li> 表上建立的每个索引都会增加存储开销，索引对于插入、删除、更新操作也会增加处理上的开销。另外，过多的复合索引，在有单字段索引的情况下，一般都是没有存在价值的；相反，还会降低数据增加删除时的性能，特别是对频繁更新的表来说，负面影响更大。 </li><li>尽量不要对数据库中某个含有大量重复的值的字段建立索引。</li></ul><p>40、MySQL查询优化总结：</p><p>使用慢查询日志去发现慢查询，使用执行计划去判断查询是否正常运行，总是去测试你的查询看看是否他们运行在最佳状态下。</p><p>久而久之性能总会变化，避免在整个表上使用count(*)，它可能锁住整张表，使查询保持一致以便后续相似的查询可以使用查询缓存，在适当的情形下使用GROUP BY而不是DISTINCT，在WHERE、GROUP BY和ORDER BY子句中使用有索引的列，保持索引简单，不在多个索引中包含同一个列。</p><p>有时候MySQL会使用错误的索引，对于这种情况使用USE INDEX，检查使用SQL_MODE=STRICT的问题，对于记录数小于5的索引字段，在UNION的时候使用LIMIT不是是用OR。 </p><p>为了避免在更新前SELECT，使用INSERT ON DUPLICATE KEY或者INSERT IGNORE，不要用UPDATE去实现，不要使用MAX，使用索引字段和ORDER BY子句，LIMIT M，N实际上可以减缓查询在某些情况下，有节制地使用，在WHERE子句中使用UNION代替子查询，在重新启动的MySQL，记得来温暖你的数据库，以确保数据在内存和查询速度快，考虑持久连接，而不是多个连接，以减少开销。</p><p>基准查询，包括使用服务器上的负载，有时一个简单的查询可以影响其他查询，当负载增加在服务器上，使用SHOW PROCESSLIST查看慢的和有问题的查询，在开发环境中产生的镜像数据中测试的所有可疑的查询。</p><p>41、MySQL备份过程：</p><ul><li> 从二级复制服务器上进行备份；</li><li> 在进行备份期间停止复制，以避免在数据依赖和外键约束上出现不一致；</li><li> 彻底停止MySQL，从数据库文件进行备份；</li><li> 如果使用MySQL dump进行备份，请同时备份二进制日志文件 – 确保复制没有中断；</li><li> 不要信任LVM快照，这很可能产生数据不一致，将来会给你带来麻烦；</li><li> 为了更容易进行单表恢复，以表为单位导出数据——如果数据是与其他表隔离的。 </li><li> 当使用mysqldump时请使用–opt；</li><li> 在备份之前检查和优化表；</li><li> 为了更快的进行导入，在导入时临时禁用外键约束。；</li><li> 为了更快的进行导入，在导入时临时禁用唯一性检测；</li><li> 在每一次备份后计算数据库，表以及索引的尺寸，以便更够监控数据尺寸的增长；</li><li> 通过自动调度脚本监控复制实例的错误和延迟；</li><li>定期执行备份。</li></ul><p>42、查询缓冲并不自动处理空格，因此，在写SQL语句时，应尽量减少空格的使用，尤其是在SQL首和尾的空格（因为查询缓冲并不自动截取首尾空格）。</p><p>43、member用mid做标准进行分表方便查询么？一般的业务需求中基本上都是以username为查询依据，正常应当是username做hash取模来分表。</p><p>而分表的话MySQL的partition功能就是干这个的，对代码是透明的；在代码层面去实现貌似是不合理的。</p><p>44、我们应该为数据库里的每张表都设置一个ID做为其主键，而且最好的是一个INT型的（推荐使用UNSIGNED），并设置上自动增加的AUTO_INCREMENT标志。</p><p>45、在所有的存储过程和触发器的开始处设置SET NOCOUNT ON，在结束时设置SET NOCOUNT OFF。无需在执行存储过程和触发器的每个语句后向客户端发送DONE_IN_PROC消息。</p><p>46、MySQL查询可以启用高速查询缓存。这是提高数据库性能的有效MySQL优化方法之一。当同一个查询被执行多次时，从缓存中提取数据和直接从数据库中返回数据快很多。</p><p>47、EXPLAIN SELECT查询用来跟踪查看效果：</p><p>使用EXPLAIN关键字可以让你知道MySQL是如何处理你的SQL语句的。这可以帮你分析你的查询语句或是表结构的性能瓶颈。EXPLAIN的查询结果还会告诉你你的索引主键被如何利用的，你的数据表是如何被搜索和排序的。</p><p>48、当只要一行数据时使用LIMIT 1 ：</p><p>当你查询表的有些时候，你已经知道结果只会有一条结果，但因为你可能需要去fetch游标，或是你也许会去检查返回的记录数。</p><p>在这种情况下，加上LIMIT 1可以增加性能。这样一来，MySQL数据库引擎会在找到一条数据后停止搜索，而不是继续往后查少下一条符合记录的数据。</p><p>49、选择表合适存储引擎： </p><ul><li> myisam：应用时以读和插入操作为主，只有少量的更新和删除，并且对事务的完整性，并发性要求不是很高的。 </li><li>InnoDB：事务处理，以及并发条件下要求数据的一致性。除了插入和查询外，包括很多的更新和删除。（InnoDB有效地降低删除和更新导致的锁定）。 对于支持事务的InnoDB类型的表来说，影响速度的主要原因是AUTOCOMMIT默认设置是打开的，而且程序没有显式调用BEGIN 开始事务，导致每插入一条都自动提交，严重影响了速度。可以在执行SQL前调用begin，多条SQL形成一个事物（即使autocommit打开也可以），将大大提高性能。</li></ul><p>50、优化表的数据类型，选择合适的数据类型： </p><p>原则：更小通常更好，简单就好，所有字段都得有默认值，尽量避免null。 </p><p>例如：数据库表设计时候更小的占磁盘空间尽可能使用更小的整数类型。(mediumint就比int更合适) </p><p>比如时间字段：datetime和timestamp，datetime占用8个字节，而timestamp占用4个字节，只用了一半，而timestamp表示的范围是1970—2037适合做更新时间 </p><p>MySQL可以很好的支持大数据量的存取，但是一般说来，数据库中的表越小，在它上面执行的查询也就会越快。 </p><p>因此，在创建表的时候，为了获得更好的性能，我们可以将表中字段的宽度设得尽可能小。</p><p>例如：在定义邮政编码这个字段时，如果将其设置为CHAR(255)，显然给数据库增加了不必要的空间。甚至使用VARCHAR这种类型也是多余的，因为CHAR(6)就可以很好的完成任务了。</p><p>同样的，如果可以的话，我们应该使用MEDIUMINT而不是BIGIN来定义整型字段，应该尽量把字段设置为NOT NULL，这样在将来执行查询的时候，数据库不用去比较NULL值。 </p><p>对于某些文本字段，例如“省份”或者“性别”，我们可以将它们定义为ENUM类型。因为在MySQL中，ENUM类型被当作数值型数据来处理，而数值型数据被处理起来的速度要比文本类型快得多。这样，我们又可以提高数据库的性能。</p><p>51、字符串数据类型：char，varchar，text选择区别。</p><p>52、任何对列的操作都将导致表扫描，它包括数据库函数、计算表达式等等，查询时要尽可能将操作移至等号右边。</p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程八股文</title>
      <link href="/2022/11/04/java-bing-fa-bian-cheng-ba-gu-wen/"/>
      <url>/2022/11/04/java-bing-fa-bian-cheng-ba-gu-wen/</url>
      
        <content type="html"><![CDATA[<h3 id="简述Java内存模型（JMM）"><a href="#简述Java内存模型（JMM）" class="headerlink" title="简述Java内存模型（JMM）"></a>简述Java内存模型（JMM）</h3><p>Java内存模型定义了程序中各种变量的访问规则：</p><ul><li> 所有变量都存储在主存，每个线程都有自己的工作内存。</li><li> 工作内存中保存了被该线程使用的变量的主存副本，线程对变量的所有操作都必须在工作空间进行，不能直接读写主内存数据。</li><li> 操作完成后，线程的工作内存通过缓存一致性协议将操作完的数据刷回主存。</li></ul><h3 id="简述as-if-serial"><a href="#简述as-if-serial" class="headerlink" title="简述as-if-serial"></a>简述as-if-serial</h3><p>编译器会对原始的程序进行指令重排序和优化。但不管怎么重排序，其结果都必须和用户原始程序输出的预定结果保持一致。</p><h3 id="简述happens-before八大规则"><a href="#简述happens-before八大规则" class="headerlink" title="简述happens-before八大规则"></a>简述happens-before八大规则</h3><ul><li> 程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作；</li><li> 锁定规则：一个unLock操作先行发生于后面对同一个锁的lock操作；</li><li> volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作；</li><li> 传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C；</li><li> 线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作；</li><li> 线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生；</li><li> 线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行；</li><li> 对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始；</li></ul><h3 id="as-if-serial-和-happens-before-的区别"><a href="#as-if-serial-和-happens-before-的区别" class="headerlink" title="as-if-serial 和 happens-before 的区别"></a>as-if-serial 和 happens-before 的区别</h3><p>as-if-serial 保证单线程程序的执行结果不变，happens-before 保证正确同步的多线程程序的执行结果不变。</p><h3 id="简述原子性操作"><a href="#简述原子性操作" class="headerlink" title="简述原子性操作"></a>简述原子性操作</h3><p>一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行，这就是原子性操作。</p><h3 id="简述线程的可见性"><a href="#简述线程的可见性" class="headerlink" title="简述线程的可见性"></a>简述线程的可见性</h3><p>可见性指当一个线程修改了共享变量时，其他线程能够立即得知修改。volatile、synchronized、final 关键字都能保证可见性。</p><h3 id="简述有序性"><a href="#简述有序性" class="headerlink" title="简述有序性"></a>简述有序性</h3><p>虽然多线程存在并发和指令优化等操作，但在本线程内观察该线程的所有执行操作是有序的。</p><h3 id="简述Java中volatile关键字作用"><a href="#简述Java中volatile关键字作用" class="headerlink" title="简述Java中volatile关键字作用"></a>简述Java中volatile关键字作用</h3><ul><li> 保证变量对所有线程的可见性。当一个线程修改了变量值，新值对于其他线程来说是立即可以得知的。</li><li> 禁止指令重排。使用 volatile 变量进行写操作，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器进行重排序。</li></ul><h3 id="Java线程的实现方式"><a href="#Java线程的实现方式" class="headerlink" title="Java线程的实现方式"></a>Java线程的实现方式</h3><ul><li> 实现Runnable接口</li><li> 继承Thread类</li><li> 实现Callable接口</li></ul><h3 id="简述Java线程的状态"><a href="#简述Java线程的状态" class="headerlink" title="简述Java线程的状态"></a>简述Java线程的状态</h3><p>线程状态有 NEW、RUNNABLE、BLOCK、WAITING、TIMED_WAITING、THERMINATED</p><ul><li> NEW：新建状态，线程被创建且未启动，此时还未调用 start 方法。</li><li> RUNNABLE：运行状态。表示线程正在JVM中执行，但是这个执行，不一定真的在跑，也可能在排队等CPU。</li><li> BLOCKED：阻塞状态。线程等待获取锁，锁还没获得。</li><li> WAITING：等待状态。线程内run方法执行完Object.wait()/Thread.join()进入该状态。</li><li> TIMED_WAITING：限期等待。在一定时间之后跳出状态。调用Thread.sleep(long) Object.wait(long) Thread.join(long)进入状态。其中这些参数代表等待的时间。</li><li> TERMINATED：结束状态。线程调用完run方法进入该状态。</li></ul><h3 id="简述线程通信的方式"><a href="#简述线程通信的方式" class="headerlink" title="简述线程通信的方式"></a>简述线程通信的方式</h3><ul><li> volatile 关键词修饰变量，保证所有线程对变量访问的可见性。</li><li> synchronized关键词。确保多个线程在同一时刻只能有一个处于方法或同步块中。</li><li> wait/notify方法</li><li> IO通信</li></ul><h3 id="简述线程池"><a href="#简述线程池" class="headerlink" title="简述线程池"></a>简述线程池</h3><p>没有线程池的情况下，多次创建，销毁线程开销比较大。如果在开辟的线程执行完当前任务后复用已创建的线程，可以降低开销、控制最大并发数。</p><p>线程池创建线程时，会将线程封装成工作线程 Worker，Worker 在执行完任务后还会循环获取工作队列中的任务来执行。</p><p>将任务派发给线程池时，会出现以下几种情况</p><ul><li> 核心线程池未满，创建一个新的线程执行任务。</li><li> 如果核心线程池已满，工作队列未满，将线程存储在工作队列。</li><li> 如果工作队列已满，线程数小于最大线程数就创建一个新线程处理任务。</li><li> 如果超过大小线程数，按照拒绝策略来处理任务。</li></ul><p>线程池参数：</p><ul><li> corePoolSize：常驻核心线程数。超过该值后如果线程空闲会被销毁。</li><li> maximumPoolSize：线程池能够容纳同时执行的线程最大数。</li><li> keepAliveTime：线程空闲时间，线程空闲时间达到该值后会被销毁，直到只剩下 corePoolSize 个线程为止，避免浪费内存资源。</li><li> workQueue：工作队列。</li><li> threadFactory：线程工厂，用来生产一组相同任务的线程。</li><li> handler：拒绝策略。</li></ul><p>拒绝策略有以下几种：</p><ul><li> AbortPolicy：丢弃任务并抛出异常</li><li> CallerRunsPolicy：重新尝试提交该任务</li><li> DiscardOldestPolicy 抛弃队列里等待最久的任务并把当前任务加入队列</li><li> DiscardPolicy 表示直接抛弃当前任务但不抛出异常。</li></ul><h3 id="简述Executor框架"><a href="#简述Executor框架" class="headerlink" title="简述Executor框架"></a>简述Executor框架</h3><p>Executor框架目的是将任务提交和任务如何运行分离开来的机制。用户不再需要从代码层考虑设计任务的提交运行，只需要调用Executor框架实现类的Execute方法就可以提交任务。</p><h3 id="简述Executor的继承关系"><a href="#简述Executor的继承关系" class="headerlink" title="简述Executor的继承关系"></a>简述Executor的继承关系</h3><ul><li> Executor：一个接口，其定义了一个接收Runnable对象的方法executor，该方法接收一个Runable实例执行这个任务。</li><li> ExecutorService：Executor的子类接口，其定义了一个接收Callable对象的方法，返回 Future 对象，同时提供execute方法。</li><li> ScheduledExecutorService：ExecutorService的子类接口，支持定期执行任务。</li><li> AbstractExecutorService：抽象类，提供 ExecutorService 执行方法的默认实现。</li><li> Executors：实现ExecutorService接口的静态工厂类，提供了一系列工厂方法用于创建线程池。</li><li> ThreadPoolExecutor：继承AbstractExecutorService，用于创建线程池。</li><li> ForkJoinPool: 继承AbstractExecutorService，Fork 将大任务分叉为多个小任务，然后让小任务执行，Join 是获得小任务的结果，类似于map reduce。</li><li> ThreadPoolExecutor：继承ThreadPoolExecutor，实现ScheduledExecutorService，用于创建带定时任务的线程池。</li></ul><h3 id="简述线程池的状态"><a href="#简述线程池的状态" class="headerlink" title="简述线程池的状态"></a>简述线程池的状态</h3><ul><li> Running：能接受新提交的任务，也可以处理阻塞队列的任务。</li><li> Shutdown：不再接受新提交的任务，但可以处理存量任务，线程池处于running时调用shutdown方法，会进入该状态。</li><li> Stop：不接受新任务，不处理存量任务，调用shutdownnow进入该状态。</li><li> Tidying：所有任务已经终止了，worker_count（有效线程数）为0。</li><li> Terminated：线程池彻底终止。在tidying模式下调用terminated方法会进入该状态。</li></ul><h3 id="简述线程池类型"><a href="#简述线程池类型" class="headerlink" title="简述线程池类型"></a>简述线程池类型</h3><ul><li> newCachedThreadPool 可缓存线程池，可设置最小线程数和最大线程数，线程空闲1分钟后自动销毁。</li><li> newFixedThreadPool 指定工作线程数量线程池。</li><li> newSingleThreadExecutor 单线程Executor。</li><li> newScheduleThreadPool 支持定时任务的指定工作线程数量线程池。</li><li> newSingleThreadScheduledExecutor 支持定时任务的单线程Executor。</li></ul><h3 id="简述阻塞队列"><a href="#简述阻塞队列" class="headerlink" title="简述阻塞队列"></a>简述阻塞队列</h3><p>阻塞队列是生产者消费者的实现具体组件之一。当阻塞队列为空时，从队列中获取元素的操作将会被阻塞，当阻塞队列满了，往队列添加元素的操作将会被阻塞。具体实现有：</p><ul><li> ArrayBlockingQueue：底层是由数组组成的有界阻塞队列。</li><li> LinkedBlockingQueue：底层是由链表组成的有界阻塞队列。</li><li> PriorityBlockingQueue：阻塞优先队列。</li><li> DelayQueue：创建元素时可以指定多久才能从队列中获取当前元素</li><li> SynchronousQueue：不存储元素的阻塞队列，每一个存储必须等待一个取出操作</li><li> LinkedTransferQueue：与LinkedBlockingQueue相比多一个transfer方法，即如果当前有消费者正等待接收元素，可以把生产者传入的元素立刻传输给消费者。</li><li> LinkedBlockingDeque：双向阻塞队列。</li></ul><h3 id="谈一谈ThreadLocal"><a href="#谈一谈ThreadLocal" class="headerlink" title="谈一谈ThreadLocal"></a>谈一谈ThreadLocal</h3><p>ThreadLocal 是线程共享变量。ThreadLoacl 有一个静态内部类 ThreadLocalMap，其 Key 是 ThreadLocal 对象，值是 Entry 对象，ThreadLocalMap是每个线程私有的。</p><ul><li> set 给ThreadLocalMap设置值。</li><li> get 获取ThreadLocalMap。</li><li> remove 删除ThreadLocalMap类型的对象。</li></ul><p>存在的问题：对于线程池，由于线程池会重用 Thread 对象，因此与 Thread 绑定的 ThreadLocal 也会被重用，造成一系列问题。</p><p>比如说内存泄漏。由于 ThreadLocal 是弱引用，但 Entry 的 value 是强引用，因此当 ThreadLocal 被垃圾回收后，value 依旧不会被释放，产生内存泄漏。</p><h3 id="聊聊你对Java并发包下unsafe类的理解"><a href="#聊聊你对Java并发包下unsafe类的理解" class="headerlink" title="聊聊你对Java并发包下unsafe类的理解"></a>聊聊你对Java并发包下unsafe类的理解</h3><p>对于 Java 语言，没有直接的指针组件，一般也不能使用偏移量对某块内存进行操作。这些操作相对来讲是安全（safe）的。</p><p>Java 有个类叫 Unsafe 类，这个类使 Java 拥有了像 C 语言的指针一样操作内存空间的能力，同时也带来了指针的问题。这个类可以说是 Java 并发开发的基础。</p><h3 id="Java中的乐观锁与CAS算法"><a href="#Java中的乐观锁与CAS算法" class="headerlink" title="Java中的乐观锁与CAS算法"></a>Java中的乐观锁与CAS算法</h3><p>乐观锁认为数据发送时发生并发冲突的概率不大，所以读操作前不上锁。</p><p>到了写操作时才会进行判断，数据在此期间是否被其他线程修改。如果发生修改，那就返回写入失败；如果没有被修改，那就执行修改操作，返回修改成功。</p><p>乐观锁一般都采用 Compare And Swap（CAS）算法进行实现。顾名思义，该算法涉及到了两个操作，比较（Compare）和交换（Swap）。</p><p>CAS 算法的思路如下：</p><ul><li> 该算法认为不同线程对变量的操作时产生竞争的情况比较少。</li><li> 该算法的核心是对当前读取变量值 E 和内存中的变量旧值 V 进行比较。</li><li> 如果相等，就代表其他线程没有对该变量进行修改，就将变量值更新为新值 N。</li><li> 如果不等，就认为在读取值 E 到比较阶段，有其他线程对变量进行过修改，不进行任何操作。</li></ul><h3 id="ABA问题及解决方法简述"><a href="#ABA问题及解决方法简述" class="headerlink" title="ABA问题及解决方法简述"></a>ABA问题及解决方法简述</h3><p>CAS 算法是基于值来做比较的，如果当前有两个线程，一个线程将变量值从 A 改为 B ，再由 B 改回为 A ，当前线程开始执行 CAS 算法时，就很容易认为值没有变化，误认为读取数据到执行 CAS 算法的期间，没有线程修改过数据。</p><p>juc 包提供了一个 AtomicStampedReference，即在原始的版本下加入版本号戳，解决 ABA 问题。</p><h3 id="简述常见的Atomic类"><a href="#简述常见的Atomic类" class="headerlink" title="简述常见的Atomic类"></a>简述常见的Atomic类</h3><p>在很多时候，我们需要的仅仅是一个简单的、高效的、线程安全的++或者–方案，使用synchronized关键字和lock固然可以实现，但代价比较大，此时用原子类更加方便。基本数据类型的原子类有：</p><ul><li> AtomicInteger 原子更新整形</li><li> AtomicLong 原子更新长整型</li><li> AtomicBoolean 原子更新布尔类型</li></ul><p>Atomic数组类型有：</p><ul><li> AtomicIntegerArray 原子更新整形数组里的元素</li><li> AtomicLongArray 原子更新长整型数组里的元素</li><li> AtomicReferenceArray 原子更新引用类型数组里的元素。</li></ul><p>Atomic引用类型有：</p><ul><li> AtomicReference 原子更新引用类型</li><li> AtomicMarkableReference 原子更新带有标记位的引用类型，可以绑定一个 boolean 标记</li><li> AtomicStampedReference 原子更新带有版本号的引用类型</li></ul><p>FieldUpdater类型：</p><ul><li> AtomicIntegerFieldUpdater 原子更新整形字段的更新器</li><li> AtomicLongFieldUpdater 原子更新长整形字段的更新器</li><li> AtomicReferenceFieldUpdater 原子更新引用类型字段的更新器</li></ul><h3 id="简述Atomic类基本实现原理"><a href="#简述Atomic类基本实现原理" class="headerlink" title="简述Atomic类基本实现原理"></a>简述Atomic类基本实现原理</h3><p>以AtomicIntger 为例。</p><p>方法getAndIncrement，以原子方式将当前的值加1，具体实现为：</p><ul><li> 在 for 死循环中取得 AtomicInteger 里存储的数值</li><li> 对 AtomicInteger 当前的值加 1</li><li> 调用 compareAndSet 方法进行原子更新</li><li> 先检查当前数值是否等于 expect</li><li> 如果等于则说明当前值没有被其他线程修改，则将值更新为 next，</li><li> 如果不是会更新失败返回 false，程序会进入 for 循环重新进行 compareAndSet 操作。</li></ul><h3 id="简述CountDownLatch"><a href="#简述CountDownLatch" class="headerlink" title="简述CountDownLatch"></a>简述CountDownLatch</h3><p>CountDownLatch这个类使一个线程等待其他线程各自执行完毕后再执行。是通过一个计数器来实现的，计数器的初始值是线程的数量。每当一个线程执行完毕后，调用countDown方法，计数器的值就减1，当计数器的值为0时，表示所有线程都执行完毕，然后在等待的线程就可以恢复工作了。只能一次性使用，不能reset。</p><h3 id="简述CyclicBarrier"><a href="#简述CyclicBarrier" class="headerlink" title="简述CyclicBarrier"></a>简述CyclicBarrier</h3><p>CyclicBarrier 主要功能和CountDownLatch类似，也是通过一个计数器，使一个线程等待其他线程各自执行完毕后再执行。但是其可以重复使用（reset）。</p><h3 id="简述Semaphore"><a href="#简述Semaphore" class="headerlink" title="简述Semaphore"></a>简述Semaphore</h3><p>Semaphore即信号量。Semaphore 的构造方法参数接收一个 int 值，设置一个计数器，表示可用的许可数量即最大并发数。使用 acquire 方法获得一个许可证，计数器减一，使用 release 方法归还许可，计数器加一。如果此时计数器值为0，线程进入休眠。</p><h3 id="简述Exchanger"><a href="#简述Exchanger" class="headerlink" title="简述Exchanger"></a>简述Exchanger</h3><p>Exchanger类可用于两个线程之间交换信息。可简单地将Exchanger对象理解为一个包含两个格子的容器，通过exchanger方法可以向两个格子中填充信息。线程通过exchange 方法交换数据，第一个线程执行 exchange 方法后会阻塞等待第二个线程执行该方法。当两个线程都到达同步点时这两个线程就可以交换数据当两个格子中的均被填充时，该对象会自动将两个格子的信息交换，然后返回给线程，从而实现两个线程的信息交换。</p><h3 id="简述ConcurrentHashMap"><a href="#简述ConcurrentHashMap" class="headerlink" title="简述ConcurrentHashMap"></a>简述ConcurrentHashMap</h3><p>JDK7采用锁分段技术。首先将数据分成 Segment 数据段，然后给每一个数据段配一把锁，当一个线程占用锁访问其中一个段的数据时，其他段的数据也能被其他线程访问。</p><p>get 除读到空值不需要加锁。该方法先经过一次再散列，再用这个散列值通过散列运算定位到 Segment，最后通过散列算法定位到元素。put 须加锁，首先定位到 Segment，然后进行插入操作，第一步判断是否需要对 Segment 里的 HashEntry 数组进行扩容，第二步定位添加元素的位置，然后将其放入数组。</p><p>JDK8的改进</p><ul><li> 取消分段锁机制，采用CAS算法进行值的设置，如果CAS失败再使用 synchronized 加锁添加元素</li><li> 引入红黑树结构，当某个槽内的元素个数超过8且 Node数组 容量大于 64 时，链表转为红黑树。</li><li> 使用了更加优化的方式统计集合内的元素数量。</li></ul><h3 id="synchronized底层实现原理"><a href="#synchronized底层实现原理" class="headerlink" title="synchronized底层实现原理"></a>synchronized底层实现原理</h3><p>Java 对象底层都会关联一个 monitor，使用 synchronized 时 JVM 会根据使用环境找到对象的 monitor，根据 monitor 的状态进行加解锁的判断。如果成功加锁就成为该 monitor 的唯一持有者，monitor 在被释放前不能再被其他线程获取。</p><p>synchronized在JVM编译后会产生monitorenter 和 monitorexit 这两个字节码指令，获取和释放 monitor。这两个字节码指令都需要一个引用类型的参数指明要锁定和解锁的对象，对于同步普通方法，锁是当前实例对象；对于静态同步方法，锁是当前类的 Class 对象；对于同步方法块，锁是 synchronized 括号里的对象。</p><p>执行 monitorenter 指令时，首先尝试获取对象锁。如果这个对象没有被锁定，或当前线程已经持有锁，就把锁的计数器加 1，执行 monitorexit 指令时会将锁计数器减 1。一旦计数器为 0 锁随即就被释放。</p><h3 id="synchronized关键词使用方法"><a href="#synchronized关键词使用方法" class="headerlink" title="synchronized关键词使用方法"></a>synchronized关键词使用方法</h3><ul><li> 直接修饰某个实例方法</li><li> 直接修饰某个静态方法</li><li> 修饰代码块</li></ul><h3 id="简述Java偏向锁"><a href="#简述Java偏向锁" class="headerlink" title="简述Java偏向锁"></a>简述Java偏向锁</h3><p>JDK 1.6 中提出了偏向锁的概念。该锁提出的原因是，开发者发现多数情况下锁并不存在竞争，一把锁往往是由同一个线程获得的。偏向锁并不会主动释放，这样每次偏向锁进入的时候都会判断该资源是否是偏向自己的，如果是偏向自己的则不需要进行额外的操作，直接可以进入同步操作。</p><p>其申请流程为：</p><ul><li> 首先需要判断对象的 Mark Word 是否属于偏向模式，如果不属于，那就进入轻量级锁判断逻辑。否则继续下一步判断；</li><li> 判断目前请求锁的线程 ID 是否和偏向锁本身记录的线程 ID 一致。如果一致，继续下一步的判断，如果不一致，跳转到步骤4；</li><li> 判断是否需要重偏向。如果不用的话，直接获得偏向锁；</li><li> 利用 CAS 算法将对象的 Mark Word 进行更改，使线程 ID 部分换成本线程 ID。如果更换成功，则重偏向完成，获得偏向锁。如果失败，则说明有多线程竞争，升级为轻量级锁。</li></ul><h3 id="简述轻量级锁"><a href="#简述轻量级锁" class="headerlink" title="简述轻量级锁"></a>简述轻量级锁</h3><p>轻量级锁是为了在没有竞争的前提下减少重量级锁出现并导致的性能消耗。</p><p>其申请流程为：</p><ul><li> 如果同步对象没有被锁定，虚拟机将在当前线程的栈帧中建立一个锁记录空间，存储锁对象目前 Mark Word 的拷贝。</li><li> 虚拟机使用 CAS 尝试把对象的 Mark Word 更新为指向锁记录的指针</li><li> 如果更新成功即代表该线程拥有了锁，锁标志位将转变为 00，表示处于轻量级锁定状态。</li><li> 如果更新失败就意味着至少存在一条线程与当前线程竞争。虚拟机检查对象的 Mark Word 是否指向当前线程的栈帧</li><li> 如果指向当前线程的栈帧，说明当前线程已经拥有了锁，直接进入同步块继续执行</li><li> 如果不是则说明锁对象已经被其他线程抢占。</li><li> 如果出现两条以上线程争用同一个锁，轻量级锁就不再有效，将膨胀为重量级锁，锁标志状态变为 10，此时Mark Word 存储的就是指向重量级锁的指针，后面等待锁的线程也必须阻塞。</li></ul><h3 id="简述锁优化策略"><a href="#简述锁优化策略" class="headerlink" title="简述锁优化策略"></a>简述锁优化策略</h3><p>即自适应自旋、锁消除、锁粗化、锁升级等策略偏。</p><h3 id="简述Java的自旋锁"><a href="#简述Java的自旋锁" class="headerlink" title="简述Java的自旋锁"></a>简述Java的自旋锁</h3><p>线程获取锁失败后，可以采用这样的策略，可以不放弃 CPU ，不停的重试内重试，这种操作也称为自旋锁。</p><h3 id="简述自适应自旋锁"><a href="#简述自适应自旋锁" class="headerlink" title="简述自适应自旋锁"></a>简述自适应自旋锁</h3><p>自适应自旋锁自旋次数不再人为设定，通常由前一次在同一个锁上的自旋时间及锁的拥有者的状态决定。</p><h3 id="简述锁粗化"><a href="#简述锁粗化" class="headerlink" title="简述锁粗化"></a>简述锁粗化</h3><p>锁粗化的思想就是扩大加锁范围，避免反复的加锁和解锁。</p><h3 id="简述锁消除"><a href="#简述锁消除" class="headerlink" title="简述锁消除"></a>简述锁消除</h3><p>锁消除是一种更为彻底的优化，在编译时，Java编译器对运行上下文进行扫描，去除不可能存在共享资源竞争的锁。</p><h3 id="简述Lock与ReentrantLock"><a href="#简述Lock与ReentrantLock" class="headerlink" title="简述Lock与ReentrantLock"></a>简述Lock与ReentrantLock</h3><p>Lock接口是 Java并发包的顶层接口。</p><p>可重入锁 ReentrantLock 是 Lock 最常见的实现，与 synchronized 一样可重入。ReentrantLock 在默认情况下是非公平的，可以通过构造方法指定公平锁。一旦使用了公平锁，性能会下降。</p><h3 id="简述AQS"><a href="#简述AQS" class="headerlink" title="简述AQS"></a>简述AQS</h3><p>AQS（AbstractQuenedSynchronizer）抽象的队列式同步器。AQS是将每一条请求共享资源的线程封装成一个锁队列的一个结点（Node），来实现锁的分配。AQS是用来构建锁或其他同步组件的基础框架，它使用一个 volatile int state 变量作为共享资源，如果线程获取资源失败，则进入同步队列等待；如果获取成功就执行临界区代码，释放资源时会通知同步队列中的等待线程。</p><p>子类通过继承同步器并实现它的抽象方法getState、setState 和 compareAndSetState对同步状态进行更改。</p><p>AQS获取独占锁/释放独占锁原理：</p><p>获取：（acquire）</p><ul><li> 调用 tryAcquire 方法安全地获取线程同步状态，获取失败的线程会被构造同步节点并通过 addWaiter 方法加入到同步队列的尾部，在队列中自旋。</li><li> 调用 acquireQueued 方法使得该节点以死循环的方式获取同步状态，如果获取不到则阻塞。</li></ul><p>释放：（release）</p><ul><li> 调用 tryRelease 方法释放同步状态</li><li> 调用 unparkSuccessor 方法唤醒头节点的后继节点，使后继节点重新尝试获取同步状态。</li></ul><p>AQS获取共享锁/释放共享锁原理</p><p>获取锁（acquireShared）</p><ul><li> 调用 tryAcquireShared 方法尝试获取同步状态，返回值不小于 0 表示能获取同步状态。</li><li> 释放（releaseShared），并唤醒后续处于等待状态的节点。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java虚拟机八股文</title>
      <link href="/2022/11/04/java-xu-ni-ji-ba-gu-wen/"/>
      <url>/2022/11/04/java-xu-ni-ji-ba-gu-wen/</url>
      
        <content type="html"><![CDATA[<h3 id="简述JVM内存模型"><a href="#简述JVM内存模型" class="headerlink" title="简述JVM内存模型"></a>简述JVM内存模型</h3><p>线程私有的运行时数据区: 程序计数器、Java 虚拟机栈、本地方法栈。</p><p>线程共享的运行时数据区：Java 堆、方法区。</p><h3 id="简述程序计数器"><a href="#简述程序计数器" class="headerlink" title="简述程序计数器"></a>简述程序计数器</h3><p>程序计数器表示当前线程所执行的字节码的行号指示器。</p><p>程序计数器不会产生StackOverflowError和OutOfMemoryError。</p><h3 id="简述虚拟机栈"><a href="#简述虚拟机栈" class="headerlink" title="简述虚拟机栈"></a>简述虚拟机栈</h3><p>Java 虚拟机栈用来描述 Java 方法执行的内存模型。线程创建时就会分配一个栈空间，线程结束后栈空间被回收。</p><p>栈中元素用于支持虚拟机进行方法调用，每个方法在执行时都会创建一个栈帧存储方法的局部变量表、操作栈、动态链接和返回地址等信息。</p><p>虚拟机栈会产生两类异常：</p><ul><li> StackOverflowError：线程请求的栈深度大于虚拟机允许的深度抛出。</li><li> OutOfMemoryError：如果 JVM 栈容量可以动态扩展，虚拟机栈占用内存超出抛出。</li></ul><h3 id="简述本地方法栈"><a href="#简述本地方法栈" class="headerlink" title="简述本地方法栈"></a>简述本地方法栈</h3><p>本地方法栈与虚拟机栈作用相似，不同的是虚拟机栈为虚拟机执行 Java 方法服务，本地方法栈为本地方法服务。可以将虚拟机栈看作普通的java函数对应的内存模型，本地方法栈看作由native关键词修饰的函数对应的内存模型。</p><p>本地方法栈会产生两类异常：</p><ul><li> StackOverflowError：线程请求的栈深度大于虚拟机允许的深度抛出。</li><li> OutOfMemoryError：如果 JVM 栈容量可以动态扩展，虚拟机栈占用内存超出抛出。</li></ul><h3 id="简述JVM中的堆"><a href="#简述JVM中的堆" class="headerlink" title="简述JVM中的堆"></a>简述JVM中的堆</h3><p>堆主要作用是存放对象实例，Java 里几乎所有对象实例都在堆上分配内存，堆也是内存管理中最大的一块。Java的垃圾回收主要就是针对堆这一区域进行。可通过 -Xms 和 -Xmx 设置堆的最小和最大容量。</p><p>堆会抛出 OutOfMemoryError异常。</p><h3 id="简述方法区"><a href="#简述方法区" class="headerlink" title="简述方法区"></a>简述方法区</h3><p>方法区用于存储被虚拟机加载的类信息、常量、静态变量等数据。</p><p>JDK6之前使用永久代实现方法区，容易内存溢出。JDK7 把放在永久代的字符串常量池、静态变量等移出，JDK8 中抛弃永久代，改用在本地内存中实现的元空间来实现方法区，把 JDK 7 中永久代内容移到元空间。</p><p>方法区会抛出 OutOfMemoryError异常。</p><h3 id="简述运行时常量池"><a href="#简述运行时常量池" class="headerlink" title="简述运行时常量池"></a>简述运行时常量池</h3><p>运行时常量池存放常量池表，用于存放编译器生成的各种字面量与符号引用。一般除了保存 Class 文件中描述的符号引用外，还会把符号引用翻译的直接引用也存储在运行时常量池。除此之外，也会存放字符串基本类型。</p><p>JDK8之前，放在方法区，大小受限于方法区。JDK8将运行时常量池存放堆中。</p><h3 id="简述直接内存"><a href="#简述直接内存" class="headerlink" title="简述直接内存"></a>简述直接内存</h3><p>直接内存也称为堆外内存，就是把内存对象分配在JVM堆外的内存区域。这部分内存不是虚拟机管理，而是由操作系统来管理。Java通过DriectByteBuffer对其进行操作，避免了在 Java 堆和 Native堆来回复制数据。</p><h3 id="简述Java创建对象的过程"><a href="#简述Java创建对象的过程" class="headerlink" title="简述Java创建对象的过程"></a>简述Java创建对象的过程</h3><ul><li> 检查该指令的参数能否在常量池中定位到一个类的符号引用，并检查引用代表的类是否已被加载、解析和初始化，如果没有就先执行类加载。</li><li> 通过检查通过后虚拟机将为新生对象分配内存。</li><li> 完成内存分配后虚拟机将成员变量设为零值</li><li> 设置对象头，包括哈希码、GC 信息、锁信息、对象所属类的类元信息等。</li><li> 执行 init 方法，初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量。</li></ul><h3 id="简述JVM给对象分配内存的策略"><a href="#简述JVM给对象分配内存的策略" class="headerlink" title="简述JVM给对象分配内存的策略"></a>简述JVM给对象分配内存的策略</h3><ul><li> 指针碰撞：这种方式在内存中放一个指针作为分界指示器将使用过的内存放在一边，空闲的放在另一边，通过指针挪动完成分配。</li><li> 空闲列表：对于 Java 堆内存不规整的情况，虚拟机必须维护一个列表记录哪些内存可用，在分配时从列表中找到一块足够大的空间划分给对象并更新列表记录。</li></ul><h3 id="Java对象内存分配是如何保证线程安全的"><a href="#Java对象内存分配是如何保证线程安全的" class="headerlink" title="Java对象内存分配是如何保证线程安全的"></a>Java对象内存分配是如何保证线程安全的</h3><p>第一种方法，采用CAS机制，配合失败重试的方式保证更新操作的原子性。该方式效率低。</p><p>第二种方法，每个线程在Java堆中预先分配一小块内存，然后再给对象分配内存的时候，直接在自己这块”私有”内存中分配。一般采用这种策略。</p><h3 id="简述对象的内存布局"><a href="#简述对象的内存布局" class="headerlink" title="简述对象的内存布局"></a>简述对象的内存布局</h3><p>对象在堆内存的存储布局可分为对象头、实例数据和对齐填充。</p><p>1）对象头主要包含两部分数据：MarkWord、类型指针。</p><p>MarkWord 用于存储哈希码（HashCode）、GC分代年龄、锁状态标志位、线程持有的锁、偏向线程ID等信息。</p><p>类型指针即对象指向他的类元数据指针，如果对象是一个 Java 数组，会有一块用于记录数组长度的数据。</p><p>2）实例数据存储代码中所定义的各种类型的字段信息。</p><p>3）对齐填充起占位作用。HotSpot 虚拟机要求对象的起始地址必须是8的整数倍，因此需要对齐填充。</p><h3 id="如何判断对象是否是垃圾"><a href="#如何判断对象是否是垃圾" class="headerlink" title="如何判断对象是否是垃圾"></a>如何判断对象是否是垃圾</h3><p>1）引用计数法：</p><p>设置引用计数器，对象被引用计数器加 1，引用失效时计数器减 1，如果计数器为 0 则被标记为垃圾。会存在对象间循环引用的问题，一般不使用这种方法。</p><p>2）可达性分析：</p><p>通过 GC Roots 的根对象作为起始节点，从这些节点开始，根据引用关系向下搜索，如果某个对象没有被搜到，则会被标记为垃圾。可作为 GC Roots 的对象包括虚拟机栈和本地方法栈中引用的对象、类静态属性引用的对象、常量引用的对象。</p><h3 id="简述java的引用类型"><a href="#简述java的引用类型" class="headerlink" title="简述java的引用类型"></a>简述java的引用类型</h3><ul><li> 强引用：被强引用关联的对象不会被回收。一般采用 new 方法创建强引用。</li><li> 软引用：被软引用关联的对象只有在内存不够的情况下才会被回收。一般采用 SoftReference 类来创建软引用。</li><li> 弱引用：垃圾收集器碰到即回收，也就是说它只能存活到下一次垃圾回收发生之前。一般采用 WeakReference 类来创建弱引用。</li><li> 虚引用：无法通过该引用获取对象。唯一目的就是为了能在对象被回收时收到一个系统通知。虚引用必须与引用队列联合使用。</li></ul><h3 id="简述标记清除算法、标记整理算法和标记复制算法"><a href="#简述标记清除算法、标记整理算法和标记复制算法" class="headerlink" title="简述标记清除算法、标记整理算法和标记复制算法"></a>简述标记清除算法、标记整理算法和标记复制算法</h3><ul><li> 标记清除算法：先标记需清除的对象，之后统一回收。这种方法效率不高，会产生大量不连续的碎片。</li><li> 标记整理算法：先标记存活对象，然后让所有存活对象向一端移动，之后清理端边界以外的内存</li><li> 标记复制算法：将可用内存按容量划分为大小相等的两块，每次只使用其中一块。当使用的这块空间用完了，就将存活对象复制到另一块，再把已使用过的内存空间一次清理掉。</li></ul><h3 id="简述分代收集算法"><a href="#简述分代收集算法" class="headerlink" title="简述分代收集算法"></a>简述分代收集算法</h3><p>根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。</p><p>一般将堆分为新生代和老年代，对这两块采用不同的算法。</p><p>新生代使用：标记复制算法</p><p>老年代使用：标记清除或者标记整理算法</p><h3 id="简述Serial垃圾收集器"><a href="#简述Serial垃圾收集器" class="headerlink" title="简述Serial垃圾收集器"></a>简述Serial垃圾收集器</h3><p>Serial垃圾收集器是单线程串行收集器。垃圾回收的时候，必须暂停其他所有线程。新生代使用标记复制算法，老年代使用标记整理算法。简单高效。</p><h3 id="简述ParNew垃圾收集器"><a href="#简述ParNew垃圾收集器" class="headerlink" title="简述ParNew垃圾收集器"></a>简述ParNew垃圾收集器</h3><p>ParNew垃圾收集器可以看作Serial垃圾收集器的多线程版本，新生代使用标记复制算法，老年代使用标记整理算法。</p><h3 id="简述Parallel-Scavenge垃圾收集器"><a href="#简述Parallel-Scavenge垃圾收集器" class="headerlink" title="简述Parallel Scavenge垃圾收集器"></a>简述Parallel Scavenge垃圾收集器</h3><p>注重吞吐量，即 CPU运行代码时间/CPU耗时总时间（CPU运行代码时间+ 垃圾回收时间）。新生代使用标记复制算法，老年代使用标记整理算法。</p><h3 id="简述CMS垃圾收集器"><a href="#简述CMS垃圾收集器" class="headerlink" title="简述CMS垃圾收集器"></a>简述CMS垃圾收集器</h3><p>CMS垃圾收集器注重最短时间停顿。CMS垃圾收集器为最早提出的并发收集器，垃圾收集线程与用户线程同时工作。采用标记清除算法。该收集器分为初始标记、并发标记、并发预清理、并发清除、并发重置这么几个步骤。</p><ul><li> 初始标记：暂停其他线程(stop the world)，标记与GC roots直接关联的对象。</li><li> 并发标记：可达性分析过程(程序不会停顿)。</li><li> 并发预清理：查找执行并发标记阶段从年轻代晋升到老年代的对象，重新标记，暂停虚拟机（stop the world）扫描CMS堆中剩余对象。</li><li> 并发清除：清理垃圾对象，(程序不会停顿)。</li><li> 并发重置，重置CMS收集器的数据结构。</li></ul><h3 id="简述G1垃圾收集器"><a href="#简述G1垃圾收集器" class="headerlink" title="简述G1垃圾收集器"></a>简述G1垃圾收集器</h3><p>和Serial、Parallel Scavenge、CMS不同，G1垃圾收集器把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。</p><ul><li> 初始标记：标记与GC roots直接关联的对象。</li><li> 并发标记：可达性分析。</li><li> 最终标记：对并发标记过程中，用户线程修改的对象再次标记一下。</li><li> 筛选回收：对各个Region的回收价值和成本进行排序，然后根据用户所期望的GC停顿时间制定回收计划并回收。</li></ul><h3 id="简述Minor-GC"><a href="#简述Minor-GC" class="headerlink" title="简述Minor GC"></a>简述Minor GC</h3><p>Minor GC指发生在新生代的垃圾收集，因为 Java 对象大多存活时间短，所以 Minor GC 非常频繁，一般回收速度也比较快。</p><h3 id="简述Full-GC"><a href="#简述Full-GC" class="headerlink" title="简述Full GC"></a>简述Full GC</h3><p>Full GC 是清理整个堆空间—包括年轻代和永久代。调用System.gc(),老年代空间不足，空间分配担保失败，永生代空间不足会产生full gc。</p><h3 id="常见内存分配策略"><a href="#常见内存分配策略" class="headerlink" title="常见内存分配策略"></a>常见内存分配策略</h3><p>大多数情况下对象在新生代 Eden 区分配，当 Eden 没有足够空间时将发起一次 Minor GC。</p><p>大对象需要大量连续内存空间，直接进入老年代区分配。</p><p>如果经历过第一次 Minor GC 仍然存活且能被 Survivor 容纳，该对象就会被移动到 Survivor 中并将年龄设置为 1，并且每熬过一次 Minor GC 年龄就加 1 ，当增加到一定程度（默认15）就会被晋升到老年代。</p><p>如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 的一半，年龄不小于该年龄的对象就可以直接进入老年代。</p><p>MinorGC 前，虚拟机必须检查老年代最大可用连续空间是否大于新生代对象总空间，如果满足则说明这次 Minor GC 确定安全。如果不，JVM会查看HandlePromotionFailure 参数是否允许担保失败，如果允许会继续检查老年代最大可用连续空间是否大于历次晋升老年代对象的平均大小，如果满足将Minor GC，否则改成一次 FullGC。</p><h3 id="简述JVM类加载过程"><a href="#简述JVM类加载过程" class="headerlink" title="简述JVM类加载过程"></a>简述JVM类加载过程</h3><p>1）加载：</p><ul><li> 通过全类名获取类的二进制字节流。</li><li> 将类的静态存储结构转化为方法区的运行时数据结构。</li><li> 在内存中生成类的Class对象，作为方法区数据的入口。</li></ul><p>2）验证：对文件格式，元数据，字节码，符号引用等验证正确性。</p><p>3）准备：在方法区内为类变量分配内存并设置为0值。</p><p>4）解析：将符号引用转化为直接引用。</p><p>5）初始化：执行类构造器clinit方法，真正初始化。</p><h3 id="简述JVM中的类加载器"><a href="#简述JVM中的类加载器" class="headerlink" title="简述JVM中的类加载器"></a>简述JVM中的类加载器</h3><ul><li> BootstrapClassLoader启动类加载器：加载/lib下的jar包和类。由C++编写。</li><li> ExtensionClassLoader扩展类加载器：/lib/ext目录下的jar包和类。由Java编写。</li><li> AppClassLoader应用类加载器，加载当前classPath下的jar包和类。由Java编写。</li></ul><h3 id="简述双亲委派机制"><a href="#简述双亲委派机制" class="headerlink" title="简述双亲委派机制"></a>简述双亲委派机制</h3><p>一个类加载器收到类加载请求之后，首先判断当前类是否被加载过。已经被加载的类会直接返回，如果没有被加载，首先将类加载请求转发给父类加载器，一直转发到启动类加载器，只有当父类加载器无法完成时才尝试自己加载。</p><p>加载类顺序：BootstrapClassLoader-&gt;ExtensionClassLoader-&gt;AppClassLoader-&gt;CustomClassLoader 检查类是否加载顺序：CustomClassLoader-&gt;AppClassLoader-&gt;ExtensionClassLoader-&gt;BootstrapClassLoader</p><h3 id="双亲委派机制的优点"><a href="#双亲委派机制的优点" class="headerlink" title="双亲委派机制的优点"></a>双亲委派机制的优点</h3><ul><li> 避免类的重复加载。相同的类被不同的类加载器加载会产生不同的类，双亲委派保证了Java程序的稳定运行。</li><li> 保证核心API不被修改。</li><li> 如何破坏双亲委派机制</li><li> 重载loadClass()方法，即自定义类加载器。</li></ul><h3 id="如何构建自定义类加载器"><a href="#如何构建自定义类加载器" class="headerlink" title="如何构建自定义类加载器"></a>如何构建自定义类加载器</h3><p>新建自定义类继承自java.lang.ClassLoader，重写findClass、loadClass、defineClass方法</p><h3 id="JVM常见调优参数"><a href="#JVM常见调优参数" class="headerlink" title="JVM常见调优参数"></a>JVM常见调优参数</h3><ul><li> -Xms 初始堆大小</li><li> -Xmx 最大堆大小</li><li> -XX:NewSize 年轻代大小</li><li> -XX:MaxNewSize 年轻代最大值</li><li> -XX:PermSize 永生代初始值</li><li> -XX:MaxPermSize 永生代最大值</li><li> -XX:NewRatio 新生代与老年代的比例</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
            <tag> java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础篇的八股文</title>
      <link href="/2022/11/04/java-ji-chu-pian-de-ba-gu-wen/"/>
      <url>/2022/11/04/java-ji-chu-pian-de-ba-gu-wen/</url>
      
        <content type="html"><![CDATA[<h3 id="Java-语言具有哪些特点？"><a href="#Java-语言具有哪些特点？" class="headerlink" title="Java 语言具有哪些特点？"></a>Java 语言具有哪些特点？</h3><ul><li> Java 为纯面向对象的语言。它能够直接反应现实生活中的对象。</li><li> 具有平台无关性。Java 利用 Java 虚拟机运行字节码，无论是在 Windows、Linux 还是 MacOS 等其它平台对 Java 程序进行编译，编译后的程序可在其它平台运行。</li><li> Java 为解释型语言，编译器把 Java 代码编译成平台无关的中间代码，然后在 JVM 上解释运行，具有很好的可移植性。</li><li> Java 提供了很多内置类库。如对多线程支持，对网络通信支持，最重要的一点是提供了垃圾回收器。</li><li> Java 具有较好的安全性和健壮性。Java 提供了异常处理和垃圾回收机制，去除了 C++中难以理解的指针特性。</li></ul><h3 id="JDK-与-JRE-有什么区别？"><a href="#JDK-与-JRE-有什么区别？" class="headerlink" title="JDK 与 JRE 有什么区别？"></a>JDK 与 JRE 有什么区别？</h3><ul><li> JDK：Java 开发工具包（Java Development Kit），提供了 Java 的开发环境和运行环境。</li><li> JRE：Java 运行环境(Java Runtime Environment)，提供了 Java 运行所需的环境。</li><li> JDK 包含了 JRE。如果只运行 Java 程序，安装 JRE 即可。要编写 Java 程序需安装 JDK.</li></ul><h3 id="简述-Java-基本数据类型"><a href="#简述-Java-基本数据类型" class="headerlink" title="简述 Java 基本数据类型"></a>简述 Java 基本数据类型</h3><ul><li> byte: 占用 1 个字节，取值范围-128 ~ 127</li><li> short: 占用 2 个字节，取值范围-2^15^ ~ 2^15^-1</li><li> int：占用 4 个字节，取值范围-2^31^ ~ 2^31^-1</li><li> long：占用 8 个字节</li><li> float：占用 4 个字节</li><li> double：占用 8 个字节</li><li> char: 占用 2 个字节</li><li> boolean：占用大小根据实现虚拟机不同有所差异</li></ul><h3 id="简述自动装箱拆箱"><a href="#简述自动装箱拆箱" class="headerlink" title="简述自动装箱拆箱"></a>简述自动装箱拆箱</h3><p>对于 Java 基本数据类型，均对应一个包装类。</p><p>装箱就是自动将基本数据类型转换为包装器类型，如 int-&gt;Integer</p><p>拆箱就是自动将包装器类型转换为基本数据类型，如 Integer-&gt;int</p><h3 id="简述-Java-访问修饰符"><a href="#简述-Java-访问修饰符" class="headerlink" title="简述 Java 访问修饰符"></a>简述 Java 访问修饰符</h3><ul><li> default: 默认访问修饰符，在同一包内可见</li><li> private: 在同一类内可见，不能修饰类</li><li> protected : 对同一包内的类和所有子类可见，不能修饰类</li><li> public: 对所有类可见</li></ul><h3 id="构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？"><a href="#构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？" class="headerlink" title="构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？"></a>构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？</h3><p>先后顺序：静态成员变量、成员变量、构造方法。</p><p>详细的先后顺序：父类静态变量、父类静态代码块、子类静态变量、子类静态代码块、父类非静态变量、父类非静态代码块、父类构造函数、子类非静态变量、子类非静态代码块、子类构造函数。</p><h3 id="Java-代码块执行顺序"><a href="#Java-代码块执行顺序" class="headerlink" title="Java 代码块执行顺序"></a>Java 代码块执行顺序</h3><ul><li> 父类静态代码块（只执行一次）</li><li> 子类静态代码块（只执行一次）</li><li> 父类构造代码块</li><li> 父类构造函数</li><li> 子类构造代码块</li><li> 子类构造函数</li><li> 普通代码块</li></ul><h3 id="面向对象的三大特性？"><a href="#面向对象的三大特性？" class="headerlink" title="面向对象的三大特性？"></a>面向对象的三大特性？</h3><p>继承：对象的一个新类可以从现有的类中派生，派生类可以从它的基类那继承方法和实例变量，且派生类可以修改或新增新的方法使之更适合特殊的需求。</p><p>封装：将客观事物抽象成类，每个类可以把自身数据和方法只让可信的类或对象操作，对不可信的进行信息隐藏。</p><p>多态：允许不同类的对象对同一消息作出响应。不同对象调用相同方法即使参数也相同，最终表现行为是不一样的。</p><h3 id="为什么-Java-语言不支持多重继承？"><a href="#为什么-Java-语言不支持多重继承？" class="headerlink" title="为什么 Java 语言不支持多重继承？"></a>为什么 Java 语言不支持多重继承？</h3><p>为了程序的结构能够更加清晰从而便于维护。假设 Java 语言支持多重继承，类 C 继承自类 A 和类 B，如果类 A 和 B 都有自定义的成员方法 <code>f()</code>，那么当代码中调用类 C 的 <code>f()</code> 会产生二义性。</p><p>Java 语言通过实现多个接口间接支持多重继承，接口由于只包含方法定义，不能有方法的实现，类 C 继承接口 A 与接口 B 时即使它们都有方法<code>f()</code>，也不能直接调用方法，需实现具体的<code>f()</code>方法才能调用，不会产生二义性。</p><p>多重继承会使类型转换、构造方法的调用顺序变得复杂，会影响到性能。</p><h3 id="简述-Java-的多态"><a href="#简述-Java-的多态" class="headerlink" title="简述 Java 的多态"></a>简述 Java 的多态</h3><p>Java 多态可以分为编译时多态和运行时多态。</p><p>编译时多态主要指方法的重载，即通过参数列表的不同来区分不同的方法。</p><p>运行时多态主要指继承父类和实现接口时，可使用父类引用指向子类对象。</p><p>运行时多态的实现：主要依靠方法表，方法表中最先存放的是 Object 类的方法，接下来是该类的父类的方法，最后是该类本身的方法。如果子类改写了父类的方法，那么子类和父类的那些同名方法共享一个方法表项，都被认作是父类的方法。因此可以实现运行时多态。</p><h3 id="Java-提供的多态机制？"><a href="#Java-提供的多态机制？" class="headerlink" title="Java 提供的多态机制？"></a>Java 提供的多态机制？</h3><p>Java 提供了两种用于多态的机制，分别是重载与覆盖。</p><p>重载：重载是指同一个类中有多个同名的方法，但这些方法有不同的参数，在编译期间就可以确定调用哪个方法。</p><p>覆盖：覆盖是指派生类重写基类的方法，使用基类指向其子类的实例对象，或接口的引用变量指向其实现类的实例对象，在程序调用的运行期根据引用变量所指的具体实例对象调用正在运行的那个对象的方法，即需要到运行期才能确定调用哪个方法。</p><h3 id="重载与覆盖的区别？"><a href="#重载与覆盖的区别？" class="headerlink" title="重载与覆盖的区别？"></a>重载与覆盖的区别？</h3><ul><li> 覆盖是父类与子类之间的关系，是垂直关系；重载是同一类中方法之间的关系，是水平关系。</li><li> 覆盖只能由一个方法或一对方法产生关系；重载是多个方法之间的关系。</li><li> 覆盖要求参数列表相同；重载要求参数列表不同。</li><li> 覆盖中，调用方法体是根据对象的类型来决定的，而重载是根据调用时实参表与形参表来对应选择方法体。</li><li> 重载方法可以改变返回值的类型，覆盖方法不能改变返回值的类型。</li></ul><h3 id="接口和抽象类的相同点和不同点？"><a href="#接口和抽象类的相同点和不同点？" class="headerlink" title="接口和抽象类的相同点和不同点？"></a>接口和抽象类的相同点和不同点？</h3><p>相同点:</p><ul><li> 都不能被实例化。</li><li> 接口的实现类或抽象类的子类需实现接口或抽象类中相应的方法才能被实例化。</li></ul><p>不同点：</p><ul><li> 接口只能有方法定义，不能有方法的实现，而抽象类可以有方法的定义与实现。</li><li> 实现接口的关键字为 implements，继承抽象类的关键字为 extends。一个类可以实现多个接口，只能继承一个抽象类。</li><li> 当子类和父类之间存在逻辑上的层次结构，推荐使用抽象类，有利于功能的累积。当功能不需要，希望支持差别较大的两个或更多对象间的特定交互行为，推荐使用接口。使用接口能降低软件系统的耦合度，便于日后维护或添加删除方法。</li></ul><h3 id="简述抽象类与接口的区别"><a href="#简述抽象类与接口的区别" class="headerlink" title="简述抽象类与接口的区别"></a>简述抽象类与接口的区别</h3><p>抽象类：体现的是 is-a 的关系，如对于 man is a person，就可以将 person 定义为抽象类。</p><p>接口：体现的是 can 的关系。是作为模板实现的。如设置接口 fly，plane 类和 bird 类均可实现该接口。</p><p>一个类只能继承一个抽象类，但可以实现多个接口。</p><h3 id="简述内部类及其作用"><a href="#简述内部类及其作用" class="headerlink" title="简述内部类及其作用"></a>简述内部类及其作用</h3><ul><li> 成员内部类：作为成员对象的内部类。可以访问 private 及以上外部类的属性和方法。外部类想要访问内部类属性或方法时，必须要创建一个内部类对象，然后通过该对象访问内部类的属性或方法。外部类也可访问 private 修饰的内部类属性。</li><li> 局部内部类：存在于方法中的内部类。访问权限类似局部变量，只能访问外部类的 final 变量。</li><li> 匿名内部类：只能使用一次，没有类名，只能访问外部类的 final 变量。</li><li> 静态内部类：类似类的静态成员变量。</li></ul><h3 id="Java-语言中关键字-static-的作用是什么？"><a href="#Java-语言中关键字-static-的作用是什么？" class="headerlink" title="Java 语言中关键字 static 的作用是什么？"></a>Java 语言中关键字 static 的作用是什么？</h3><p>static 的主要作用有两个：</p><ul><li> 为某种特定数据类型或对象分配与创建对象个数无关的单一的存储空间。</li><li> 使得某个方法或属性与类而不是对象关联在一起，即在不创建对象的情况下可通过类直接调用方法或使用类的属性。</li></ul><p>具体而言 static 又可分为 4 种使用方式：</p><ul><li> 修饰成员变量。用 static 关键字修饰的静态变量在内存中只有一个副本。只要静态变量所在的类被加载，这个静态变量就会被分配空间，可以使用“类.静态变量”和“对象.静态变量”的方法使用。</li><li> 修饰成员方法。static 修饰的方法无需创建对象就可以被调用。static 方法中不能使用 this 和 super 关键字，不能调用非 static 方法，只能访问所属类的静态成员变量和静态成员方法。</li><li> 修饰代码块。JVM 在加载类的时候会执行 static 代码块。static 代码块常用于初始化静态变量。static 代码块只会被执行一次。</li><li> 修饰内部类。static 内部类可以不依赖外部类实例对象而被实例化。静态内部类不能与外部类有相同的名字，不能访问普通成员变量，只能访问外部类中的静态成员和静态成员方法。</li></ul><h3 id="为什么要把-String-设计为不可变？"><a href="#为什么要把-String-设计为不可变？" class="headerlink" title="为什么要把 String 设计为不可变？"></a>为什么要把 String 设计为不可变？</h3><ul><li> 节省空间：字符串常量存储在 JVM 的字符串池中可以被用户共享。</li><li> 提高效率：String 可以被不同线程共享，是线程安全的。在涉及多线程操作中不需要同步操作。</li><li> 安全：String 常被用于用户名、密码、文件名等使用，由于其不可变，可避免黑客行为对其恶意修改。</li></ul><h3 id="简述-String-StringBuffer-与-StringBuilder"><a href="#简述-String-StringBuffer-与-StringBuilder" class="headerlink" title="简述 String/StringBuffer 与 StringBuilder"></a>简述 String/StringBuffer 与 StringBuilder</h3><p>String 类采用利用 final 修饰的字符数组进行字符串保存，因此不可变。如果对 String 类型对象修改，需要新建对象，将老字符和新增加的字符一并存进去。</p><p>StringBuilder，采用无 final 修饰的字符数组进行保存，因此可变。但线程不安全。</p><p>StringBuffer，采用无 final 修饰的字符数组进行保存，可理解为实现线程安全的 StringBuilder。</p><h3 id="判等运算符-与-equals-的区别？"><a href="#判等运算符-与-equals-的区别？" class="headerlink" title="判等运算符==与 equals 的区别？"></a>判等运算符==与 equals 的区别？</h3><p>== 比较的是引用，equals 比较的是内容。</p><p>如果变量是基础数据类型，== 用于比较其对应值是否相等。如果变量指向的是对象，== 用于比较两个对象是否指向同一块存储空间。</p><p>equals 是 Object 类提供的方法之一，每个 Java 类都继承自 Object 类，所以每个对象都具有 equals 这个方法。Object 类中定义的 equals 方法内部是直接调用 == 比较对象的。但通过覆盖的方法可以让它不是比较引用而是比较数据内容。</p><h3 id="简述-Object-类常用方法"><a href="#简述-Object-类常用方法" class="headerlink" title="简述 Object 类常用方法"></a>简述 Object 类常用方法</h3><ul><li> hashCode：通过对象计算出的散列码。用于 map 型或 equals 方法。需要保证同一个对象多次调用该方法，总返回相同的整型值。</li><li> equals：判断两个对象是否一致。需保证 equals 方法相同对应的对象 hashCode 也相同。</li><li> toString: 用字符串表示该对象</li><li> clone:深拷贝一个对象</li></ul><h3 id="Java-中一维数组和二维数组的声明方式？"><a href="#Java-中一维数组和二维数组的声明方式？" class="headerlink" title="Java 中一维数组和二维数组的声明方式？"></a>Java 中一维数组和二维数组的声明方式？</h3><p>一维数组的声明方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">type arrayName<span class="token punctuation">[</span><span class="token punctuation">]</span>type<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>二维数组的声明方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">type arrayName<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>type<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayNametype<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayName<span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中 type 为基本数据类型或类，arrayName 为数组名字</p><h3 id="简述-Java-异常的分类"><a href="#简述-Java-异常的分类" class="headerlink" title="简述 Java 异常的分类"></a>简述 Java 异常的分类</h3><p>Java 异常分为 Error（程序无法处理的错误），和 Exception（程序本身可以处理的异常）。这两个类均继承 Throwable。</p><p>Error 常见的有 StackOverFlowError、OutOfMemoryError 等等。</p><p>Exception 可分为运行时异常和非运行时异常。对于运行时异常，可以利用 try catch 的方式进行处理，也可以不处理。对于非运行时异常，必须处理，不处理的话程序无法通过编译。</p><h3 id="简述-throw-与-throws-的区别"><a href="#简述-throw-与-throws-的区别" class="headerlink" title="简述 throw 与 throws 的区别"></a>简述 throw 与 throws 的区别</h3><p>throw 一般是用在方法体的内部，由开发者定义当程序语句出现问题后主动抛出一个异常。</p><p>throws 一般用于方法声明上，代表该方法可能会抛出的异常列表。</p><h3 id="出现在-Java-程序中的-finally-代码块是否一定会执行？"><a href="#出现在-Java-程序中的-finally-代码块是否一定会执行？" class="headerlink" title="出现在 Java 程序中的 finally 代码块是否一定会执行？"></a>出现在 Java 程序中的 finally 代码块是否一定会执行？</h3><p>当遇到下面情况不会执行。</p><ul><li> 当程序在进入 try 语句块之前就出现异常时会直接结束。</li><li> 当程序在 try 块中强制退出时，如使用 System.exit(0)，也不会执行 finally 块中的代码。</li></ul><p>其它情况下，在 try/catch/finally 语句执行的时候，try 块先执行，当有异常发生，catch 和 finally 进行处理后程序就结束了，当没有异常发生，在执行完 finally 中的代码后，后面代码会继续执行。值得注意的是，当 try/catch 语句块中有 return 时，finally 语句块中的代码会在 return 之前执行。如果 try/catch/finally 块中都有 return 语句，finally 块中的 return 语句会覆盖 try/catch 模块中的 return 语句。</p><h3 id="final、finally-和-finalize-的区别是什么？"><a href="#final、finally-和-finalize-的区别是什么？" class="headerlink" title="final、finally 和 finalize 的区别是什么？"></a>final、finally 和 finalize 的区别是什么？</h3><ul><li> final 用于声明属性、方法和类，分别表示属性不可变、方法不可覆盖、类不可继承。</li><li> finally 作为异常处理的一部分，只能在 try/catch 语句中使用，finally 附带一个语句块用来表示这个语句最终一定被执行，经常被用在需要释放资源的情况下。</li><li> finalize 是 Object 类的一个方法，在垃圾收集器执行的时候会调用被回收对象的 finalize()方法。当垃圾回收器准备好释放对象占用空间时，首先会调用 finalize()方法，并在下一次垃圾回收动作发生时真正回收对象占用的内存。</li></ul><h3 id="简述泛型"><a href="#简述泛型" class="headerlink" title="简述泛型"></a>简述泛型</h3><p>泛型，即“参数化类型”，解决不确定对象具体类型的问题。在编译阶段有效。在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型在类中称为泛型类、接口中称为泛型接口和方法中称为泛型方法。</p><h3 id="简述泛型擦除"><a href="#简述泛型擦除" class="headerlink" title="简述泛型擦除"></a>简述泛型擦除</h3><p>Java 编译器生成的字节码是不包涵泛型信息的，泛型类型信息将在编译处理是被擦除，这个过程被称为泛型擦除。</p><h3 id="简述注解"><a href="#简述注解" class="headerlink" title="简述注解"></a>简述注解</h3><p>Java 注解用于为 Java 代码提供元数据。作为元数据，注解不直接影响你的代码执行，但也有一些类型的注解实际上可以用于这一目的。</p><p>其可以用于提供信息给编译器，在编译阶段时给软件提供信息进行相关的处理，在运行时处理写相应代码，做对应操作。</p><h3 id="简述元注解"><a href="#简述元注解" class="headerlink" title="简述元注解"></a>简述元注解</h3><p>元注解可以理解为注解的注解，即在注解中使用，实现想要的功能。其具体分为：</p><ul><li> @Retention: 表示注解存在阶段是保留在源码，还是在字节码（类加载）或者运行期（JVM 中运行）。</li><li> @Target：表示注解作用的范围。</li><li> @Documented：将注解中的元素包含到 Javadoc 中去。</li><li> @Inherited：一个被@Inherited 注解了的注解修饰了一个父类，如果他的子类没有被其他注解修饰，则它的子类也继承了父类的注解。</li><li> @Repeatable：被这个元注解修饰的注解可以同时作用一个对象多次，但是每次作用注解又可以代表不同的含义。</li></ul><h3 id="简述-Java-中-Class-对象"><a href="#简述-Java-中-Class-对象" class="headerlink" title="简述 Java 中 Class 对象"></a>简述 Java 中 Class 对象</h3><p>java 中对象可以分为实例对象和 Class 对象，每一个类都有一个 Class 对象，其包含了与该类有关的信息。</p><p>获取 Class 对象的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>“类的全限定名”<span class="token punctuation">)</span>实例对象<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>类名<span class="token punctuation">.</span><span class="token keyword">class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Java-反射机制是什么？"><a href="#Java-反射机制是什么？" class="headerlink" title="Java 反射机制是什么？"></a>Java 反射机制是什么？</h3><p>Java 反射机制是指在程序的运行过程中可以构造任意一个类的对象、获取任意一个类的成员变量和成员方法、获取任意一个对象所属的类信息、调用任意一个对象的属性和方法。反射机制使得 Java 具有动态获取程序信息和动态调用对象方法的能力。可以通过以下类调用反射 API。</p><ul><li> Class 类：可获得类属性方法</li><li> Field 类：获得类的成员变量</li><li> Method 类：获取类的方法信息</li><li> Construct 类：获取类的构造方法等信息</li></ul><h3 id="序列化是什么？"><a href="#序列化是什么？" class="headerlink" title="序列化是什么？"></a>序列化是什么？</h3><p>序列化是一种将对象转换成字节序列的过程，用于解决在对对象流进行读写操作时所引发的问题。序列化可以将对象的状态写在流里进行网络传输，或者保存到文件、数据库等系统里，并在需要的时候把该流读取出来重新构造成一个相同的对象。</p><h3 id="简述-Java-序列化与反序列化的实现"><a href="#简述-Java-序列化与反序列化的实现" class="headerlink" title="简述 Java 序列化与反序列化的实现"></a>简述 Java 序列化与反序列化的实现</h3><p>序列化：将 java 对象转化为字节序列，由此可以通过网络对象进行传输。</p><p>反序列化：将字节序列转化为 java 对象。</p><p>具体实现：实现 Serializable 接口，或实现 Externalizable 接口中的 writeExternal()与 readExternal()方法。</p><h3 id="简述-Java-的-List"><a href="#简述-Java-的-List" class="headerlink" title="简述 Java 的 List"></a>简述 Java 的 List</h3><p>List 是一个有序队列，在 Java 中有两种实现方式:</p><p>ArrayList 使用数组实现，是容量可变的非线程安全列表，随机访问快，集合扩容时会创建更大的数组，把原有数组复制到新数组。</p><p>LinkedList 本质是双向链表，与 ArrayList 相比插入和删除速度更快，但随机访问元素很慢。</p><h3 id="Java-中线程安全的基本数据结构有哪些"><a href="#Java-中线程安全的基本数据结构有哪些" class="headerlink" title="Java 中线程安全的基本数据结构有哪些"></a>Java 中线程安全的基本数据结构有哪些</h3><ul><li> HashTable: 哈希表的线程安全版，效率低</li><li> ConcurrentHashMap：哈希表的线程安全版，效率高，用于替代 HashTable</li><li> Vector：线程安全版 Arraylist</li><li> Stack：线程安全版栈</li><li> BlockingQueue 及其子类：线程安全版队列</li></ul><h3 id="简述-Java-的-Set"><a href="#简述-Java-的-Set" class="headerlink" title="简述 Java 的 Set"></a>简述 Java 的 Set</h3><p>Set 即集合，该数据结构不允许元素重复且无序。Java 对 Set 有三种实现方式：</p><p>HashSet 通过 HashMap 实现，HashMap 的 Key 即 HashSet 存储的元素，Value 系统自定义一个名为 PRESENT 的 Object 类型常量。判断元素是否相同时，先比较 hashCode，相同后再利用 equals 比较，查询 O(1)</p><p>LinkedHashSet 继承自 HashSet，通过 LinkedHashMap 实现，使用双向链表维护元素插入顺序。</p><p>TreeSet 通过 TreeMap 实现的，底层数据结构是红黑树，添加元素到集合时按照比较规则将其插入合适的位置，保证插入后的集合仍然有序。查询 O(logn)</p><h3 id="简述-Java-的-HashMap"><a href="#简述-Java-的-HashMap" class="headerlink" title="简述 Java 的 HashMap"></a>简述 Java 的 HashMap</h3><p>JDK8 之前底层实现是数组 + 链表，JDK8 改为数组 + 链表/红黑树。主要成员变量包括存储数据的 table 数组、元素数量 size、加载因子 loadFactor。HashMap 中数据以键值对的形式存在，键对应的 hash 值用来计算数组下标，如果两个元素 key 的 hash 值一样，就会发生哈希冲突，被放到同一个链表上。</p><p>table 数组记录 HashMap 的数据，每个下标对应一条链表，所有哈希冲突的数据都会被存放到同一条链表，Node/Entry 节点包含四个成员变量：key、value、next 指针和 hash 值。在 JDK8 后链表超过 8 会转化为红黑树。</p><p>若当前数据/总数据容量&gt;负载因子，Hashmap 将执行扩容操作。默认初始化容量为 16，扩容容量必须是 2 的幂次方、最大容量为 1&lt;&lt; 30 、默认加载因子为 0.75。</p><h3 id="为何-HashMap-线程不安全"><a href="#为何-HashMap-线程不安全" class="headerlink" title="为何 HashMap 线程不安全"></a>为何 HashMap 线程不安全</h3><p>在 JDK1.7 中，HashMap 采用头插法插入元素，因此并发情况下会导致环形链表，产生死循环。</p><p>虽然 JDK1.8 采用了尾插法解决了这个问题，但是并发下的 put 操作也会使前一个 key 被后一个 key 覆盖。</p><p>由于 HashMap 有扩容机制存在，也存在 A 线程进行扩容后，B 线程执行 get 方法出现失误的情况。</p><h3 id="简述-Java-的-TreeMap"><a href="#简述-Java-的-TreeMap" class="headerlink" title="简述 Java 的 TreeMap"></a>简述 Java 的 TreeMap</h3><p>TreeMap 是底层利用红黑树实现的 Map 结构，底层实现是一棵平衡的排序二叉树，由于红黑树的插入、删除、遍历时间复杂度都为 O(logN)，所以性能上低于哈希表。但是哈希表无法提供键值对的有序输出，红黑树可以按照键的值的大小有序输出。</p><h3 id="ArrayList、Vector-和-LinkedList-有什么共同点与区别？"><a href="#ArrayList、Vector-和-LinkedList-有什么共同点与区别？" class="headerlink" title="ArrayList、Vector 和 LinkedList 有什么共同点与区别？"></a>ArrayList、Vector 和 LinkedList 有什么共同点与区别？</h3><ul><li> ArrayList、Vector 和 LinkedList 都是可伸缩的数组，即可以动态改变长度的数组。</li><li> ArrayList 和 Vector 都是基于存储元素的 Object[] array 来实现的，它们会在内存中开辟一块连续的空间来存储，支持下标、索引访问。但在涉及插入元素时可能需要移动容器中的元素，插入效率较低。当存储元素超过容器的初始化容量大小，ArrayList 与 Vector 均会进行扩容。</li><li> Vector 是线程安全的，其大部分方法是直接或间接同步的。ArrayList 不是线程安全的，其方法不具有同步性质。LinkedList 也不是线程安全的。</li><li> LinkedList 采用双向列表实现，对数据索引需要从头开始遍历，因此随机访问效率较低，但在插入元素的时候不需要对数据进行移动，插入效率较高。</li></ul><h3 id="HashMap-和-Hashtable-有什么区别？"><a href="#HashMap-和-Hashtable-有什么区别？" class="headerlink" title="HashMap 和 Hashtable 有什么区别？"></a>HashMap 和 Hashtable 有什么区别？</h3><ul><li> HashMap 是 Hashtable 的轻量级实现，HashMap 允许 key 和 value 为 null，但最多允许一条记录的 key 为 null.而 HashTable 不允许。</li><li> HashTable 中的方法是线程安全的，而 HashMap 不是。在多线程访问 HashMap 需要提供额外的同步机制。</li><li> Hashtable 使用 Enumeration 进行遍历，HashMap 使用 Iterator 进行遍历。</li></ul><h3 id="如何决定使用-HashMap-还是-TreeMap"><a href="#如何决定使用-HashMap-还是-TreeMap" class="headerlink" title="如何决定使用 HashMap 还是 TreeMap?"></a>如何决定使用 HashMap 还是 TreeMap?</h3><p>如果对 Map 进行插入、删除或定位一个元素的操作更频繁，HashMap 是更好的选择。如果需要对 key 集合进行有序的遍历，TreeMap 是更好的选择。</p><h3 id="HashSet-中，equals-与-hashCode-之间的关系？"><a href="#HashSet-中，equals-与-hashCode-之间的关系？" class="headerlink" title="HashSet 中，equals 与 hashCode 之间的关系？"></a>HashSet 中，equals 与 hashCode 之间的关系？</h3><p>equals 和 hashCode 这两个方法都是从 object 类中继承过来的，equals 主要用于判断对象的内存地址引用是否是同一个地址；hashCode 根据定义的哈希规则将对象的内存地址转换为一个哈希码。HashSet 中存储的元素是不能重复的，主要通过 hashCode 与 equals 两个方法来判断存储的对象是否相同：</p><ul><li> 如果两个对象的 hashCode 值不同，说明两个对象不相同。</li><li> 如果两个对象的 hashCode 值相同，接着会调用对象的 equals 方法，如果 equlas 方法的返回结果为 true，那么说明两个对象相同，否则不相同。</li></ul><h3 id="fail-fast-和-fail-safe-迭代器的区别是什么？"><a href="#fail-fast-和-fail-safe-迭代器的区别是什么？" class="headerlink" title="fail-fast 和 fail-safe 迭代器的区别是什么？"></a>fail-fast 和 fail-safe 迭代器的区别是什么？</h3><ul><li> fail-fast 直接在容器上进行，在遍历过程中，一旦发现容器中的数据被修改，就会立刻抛出 ConcurrentModificationException 异常从而导致遍历失败。常见的使用 fail-fast 方式的容器有 HashMap 和 ArrayList 等。</li><li> fail-safe 这种遍历基于容器的一个克隆。因此对容器中的内容修改不影响遍历。常见的使用 fail-safe 方式遍历的容器有 ConcurrentHashMap 和 CopyOnWriteArrayList。</li></ul><h3 id="Collection-和-Collections-有什么区别？"><a href="#Collection-和-Collections-有什么区别？" class="headerlink" title="Collection 和 Collections 有什么区别？"></a>Collection 和 Collections 有什么区别？</h3><ul><li> Collection 是一个集合接口，它提供了对集合对象进行基本操作的通用接口方法，所有集合都是它的子类，比如 List、Set 等。</li><li> Collections 是一个包装类，包含了很多静态方法、不能被实例化，而是作为工具类使用，比如提供的排序方法：Collections.sort(list);提供的反转方法：Collections.reverse(list)。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>45个日常用git合代码的经典操作场景</title>
      <link href="/2022/11/04/45-ge-ri-chang-yong-git-he-dai-ma-de-jing-dian-cao-zuo-chang-jing/"/>
      <url>/2022/11/04/45-ge-ri-chang-yong-git-he-dai-ma-de-jing-dian-cao-zuo-chang-jing/</url>
      
        <content type="html"><![CDATA[<p>git对于大家应该都不太陌生，熟练使用git已经成为程序员的一项基本技能，尽管在工作中有诸如 <code>Sourcetree</code>这样牛X的客户端工具，使得合并代码变的很方便。但找工作面试和一些需彰显个人实力的场景，仍然需要我们掌握足够多的git命令。  </p><p>下边我们整理了45个日常用git合代码的经典操作场景，基本覆盖了工作中的需求。  </p><h3 id="我刚才提交了什么"><a href="#我刚才提交了什么" class="headerlink" title="我刚才提交了什么?"></a>我刚才提交了什么?</h3><p>如果你用 <code>git commit -a</code> 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。你就可以用下面的命令显示当前<code>HEAD</code>上的最近一次的提交(commit):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git log <span class="token operator">-</span>n1 <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我的提交信息-commit-message-写错了"><a href="#我的提交信息-commit-message-写错了" class="headerlink" title="我的提交信息(commit message)写错了"></a>我的提交信息(commit message)写错了</h3><p>如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git commit <span class="token operator">--</span>amend <span class="token operator">--</span>only<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git commit <span class="token operator">--</span>amend <span class="token operator">--</span>only <span class="token operator">-</span>m <span class="token string">'xxxxxxx'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。</p><h3 id="我提交-commit-里的用户名和邮箱不对"><a href="#我提交-commit-里的用户名和邮箱不对" class="headerlink" title="我提交(commit)里的用户名和邮箱不对"></a>我提交(commit)里的用户名和邮箱不对</h3><p>如果这只是单个提交(commit)，修改它：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git commit <span class="token operator">--</span>amend <span class="token operator">--</span>author <span class="token string">"New Authorname &lt;authoremail@mydomain.com>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你需要修改所有历史, 参考 ‘git filter-branch’的指南页.</p><h3 id="我想从一个提交-commit-里移除一个文件"><a href="#我想从一个提交-commit-里移除一个文件" class="headerlink" title="我想从一个提交(commit)里移除一个文件"></a>我想从一个提交(commit)里移除一个文件</h3><p>通过下面的方法，从一个提交(commit)里移除一个文件:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git checkout HEAD<span class="token operator">^</span> myfile$ git add <span class="token operator">-</span><span class="token class-name">A</span>$ git commit <span class="token operator">--</span>amend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。</p><h3 id="我想删除我的的最后一次提交-commit"><a href="#我想删除我的的最后一次提交-commit" class="headerlink" title="我想删除我的的最后一次提交(commit)"></a>我想删除我的的最后一次提交(commit)</h3><p>如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git reset HEAD<span class="token operator">^</span> <span class="token operator">--</span>hard$ git push <span class="token operator">-</span>f <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token operator">*</span><span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>soft HEAD@<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 <code>git revert SHAofBadCommit</code>， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)；或者, 如果你推的这个分支是rebase-safe的 (例如：其它开发者不会从这个分支拉), 只需要使用 <code>git push -f</code>。</p><h3 id="删除任意提交-commit"><a href="#删除任意提交-commit" class="headerlink" title="删除任意提交(commit)"></a>删除任意提交(commit)</h3><p>同样的警告：不到万不得已的时候不要这么做.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git rebase <span class="token operator">--</span>onto SHA1_OF_BAD_COMMIT<span class="token operator">^</span> SHA1_OF_BAD_COMMIT$ git push <span class="token operator">-</span>f <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者做一个 交互式rebase 删除那些你想要删除的提交(commit)里所对应的行。</p><h3 id="我尝试推一个修正后的提交-amended-commit-到远程，但是报错："><a href="#我尝试推一个修正后的提交-amended-commit-到远程，但是报错：" class="headerlink" title="我尝试推一个修正后的提交(amended commit)到远程，但是报错："></a>我尝试推一个修正后的提交(amended commit)到远程，但是报错：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">To</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>yourusername<span class="token operator">/</span>repo<span class="token punctuation">.</span>git<span class="token operator">!</span> <span class="token punctuation">[</span>rejected<span class="token punctuation">]</span>        mybranch <span class="token operator">-></span> mybranch <span class="token punctuation">(</span>non<span class="token operator">-</span>fast<span class="token operator">-</span>forward<span class="token punctuation">)</span>error<span class="token operator">:</span> failed <span class="token keyword">to</span> <span class="token namespace">push</span> some refs <span class="token keyword">to</span> <span class="token string">'https://github.com/tanay1337/webmaker.org.git'</span>hint<span class="token operator">:</span> <span class="token class-name">Updates</span> were rejected because the tip of your current branch is behindhint<span class="token operator">:</span> its remote <span class="token class-name"><span class="token namespace">counterpart<span class="token punctuation">.</span></span> Integrate</span> the remote changes <span class="token punctuation">(</span>e<span class="token punctuation">.</span>g<span class="token punctuation">.</span>hint<span class="token operator">:</span> <span class="token string">'git pull ...'</span><span class="token punctuation">)</span> before pushing again<span class="token punctuation">.</span>hint<span class="token operator">:</span> <span class="token class-name">See</span> the <span class="token string">'Note about fast-forwards'</span> in <span class="token string">'git push --help'</span> <span class="token keyword">for</span> details<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意, rebasing(见下面)和修正(amending)会用一个新的提交(commit)代替旧的, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (<code>-f</code>)。注意 – 总是 确保你指明一个分支!</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git push origin mybranch <span class="token operator">-</span>f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一般来说, 要避免强推. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。</p><h3 id="我意外的做了一次硬重置-hard-reset-，我想找回我的内容"><a href="#我意外的做了一次硬重置-hard-reset-，我想找回我的内容" class="headerlink" title="我意外的做了一次硬重置(hard reset)，我想找回我的内容"></a>我意外的做了一次硬重置(hard reset)，我想找回我的内容</h3><p>如果你意外的做了 <code>git reset --hard</code>, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reflog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。选择你想要回到的提交(commit)的SHA，再重置一次:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard SHA1234<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就完成了。</p><h2 id="暂存-Staging"><a href="#暂存-Staging" class="headerlink" title="暂存(Staging)"></a>暂存(Staging)</h2><h3 id="我需要把暂存的内容添加到上一次的提交-commit"><a href="#我需要把暂存的内容添加到上一次的提交-commit" class="headerlink" title="我需要把暂存的内容添加到上一次的提交(commit)"></a>我需要把暂存的内容添加到上一次的提交(commit)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token operator">*</span><span class="token punctuation">)</span>$ git commit <span class="token operator">--</span>amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想要暂存一个新文件的一部分，而不是这个文件的全部"><a href="#我想要暂存一个新文件的一部分，而不是这个文件的全部" class="headerlink" title="我想要暂存一个新文件的一部分，而不是这个文件的全部"></a>我想要暂存一个新文件的一部分，而不是这个文件的全部</h3><p>一般来说, 如果你想暂存一个文件的一部分, 你可这样做:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git add <span class="token operator">--</span>patch filename<span class="token punctuation">.</span>x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-p</code> 简写。这会打开交互模式， 你将能够用 <code>s</code> 选项来分隔提交(commit)；然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git add <span class="token operator">-</span><span class="token class-name">N</span> filename<span class="token punctuation">.</span>x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后, 你需要用 <code>e</code> 选项来手动选择需要添加的行，执行 <code>git diff --cached</code> 将会显示哪些行暂存了哪些行只是保存在本地了。</p><h3 id="我想把在一个文件里的变化-changes-加到两个提交-commit-里"><a href="#我想把在一个文件里的变化-changes-加到两个提交-commit-里" class="headerlink" title="我想把在一个文件里的变化(changes)加到两个提交(commit)里"></a>我想把在一个文件里的变化(changes)加到两个提交(commit)里</h3><p><code>git add</code> 会把整个文件加入到一个提交. <code>git add -p</code> 允许交互式的选择你想要提交的部分.</p><h3 id="我想把暂存的内容变成未暂存，把未暂存的内容暂存起来"><a href="#我想把暂存的内容变成未暂存，把未暂存的内容暂存起来" class="headerlink" title="我想把暂存的内容变成未暂存，把未暂存的内容暂存起来"></a>我想把暂存的内容变成未暂存，把未暂存的内容暂存起来</h3><p>多数情况下，你应该将所有的内容变为未暂存，然后再选择你想要的内容进行commit。但假定你就是想要这么做，这里你可以创建一个临时的commit来保存你已暂存的内容，然后暂存你的未暂存的内容并进行stash。然后reset最后一个commit将原本暂存的内容变为未暂存，最后stash pop回来。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git commit <span class="token operator">-</span>m <span class="token string">"WIP"</span>$ git add <span class="token punctuation">.</span>$ git stash$ git reset HEAD<span class="token operator">^</span>$ git stash pop <span class="token operator">--</span>index <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意1: 这里使用<code>pop</code>仅仅是因为想尽可能保持幂等。注意2: 假如你不加上<code>--index</code>你会把暂存的文件标记为为存储。</p><h2 id="未暂存-Unstaged-的内容"><a href="#未暂存-Unstaged-的内容" class="headerlink" title="未暂存(Unstaged)的内容"></a>未暂存(Unstaged)的内容</h2><h3 id="我想把未暂存的内容移动到一个新分支"><a href="#我想把未暂存的内容移动到一个新分支" class="headerlink" title="我想把未暂存的内容移动到一个新分支"></a>我想把未暂存的内容移动到一个新分支</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git checkout <span class="token operator">-</span>b my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想把未暂存的内容移动到另一个已存在的分支"><a href="#我想把未暂存的内容移动到另一个已存在的分支" class="headerlink" title="我想把未暂存的内容移动到另一个已存在的分支"></a>我想把未暂存的内容移动到另一个已存在的分支</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash$ git checkout my<span class="token operator">-</span>branch$ git stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="我想丢弃本地未提交的变化-uncommitted-changes"><a href="#我想丢弃本地未提交的变化-uncommitted-changes" class="headerlink" title="我想丢弃本地未提交的变化(uncommitted changes)"></a>我想丢弃本地未提交的变化(uncommitted changes)</h3><p>如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># one commit<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard HEAD<span class="token operator">^</span># two commits<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard HEAD<span class="token operator">^</span><span class="token operator">^</span># four commits<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard HEAD<span class="token operator">~</span><span class="token number">4</span># or<span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout <span class="token operator">-</span>f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重置某个特殊的文件, 你可以用文件名做为参数:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git reset filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想丢弃某些未暂存的内容"><a href="#我想丢弃某些未暂存的内容" class="headerlink" title="我想丢弃某些未暂存的内容"></a>我想丢弃某些未暂存的内容</h3><p>如果你想丢弃工作拷贝中的一部分内容，而不是全部。</p><p>签出(checkout)不需要的内容，保留需要的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git checkout <span class="token operator">-</span>p# <span class="token class-name">Answer</span> y <span class="token keyword">to</span> <span class="token namespace">all</span> of the snippets you want <span class="token keyword">to</span> <span class="token namespace">drop</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>另外一个方法是使用 <code>stash</code>， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash <span class="token operator">-</span>p# <span class="token class-name">Select</span> all of the snippets you want <span class="token keyword">to</span> <span class="token namespace">save</span>$ git reset <span class="token operator">--</span>hard$ git stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或者, stash 你不需要的部分, 然后stash drop。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash <span class="token operator">-</span>p# <span class="token class-name">Select</span> all of the snippets you don't want <span class="token keyword">to</span> <span class="token namespace">save</span>$ git stash drop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="分支-Branches"><a href="#分支-Branches" class="headerlink" title="分支(Branches)"></a>分支(Branches)</h2><h3 id="我从错误的分支拉取了内容，或把内容拉取到了错误的分支"><a href="#我从错误的分支拉取了内容，或把内容拉取到了错误的分支" class="headerlink" title="我从错误的分支拉取了内容，或把内容拉取到了错误的分支"></a>我从错误的分支拉取了内容，或把内容拉取到了错误的分支</h3><p>这是另外一种使用 <code>git reflog</code> 情况，找到在这次错误拉(pull) 之前HEAD的指向。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reflogab7555f HEAD@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> pull origin wrong<span class="token operator">-</span>branch<span class="token operator">:</span> <span class="token class-name">Fast</span><span class="token operator">-</span>forwardc5bc55a HEAD@<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> checkout<span class="token operator">:</span> checkout message goes here<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重置分支到你所需的提交(desired commit):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git reset <span class="token operator">--</span>hard c5bc55a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完成。</p><h3 id="我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致"><a href="#我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致" class="headerlink" title="我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致"></a>我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致</h3><p>先确认你没有推(push)你的内容到远程。</p><p><code>git status</code> 会显示你领先(ahead)源(origin)多少个提交:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git status# <span class="token class-name">On</span> branch my<span class="token operator">-</span>branch# <span class="token class-name">Your</span> branch is ahead of <span class="token string">'origin/my-branch'</span> by <span class="token number">2</span> commits<span class="token punctuation">.</span>#   <span class="token punctuation">(</span>use <span class="token string">"git push"</span> <span class="token keyword">to</span> <span class="token namespace">publish</span> your local commits<span class="token punctuation">)</span>#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一种方法是:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard origin<span class="token operator">/</span>my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我需要提交到一个新分支，但错误的提交到了main"><a href="#我需要提交到一个新分支，但错误的提交到了main" class="headerlink" title="我需要提交到一个新分支，但错误的提交到了main"></a>我需要提交到一个新分支，但错误的提交到了main</h3><p>在main下创建一个新分支，不切换到新分支,仍在main下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git branch my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把main分支重置到前一个提交:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard HEAD<span class="token operator">^</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>HEAD^</code> 是 <code>HEAD^1</code> 的简写，你可以通过指定要设置的<code>HEAD</code>来进一步重置。</p><p>或者, 如果你不想使用 <code>HEAD^</code>, 找到你想重置到的提交(commit)的hash(<code>git log</code> 能够完成)， 然后重置到这个hash。使用<code>git push</code> 同步内容到远程。</p><p>例如, main分支想重置到的提交的hash为<code>a13b85e</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard a13b85eHEAD is now at a13b85e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>签出(checkout)刚才新建的分支继续工作:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想保留来自另外一个ref-ish的整个文件"><a href="#我想保留来自另外一个ref-ish的整个文件" class="headerlink" title="我想保留来自另外一个ref-ish的整个文件"></a>我想保留来自另外一个ref-ish的整个文件</h3><p>假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:微信搜索公众号：Java后端编程，回复：java 领取资料 。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>$ git add <span class="token operator">-</span><span class="token class-name">A</span> <span class="token operator">&amp;&amp;</span> git commit <span class="token operator">-</span>m <span class="token string">"Adding all changes from this spike into one big commit."</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当你想要把它放到一个分支里 (可能是<code>feature</code>, 或者 <code>develop</code>), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。</p><p>假设你有:</p><ul><li> 分支 <code>solution</code>, 拥有原型方案， 领先 <code>develop</code> 分支。</li><li> 分支 <code>develop</code>, 在这里你应用原型方案的一些内容。</li></ul><p>我去可以通过把内容拿到你的分支里，来解决这个问题:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>develop<span class="token punctuation">)</span>$ git checkout solution <span class="token operator">--</span> file1<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会把这个文件内容从分支 <code>solution</code> 拿到分支 <code>develop</code> 里来:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># <span class="token class-name">On</span> branch develop# <span class="token class-name">Your</span> branch is up<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>date <span class="token keyword">with</span> <span class="token string">'origin/develop'</span><span class="token punctuation">.</span># <span class="token class-name">Changes</span> <span class="token keyword">to</span> <span class="token namespace">be</span> committed<span class="token operator">:</span>#  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file>..."</span> <span class="token keyword">to</span> <span class="token namespace">unstage</span><span class="token punctuation">)</span>##        modified<span class="token operator">:</span>   file1<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后, 正常提交。</p><p>Note: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem.</p><h3 id="我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里"><a href="#我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里" class="headerlink" title="我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里"></a>我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里</h3><p>假设你有一个<code>main</code>分支， 执行<code>git log</code>, 你看到你做过两次提交:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git logcommit e3851e817c451cc36f2e6f3049db528415e3c114<span class="token class-name">Author</span><span class="token operator">:</span> <span class="token class-name">Alex</span> <span class="token class-name">Lee</span> <span class="token operator">&lt;</span>alexlee<span class="token annotation punctuation">@example.com</span><span class="token operator">></span><span class="token class-name">Date</span><span class="token operator">:</span>   <span class="token class-name">Tue</span> <span class="token class-name">Jul</span> <span class="token number">22</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">39</span><span class="token operator">:</span><span class="token number">27</span> <span class="token number">2014</span> <span class="token operator">-</span><span class="token number">0400</span>    <span class="token class-name">Bug</span> #<span class="token number">21</span> <span class="token operator">-</span> <span class="token class-name">Added</span> CSRF protectioncommit <span class="token number">5</span>ea51731d150f7ddc4a365437931cd8be3bf3131<span class="token class-name">Author</span><span class="token operator">:</span> <span class="token class-name">Alex</span> <span class="token class-name">Lee</span> <span class="token operator">&lt;</span>alexlee<span class="token annotation punctuation">@example.com</span><span class="token operator">></span><span class="token class-name">Date</span><span class="token operator">:</span>   <span class="token class-name">Tue</span> <span class="token class-name">Jul</span> <span class="token number">22</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">39</span><span class="token operator">:</span><span class="token number">12</span> <span class="token number">2014</span> <span class="token operator">-</span><span class="token number">0400</span>    <span class="token class-name">Bug</span> #<span class="token number">14</span> <span class="token operator">-</span> <span class="token class-name">Fixed</span> spacing on titlecommit a13b85e984171c6e2a1729bb061994525f626d14<span class="token class-name">Author</span><span class="token operator">:</span> <span class="token class-name">Aki</span> <span class="token class-name">Rose</span> <span class="token operator">&lt;</span>akirose<span class="token annotation punctuation">@example.com</span><span class="token operator">></span><span class="token class-name">Date</span><span class="token operator">:</span>   <span class="token class-name">Tue</span> <span class="token class-name">Jul</span> <span class="token number">21</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span><span class="token number">48</span> <span class="token number">2014</span> <span class="token operator">-</span><span class="token number">0400</span>    <span class="token class-name">First</span> commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们用提交hash(commit hash)标记bug (<code>e3851e8</code> for #21, <code>5ea5173</code> for #14).</p><p>首先, 我们把<code>main</code>分支重置到正确的提交(<code>a13b85e</code>):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard a13b85eHEAD is now at a13b85e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在, 我们对 bug #21 创建一个新的分支:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout <span class="token operator">-</span>b <span class="token number">21</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接着, 我们用 cherry-pick 把对bug #21的提交放入当前分支。这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span>$ git cherry<span class="token operator">-</span>pick e3851e8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时候, 这里可能会产生冲突， 参见交互式 rebasing 章 冲突节 解决冲突.</p><p>再者， 我们为bug #14 创建一个新的分支, 也基于<code>main</code>分支</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span>$ git checkout main<span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout <span class="token operator">-</span>b <span class="token number">14</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后, 为 bug #14 执行 <code>cherry-pick</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>$ git cherry<span class="token operator">-</span>pick <span class="token number">5</span>ea5173<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想删除上游-upstream-分支被删除了的本地分支"><a href="#我想删除上游-upstream-分支被删除了的本地分支" class="headerlink" title="我想删除上游(upstream)分支被删除了的本地分支"></a>我想删除上游(upstream)分支被删除了的本地分支</h3><p>一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中（[IDEA 中玩转 Git][IDEA _ Git]）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git fetch <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我不小心删除了我的分支"><a href="#我不小心删除了我的分支" class="headerlink" title="我不小心删除了我的分支"></a>我不小心删除了我的分支</h3><p>如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。让我们先创建一个分支和一个新的文件:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout <span class="token operator">-</span>b my<span class="token operator">-</span>branch<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git branch<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ touch foo<span class="token punctuation">.</span>txt<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ lsREADME<span class="token punctuation">.</span>md foo<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加文件并做一次提交</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git add <span class="token punctuation">.</span><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git commit <span class="token operator">-</span>m <span class="token string">'foo.txt added'</span><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ foo<span class="token punctuation">.</span>txt added <span class="token number">1</span> files changed<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token function">insertions</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span> create mode <span class="token number">100644</span> foo<span class="token punctuation">.</span>txt<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git logcommit <span class="token number">4e3</span>cd85a670ced7cc17a2b5d8d3d809ac88d5012<span class="token class-name">Author</span><span class="token operator">:</span> siemiatj <span class="token operator">&lt;</span>siemiatj<span class="token annotation punctuation">@example.com</span><span class="token operator">></span><span class="token class-name">Date</span><span class="token operator">:</span>   <span class="token class-name">Wed</span> <span class="token class-name">Jul</span> <span class="token number">30</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">10</span> <span class="token number">2014</span> <span class="token operator">+</span><span class="token number">0200</span>    foo<span class="token punctuation">.</span>txt addedcommit <span class="token number">69204</span>cdf0acbab201619d95ad8295928e7f411d5<span class="token class-name">Author</span><span class="token operator">:</span> <span class="token class-name">Kate</span> <span class="token class-name">Hudson</span> <span class="token operator">&lt;</span>katehudson<span class="token annotation punctuation">@example.com</span><span class="token operator">></span><span class="token class-name">Date</span><span class="token operator">:</span>   <span class="token class-name">Tue</span> <span class="token class-name">Jul</span> <span class="token number">29</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">46</span> <span class="token number">2014</span> <span class="token operator">-</span><span class="token number">0400</span>    <span class="token class-name">Fixes</span> #<span class="token number">6</span><span class="token operator">:</span> <span class="token class-name">Force</span> pushing after amending commits<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们切回到主(main)分支，‘不小心的’删除<code>my-branch</code>分支</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git checkout main<span class="token class-name">Switched</span> <span class="token keyword">to</span> <span class="token namespace">branch</span> <span class="token string">'main'</span><span class="token class-name">Your</span> branch is up<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>date <span class="token keyword">with</span> <span class="token string">'origin/main'</span><span class="token punctuation">.</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git branch <span class="token operator">-</span><span class="token class-name">D</span> my<span class="token operator">-</span>branch<span class="token class-name">Deleted</span> branch my<span class="token operator">-</span>branch <span class="token punctuation">(</span>was <span class="token number">4e3</span>cd85<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ echo oh noes<span class="token punctuation">,</span> deleted my branch<span class="token operator">!</span>oh noes<span class="token punctuation">,</span> deleted my branch<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这时候你应该想起了<code>reflog</code>, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reflog<span class="token number">69204</span>cd HEAD@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> checkout<span class="token operator">:</span> moving from my<span class="token operator">-</span>branch <span class="token keyword">to</span> <span class="token namespace">main</span><span class="token number">4e3</span>cd85 HEAD@<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> commit<span class="token operator">:</span> foo<span class="token punctuation">.</span>txt added<span class="token number">69204</span>cd HEAD@<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> checkout<span class="token operator">:</span> moving from main <span class="token keyword">to</span> <span class="token namespace">my</span><span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout <span class="token operator">-</span>b my<span class="token operator">-</span>branch<span class="token operator">-</span>help<span class="token class-name">Switched</span> <span class="token keyword">to</span> <span class="token namespace">a</span> <span class="token keyword">new</span> branch <span class="token string">'my-branch-help'</span><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token operator">-</span>help<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard <span class="token number">4e3</span>cd85HEAD is now at <span class="token number">4e3</span>cd85 foo<span class="token punctuation">.</span>txt added<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token operator">-</span>help<span class="token punctuation">)</span>$ lsREADME<span class="token punctuation">.</span>md foo<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看! 我们把删除的文件找回来了。Git的 <code>reflog</code> 在rebasing出错的时候也是同样有用的。</p><h3 id="我想删除一个分支"><a href="#我想删除一个分支" class="headerlink" title="我想删除一个分支"></a>我想删除一个分支</h3><p>删除一个远程分支:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git push origin <span class="token operator">--</span>delete my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你也可以:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git push origin <span class="token operator">:</span>my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除一个本地分支:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git branch <span class="token operator">-</span><span class="token class-name">D</span> my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想从别人正在工作的远程分支签出-checkout-一个分支"><a href="#我想从别人正在工作的远程分支签出-checkout-一个分支" class="headerlink" title="我想从别人正在工作的远程分支签出(checkout)一个分支"></a>我想从别人正在工作的远程分支签出(checkout)一个分支</h3><p>首先, 从远程拉取(fetch) 所有分支:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git fetch <span class="token operator">--</span>all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设你想要从远程的<code>daves</code>分支签出到本地的<code>daves</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout <span class="token operator">--</span>track origin<span class="token operator">/</span>daves<span class="token class-name">Branch</span> daves set up <span class="token keyword">to</span> <span class="token namespace">track</span> remote branch daves from <span class="token class-name"><span class="token namespace">origin<span class="token punctuation">.</span></span>Switched</span> <span class="token keyword">to</span> <span class="token namespace">a</span> <span class="token keyword">new</span> branch <span class="token string">'daves'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(<code>--track</code> 是 <code>git checkout -b [branch] [remotename]/[branch]</code> 的简写)</p><p>这样就得到了一个<code>daves</code>分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.</p><h2 id="Rebasing-和合并-Merging"><a href="#Rebasing-和合并-Merging" class="headerlink" title="Rebasing 和合并(Merging)"></a>Rebasing 和合并(Merging)</h2><h3 id="我想撤销rebase-merge"><a href="#我想撤销rebase-merge" class="headerlink" title="我想撤销rebase/merge"></a>我想撤销rebase/merge</h3><p>你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>hard ORIG_HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我已经rebase过-但是我不想强推-force-push"><a href="#我已经rebase过-但是我不想强推-force-push" class="headerlink" title="我已经rebase过, 但是我不想强推(force push)"></a>我已经rebase过, 但是我不想强推(force push)</h3><p>不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。是因你快进(Fast forward)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git checkout my<span class="token operator">-</span>branch<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git rebase <span class="token operator">-</span>i main<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git checkout main<span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git merge <span class="token operator">--</span>ff<span class="token operator">-</span>only my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="我需要组合-combine-几个提交-commit"><a href="#我需要组合-combine-几个提交-commit" class="headerlink" title="我需要组合(combine)几个提交(commit)"></a>我需要组合(combine)几个提交(commit)</h3><p>假设你的工作分支将会做对于 <code>main</code> 的pull-request。一般情况下你不关心提交(commit)的时间戳，只想组合 所有 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。确保主(main)分支是最新的和你的变化都已经提交了, 然后:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git reset <span class="token operator">--</span>soft main<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git commit <span class="token operator">-</span>am <span class="token string">"New awesome feature"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git rebase <span class="token operator">-</span>i main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有相对的其它分支， 你将不得不相对自己的<code>HEAD</code> 进行 rebase。例如：你想组合最近的两次提交(commit), 你将相对于<code>HEAD~2</code> 进行rebase， 组合最近3次提交(commit), 相对于<code>HEAD~3</code>, 等等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git rebase <span class="token operator">-</span>i HEAD<span class="token operator">~</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在你执行了交互式 rebase的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">pick a9c8a1d <span class="token class-name">Some</span> refactoringpick <span class="token number">01</span>b2fd8 <span class="token class-name">New</span> awesome featurepick b729ad5 fixuppick e3851e8 another fix# <span class="token class-name">Rebase</span> <span class="token number">8074d</span><span class="token number">12.</span><span class="token punctuation">.</span>b729ad5 onto <span class="token number">8074d</span><span class="token number">12</span>## <span class="token class-name">Commands</span><span class="token operator">:</span>#  p<span class="token punctuation">,</span> pick <span class="token operator">=</span> use commit#  r<span class="token punctuation">,</span> reword <span class="token operator">=</span> use commit<span class="token punctuation">,</span> but edit the commit message#  e<span class="token punctuation">,</span> edit <span class="token operator">=</span> use commit<span class="token punctuation">,</span> but stop <span class="token keyword">for</span> amending#  s<span class="token punctuation">,</span> squash <span class="token operator">=</span> use commit<span class="token punctuation">,</span> but meld into previous commit#  f<span class="token punctuation">,</span> fixup <span class="token operator">=</span> like <span class="token string">"squash"</span><span class="token punctuation">,</span> but discard <span class="token keyword">this</span> commit's log message#  x<span class="token punctuation">,</span> exec <span class="token operator">=</span> run command <span class="token punctuation">(</span>the rest of the line<span class="token punctuation">)</span> using shell## <span class="token class-name">These</span> lines can be re<span class="token operator">-</span>ordered<span class="token punctuation">;</span> they are executed from top <span class="token keyword">to</span> <span class="token namespace">bottom<span class="token punctuation">.</span></span>## <span class="token class-name">If</span> you remove a line here THAT COMMIT WILL BE LOST<span class="token punctuation">.</span>## <span class="token class-name">However</span><span class="token punctuation">,</span> <span class="token keyword">if</span> you remove everything<span class="token punctuation">,</span> the rebase will be aborted<span class="token punctuation">.</span>## <span class="token class-name">Note</span> that empty commits are commented out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有以 <code>#</code> 开头的行都是注释, 不会影响 rebase.</p><p>然后，你可以用任何上面命令列表的命令替换 <code>pick</code>, 你也可以通过删除对应的行来删除一个提交(commit)。</p><p>例如, 如果你想 单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 <code>f</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">pick a9c8a1d <span class="token class-name">Some</span> refactoringpick <span class="token number">01</span>b2fd8 <span class="token class-name">New</span> awesome featuref b729ad5 fixupf e3851e8 another fix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果你想组合这些提交(commit) 并重命名这个提交(commit), 你应该在第二个提交(commit)旁边添加一个<code>r</code>，或者更简单的用<code>s</code> 替代 <code>f</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">pick a9c8a1d <span class="token class-name">Some</span> refactoringpick <span class="token number">01</span>b2fd8 <span class="token class-name">New</span> awesome features b729ad5 fixups e3851e8 another fix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你可以在接下来弹出的文本提示框里重命名提交(commit)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Newer</span><span class="token punctuation">,</span> awesomer features# <span class="token class-name">Please</span> enter the commit message <span class="token keyword">for</span> your <span class="token class-name"><span class="token namespace">changes<span class="token punctuation">.</span></span> Lines</span> starting# <span class="token keyword">with</span> <span class="token string">'#'</span> will be ignored<span class="token punctuation">,</span> and an empty message aborts the commit<span class="token punctuation">.</span># rebase in progress<span class="token punctuation">;</span> onto <span class="token number">8074d</span><span class="token number">12</span># <span class="token class-name">You</span> are currently editing a commit <span class="token keyword">while</span> rebasing branch <span class="token string">'main'</span> on <span class="token string">'8074d12'</span><span class="token punctuation">.</span>## <span class="token class-name">Changes</span> <span class="token keyword">to</span> <span class="token namespace">be</span> committed<span class="token operator">:</span>#modified<span class="token operator">:</span>   README<span class="token punctuation">.</span>md#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果成功了, 你应该看到类似下面的内容:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ <span class="token class-name">Successfully</span> rebased and updated refs<span class="token operator">/</span>heads<span class="token operator">/</span>main<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安全合并-merging-策略"><a href="#安全合并-merging-策略" class="headerlink" title="安全合并(merging)策略"></a>安全合并(merging)策略</h4><p><code>--no-commit</code> 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。<code>no-ff</code> 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致（更多Git资料，参见[IDEA 中如何完成 Git 版本回退？][IDEA _ Git 1]）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git merge <span class="token operator">--</span>no<span class="token operator">-</span>ff <span class="token operator">--</span>no<span class="token operator">-</span>commit my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="我需要将一个分支合并成一个提交-commit"><a href="#我需要将一个分支合并成一个提交-commit" class="headerlink" title="我需要将一个分支合并成一个提交(commit)"></a>我需要将一个分支合并成一个提交(commit)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git merge <span class="token operator">--</span>squash my<span class="token operator">-</span>branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="我只想组合-combine-未推的提交-unpushed-commit"><a href="#我只想组合-combine-未推的提交-unpushed-commit" class="headerlink" title="我只想组合(combine)未推的提交(unpushed commit)"></a>我只想组合(combine)未推的提交(unpushed commit)</h4><p>有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git rebase <span class="token operator">-</span>i @<span class="token punctuation">&#123;</span>u<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder/fix/squash 都是安全的。</p><h3 id="检查是否分支上的所有提交-commit-都合并-merge-过了"><a href="#检查是否分支上的所有提交-commit-都合并-merge-过了" class="headerlink" title="检查是否分支上的所有提交(commit)都合并(merge)过了"></a>检查是否分支上的所有提交(commit)都合并(merge)过了</h3><p>检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git log <span class="token operator">--</span>graph <span class="token operator">--</span>left<span class="token operator">-</span>right <span class="token operator">--</span>cherry<span class="token operator">-</span>pick <span class="token operator">--</span>oneline HEAD<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>feature<span class="token operator">/</span><span class="token number">120</span><span class="token operator">-</span>on<span class="token operator">-</span>scroll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。另一个做法可以是:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git log main <span class="token operator">^</span>feature<span class="token operator">/</span><span class="token number">120</span><span class="token operator">-</span>on<span class="token operator">-</span>scroll <span class="token operator">--</span>no<span class="token operator">-</span>merges<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="交互式rebase-interactive-rebase-可能出现的问题"><a href="#交互式rebase-interactive-rebase-可能出现的问题" class="headerlink" title="交互式rebase(interactive rebase)可能出现的问题"></a>交互式rebase(interactive rebase)可能出现的问题</h3><h4 id="这个rebase-编辑屏幕出现’noop’"><a href="#这个rebase-编辑屏幕出现’noop’" class="headerlink" title="这个rebase 编辑屏幕出现’noop’"></a>这个rebase 编辑屏幕出现’noop’</h4><p>如果你看到的是这样:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">noop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 领先(ahead) 当前分支。你可以尝试:</p><ul><li> 检查确保主(main)分支没有问题</li><li> rebase <code>HEAD~2</code> 或者更早</li></ul><h4 id="有冲突的情况"><a href="#有冲突的情况" class="headerlink" title="有冲突的情况"></a>有冲突的情况</h4><p>如果你不能成功的完成rebase, 你可能必须要解决冲突。</p><p>首先执行 <code>git status</code> 找出哪些文件有冲突:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git status<span class="token class-name">On</span> branch my<span class="token operator">-</span>branch<span class="token class-name">Changes</span> not staged <span class="token keyword">for</span> commit<span class="token operator">:</span>  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> <span class="token keyword">to</span> <span class="token namespace">update</span> what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file>..."</span> <span class="token keyword">to</span> <span class="token namespace">discard</span> changes in working directory<span class="token punctuation">)</span> modified<span class="token operator">:</span>   README<span class="token punctuation">.</span>md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子里面, <code>README.md</code> 有冲突。打开这个文件找到类似下面的内容:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span> HEAD   some code   <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>   some code   <span class="token operator">>>></span><span class="token operator">>>></span><span class="token operator">></span> <span class="token keyword">new</span><span class="token operator">-</span>commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你需要解决新提交的代码(示例里, 从中间<code>==</code>线到<code>new-commit</code>的地方)与<code>HEAD</code> 之间不一样的地方.</p><p>有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token operator">*</span><span class="token punctuation">)</span>$ git mergetool <span class="token operator">-</span>t opendiff<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在你解决完所有冲突和测试过后, <code>git add</code> 变化了的(changed)文件, 然后用<code>git rebase --continue</code> 继续rebase。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git add README<span class="token punctuation">.</span>md<span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git rebase <span class="token operator">--</span><span class="token keyword">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行<code>git rebase --skip</code>。</p><p>任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>my<span class="token operator">-</span>branch<span class="token punctuation">)</span>$ git rebase <span class="token operator">--</span>abort<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h2><h3 id="暂存所有改动"><a href="#暂存所有改动" class="headerlink" title="暂存所有改动"></a>暂存所有改动</h3><p>暂存你工作目录下的所有改动</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可以使用<code>-u</code>来排除一些文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash <span class="token operator">-</span>u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="暂存指定文件"><a href="#暂存指定文件" class="headerlink" title="暂存指定文件"></a>暂存指定文件</h3><p>假设你只想暂存某一个文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash push working<span class="token operator">-</span>directory<span class="token operator">-</span>path<span class="token operator">/</span>filename<span class="token punctuation">.</span>ext<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设你想暂存多个文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash push working<span class="token operator">-</span>directory<span class="token operator">-</span>path<span class="token operator">/</span>filename1<span class="token punctuation">.</span>ext working<span class="token operator">-</span>directory<span class="token operator">-</span>path<span class="token operator">/</span>filename2<span class="token punctuation">.</span>ext<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="暂存时记录消息"><a href="#暂存时记录消息" class="headerlink" title="暂存时记录消息"></a>暂存时记录消息</h3><p>这样你可以在<code>list</code>时看到它</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash save <span class="token generics"><span class="token punctuation">&lt;</span>message<span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash push <span class="token operator">-</span>m <span class="token generics"><span class="token punctuation">&lt;</span>message<span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用某个指定暂存"><a href="#使用某个指定暂存" class="headerlink" title="使用某个指定暂存"></a>使用某个指定暂存</h3><p>首先你可以查看你的<code>stash</code>记录</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后你可以<code>apply</code>某个<code>stash</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash apply <span class="token string">"stash@&#123;n&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此处， ‘n’是<code>stash</code>在栈中的位置，最上层的<code>stash</code>会是0</p><p>除此之外，也可以使用时间标记(假如你能记得的话)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash apply <span class="token string">"stash@&#123;2.hours.ago&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="暂存时保留未暂存的内容"><a href="#暂存时保留未暂存的内容" class="headerlink" title="暂存时保留未暂存的内容"></a>暂存时保留未暂存的内容</h3><p>你需要手动create一个<code>stash commit</code>， 然后使用<code>git stash store</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git stash create$ git stash store <span class="token operator">-</span>m <span class="token string">"commit-message"</span> CREATED_SHA1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="杂项-Miscellaneous-Objects"><a href="#杂项-Miscellaneous-Objects" class="headerlink" title="杂项(Miscellaneous Objects)"></a>杂项(Miscellaneous Objects)</h2><h3 id="克隆所有子模块"><a href="#克隆所有子模块" class="headerlink" title="克隆所有子模块"></a>克隆所有子模块</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git clone <span class="token operator">--</span>recursive git<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>foo<span class="token operator">/</span>bar<span class="token punctuation">.</span>git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果已经克隆了:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git submodule update <span class="token operator">--</span>init <span class="token operator">--</span>recursive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除标签-tag"><a href="#删除标签-tag" class="headerlink" title="删除标签(tag)"></a>删除标签(tag)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git tag <span class="token operator">-</span>d <span class="token generics"><span class="token punctuation">&lt;</span>tag_name<span class="token punctuation">></span></span>$ git push <span class="token generics"><span class="token punctuation">&lt;</span>remote<span class="token punctuation">></span></span> <span class="token operator">:</span>refs<span class="token operator">/</span>tags<span class="token operator">/</span><span class="token generics"><span class="token punctuation">&lt;</span>tag_name<span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="恢复已删除标签-tag"><a href="#恢复已删除标签-tag" class="headerlink" title="恢复已删除标签(tag)"></a>恢复已删除标签(tag)</h3><p>如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git fsck <span class="token operator">--</span>unreachable <span class="token operator">|</span> grep tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>记下这个标签(tag)的hash，然后用Git的 update-ref</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git update<span class="token operator">-</span>ref refs<span class="token operator">/</span>tags<span class="token operator">/</span><span class="token generics"><span class="token punctuation">&lt;</span>tag_name<span class="token punctuation">></span></span> <span class="token generics"><span class="token punctuation">&lt;</span>hash<span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时你的标签(tag)应该已经恢复了。</p><h3 id="已删除补丁-patch"><a href="#已删除补丁-patch" class="headerlink" title="已删除补丁(patch)"></a>已删除补丁(patch)</h3><p>如果某人在 GitHub 上给你发了一个pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 <code>git am</code>。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。</p><p>做完提交后, 再修改作者，参见变更作者。然后, 应用变化, 再发起一个新的pull request。</p><h2 id="跟踪文件-Tracking-Files"><a href="#跟踪文件-Tracking-Files" class="headerlink" title="跟踪文件(Tracking Files)"></a>跟踪文件(Tracking Files)</h2><h3 id="我只想改变一个文件名字的大小写，而不修改内容"><a href="#我只想改变一个文件名字的大小写，而不修改内容" class="headerlink" title="我只想改变一个文件名字的大小写，而不修改内容"></a>我只想改变一个文件名字的大小写，而不修改内容</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git mv <span class="token operator">--</span>force myfile <span class="token class-name">MyFile</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我想从Git删除一个文件，但保留该文件"><a href="#我想从Git删除一个文件，但保留该文件" class="headerlink" title="我想从Git删除一个文件，但保留该文件"></a>我想从Git删除一个文件，但保留该文件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git rm <span class="token operator">--</span>cached log<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置-Configuration"><a href="#配置-Configuration" class="headerlink" title="配置(Configuration)"></a>配置(Configuration)</h2><h3 id="我想给一些Git命令添加别名-alias"><a href="#我想给一些Git命令添加别名-alias" class="headerlink" title="我想给一些Git命令添加别名(alias)"></a>我想给一些Git命令添加别名(alias)</h3><p>在 OS X 和 Linux 下, 你的 Git的配置文件储存在 <code>~/.gitconfig</code>。我在<code>[alias]</code> 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>alias<span class="token punctuation">]</span>    a <span class="token operator">=</span> add    amend <span class="token operator">=</span> commit <span class="token operator">--</span>amend    c <span class="token operator">=</span> commit    ca <span class="token operator">=</span> commit <span class="token operator">--</span>amend    ci <span class="token operator">=</span> commit <span class="token operator">-</span>a    co <span class="token operator">=</span> checkout    d <span class="token operator">=</span> diff    dc <span class="token operator">=</span> diff <span class="token operator">--</span>changed    ds <span class="token operator">=</span> diff <span class="token operator">--</span>staged    f <span class="token operator">=</span> fetch    loll <span class="token operator">=</span> log <span class="token operator">--</span>graph <span class="token operator">--</span>decorate <span class="token operator">--</span>pretty<span class="token operator">=</span>oneline <span class="token operator">--</span>abbrev<span class="token operator">-</span>commit    m <span class="token operator">=</span> merge    one <span class="token operator">=</span> log <span class="token operator">--</span>pretty<span class="token operator">=</span>oneline    outstanding <span class="token operator">=</span> rebase <span class="token operator">-</span>i @<span class="token punctuation">&#123;</span>u<span class="token punctuation">&#125;</span>    s <span class="token operator">=</span> status    unpushed <span class="token operator">=</span> log @<span class="token punctuation">&#123;</span>u<span class="token punctuation">&#125;</span>    wc <span class="token operator">=</span> whatchanged    wip <span class="token operator">=</span> rebase <span class="token operator">-</span>i @<span class="token punctuation">&#123;</span>u<span class="token punctuation">&#125;</span>    zap <span class="token operator">=</span> fetch <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="我想缓存一个仓库-repository-的用户名和密码"><a href="#我想缓存一个仓库-repository-的用户名和密码" class="headerlink" title="我想缓存一个仓库(repository)的用户名和密码"></a>我想缓存一个仓库(repository)的用户名和密码</h3><p>你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper能帮你。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git config <span class="token operator">--</span>global credential<span class="token punctuation">.</span>helper cache# <span class="token class-name">Set</span> git <span class="token keyword">to</span> <span class="token namespace">use</span> the credential memory cache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git config <span class="token operator">--</span>global credential<span class="token punctuation">.</span>helper <span class="token string">'cache --timeout=3600'</span># <span class="token class-name">Set</span> the cache <span class="token keyword">to</span> <span class="token namespace">timeout</span> after <span class="token number">1</span> hour <span class="token punctuation">(</span>setting is in seconds<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="我不知道我做错了些什么"><a href="#我不知道我做错了些什么" class="headerlink" title="我不知道我做错了些什么"></a>我不知道我做错了些什么</h3><p>你把事情搞砸了：你 <code>重置(reset)</code> 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。</p><p>这就是 <code>git reflog</code> 的目的， <code>reflog</code> 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到<code>reflog</code>。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ git reflog<span class="token number">0</span>a2e358 HEAD@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> reset<span class="token operator">:</span> moving <span class="token keyword">to</span> HEAD<span class="token operator">~</span><span class="token number">2</span><span class="token number">0254</span>ea7 HEAD@<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> checkout<span class="token operator">:</span> moving from <span class="token number">2.2</span> <span class="token keyword">to</span> <span class="token namespace">main</span>c10f740 HEAD@<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> checkout<span class="token operator">:</span> moving from main <span class="token keyword">to</span> <span class="token number">2.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的reflog展示了从main分支签出(checkout)到2.2 分支，然后再签回。那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 <code>HEAD@&#123;0&#125;</code>标识.</p><p>如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前main上指向的提交(0254ea7)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git reset <span class="token operator">--</span>hard <span class="token number">0254</span>ea7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后使用git reset就可以把main改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 代码合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8Stream实战系列</title>
      <link href="/2022/11/04/java8stream-shi-zhan-xi-lie/"/>
      <url>/2022/11/04/java8stream-shi-zhan-xi-lie/</url>
      
        <content type="html"><![CDATA[<p>就目前而言，Java8之类的仍然是主流，即使用比较广泛，其次就是JDK11之类的，毕竟对于企业研发而言，求稳第一。  </p><h2 id="一、Java8有哪些新特性？"><a href="#一、Java8有哪些新特性？" class="headerlink" title="一、Java8有哪些新特性？"></a>一、Java8有哪些新特性？</h2><ul><li> 1.Lambda表达式；</li><li> 2.新的日期API；</li><li> 3.引入Optional；</li><li> 4.新增Base64加解密API；</li><li> 5.接口的默认方法和静态方法；</li><li> 6.新增方法引用格式；</li><li> 7.新增Stream类；</li><li> 8.注解相关的改变；</li><li> 9.支持并行数组；</li><li> 10.对并发类的扩展。</li></ul><p>这里不一一讲解，只讲Stream相关系列的实战和应用。</p><h2 id="二、我在实践应用Stream相关的是如何提高开发效率的？"><a href="#二、我在实践应用Stream相关的是如何提高开发效率的？" class="headerlink" title="二、我在实践应用Stream相关的是如何提高开发效率的？"></a>二、我在实践应用Stream相关的是如何提高开发效率的？</h2><p>以下以实用为主(实际应用比较多的)，进行分类划分。在实际中这些通常以组合的形式进行使用，不局限于单单使用某一个。这样做的目的就是为了提高研发效率以及更快更好的解决问题。不然，使用Stream这些新特性的意义也就不存在了。</p><h3 id="1-分组"><a href="#1-分组" class="headerlink" title="1.分组"></a>1.分组</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> groupMapData <span class="token operator">=</span> originData<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token operator">::</span><span class="token function">getType</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-条件筛选"><a href="#2-条件筛选" class="headerlink" title="2.条件筛选"></a>2.条件筛选</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> filterList <span class="token operator">=</span> originData<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">-></span> a<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"YC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-排序"><a href="#3-排序" class="headerlink" title="3.排序"></a>3.排序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> filterOBDHourData <span class="token operator">=</span> originData<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-去重"><a href="#4-去重" class="headerlink" title="4.去重"></a>4.去重</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> dataVOS <span class="token operator">=</span> originData<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>        <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">collectingAndThen</span><span class="token punctuation">(</span>            <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ArrayList</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-数组转List"><a href="#5-数组转List" class="headerlink" title="5.数组转List"></a>5.数组转List</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> codes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  codes <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-数据合并-含去重以及不去重"><a href="#6-数据合并-含去重以及不去重" class="headerlink" title="6.数据合并(含去重以及不去重)"></a>6.数据合并(含去重以及不去重)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token operator">::</span><span class="token function">stream</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token operator">::</span><span class="token function">stream</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-分页"><a href="#7-分页" class="headerlink" title="7.分页"></a>7.分页</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> dataList <span class="token operator">=</span> originData<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> dto<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-统计"><a href="#8-统计" class="headerlink" title="8.统计"></a>8.统计</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//求最大值BigDecimal max = dataList.stream().map(T::getPrice).max((x1, x2) -> x1.compareTo(x2)).get();</span><span class="token comment">//求最小值BigDecimal min = dataList.stream().map(T::getPrice).min((x1, x2) -> x1.compareTo(x2)).get();</span><span class="token comment">//求和 空指针异常排除BigDecimal sum = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add);</span><span class="token comment">//求平均值BigDecimal average = dataList.stream().map(vo -> ObjectUtils.isEmpty(vo.getPrice()) ? new BigDecimal(0) : vo.getPrice()).reduce(BigDecimal.ZERO, BigDecimal::add).divide(BigDecimal.valueOf(dataList.size()), 2, BigDecimal.ROUND_HALF_UP);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-拼接"><a href="#9-拼接" class="headerlink" title="9.拼接"></a>9.拼接</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> nameJoin <span class="token operator">=</span> dataList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-归集"><a href="#10-归集" class="headerlink" title="10.归集"></a>10.归集</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> mapNameObject <span class="token operator">=</span> dataList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> item <span class="token operator">-></span> item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="11-映射Map"><a href="#11-映射Map" class="headerlink" title="11.映射Map"></a>11.映射Map</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"1,2,3"</span><span class="token punctuation">,</span> <span class="token string">"4,5,6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> newStrList <span class="token operator">=</span> strList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>item <span class="token operator">-></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-搜索"><a href="#12-搜索" class="headerlink" title="12.搜索"></a>12.搜索</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">originData<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>data <span class="token operator">-></span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>FALSE <span class="token operator">?</span> data<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span>data<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>dto    <span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk1.8 </tag>
            
            <tag> stream </tag>
            
            <tag> lambda操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在hexo中无痛使用本地图片</title>
      <link href="/2022/11/04/zai-hexo-zhong-wu-tong-shi-yong-ben-di-tu-pian/"/>
      <url>/2022/11/04/zai-hexo-zhong-wu-tong-shi-yong-ben-di-tu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="1-起因"><a href="#1-起因" class="headerlink" title="1 起因"></a>1 起因</h2><p>在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。</p><p>这些问题使得我一度不愿意使用本地图片而选择用图床，但被移动运营商无耻的横条广告逼得打算上 https，图床只支持 http 就成了问题。</p><p>hexo 下插入图片现在大概有几个方案</p><h3 id="1-1-放在根目录"><a href="#1-1-放在根目录" class="headerlink" title="1.1 放在根目录"></a>1.1 放在根目录</h3><p>早期大部分的方案是把图片放在 <code>source/img</code> 下，然后在 markdown 里写 <code>![img](/source/img/img.png)</code> 。显然这样在本地的编辑器里完全不能正确识别图片的位置。</p><h3 id="1-2-asset-image"><a href="#1-2-asset-image" class="headerlink" title="1.2 asset-image"></a>1.2 asset-image</h3><p>在 hexo 2.x 时出现的插件，后来被吸纳进 <code>hexo 3 core</code> ，用法的介绍见 [资源文件夹 | Hexo][_ Hexo] 。比较尴尬的是，这种方法直接放弃了 markdown 原来的语法，使用类似 ``的语法，。markdown 本来有插入图片的语法不好好支持，专门用一个新的语法来插入本地图片，让我这种强迫症不太能接受。</p><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2 解决方案"></a>2 解决方案</h2><h3 id="2-1-使用"><a href="#2-1-使用" class="headerlink" title="2.1 使用"></a>2.1 使用</h3><p>首先确认 <code>_config.yml</code> 中有 <code>post_asset_folder:true</code> 。</p><p>在 hexo 目录，执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">npm install https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token class-name">CodeFalling</span><span class="token operator">/</span>hexo<span class="token operator">-</span>asset<span class="token operator">-</span>image <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设在</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MacGesture2</span><span class="token operator">-</span><span class="token class-name">Publish</span>├── apppicker<span class="token punctuation">.</span>jpg├── logo<span class="token punctuation">.</span>jpg└── rules<span class="token punctuation">.</span>jpg <span class="token class-name">MacGesture2</span><span class="token operator">-</span><span class="token class-name">Publish</span><span class="token punctuation">.</span>md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样的目录结构（目录名和文章名一致），只要使用 <code>![logo](MacGesture2-Publish/logo.jpg)</code>就可以插入图片。</p><p>生成的结构为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">/</span><span class="token number">2015</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">18</span><span class="token operator">/</span><span class="token class-name">MacGesture2</span><span class="token operator">-</span><span class="token class-name">Publish</span>├── apppicker<span class="token punctuation">.</span>jpg├── index<span class="token punctuation">.</span>html├── logo<span class="token punctuation">.</span>jpg└── rules<span class="token punctuation">.</span>jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，生成的 html 是</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"/2015/10/18/MacGesture2-Publish/logo.jpg"</span> alt<span class="token operator">=</span><span class="token string">"logo"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而不是愚蠢的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"MacGesture2-Publish/logo.jpg"</span> alt<span class="token operator">=</span><span class="token string">"logo"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>值得一提的是，这个插件对于 [CodeFalling/hexo-renderer-org][CodeFalling_hexo-renderer-org] 同样有效。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感受java8后lambda之美</title>
      <link href="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/"/>
      <url>/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/</url>
      
        <content type="html"><![CDATA[<p>一、引言</p><p>java8最大的特性就是引入Lambda表达式，即函数式编程，可以将行为进行传递。总结就是：使用不可变值与函数，函数对不可变值进行处理，映射成另一个值。</p><h2 id="二、java重要的函数式接口"><a href="#二、java重要的函数式接口" class="headerlink" title="二、java重要的函数式接口"></a>二、java重要的函数式接口</h2><h3 id="1、什么是函数式接口"><a href="#1、什么是函数式接口" class="headerlink" title="1、什么是函数式接口"></a>1、什么是函数式接口</h3><p>函数接口是只有一个抽象方法的接口，用作 Lambda 表达式的类型。使用@FunctionalInterface注解修饰的类，编译器会检测该类是否只有一个抽象方法或接口，否则，会报错。可以有多个默认方法，静态方法。</p><h4 id="1-1-java8自带的常用函数式接口。"><a href="#1-1-java8自带的常用函数式接口。" class="headerlink" title="1.1 java8自带的常用函数式接口。"></a>1.1 java8自带的常用函数式接口。</h4><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_ec9c4260.png" alt="image_ec9c4260.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> predicate <span class="token operator">=</span> x <span class="token operator">-></span> x <span class="token operator">></span> <span class="token number">185</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"9龙"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>            <span class="token string">"9龙的身高高于185吗？："</span> <span class="token operator">+</span> predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getStature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> consumer <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"命运由我不由天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> function <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> supplier <span class="token operator">=</span>             <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>TEN<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UnaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> unaryOperator <span class="token operator">=</span> uglily <span class="token operator">-></span> <span class="token operator">!</span>uglily<span class="token punctuation">;</span>        <span class="token class-name">Boolean</span> apply2 <span class="token operator">=</span> unaryOperator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>apply2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> operator <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>        <span class="token class-name">Integer</span> integer <span class="token operator">=</span> operator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token string">"我是一个演示的函数式接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 演示自定义函数式接口使用     *     * @param worker     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Worker</span> worker<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> work <span class="token operator">=</span> worker<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Worker</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//9龙的身高高于185吗？：false</span><span class="token comment">//命运由我不由天</span><span class="token comment">//9龙</span><span class="token comment">//10</span><span class="token comment">//false</span><span class="token comment">//6</span><span class="token comment">//我是一个演示的函数式接口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上演示了lambda接口的使用及自定义一个函数式接口并使用。下面，我们看看java8将函数式接口封装到流中如何高效的帮助我们处理集合。  </p><p>注意：Student::getName例子中这种编写lambda表达式的方式称为方法引用。格式为ClassNmae::methodName。是不是很神奇，java8就是这么迷人。</p><blockquote><p>示例：本篇所有示例都基于以下三个类。OutstandingClass：班级；Student：学生；SpecialityEnum：特长。</p></blockquote><h4 id><a href="#" class="headerlink" title></a><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_7771b4fe.png" alt="image_7771b4fe.png"></h4><h4 id="1-2-惰性求值与及早求值"><a href="#1-2-惰性求值与及早求值" class="headerlink" title="1.2 惰性求值与及早求值"></a>1.2 惰性求值与及早求值</h4><p>惰性求值：只描述Stream，操作的结果也是Stream，这样的操作称为惰性求值。惰性求值可以像建造者模式一样链式使用，最后再使用及早求值得到最终结果。</p><p>及早求值：得到最终的结果而不是Stream，这样的操作称为及早求值。</p><h3 id="2、常用的流"><a href="#2、常用的流" class="headerlink" title="2、常用的流"></a>2、常用的流</h3><h4 id="2-1-collect-Collectors-toList"><a href="#2-1-collect-Collectors-toList" class="headerlink" title="2.1 collect(Collectors.toList())"></a>2.1 collect(Collectors.toList())</h4><p>将流转换为list。还有toSet()，toMap()等。及早求值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> studentList <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>studentList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;, </span><span class="token comment">//Student&#123;name='红发', age=40, stature=180, specialities=null&#125;, </span><span class="token comment">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-filter"><a href="#2-2-filter" class="headerlink" title="2.2 filter"></a>2.2 filter</h4><p>顾名思义，起过滤筛选的作用。内部就是Predicate接口。惰性求值。</p><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_eba0197b.png" alt="image_eba0197b.png"></p><p>比如我们筛选出出身高小于180的同学。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>stu <span class="token operator">-></span> stu<span class="token punctuation">.</span><span class="token function">getStature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">180</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-map"><a href="#2-3-map" class="headerlink" title="2.3 map"></a>2.3 map</h4><p>转换功能，内部就是Function接口。惰性求值</p><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_23fab375.png" alt="image_23fab375.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> names <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>student <span class="token operator">-></span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//[路飞, 红发, 白胡子]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子中将student对象转换为String对象，获取student的名字。  </p><h4 id="2-4-flatMap"><a href="#2-4-flatMap" class="headerlink" title="2.4 flatMap"></a>2.4 flatMap</h4><p>将多个Stream合并为一个Stream。惰性求值</p><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_c1ac2536.png" alt="image_c1ac2536.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> studentList <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span>                <span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"艾斯"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"雷利"</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>students1 <span class="token operator">-></span> students1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>studentList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//[Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;, </span><span class="token comment">//Student&#123;name='红发', age=40, stature=180, specialities=null&#125;, </span><span class="token comment">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;, </span><span class="token comment">//Student&#123;name='艾斯', age=25, stature=183, specialities=null&#125;,</span><span class="token comment">//Student&#123;name='雷利', age=48, stature=176, specialities=null&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用Stream.of的静态方法将两个list转换为Stream，再通过flatMap将两个流合并为一个。  </p><h4 id="2-5-max和min"><a href="#2-5-max和min" class="headerlink" title="2.5 max和min"></a>2.5 max和min</h4><p>我们经常会在集合中求最大或最小值，使用流就很方便。及早求值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>stu <span class="token operator">-></span> stu<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> min <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>stu <span class="token operator">-></span> stu<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断是否有值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//Student&#123;name='白胡子', age=50, stature=185, specialities=null&#125;</span><span class="token comment">//Student&#123;name='路飞', age=22, stature=175, specialities=null&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>max、min接收一个Comparator（例子中使用java8自带的静态函数，只需要传进需要比较值即可。）并且返回一个Optional对象，该对象是java8新增的类，专门为了防止null引发的空指针异常。  </p><p>可以使用max.isPresent()判断是否有值；可以使用max.orElse(new Student())，当值为null时就使用给定值；也可以使用max.orElseGet(() -&gt; new Student());这需要传入一个Supplier的lambda表达式。</p><h4 id="2-6-count"><a href="#2-6-count" class="headerlink" title="2.6 count"></a>2.6 count</h4><p>统计功能，一般都是结合filter使用，因为先筛选出我们需要的再统计即可。及早求值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s1 <span class="token operator">-></span> s1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄小于45岁的人数是："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//年龄小于45岁的人数是：2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-7-reduce"><a href="#2-7-reduce" class="headerlink" title="2.7 reduce"></a>2.7 reduce</h4><p>reduce 操作可以实现从一组值中生成一个值。在上述例子中用到的 count 、 min 和 max 方法，因为常用而被纳入标准库中。事实上，这些方法都是 reduce 操作。及早求值。</p><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_9186bf98.png" alt="image_9186bf98.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> reduce <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>acc<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-></span> acc<span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看得reduce接收了一个初始值为0的累加器，依次取出值与累加器相加，最后累加器的值就是最终的结果。</p><h2 id="三、高级集合类及收集器"><a href="#三、高级集合类及收集器" class="headerlink" title="三、高级集合类及收集器"></a>三、高级集合类及收集器</h2><h3 id="3-1-转换成值"><a href="#3-1-转换成值" class="headerlink" title="3.1 转换成值"></a>3.1 转换成值</h3><p>收集器，一种通用的、从流生成复杂值的结构。只要将它传给 collect 方法，所有的流就都可以使用它了。标准类库已经提供了一些有用的收集器，以下示例代码中的收集器都是从 java.util.stream.Collectors 类中静态导入的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectorsTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutstandingClass</span> ostClass1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutstandingClass</span><span class="token punctuation">(</span><span class="token string">"一班"</span><span class="token punctuation">,</span> students1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//复制students1，并移除一个学生</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>students1<span class="token punctuation">)</span><span class="token punctuation">;</span>        students2<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutstandingClass</span> ostClass2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutstandingClass</span><span class="token punctuation">(</span><span class="token string">"二班"</span><span class="token punctuation">,</span> students2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将ostClass1、ostClass2转换为Stream</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OutstandingClass</span><span class="token punctuation">></span></span> classStream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>ostClass1<span class="token punctuation">,</span> ostClass2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutstandingClass</span> outstandingClass <span class="token operator">=</span> <span class="token function">biggestGroup</span><span class="token punctuation">(</span>classStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人数最多的班级是："</span> <span class="token operator">+</span> outstandingClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一班平均年龄是："</span> <span class="token operator">+</span> <span class="token function">averageNumberOfStudent</span><span class="token punctuation">(</span>students1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取人数最多的班级     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">OutstandingClass</span> <span class="token function">biggestGroup</span><span class="token punctuation">(</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OutstandingClass</span><span class="token punctuation">></span></span> outstandingClasses<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> outstandingClasses<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>                <span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token function">comparing</span><span class="token punctuation">(</span>ostClass <span class="token operator">-></span> ostClass<span class="token punctuation">.</span><span class="token function">getStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token class-name">OutstandingClass</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 计算平均年龄     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">averageNumberOfStudent</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">averagingInt</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//人数最多的班级是：一班</span><span class="token comment">//一班平均年龄是：37.666666666666664</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>maxBy或者minBy就是求最大值与最小值。  </p><h3 id="3-2-转换成块"><a href="#3-2-转换成块" class="headerlink" title="3.2 转换成块"></a>3.2 转换成块</h3><p>常用的流操作是将其分解成两个集合，Collectors.partitioningBy帮我们实现了，接收一个Predicate函数式接口。</p><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_16155432.png" alt="image_16155432.png"></p><p>将示例学生分为会唱歌与不会唱歌的两个集合。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PartitioningByTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//省略List&lt;student> students的初始化</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span><span class="token punctuation">></span></span> listMap <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>            <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>student <span class="token operator">-></span> student<span class="token punctuation">.</span><span class="token function">getSpecialities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                                      <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">SpecialityEnum</span><span class="token punctuation">.</span>SING<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-数据分组"><a href="#3-3-数据分组" class="headerlink" title="3.3 数据分组"></a>3.3 数据分组</h3><p>数据分组是一种更自然的分割数据操作，与将数据分成 ture 和 false 两部分不同，可以使用任意值对数据分组。Collectors.groupingBy接收一个Function做转换。</p><p><img src="/2022/11/04/gan-shou-java8-hou-lambda-zhi-mei/image_79d304da.png" alt="image_79d304da.png"></p><p>如图，我们使用groupingBy将根据进行分组为圆形一组，三角形一组，正方形一组。</p><p>例子：根据学生第一个特长进行分组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupingByTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//省略List&lt;student> students的初始化</span>         <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpecialityEnum</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span><span class="token punctuation">></span></span> listMap <span class="token operator">=</span>              students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>             <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>student <span class="token operator">-></span> student<span class="token punctuation">.</span><span class="token function">getSpecialities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Collectors.groupingBy与SQL 中的 group by 操作是一样的。</p><h3 id="3-4-字符串拼接"><a href="#3-4-字符串拼接" class="headerlink" title="3.4 字符串拼接"></a>3.4 字符串拼接</h3><p>如果将所有学生的名字拼接起来，怎么做呢？通常只能创建一个StringBuilder，循环拼接。使用Stream，使用Collectors.joining()简单容易。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JoiningTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> names <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token string">"["</span><span class="token punctuation">,</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token comment">//[路飞,红发,白胡子]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>joining接收三个参数，第一个是分界符，第二个是前缀符，第三个是结束符。也可以不传入参数Collectors.joining()，这样就是直接拼接。  </p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>本篇主要从实际使用讲述了常用的方法及流，使用java8可以很清晰表达你要做什么，代码也很简洁。本篇例子主要是为了讲解较为简单，大家可以去使用java8重构自己现有的代码，自行领会lambda的奥妙。</p><p>本文说的Stream要组合使用才会发挥更大的功能，链式调用很迷人，根据自己的业务去做吧。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk1.8 </tag>
            
            <tag> lambda </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
